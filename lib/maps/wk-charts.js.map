{"version":3,"sources":["wk-charts/wk-charts/app/config/wkChartConstants.coffee","wk-charts/wk-charts/app/util/d3.geo.zoom.js","wk-charts/wk-charts/app/container/brush.coffee","templates.js","wk-charts/wk-charts/app/util/ResizeSensor.js","wk-charts/wk-charts/app/container/brushed.coffee","wk-charts/wk-charts/app/util/saveSvgAsPng.js","wk-charts/wk-charts/app/container/chart.coffee","wk-charts/wk-charts/app/container/layout.coffee","wk-charts/wk-charts/app/container/print.coffee","wk-charts/wk-charts/app/container/selection.coffee","wk-charts/wk-charts/app/container/tooltips.coffee","wk-charts/wk-charts/app/dimensions/color.coffee","wk-charts/wk-charts/app/dimensions/scaleUtils.coffee","wk-charts/wk-charts/app/dimensions/shape.coffee","wk-charts/wk-charts/app/dimensions/size.coffee","wk-charts/wk-charts/app/dimensions/x.coffee","wk-charts/wk-charts/app/dimensions/xRange.coffee","wk-charts/wk-charts/app/dimensions/y.coffee","wk-charts/wk-charts/app/dimensions/yRange.coffee","wk-charts/wk-charts/app/layouts/area.coffee","wk-charts/wk-charts/app/layouts/areaStacked.coffee","wk-charts/wk-charts/app/layouts/areaStackedVertical.coffee","wk-charts/wk-charts/app/layouts/areaVertical.coffee","wk-charts/wk-charts/app/layouts/bar.coffee","wk-charts/wk-charts/app/layouts/barClustered.coffee","wk-charts/wk-charts/app/layouts/barStacked.coffee","wk-charts/wk-charts/app/layouts/bubble.coffee","wk-charts/wk-charts/app/layouts/column.coffee","wk-charts/wk-charts/app/layouts/columnClustered.coffee","wk-charts/wk-charts/app/layouts/columnStacked.coffee","wk-charts/wk-charts/app/layouts/gauge.coffee","wk-charts/wk-charts/app/layouts/geoMap.coffee","wk-charts/wk-charts/app/layouts/histogram.coffee","wk-charts/wk-charts/app/layouts/line.coffee","wk-charts/wk-charts/app/layouts/lineVertical.coffee","wk-charts/wk-charts/app/layouts/pie.coffee","wk-charts/wk-charts/app/layouts/rangeArea.coffee","wk-charts/wk-charts/app/layouts/rangeBar.coffee","wk-charts/wk-charts/app/layouts/rangeColumn.coffee","wk-charts/wk-charts/app/layouts/scatter.coffee","wk-charts/wk-charts/app/layouts/spider.coffee","wk-charts/wk-charts/app/models/behaviorBrush.coffee","wk-charts/wk-charts/app/models/behaviors.coffee","wk-charts/wk-charts/app/models/behaviorSelect.coffee","wk-charts/wk-charts/app/models/behaviorTooltip.coffee","wk-charts/wk-charts/app/models/chart.coffee","wk-charts/wk-charts/app/models/container.coffee","wk-charts/wk-charts/app/models/layout.coffee","wk-charts/wk-charts/app/models/legend.coffee","wk-charts/wk-charts/app/models/scale.coffee","wk-charts/wk-charts/app/models/scaleList.coffee","wk-charts/wk-charts/app/providers/localization.coffee","wk-charts/wk-charts/app/providers/scaleExtention.coffee","wk-charts/wk-charts/app/providers/template.coffee","wk-charts/wk-charts/app/services/selectionSharing.coffee","wk-charts/wk-charts/app/services/timer.coffee","wk-charts/wk-charts/app/util/layerData.coffee","wk-charts/wk-charts/app/util/svgIcon.coffee","wk-charts/wk-charts/app/util/tooltipUtils.coffee","wk-charts/wk-charts/app/util/utilities.coffee","wk-charts/wk-charts/app/reflection/directives/chartGenerator.coffee","wk-charts/wk-charts/app/reflection/helpers/modelUtils.coffee","wk-charts/wk-charts/app/reflection/services/chartFactory.coffee","wk-charts/wk-charts/app/reflection/services/dimensionFactory.coffee","wk-charts/wk-charts/app/reflection/services/layoutFactory.coffee","wk-charts/wk-charts/app/reflection/types/modelTypes.coffee"],"names":[],"mappings":"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A;;AAAA,OA0GO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,QAA3B,CAAoC,WAApC,EAAiD;AAAA,EAC/C,OAAA,EAAS,GADsC;AAAA,EAE/C,YAAA,EAAc,CAFiC;CAAjD,CA1GA,CAAA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7HA;AAAA;;;;;;;;;GAAA;AAWA;AAAA;;;;;;GAXA;AAAA,OAkBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,OAArC,EAA8C,SAAC,IAAD,EAAO,gBAAP,EAAyB,QAAzB,GAAA;AAC5C,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,CAAC,QAAD,EAAW,SAAX,EAAsB,IAAtB,EAA4B,IAA5B,EAAiC,SAAjC,EAA4C,SAA5C,CAFJ;AAAA,IAGL,KAAA,EACE;AAAA;AAAA;;;;SAAA;AAAA,MAKA,WAAA,EAAa,GALb;AAOA;AAAA;;;;SAPA;AAAA,MAYA,cAAA,EAAgB,GAZhB;AAcA;AAAA;;;;SAdA;AAAA,MAmBA,cAAA,EAAgB,GAnB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","file":"wk-charts.js","sourcesContent":["\r\n###*\r\n  @ngdoc module\r\n  @name wk.chart\r\n  @module wk.chart\r\n  @description\r\n  wk-charts module - beautiful charts defined through HTML markup, based on AngularJs\r\n  -----------------------------------------------------------------------------------\r\n\r\n  ** wide range of charts\r\n  ** nicely animated\r\n  ** implemented as AngularJs Directives  -> defined as markup\r\n  ** Angular data binding for data an chart attributes\r\n###\r\nangular.module('wk.chart', [])\r\n\r\n\r\n\r\n###*\r\n   lists the ordinal scale objects,\r\n ###\r\nangular.module('wk.chart').constant 'd3OrdinalScales', [\r\n    'ordinal'\r\n    'category10'\r\n    'category20'\r\n    'category20b'\r\n    'category20c'\r\n]\r\n\r\n###*\r\n  Sets the default margins and paddings for the chart layout\r\n###\r\nangular.module('wk.chart').constant 'wkChartMargins', {\r\n  top: 10\r\n  left: 50\r\n  bottom: 40\r\n  right: 20\r\n  topBottomMargin:{axis:25, label:18}\r\n  leftRightMargin:{axis:40, label:20}\r\n  minMargin:8\r\n  default:\r\n    top: 8\r\n    left:8\r\n    bottom:8\r\n    right:10\r\n  axis:\r\n    top:25\r\n    bottom:25\r\n    left:40\r\n    right:40\r\n  label:\r\n    top:18\r\n    bottom:18\r\n    left:20\r\n    right:20\r\n  dataLabelPadding: {\r\n    hor:5\r\n    vert:5\r\n  }\r\n}\r\n\r\nangular.module('wk.chart').constant 'd3Shapes', [\r\n  'circle',\r\n  'cross',\r\n  'triangle-down',\r\n  'triangle-up',\r\n  'square',\r\n  'diamond'\r\n]\r\n\r\nangular.module('wk.chart').constant 'axisConfig', {\r\n  labelFontSize: '1.6em'\r\n  x:\r\n    axisPositions: ['top', 'bottom']\r\n    axisOffset: {bottom:'height'}\r\n    axisPositionDefault: 'bottom'\r\n    direction: 'horizontal'\r\n    measure: 'width'\r\n    labelPositions:['outside', 'inside']\r\n    labelPositionDefault: 'outside'\r\n    labelOffset:\r\n      top: '1em'\r\n      bottom: '-0.8em'\r\n  y:\r\n    axisPositions: ['left', 'right']\r\n    axisOffset: {right:'width'}\r\n    axisPositionDefault: 'left'\r\n    direction: 'vertical'\r\n    measure: 'height'\r\n    labelPositions:['outside', 'inside']\r\n    labelPositionDefault: 'outside'\r\n    labelOffset:\r\n      left: '1.2em'\r\n      right: '1.2em'\r\n}\r\n\r\nangular.module('wk.chart').constant 'd3Animation', {\r\n  duration:500\r\n}\r\n\r\nangular.module('wk.chart').constant 'templateDir', 'templates/'\r\n\r\nangular.module('wk.chart').constant 'formatDefaults', {\r\n  date: '%x' # '%d.%m.%Y'\r\n  number :  ',.2f'\r\n}\r\n\r\nangular.module('wk.chart').constant 'barConfig', {\r\n  padding: 0.1\r\n  outerPadding: 0\r\n}\r\n\r\n","// Copyright (c) 2013, Jason Davies, http://www.jasondavies.com\r\n// See LICENSE.txt for details.\r\n(function() {\r\n\r\nvar radians = Math.PI / 180,\r\n    degrees = 180 / Math.PI;\r\n\r\n// TODO make incremental rotate optional\r\n\r\nd3.geo.zoom = function() {\r\n  var projection,\r\n      zoomPoint,\r\n      event = d3.dispatch(\"zoomstart\", \"zoom\", \"zoomend\"),\r\n      zoom = d3.behavior.zoom()\r\n        .on(\"zoomstart\", function() {\r\n          var mouse0 = d3.mouse(this),\r\n              rotate = quaternionFromEuler(projection.rotate()),\r\n              point = position(projection, mouse0);\r\n          if (point) zoomPoint = point;\r\n\r\n          zoomOn.call(zoom, \"zoom\", function() {\r\n                projection.scale(d3.event.scale);\r\n                var mouse1 = d3.mouse(this),\r\n                    between = rotateBetween(zoomPoint, position(projection, mouse1));\r\n                projection.rotate(eulerFromQuaternion(rotate = between\r\n                    ? multiply(rotate, between)\r\n                    : multiply(bank(projection, mouse0, mouse1), rotate)));\r\n                mouse0 = mouse1;\r\n                event.zoom.apply(this, arguments);\r\n              });\r\n          event.zoomstart.apply(this, arguments);\r\n        })\r\n        .on(\"zoomend\", function() {\r\n          zoomOn.call(zoom, \"zoom\", null);\r\n          event.zoomend.apply(this, arguments);\r\n        }),\r\n      zoomOn = zoom.on;\r\n\r\n  zoom.projection = function(_) {\r\n    return arguments.length ? zoom.scale((projection = _).scale()) : projection;\r\n  };\r\n\r\n  return d3.rebind(zoom, event, \"on\");\r\n};\r\n\r\nfunction bank(projection, p0, p1) {\r\n  var t = projection.translate(),\r\n      angle = Math.atan2(p0[1] - t[1], p0[0] - t[0]) - Math.atan2(p1[1] - t[1], p1[0] - t[0]);\r\n  return [Math.cos(angle / 2), 0, 0, Math.sin(angle / 2)];\r\n}\r\n\r\nfunction position(projection, point) {\r\n  var t = projection.translate(),\r\n      spherical = projection.invert(point);\r\n  return spherical && isFinite(spherical[0]) && isFinite(spherical[1]) && cartesian(spherical);\r\n}\r\n\r\nfunction quaternionFromEuler(euler) {\r\n  var λ = .5 * euler[0] * radians,\r\n      φ = .5 * euler[1] * radians,\r\n      γ = .5 * euler[2] * radians,\r\n      sinλ = Math.sin(λ), cosλ = Math.cos(λ),\r\n      sinφ = Math.sin(φ), cosφ = Math.cos(φ),\r\n      sinγ = Math.sin(γ), cosγ = Math.cos(γ);\r\n  return [\r\n    cosλ * cosφ * cosγ + sinλ * sinφ * sinγ,\r\n    sinλ * cosφ * cosγ - cosλ * sinφ * sinγ,\r\n    cosλ * sinφ * cosγ + sinλ * cosφ * sinγ,\r\n    cosλ * cosφ * sinγ - sinλ * sinφ * cosγ\r\n  ];\r\n}\r\n\r\nfunction multiply(a, b) {\r\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\r\n      b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  return [\r\n    a0 * b0 - a1 * b1 - a2 * b2 - a3 * b3,\r\n    a0 * b1 + a1 * b0 + a2 * b3 - a3 * b2,\r\n    a0 * b2 - a1 * b3 + a2 * b0 + a3 * b1,\r\n    a0 * b3 + a1 * b2 - a2 * b1 + a3 * b0\r\n  ];\r\n}\r\n\r\nfunction rotateBetween(a, b) {\r\n  if (!a || !b) return;\r\n  var axis = cross(a, b),\r\n      norm = Math.sqrt(dot(axis, axis)),\r\n      halfγ = .5 * Math.acos(Math.max(-1, Math.min(1, dot(a, b)))),\r\n      k = Math.sin(halfγ) / norm;\r\n  return norm && [Math.cos(halfγ), axis[2] * k, -axis[1] * k, axis[0] * k];\r\n}\r\n\r\nfunction eulerFromQuaternion(q) {\r\n  return [\r\n    Math.atan2(2 * (q[0] * q[1] + q[2] * q[3]), 1 - 2 * (q[1] * q[1] + q[2] * q[2])) * degrees,\r\n    Math.asin(Math.max(-1, Math.min(1, 2 * (q[0] * q[2] - q[3] * q[1])))) * degrees,\r\n    Math.atan2(2 * (q[0] * q[3] + q[1] * q[2]), 1 - 2 * (q[2] * q[2] + q[3] * q[3])) * degrees\r\n  ];\r\n}\r\n\r\nfunction cartesian(spherical) {\r\n  var λ = spherical[0] * radians,\r\n      φ = spherical[1] * radians,\r\n      cosφ = Math.cos(φ);\r\n  return [\r\n    cosφ * Math.cos(λ),\r\n    cosφ * Math.sin(λ),\r\n    Math.sin(φ)\r\n  ];\r\n}\r\n\r\nfunction dot(a, b) {\r\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\r\n  return s;\r\n}\r\n\r\nfunction cross(a, b) {\r\n  return [\r\n    a[1] * b[2] - a[2] * b[1],\r\n    a[2] * b[0] - a[0] * b[2],\r\n    a[0] * b[1] - a[1] * b[0]\r\n  ];\r\n}\r\n\r\n})();\r\n","###*\r\n  @ngdoc behavior\r\n  @name brush\r\n  @module wk.chart\r\n  @restrict A\r\n  @element x, y, range-x, range-y or layout\r\n  @description\r\n\r\n  enable brushing behavior\r\n###\r\n\r\n###*\r\n  @ngdoc attr\r\n  @name brush#brush\r\n  @values none\r\n  @param brush {string} Brush name\r\n  Brush will be published under this name for consumption by other layouts\r\n###\r\nangular.module('wk.chart').directive 'brush', ($log, selectionSharing, behavior) ->\r\n  return {\r\n    restrict: 'A'\r\n    require: ['^chart', '^layout', '?x', '?y','?rangeX', '?rangeY']\r\n    scope:\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#brushExtent\r\n        @param brushExtent {array} Contains the start and end index into the data array for the brushed axis. Is undefined if brush is empty or is a xy (layout) brush\r\n      ###\r\n      brushExtent: '='\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#selectedValues\r\n        @param selectedValues {array} Contains array of the axis values of the selected the brush  area. Is undefined if brush is empty or is xy (layout) brushes\r\n      ###\r\n      selectedValues: '='\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#selectedDomain\r\n        @param selectedDomain {array} Contains an array of data objects for the selected brush area.\r\n      ###\r\n      selectedDomain: '='\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#selectedDomainChange\r\n        @param selectedDomainChange {expression} expression to evaluate upon a change of the brushes selected domain. The selected domain is available as ´domain´\r\n      ###\r\n      selectedDomainChange: '&'\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#brushStart\r\n        @param brushStart {expression} expression to evaluate upon a start of brushing. Is fired on 'mousedown'.\r\n      ###\r\n      brushStart: '&'\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#brushEnd\r\n        @param brushEnd {expression} expression to evaluate upon a end of brushing. is fired on 'mouseup'. The selected domain is available as ´domain´\r\n      ###\r\n      brushEnd: '&'\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#clearBrush\r\n        @param clearBrush {function} assigns a function that clears the brush selection when called via a bound scope variable.\r\n        * Usage: bind a scope variable to the attribute: `clear-selection=\"scopeVar\"`. `brush` assigns a function to scopeVar that can be called to reset the brush, e.g. in a button: `<button ng-click=\"scopeVar()\">Clear Brush</button>`\r\n      ###\r\n      clearBrush: \"=\"\r\n\r\n    link:(scope, element, attrs, controllers) ->\r\n      chart = controllers[0].me\r\n      layout = controllers[1]?.me\r\n      x = controllers[2]?.me\r\n      y = controllers[3]?.me\r\n      rangeX = controllers[4]?.me\r\n      rangeY = controllers[5]?.me\r\n      xScale = undefined\r\n      yScale = undefined\r\n      _selectables = undefined\r\n      _brushAreaSelection = undefined\r\n      _isAreaBrush = not x and not y\r\n      _brushGroup = undefined\r\n\r\n      brush = chart.behavior().brush\r\n\r\n      if not x and not y and not rangeX and not rangeY\r\n        #layout brush, get x and y from layout scales\r\n        scales = layout.scales().getScales(['x', 'y'])\r\n        brush.x(scales.x)\r\n        brush.y(scales.y)\r\n      else\r\n        brush.x(x or rangeX)\r\n        brush.y(y or rangeY)\r\n      brush.active(true)\r\n\r\n      scope.$watch 'clearBrush' , (val) ->\r\n        if attrs.clearBrush\r\n          scope.clearBrush = brush.clearBrush\r\n\r\n      attrs.$observe 'brush', (val) ->\r\n        if _.isString(val) and val.length > 0\r\n          brush.brushGroup(val)\r\n        else\r\n          brush.brushGroup(undefined)\r\n\r\n      brush.events().on 'brushStart', () ->\r\n        scope.brushStart()\r\n        scope.$apply()\r\n\r\n      brush.events().on 'brush', (idxRange, valueRange, domain) ->\r\n        if attrs.brushExtent\r\n          scope.brushExtent = idxRange\r\n        if attrs.selectedValues\r\n          scope.selectedValues = valueRange\r\n        if attrs.selectedDomain\r\n          scope.selectedDomain = domain\r\n        scope.selectedDomainChange({domain:domain})\r\n        scope.$apply()\r\n\r\n      brush.events().on 'brushEnd', (idxRange, valueRange, domain) ->\r\n        scope.brushEnd({domain:domain})\r\n        scope.$apply()\r\n\r\n      layout.lifeCycle().on 'drawChart.brush', (data) ->\r\n        brush.data(data)\r\n\r\n\r\n  }",null,"/**\r\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\r\n * directory of this distribution and at\r\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\r\n */\r\n\r\n(function() {\r\n    /**\r\n     * Class for dimension change detection.\r\n     *\r\n     * @param {Element|Element[]|Elements|jQuery} element\r\n     * @param {Function} callback\r\n     *\r\n     * @constructor\r\n     */\r\n    this.ResizeSensor = function(element, callback) {\r\n        /**\r\n         *\r\n         * @constructor\r\n         */\r\n        function EventQueue() {\r\n            this.q = [];\r\n            this.add = function(ev) {\r\n                this.q.push(ev);\r\n            };\r\n            var i, j;\r\n            this.call = function() {\r\n                for (i = 0, j = this.q.length; i < j; i++) {\r\n                    this.q[i].call();\r\n                }\r\n            };\r\n        }\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @param {String} prop\r\n         * @returns {String|Number}\r\n         */\r\n        function getComputedStyle(element, prop) {\r\n            if (element.currentStyle) {\r\n                return element.currentStyle[prop];\r\n            } else if (window.getComputedStyle) {\r\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\r\n            } else {\r\n                return element.style[prop];\r\n            }\r\n        }\r\n        /**\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} resized\r\n         */\r\n        function attachResizeEvent(element, resized) {\r\n            if (!element.resizedAttached) {\r\n                element.resizedAttached = new EventQueue();\r\n                element.resizedAttached.add(resized);\r\n            } else if (element.resizedAttached) {\r\n                element.resizedAttached.add(resized);\r\n                return;\r\n            }\r\n            element.resizeSensor = document.createElement('div');\r\n            element.resizeSensor.className = 'wk-chart-resize-sensor';\r\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;';\r\n            var styleChild = 'position: absolute; left: 0; top: 0;';\r\n            element.resizeSensor.style.cssText = style;\r\n            element.resizeSensor.innerHTML =\r\n                '<div class=\"wk-chart-resize-sensor-expand\" style=\"' + style + '\">' +\r\n                '<div style=\"' + styleChild + '\"></div>' +\r\n                '</div>' +\r\n                '<div class=\"wk-chart-resize-sensor-shrink\" style=\"' + style + '\">' +\r\n                '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\r\n                '</div>';\r\n            element.appendChild(element.resizeSensor);\r\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\r\n                element.style.position = 'relative';\r\n            }\r\n            var expand = element.resizeSensor.childNodes[0];\r\n            var expandChild = expand.childNodes[0];\r\n            var shrink = element.resizeSensor.childNodes[1];\r\n            var shrinkChild = shrink.childNodes[0];\r\n            var lastWidth, lastHeight;\r\n            var reset = function() {\r\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\r\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\r\n                expand.scrollLeft = expand.scrollWidth;\r\n                expand.scrollTop = expand.scrollHeight;\r\n                shrink.scrollLeft = shrink.scrollWidth;\r\n                shrink.scrollTop = shrink.scrollHeight;\r\n                lastWidth = element.offsetWidth;\r\n                lastHeight = element.offsetHeight;\r\n            };\r\n            reset();\r\n            var changed = function() {\r\n                element.resizedAttached.call();\r\n            };\r\n            var addEvent = function(el, name, cb) {\r\n                if (el.attachEvent) {\r\n                    el.attachEvent('on' + name, cb);\r\n                } else {\r\n                    el.addEventListener(name, cb);\r\n                }\r\n            };\r\n            addEvent(expand, 'scroll', function() {\r\n                if (element.offsetWidth > lastWidth || element.offsetHeight > lastHeight) {\r\n                    changed();\r\n                }\r\n                reset();\r\n            });\r\n            addEvent(shrink, 'scroll',function() {\r\n                if (element.offsetWidth < lastWidth || element.offsetHeight < lastHeight) {\r\n                    changed();\r\n                }\r\n                reset();\r\n            });\r\n        }\r\n        if (\"[object Array]\" === Object.prototype.toString.call(element)\r\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\r\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\r\n            ) {\r\n            var i = 0, j = element.length;\r\n            for (; i < j; i++) {\r\n                attachResizeEvent(element[i], callback);\r\n            }\r\n        } else {\r\n            attachResizeEvent(element, callback);\r\n        }\r\n    }\r\n})()","###*\r\n  @ngdoc behavior\r\n  @name brushed\r\n  @module wk.chart\r\n  @restrict A\r\n  @description\r\n\r\n  enables an axis to be scaled by a named brush in a different layout\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'brushed', ($log,selectionSharing, timing) ->\r\n  sBrushCnt = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: ['^chart', '?^layout', '?x', '?y', '?rangeX', '?rangeY']\r\n    link: (scope, element, attrs, controllers) ->\r\n      chart = controllers[0].me\r\n      layout = controllers[1]?.me\r\n      x = controllers[2]?.me\r\n      y = controllers[3]?.me\r\n      rangeX = controllers[4]?.me\r\n      rangeY = controllers[5]?.me\r\n\r\n      axis = x or y or rangeX or rangeY\r\n      _brushGroup = undefined\r\n\r\n      brusher = (extent, idxRange) ->\r\n        #timing.start(\"brusher#{axis.id()}\")\r\n        if not axis then return\r\n        #axis\r\n        if extent.length > 0\r\n          axis.domain(extent).scale().domain(extent)\r\n        else\r\n          # reset domain to initial state\r\n          axis.domain(undefined)\r\n          axis.scale().domain(axis.getDomain(chart.getData()))\r\n          if axis.isOrdinal()\r\n            idxRange = [0, axis.scale().domain().length - 1]\r\n\r\n        for l in chart.layouts() when l.scales().hasScale(axis) #need to do it this way to ensure the right axis is chosen in case of several layouts in a container\r\n          l.lifeCycle().brush(axis, true, idxRange) #no animation\r\n        #timing.stop(\"brusher#{axis.id()}\")\r\n\r\n      attrs.$observe 'brushed', (val) ->\r\n        if _.isString(val) and val.length > 0\r\n          _brushGroup = val\r\n          selectionSharing.register _brushGroup, brusher\r\n        else\r\n          _brushGroup = undefined\r\n\r\n      scope.$on '$destroy', () ->\r\n        selectionSharing.unregister _brushGroup, brusher\r\n\r\n  }","(function() {\r\n    var out$ = typeof exports != 'undefined' && exports || this;\r\n\r\n    var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\r\n\r\n    function inlineImages(callback) {\r\n        var images = document.querySelectorAll('svg image');\r\n        var left = images.length;\r\n        if (left == 0) {\r\n            callback();\r\n        }\r\n        for (var i = 0; i < images.length; i++) {\r\n            (function(image) {\r\n                if (image.getAttribute('xlink:href')) {\r\n                    var href = image.getAttribute('xlink:href').value;\r\n                    if (/^http/.test(href) && !(new RegExp('^' + window.location.host).test(href))) {\r\n                        throw new Error(\"Cannot render embedded images linking to external hosts.\");\r\n                    }\r\n                }\r\n                var canvas = document.createElement('canvas');\r\n                var ctx = canvas.getContext('2d');\r\n                var img = new Image();\r\n                img.src = image.getAttribute('xlink:href');\r\n                img.onload = function() {\r\n                    canvas.width = img.width;\r\n                    canvas.height = img.height;\r\n                    ctx.drawImage(img, 0, 0);\r\n                    image.setAttribute('xlink:href', canvas.toDataURL('image/png'));\r\n                    left--;\r\n                    if (left == 0) {\r\n                        callback();\r\n                    }\r\n                }\r\n            })(images[i]);\r\n        }\r\n    }\r\n\r\n    function styles(dom) {\r\n        var css = \"\";\r\n        var sheets = document.styleSheets;\r\n        for (var i = 0; i < sheets.length; i++) {\r\n            var rules = sheets[i].cssRules;\r\n            if (rules != null) {\r\n                for (var j = 0; j < rules.length; j++) {\r\n                    var rule = rules[j];\r\n                    if (typeof(rule.style) != \"undefined\") {\r\n                        css += rule.selectorText + \" { \" + rule.style.cssText + \" }\\n\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var s = document.createElement('style');\r\n        s.setAttribute('type', 'text/css');\r\n        s.innerHTML = \"<![CDATA[\\n\" + css + \"\\n]]>\";\r\n\r\n        var defs = document.createElement('defs');\r\n        defs.appendChild(s);\r\n        return defs;\r\n    }\r\n\r\n    out$.svgAsDataUri = function(el, scaleFactor, cb) {\r\n        scaleFactor = scaleFactor || 1;\r\n\r\n        inlineImages(function() {\r\n            var outer = document.createElement(\"div\");\r\n            var clone = el.cloneNode(true);\r\n            var width = parseInt(\r\n                clone.getAttribute('width')\r\n                || clone.style.width\r\n                || out$.getComputedStyle(el).getPropertyValue('width')\r\n            );\r\n            var height = parseInt(\r\n                clone.getAttribute('height')\r\n                || clone.style.height\r\n                || out$.getComputedStyle(el).getPropertyValue('height')\r\n            );\r\n\r\n            var xmlns = \"http://www.w3.org/2000/xmlns/\";\r\n\r\n            clone.setAttribute(\"version\", \"1.1\");\r\n            clone.setAttributeNS(xmlns, \"xmlns\", \"http://www.w3.org/2000/svg\");\r\n            clone.setAttributeNS(xmlns, \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\r\n            clone.setAttribute(\"width\", width * scaleFactor);\r\n            clone.setAttribute(\"height\", height * scaleFactor);\r\n            clone.setAttribute(\"viewBox\", \"0 0 \" + width + \" \" + height);\r\n            outer.appendChild(clone);\r\n\r\n            clone.insertBefore(styles(clone), clone.firstChild);\r\n\r\n            var svg = doctype + outer.innerHTML;\r\n            var uri = 'data:image/svg+xml;base64,' + window.btoa(unescape(encodeURIComponent(svg)));\r\n            if (cb) {\r\n                cb(uri);\r\n            }\r\n        });\r\n    }\r\n\r\n    out$.saveSvgAsPng = function(el, name, scaleFactor) {\r\n        out$.svgAsDataUri(el, scaleFactor, function(uri) {\r\n            var image = new Image();\r\n            image.src = uri;\r\n            image.onload = function() {\r\n                var canvas = document.createElement('canvas');\r\n                canvas.width = image.width;\r\n                canvas.height = image.height;\r\n                var context = canvas.getContext('2d');\r\n                context.drawImage(image, 0, 0);\r\n\r\n                var a = document.createElement('a');\r\n                a.download = name;\r\n                a.href = canvas.toDataURL('image/png');\r\n                document.body.appendChild(a);\r\n                a.click();\r\n            }\r\n        });\r\n    }\r\n})();","###*\r\n  @ngdoc container\r\n  @name chart\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  chart is the container directive for all charts.\r\n  @param {array} data - Data to be graphed, {@link guide/data ...more}\r\n  @param {boolean} [deep-watch=false]\r\n  @param {string} [filter] - filters the data using the angular filter function\r\n  @param {string} [title] - The chart title\r\n  @param {string} [subtitle] - The chart subtitle\r\n  @param {number} [animation-duration=300] - animation duration in milliseconds\r\n###\r\nangular.module('wk.chart').directive 'chart', ($log, chart, $filter) ->\r\n  chartCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: 'chart'\r\n    scope:\r\n      data: '='\r\n      filter: '='\r\n    controller: ($scope) ->\r\n      this.me = chart()\r\n      this.me.scope($scope)\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      me = controller.me\r\n\r\n      deepWatch = false\r\n      watcherRemoveFn = undefined\r\n      element.addClass(me.id())\r\n\r\n      _data = undefined\r\n      _filter = undefined\r\n\r\n      me.container().element(element[0])\r\n\r\n      me.lifeCycle().configure()\r\n\r\n      me.lifeCycle().on 'scopeApply', () ->\r\n        scope.$apply()\r\n\r\n      attrs.$observe 'animationDuration', (val) ->\r\n        if val and _.isNumber(+val) and +val >= 0\r\n          me.animationDuration(val)\r\n\r\n      attrs.$observe 'title', (val) ->\r\n        if val\r\n          me.title(val)\r\n        else\r\n          me.title(undefined)\r\n\r\n      attrs.$observe 'subtitle', (val) ->\r\n        if val\r\n          me.subTitle(val)\r\n        else\r\n          me.subTitle(undefined)\r\n\r\n      scope.$watch 'filter', (val) ->\r\n        if val\r\n          _filter = val # scope.$eval(val)\r\n          if _data\r\n            me.lifeCycle().newData($filter('filter')(_data, _filter))\r\n        else\r\n          _filter = undefined\r\n          if _data\r\n            me.lifeCycle().newData(_data)\r\n\r\n      attrs.$observe 'deepWatch', (val) ->\r\n        if val isnt undefined and val isnt 'false'\r\n          deepWatch = true\r\n        else\r\n          deepWatch = false\r\n        if watcherRemoveFn\r\n          watcherRemoveFn()\r\n        watcherRemoveFn = scope.$watch 'data', dataWatchFn, deepWatch\r\n\r\n      dataWatchFn = (val) ->\r\n        if val\r\n          _data = val\r\n          if _.isArray(_data) and _data.length is 0 then return\r\n          if _filter\r\n            me.lifeCycle().newData($filter('filter')(val, _filter))\r\n          else\r\n            me.lifeCycle().newData(val)\r\n\r\n      watcherRemoveFn = scope.$watch 'data', dataWatchFn, deepWatch\r\n\r\n      # cleanup when destroyed\r\n\r\n      element.on '$destroy', () ->\r\n        if watcherRemoveFn\r\n          watcherRemoveFn()\r\n        $log.log 'Destroying chart'\r\n        me.lifeCycle().destroy()\r\n  }","###*\r\n  @ngdoc container\r\n  @name layout\r\n  @module wk.chart\r\n  @restrict E\r\n  @requires chart\r\n  @description\r\n\r\n  Layout is the container for the layout directives. It requires chart as a parent.\r\n###\r\nangular.module('wk.chart').directive 'layout', ($log, layout, container) ->\r\n  layoutCnt = 0\r\n  return {\r\n    restrict: 'AE'\r\n    require: ['layout','^chart']\r\n\r\n    controller: ($element) ->\r\n      this.me = layout()\r\n    link: (scope, element, attrs, controllers) ->\r\n\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      me.chart(chart)\r\n\r\n      element.addClass(me.id())\r\n\r\n      #$log.log 'linking layout id:', me.id(), 'chart:', chart.id()\r\n      chart.addLayout(me)\r\n      chart.container().addLayout(me)\r\n      me.container(chart.container())\r\n\r\n  }","angular.module('wk.chart').directive 'printButton', ($log) ->\r\n\r\n  return {\r\n    require:'chart'\r\n    restrict: 'A'\r\n    link:(scope, element, attrs, controller) ->\r\n      chart = controller.me\r\n\r\n      draw = () ->\r\n        _containerDiv = d3.select(chart.container().element()).select('div.wk-chart')\r\n        _containerDiv.append('button')\r\n          .attr('class','wk-chart-print-button')\r\n          .style({position:'absolute', top:0, right:0})\r\n          .text('Print')\r\n          .on 'click', ()->\r\n            $log.log 'Clicked Print Button'\r\n\r\n            svg  = _containerDiv.select('svg.wk-chart').node()\r\n            saveSvgAsPng(svg, 'print.png',5)\r\n\r\n\r\n      chart.lifeCycle().on 'drawChart.print', draw\r\n  }","###*\r\n  @ngdoc behavior\r\n  @name selection\r\n  @element layout\r\n  @module wk.chart\r\n  @restrict A\r\n  @description\r\n  enables selection of individual chart objects\r\n###\r\nangular.module('wk.chart').directive 'selection', ($log) ->\r\n  objId = 0\r\n\r\n  return {\r\n    restrict: 'A'\r\n    scope:\r\n      ###*\r\n        @ngdoc attr\r\n        @name selection#selectedDomain\r\n        @param selectedDomain {array} Array containing the selected data objects.\r\n      ###\r\n      selectedDomain: '='\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name selection#selectedDomainChange\r\n        @param selectedDomainChange {expression} expression to evaluate upon a change of the brushes selected domain. The selected domain is available as ´domain´\r\n      ###\r\n      selectedDomainChange: '&'\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name selection#clearSelection\r\n        @param clearSelection {function} assigns a function that clears the selection when called via a bound scope variable.\r\n        * Usage: bind a scope variable to the attribute: `clear-selection=\"scopeVar\"`. `selection` assigns a function to scopeVar that can be called to reset the brush, e.g. in a button: `<button ng-click=\"scopeVar()\">Clear Selection</button>`\r\n      ###\r\n      clearSelection: \"=\"\r\n\r\n    require: 'layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      layout = controller.me\r\n\r\n      layout.lifeCycle().on 'configure.selection', ->\r\n        _selection = layout.behavior().selected\r\n        _selection.layout(layout)\r\n        scope.$watch 'clearSelection' , (val) ->\r\n          if attrs.clearSelection\r\n            scope.clearSelection = _selection.clearSelection\r\n\r\n        _selection.active(true)\r\n        _selection.on 'selected', (selectedObjects) ->\r\n          if scope.selectedDomain then scope.selectedDomain = selectedObjects\r\n          scope.selectedDomainChange({domain:selectedObjects})\r\n          scope.$apply()\r\n\r\n  }","###*\r\n  @ngdoc behavior\r\n  @name tooltips\r\n  @element chart\r\n  @module wk.chart\r\n  @restrict A\r\n  @description\r\n  enables the display of tooltips. See  the {@link guide/tooltips tooltips section} in the guide for more details\r\n###\r\nangular.module('wk.chart').directive 'tooltips', ($log, behavior) ->\r\n\r\n  return {\r\n    restrict: 'A'\r\n    require: 'chart'\r\n    link: (scope, element, attrs, chartCtrl) ->\r\n      chart = chartCtrl.me\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name tooltips#tooltips\r\n        @values true, false, path/to/custom-template.html\r\n        @param tooltips {boolean|url} - enable / disable tooltips, resp. supply a custom tooltip template url.\r\n        If no template url is supplied, a (configurable) default template is used (see {@link wkChartTemplatesProvider here} for how to configure the default template),\r\n      ###\r\n      attrs.$observe 'tooltips', (val) ->\r\n        chart.toolTipTemplate('')\r\n        if val isnt undefined and (val is '' or val is 'true')\r\n          chart.showTooltip(true)\r\n        else if val.length > 0 and val isnt 'false'\r\n          chart.toolTipTemplate(val)\r\n          chart.showTooltip(true)\r\n        else chart.showTooltip(false)\r\n  }\r\n\r\n","###*\r\n  @ngdoc dimension\r\n  @name color\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into colors for chart objects\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'color', ($log, scale, legend, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['color','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleColor'\r\n    scope:\r\n      mapFunction: '='\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n      l = undefined\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'color'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('category20')\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n\r\n      scope.$watch 'mapFunction', (fn) ->\r\n        if fn and _.isFunction(fn)\r\n          me.scaleMapFn(fn)\r\n\r\n  }","angular.module('wk.chart').service 'scaleUtils', ($log, wkChartScales, utils) ->\r\n\r\n  parseList = (val) ->\r\n    if val\r\n      l = val.trim().replace(/^\\[|\\]$/g, '').split(',').map((d) -> d.replace(/^[\\\"|']|[\\\"|']$/g, ''))\r\n      l = l.map((d) -> if isNaN(d) then d else +d)\r\n      return if l.length is 1 then return l[0] else l\r\n\r\n  return {\r\n\r\n    observeSharedAttributes: (attrs, me) ->\r\n      ###*\r\n        @ngdoc attr\r\n        @name type\r\n        @usedBy dimension\r\n        @param [type=layout specific - see layout docs] {scale}\r\n        Defines the d3 scale applied to transform the input data to a dimensions display value. All d3 scales are supported, as well as wk-chart specific extensions described here. #TODO insert correct links\r\n      ###\r\n      attrs.$observe 'type', (val) ->\r\n        if val isnt undefined\r\n          if d3.scale.hasOwnProperty(val) or val is 'time' or wkChartScales.hasOwnProperty(val)\r\n            me.scaleType(val)\r\n          else\r\n            if val isnt ''\r\n              ## no scale defined, use default\r\n              $log.error \"Error: illegal scale value: #{val}. Using 'linear' scale instead\"\r\n          me.update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name exponent\r\n        @usedBy dimension\r\n        @param [exponent] {number}\r\n        This attribute is only evaluated with pow and log scale types - defines the exponent for the d3 pow and log scale #TODO insert correct links\r\n      ###\r\n      attrs.$observe 'exponent', (val) ->\r\n        if me.scaleType() is 'pow' and _.isNumber(+val)\r\n          me.exponent(+val).update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name property\r\n        @usedBy dimension\r\n        @param property{expression}\r\n          the input data property (properties) used to compute this dimension. In case the charts supports a the data layer dimension this attribute can be a list of data properties.\r\n          In this case the property field can be omitted, for non-layer dimension it is required.\r\n      ###\r\n      attrs.$observe 'property', (val) ->\r\n        me.property(parseList(val)).update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name layerProperty\r\n        @usedBy dimension\r\n        @param [layerProperty] {expression}\r\n        defines the container object for property in case the data is a hierachical structure. See (#todo define link)\r\n         for more detail\r\n      ###\r\n      attrs.$observe 'layerProperty', (val) ->\r\n        if val and val.length > 0\r\n          me.layerProperty(val).update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name range\r\n        @usedBy dimension\r\n        @param [range] {expression}\r\n        The scale types range attribute. For x and y scales the range is set to the pixel width and height of the drawing container, for category... scales the range is set to the scales color range\r\n      ###\r\n      attrs.$observe 'range', (val) ->\r\n        range = parseList(val)\r\n        if Array.isArray(range)\r\n          me.range(range).update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name dateFormat\r\n        @usedBy dimension\r\n        @param [dateFormat] {expression}\r\n        applies to Time scale type only. Describes the date display format of the property field content. can be omitted if the field is already a javascript Date object, otherwise the format is used to transform\r\n        the property values into a Javascript Date object.Date Format is described using d3's [Time Format](https://github.com/mbostock/d3/wiki/Time-Formatting#format)\r\n      ###\r\n      attrs.$observe 'dateFormat', (val) ->\r\n        if val\r\n         if me.scaleType() is 'time'\r\n           me.dataFormat(val).update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name domain\r\n        @usedBy dimension\r\n        @param [domain] {expression}\r\n        the scale types domain property. Meaning and acceptable values for domain depend on teh scale type, thus please see (TODO: define link)\r\n        for further explanation\r\n      ###\r\n      attrs.$observe 'domain', (val) ->\r\n        if val\r\n          $log.info 'domain', val\r\n          parsedList = parseList(val)\r\n          if Array.isArray(parsedList)\r\n            me.domain(parsedList).update()\r\n          else\r\n            $log.error \"domain: must be array, or comma-separated list, got\", val\r\n        else\r\n            me.domain(undefined).update()\r\n      ###*\r\n        @ngdoc attr\r\n        @name domainRange\r\n        @usedBy dimension\r\n        @param [domainRange] {expression}\r\n        Certain scale type and dimensions require a calculation of the data range to perform the correct mapping onto the scale output.domainRange defined the rule to be used to calculate this. Possible values are:\r\n        min: [0 .. minimum data value]\r\n        max: [0 .. maximum data value]\r\n        extent: [minimum data value .. maximum data value]\r\n        total: applies only layer dimensions, calculates as 0 ..  maximum of the layer value totals]\r\n      ###\r\n      attrs.$observe 'domainRange', (val) ->\r\n        if val\r\n          me.domainCalc(val).update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name label\r\n        @usedBy dimension\r\n        @param [label] {expression}\r\n        defined the dimensions label text. If not specified, the value of teh 'property' attribute is used\r\n      ###\r\n      attrs.$observe 'label', (val) ->\r\n        if val isnt undefined\r\n          me.axisLabel(val).updateAttrs()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name format\r\n        @usedBy dimension\r\n        @param [format] {expression}\r\n         a formatting string used to display tooltip and legend values for the dimension. if omitted, a default format will be applied\r\n        please note tha this is different from the 'tickFormat' attribute\r\n      ###\r\n      attrs.$observe 'format', (val) ->\r\n        if val isnt undefined\r\n          me.format(val)\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name reset\r\n        @usedBy dimension\r\n        @param [reset] {expression}\r\n         If sepcified or set to true, the domain values are reset every time the carts data changes.\r\n      ###\r\n      attrs.$observe 'reset', (val) ->\r\n        me.resetOnNewData(utils.parseTrueFalse(val))\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    observeAxisAttributes: (attrs, me, scope) ->\r\n\r\n      ###*\r\n          @ngdoc attr\r\n          @name tickFormat\r\n          @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n          @param [tickFormat] {expression}\r\n      ###\r\n      attrs.$observe 'tickFormat', (val) ->\r\n        if val isnt undefined\r\n          me.tickFormat(d3.format(val)).update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name ticks\r\n        @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n        @param [ticks] {expression}\r\n      ###\r\n      attrs.$observe 'ticks', (val) ->\r\n        if val isnt undefined\r\n          me.ticks(+val)\r\n          if me.axis()\r\n            me.updateAttrs()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name grid\r\n        @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n        @param [grid] {expression}\r\n      ###\r\n      attrs.$observe 'grid', (val) ->\r\n        if val isnt undefined\r\n          me.showGrid(val is '' or val is 'true').updateAttrs()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name showLabel\r\n        @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n        @param [showLabel] {expression}\r\n      ###\r\n      attrs.$observe 'showLabel', (val) ->\r\n        if val isnt undefined\r\n          me.showLabel(val is '' or val is 'true').update(true)\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name axisFormatters\r\n        @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n        @param [axisFormatters] {expression}\r\n      ###\r\n      scope.$watch attrs.axisFormatters,  (val) ->\r\n        if _.isObject(val)\r\n          if _.has(val, 'tickFormat') and _.isFunction(val.tickFormat)\r\n            me.tickFormat(val.tickFormat)\r\n          else if _.isString(val.tickFormat)\r\n            me.tickFormat(d3.format(val))\r\n          if _.has(val,'tickValues') and _.isArray(val.tickValues)\r\n            me.tickValues(val.tickValues)\r\n          me.update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name reverse\r\n        @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n        @param [reverse] {boolean}\r\n        reverses the direction of the axes if `true` , i.e. values are displayed in reverse order.\r\n      ###\r\n      attrs.$observe 'reverse' , (val) ->\r\n        if val isnt undefined\r\n          me.reverse(val is '' or val is 'true').update()\r\n\r\n\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    observeLegendAttributes: (attrs, me, layout) ->\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name legend\r\n        @usedBy dimension\r\n        @values true, false, top-right, top-left, bottom-left, bottom-right, #divName\r\n        @param [legend=true] {expression}\r\n      ###\r\n      attrs.$observe 'legend', (val) ->\r\n        if val isnt undefined\r\n          l = me.legend()\r\n          l.showValues(false)\r\n          switch val\r\n            when 'false'\r\n              l.show(false)\r\n            when 'top-left', 'top-right', 'bottom-left', 'bottom-right'\r\n              l.position(val).div(undefined).show(true)\r\n            when 'true', ''\r\n              l.position('top-right').show(true).div(undefined)\r\n            else\r\n              legendDiv = d3.select(val)\r\n              if legendDiv.empty()\r\n                $log.warn 'legend reference does not exist:', val\r\n                l.div(undefined).show(false)\r\n              else\r\n                l.div(legendDiv).position('top-left').show(true)\r\n\r\n          l.scale(me).layout(layout)\r\n          if me.parent()\r\n            l.register(me.parent())\r\n          l.redraw()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name valuesLegend\r\n        @usedBy dimension\r\n        @param [valuesLegend] {expression}\r\n      ###\r\n      attrs.$observe 'valuesLegend', (val) ->\r\n        if val isnt undefined\r\n          l = me.legend()\r\n          l.showValues(true)\r\n          switch val\r\n            when 'false'\r\n              l.show(false)\r\n            when 'top-left', 'top-right', 'bottom-left', 'bottom-right'\r\n              l.position(val).div(undefined).show(true)\r\n            when 'true', ''\r\n              l.position('top-right').show(true).div(undefined)\r\n            else\r\n              legendDiv = d3.select(val)\r\n              if legendDiv.empty()\r\n                $log.warn 'legend reference does not exist:', val\r\n                l.div(undefined).show(false)\r\n              else\r\n                l.div(legendDiv).position('top-left').show(true)\r\n\r\n          l.scale(me).layout(layout)\r\n          if me.parent()\r\n            l.register(me.parent())\r\n          l.redraw()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name legendTitle\r\n        @usedBy dimension\r\n        @param [legendTitle] {expression}\r\n      ###\r\n      attrs.$observe 'legendTitle', (val) ->\r\n        if val isnt undefined\r\n          me.legend().title(val).redraw()\r\n\r\n    #--- Observe Range attributes --------------------------------------------------------------------------------------\r\n\r\n    observerRangeAttributes: (attrs, me) ->\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name lowerProperty\r\n        @usedBy dimension.rangeX, dimension.rangeY\r\n        @param [lowerProperty] {expression}\r\n      ###\r\n      attrs.$observe 'lowerProperty', (val) ->\r\n        me.lowerProperty(parseList(val)).update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name upperProperty\r\n        @usedBy dimension.rangeX, dimension.rangeY\r\n        @param [upperProperty] {expression}\r\n      ###\r\n      attrs.$observe 'upperProperty', (val) ->\r\n        me.upperProperty(parseList(val)).update()\r\n\r\n    }\r\n\r\n","###*\r\n  @ngdoc dimension\r\n  @name shape\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into shape objects in teh chart\r\n\r\n\r\n###\r\n\r\nangular.module('wk.chart').directive 'shape', ($log, scale, d3Shapes, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['shape','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleSize'\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'shape'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('ordinal')\r\n      me.scale().range(d3Shapes)\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name size\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into the size of chart objects\r\n\r\n\r\n###\r\n\r\nangular.module('wk.chart').directive 'size', ($log, scale, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['size','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleSize'\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'size'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.resetOnNewData(true)\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name x\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  This dimension defined the horizontal axis of the chart\r\n\r\n  @param {string} axis\r\n  Define if a horizontal axis should be displayed Possible values:\r\n\r\n###\r\nangular.module('wk.chart').directive 'x', ($log, scale, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['x','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      #$log.log 'creating controller scaleX'\r\n      this.me = scale() # for Angular 1.3\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'x'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.resetOnNewData(true)\r\n      me.isHorizontal(true)\r\n      me.register()\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n\r\n      attrs.$observe 'axis', (val) ->\r\n        if val isnt undefined\r\n          if val isnt 'false'\r\n            if val in ['top', 'bottom']\r\n              me.axisOrient(val).showAxis(true)\r\n            else\r\n              me.axisOrient('bottom').showAxis(true)\r\n          else\r\n            me.showAxis(false).axisOrient(undefined)\r\n          me.update(true)\r\n\r\n      scaleUtils.observeAxisAttributes(attrs, me, scope)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n\r\n      attrs.$observe 'rotateTickLabels', (val) ->\r\n        if val and _.isNumber(+val)\r\n          me.rotateTickLabels(+val)\r\n        else\r\n          me.rotateTickLabels(undefined)\r\n        me.update(true)\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name rangeX\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into horizontal ranges for the chart objects\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'rangeX', ($log, scale, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['rangeX','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      #$log.log 'creating controller scaleX'\r\n      this.me = scale() # for Angular 1.3\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'rangeX'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.resetOnNewData(true)\r\n      me.isHorizontal(true)\r\n      me.register()\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n\r\n      attrs.$observe 'axis', (val) ->\r\n        if val isnt undefined\r\n          if val isnt 'false'\r\n            if val in ['top', 'bottom']\r\n              me.axisOrient(val).showAxis(true)\r\n            else\r\n              me.axisOrient('bottom').showAxis(true)\r\n          else\r\n            me.showAxis(false).axisOrient(undefined)\r\n          me.update(true)\r\n\r\n      scaleUtils.observeAxisAttributes(attrs, me, scope)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n      scaleUtils.observerRangeAttributes(attrs,me)\r\n\r\n      attrs.$observe 'rotateTickLabels', (val) ->\r\n        if val and _.isNumber(+val)\r\n          me.rotateTickLabels(+val)\r\n        else\r\n          me.rotateTickLabels(undefined)\r\n        me.update(true)\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name y\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  This dimension defined the vertical axis of the chart\r\n\r\n  @param {string} axis\r\n  Define if a vertical axis should be displayed Possible values:\r\n\r\n###\r\nangular.module('wk.chart').directive 'y', ($log, scale, legend, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['y','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleY'\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'y'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.isVertical(true)\r\n      me.resetOnNewData(true)\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n\r\n      attrs.$observe 'axis', (val) ->\r\n        if val isnt undefined\r\n          if val isnt 'false'\r\n            if val in ['left', 'right']\r\n              me.axisOrient(val).showAxis(true)\r\n            else\r\n              me.axisOrient('left').showAxis(true)\r\n          else\r\n            me.showAxis(false).axisOrient(undefined)\r\n          me.update(true)\r\n\r\n      scaleUtils.observeAxisAttributes(attrs, me, scope)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name rangeY\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into vertical ranges for the chart objects\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'rangeY', ($log, scale, legend, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['rangeY','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleY'\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'rangeY'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.isVertical(true)\r\n      me.resetOnNewData(true)\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n\r\n      attrs.$observe 'axis', (val) ->\r\n        if val isnt undefined\r\n          if val isnt 'false'\r\n            if val in ['left', 'right']\r\n              me.axisOrient(val).showAxis(true)\r\n            else\r\n              me.axisOrient('left').showAxis(true)\r\n          else\r\n            me.showAxis(false).axisOrient(undefined)\r\n          me.update(true)\r\n\r\n      scaleUtils.observeAxisAttributes(attrs, me, scope)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n      scaleUtils.observerRangeAttributes(attrs,me)\r\n  }","###*\r\n  @ngdoc layout\r\n  @name area\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n  @example\r\n###\r\n\r\nangular.module('wk.chart').directive 'area', ($log, utils, tooltipUtils) ->\r\n  lineCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking s-line'\r\n      layerKeys = []\r\n      _layout = []\r\n      _dataOld = []\r\n      _pathValuesOld = []\r\n      _pathValuesNew = []\r\n      _pathArray = []\r\n      _tooltip = undefined\r\n      _ttHighlight = undefined\r\n      _circles = undefined\r\n      _scaleList = {}\r\n      _showMarkers = false\r\n      offset = 0\r\n      _id = 'area' + lineCntr++\r\n      area = undefined\r\n      areaBrush = undefined\r\n\r\n      #--- Tooltip handlers --------------------------------------------------------------------------------------------\r\n\r\n      ttEnter = (idx) ->\r\n        _pathArray = _.toArray(_pathValuesNew)\r\n        ttMoveData.apply(this, [idx])\r\n\r\n      ttMoveData = (idx) ->\r\n        ttLayers = _pathArray.map((l) -> {name:l[idx].key, value:_scaleList.y.formatValue(l[idx].yv), color:{'background-color': l[idx].color}, xv:l[idx].xv})\r\n        @headerName = _scaleList.x.axisLabel()\r\n        @headerValue = _scaleList.x.formatValue(ttLayers[0].xv)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      ttMoveMarker = (idx) ->\r\n        _circles = this.selectAll(\".wk-chart-marker-#{_id}\").data(_pathArray, (d) -> d[idx].key)\r\n        _circles.enter().append('g').attr('class', \"wk-chart-marker-#{_id}\").call(tooltipUtils.createTooltipMarkers, idx)\r\n        _circles.selectAll('circle').attr('cy', (d) -> d[idx].y)\r\n        _circles.exit().remove()\r\n        this.attr('transform', \"translate(#{_scaleList.x.scale()(_pathArray[0][idx].xv) + offset})\")\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n\r\n        mergedX = utils.mergeSeriesSorted(x.value(_dataOld), x.value(data))\r\n        _layerKeys = y.layerKeys(data)\r\n        _layout = []\r\n\r\n        _pathValuesNew = {}\r\n\r\n        for key in _layerKeys\r\n          _pathValuesNew[key] = data.map((d)-> {x:x.map(d),y:y.scale()(y.layerValue(d, key)), xv:x.value(d), yv:y.layerValue(d,key), key:key, color:color.scale()(key), data:d})\r\n\r\n          oldFirst = newFirst = undefined\r\n\r\n          layer = {key:key, color:color.scale()(key), value:[]}\r\n          # find starting value for old\r\n          i = 0\r\n          while i < mergedX.length\r\n            if mergedX[i][0] isnt undefined\r\n              oldFirst = _pathValuesOld[key][mergedX[i][0]]\r\n              break\r\n            i++\r\n          # find starting value for new\r\n\r\n          while i < mergedX.length\r\n            if mergedX[i][1] isnt undefined\r\n              newFirst = _pathValuesNew[key][mergedX[i][1]]\r\n              break\r\n            i++\r\n\r\n          for val, i in mergedX\r\n            v = {color:layer.color, x:val[2]}\r\n            # set x and y values for old values. If there is a added value, maintain the last valid position\r\n            if val[1] is undefined #ie an old value is deleted, maintain the last new position\r\n              v.yNew = newFirst.y\r\n              v.xNew = newFirst.x # animate to the predesessors new position\r\n              v.deleted = true\r\n            else\r\n              v.yNew = _pathValuesNew[key][val[1]].y\r\n              v.xNew = _pathValuesNew[key][val[1]].x\r\n              newFirst = _pathValuesNew[key][val[1]]\r\n              v.deleted = false\r\n\r\n            if _dataOld.length > 0\r\n              if  val[0] is undefined # ie a new value has been added\r\n                v.yOld = oldFirst.y\r\n                v.xOld = oldFirst.x # start x-animation from the predecessors old position\r\n              else\r\n                v.yOld = _pathValuesOld[key][val[0]].y\r\n                v.xOld = _pathValuesOld[key][val[0]].x\r\n                oldFirst = _pathValuesOld[key][val[0]]\r\n            else\r\n              v.xOld = v.xNew\r\n              v.yOld = v.yNew\r\n\r\n\r\n            layer.value.push(v)\r\n\r\n          _layout.push(layer)\r\n\r\n        offset = if x.isOrdinal() then x.scale().rangeBand() / 2 else 0\r\n\r\n        if _tooltip then _tooltip.data(data)\r\n\r\n        areaOld = d3.svg.area()\r\n          .x((d) ->  d.xOld)\r\n          .y0((d) ->  d.yOld)\r\n          .y1((d) ->  y.scale()(0))\r\n\r\n        areaNew = d3.svg.area()\r\n          .x((d) ->  d.xNew)\r\n          .y0((d) ->  d.yNew)\r\n          .y1((d) ->  y.scale()(0))\r\n\r\n        areaBrush = d3.svg.area()\r\n          .x((d) ->  x.scale()(d.x))\r\n          .y0((d) ->  d.yNew)\r\n          .y1((d) ->  y.scale()(0))\r\n\r\n        layers = this.selectAll(\".wk-chart-layer\")\r\n          .data(_layout, (d) -> d.key)\r\n        enter = layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        enter.append('path')\r\n          .attr('class','wk-chart-area-path')\r\n          .style('stroke', (d) -> d.color)\r\n          .style('fill', (d) -> d.color)\r\n          .style('opacity', 0)\r\n          .style('pointer-events', 'none')\r\n\r\n        layers.select('.wk-chart-area-path').attr('transform', \"translate(#{offset})\")\r\n          .attr('d', (d) -> areaOld(d.value))\r\n          .transition().duration(options.duration)\r\n            .attr('d', (d) -> areaNew(d.value))\r\n            .style('opacity', 0.7).style('pointer-events', 'none')\r\n        layers.exit().transition().duration(options.duration)\r\n          .style('opacity', 0)\r\n          .remove()\r\n\r\n        _dataOld = data\r\n        _pathValuesOld = _pathValuesNew\r\n\r\n      brush = (axis, idxRange) ->\r\n        layers = this.select('.wk-chart-area-path')\r\n        if axis.isOrdinal()\r\n          layers.attr('d', (d) -> areaBrush(d.value.slice(idxRange[0],idxRange[1] + 1)))\r\n        else\r\n          layers.attr('d', (d) -> areaBrush(d.value))\r\n\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.markerScale(_scaleList.x)\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n        _tooltip.on \"moveData.#{_id}\", ttMoveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttMoveMarker\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', brush\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n\r\n  }","###*\r\n  @ngdoc layout\r\n  @name areaStacked\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a horizontally stacked area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=total]\r\n  @usesDimension color [type=category20]\r\n###\r\n\r\nangular.module('wk.chart').directive 'areaStacked', ($log, utils, tooltipUtils) ->\r\n  stackedAreaCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      stack = d3.layout.stack()\r\n      offset = 'zero'\r\n      layers = null\r\n      _showMarkers = false\r\n      layerKeys = []\r\n      layerData = []\r\n      layoutNew = []\r\n      layoutOld = []\r\n      layerKeysOld = []\r\n      area = undefined\r\n      deletedSucc = {}\r\n      addedPred = {}\r\n      _tooltip = undefined\r\n      _ttHighlight = undefined\r\n      _circles = undefined\r\n      _scaleList = {}\r\n      scaleY = undefined\r\n      offs = 0\r\n      _id = 'areaStacked' + stackedAreaCntr++\r\n\r\n      #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n      ttMoveData = (idx) ->\r\n        ttLayers = layerData.map((l) -> {name:l.key, value:_scaleList.y.formatValue(l.layer[idx].yy), color: {'background-color': l.color}})\r\n        @headerName = _scaleList.x.axisLabel()\r\n        @headerValue = _scaleList.x.formatValue(layerData[0].layer[idx].x)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      ttMoveMarker = (idx) ->\r\n        _circles = this.selectAll(\".wk-chart-marker-#{_id}\").data(layerData, (d) -> d.key)\r\n        _circles.enter().append('g').attr('class',\"wk-chart-marker-#{_id}\").call(tooltipUtils.createTooltipMarkers)\r\n        ###\r\n          .attr('r', if _showMarkers then 8 else 5)\r\n          .style('fill', (d)-> d.color)\r\n          .style('fill-opacity', 0.6)\r\n          .style('stroke', 'black')\r\n          .style('pointer-events','none')\r\n  ###\r\n        _circles.selectAll('circle').attr('cy', (d) -> scaleY(d.layer[idx].y + d.layer[idx].y0))\r\n        _circles.exit().remove()\r\n\r\n        this.attr('transform', \"translate(#{_scaleList.x.scale()(layerData[0].layer[idx].x)+offs})\")\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n\r\n      getLayerByKey = (key, layout) ->\r\n        for l in layout\r\n          if l.key is key\r\n            return l\r\n\r\n      stackLayout = stack.values((d)->d.layer).y((d) -> d.yy)\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n        #$log.log \"rendering Area Chart\"\r\n\r\n\r\n        layerKeys = y.layerKeys(data)\r\n        deletedSucc = utils.diff(layerKeysOld, layerKeys, 1)\r\n        addedPred = utils.diff(layerKeys, layerKeysOld, -1)\r\n\r\n        layerData = layerKeys.map((k) => {key: k, color:color.scale()(k), layer: data.map((d) -> {x: x.value(d), yy: +y.layerValue(d,k), y0: 0, data:d})}) # yy: need to avoid overwriting by layout calc -> see stack y accessor\r\n        layoutNew = stackLayout(layerData)\r\n\r\n        offs = if x.isOrdinal() then x.scale().rangeBand() / 2 else 0\r\n\r\n        if _tooltip then _tooltip.data(data)\r\n\r\n        if not layers\r\n          layers = this.selectAll('.wk-chart-layer')\r\n\r\n        if offset is 'expand'\r\n          scaleY = y.scale().copy()\r\n          scaleY.domain([0, 1])\r\n        else scaleY = y.scale()\r\n\r\n        area = d3.svg.area()\r\n          .x((d) ->  x.scale()(d.x))\r\n          .y0((d) ->  scaleY(d.y0 + d.y))\r\n          .y1((d) ->  scaleY(d.y0))\r\n\r\n        layers = layers\r\n          .data(layoutNew, (d) -> d.key)\r\n\r\n        enter = layers.enter()\r\n          .append('path').attr('class', 'wk-chart-area-path')\r\n          .style('pointer-events', 'none')\r\n          .style('opacity', 0)\r\n        if layoutOld.length > 0\r\n          enter.attr('d', (d) -> if addedPred[d.key] then getLayerByKey(addedPred[d.key], layoutOld).path else area(d.layer.map((p) ->  {x: p.x, y: 0, y0: 0})))\r\n\r\n        layers\r\n          .style('fill', (d, i) -> color.scale()(d.key))\r\n          .style('stroke', (d, i) -> color.scale()(d.key))\r\n          .attr('transform', \"translate(#{offs})\")\r\n          .transition().duration(options.duration)\r\n            .attr('d', (d) -> area(d.layer))\r\n            .style('opacity', 1)\r\n\r\n        layers.exit().transition().duration(options.duration)\r\n          .attr('d', (d) ->\r\n            succ = deletedSucc[d.key]\r\n            if succ then area(getLayerByKey(succ, layoutNew).layer.map((p) -> {x: p.x, y: 0, y0: p.y0})) else area(layoutNew[layoutNew.length - 1].layer.map((p) -> {x: p.x, y: 0, y0: p.y0 + p.y}))\r\n          )\r\n          .remove()\r\n\r\n        layoutOld = layoutNew.map((d) -> {key: d.key, path: area(d.layer.map((p) -> {x: p.x, y: 0, y0: p.y + p.y0}))})\r\n        layerKeysOld = layerKeys\r\n\r\n      brush = (axis, idxRange) ->\r\n        layers = this.selectAll(\".wk-chart-area-path\")\r\n        layers\r\n          .attr('d', (d) -> area(d.layer))\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('total').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.markerScale(_scaleList.x)\r\n        _tooltip.on \"enter.#{_id}\", ttMoveData\r\n        _tooltip.on \"moveData.#{_id}\", ttMoveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttMoveMarker\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      ###*\r\n          @ngdoc attr\r\n          @name areaStacked#areaStacked\r\n          @values zero, silhouette, expand, wiggle\r\n          @param [areaStacked=zero] {string} Defines how the areas are stacked.\r\n          For a description of the stacking algorithms please see [d3 Documentation on Stack Layout](https://github.com/mbostock/d3/wiki/Stack-Layout#offset)\r\n      ###\r\n      attrs.$observe 'areaStacked', (val) ->\r\n        if val in ['zero', 'silhouette', 'expand', 'wiggle']\r\n          offset = val\r\n        else\r\n          offset = \"zero\"\r\n        stack.offset(offset)\r\n        host.lifeCycle().update()\r\n\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n  }\r\n\r\n#TODO implement enter / exit animations like in line\r\n#TODO implement external brushing optimizations","###*\r\n  @ngdoc layout\r\n  @name areaStackedVertical\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=total] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n\r\n###\r\nangular.module('wk.chart').directive 'areaStackedVertical', ($log, utils, tooltipUtils) ->\r\n  areaStackedVertCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      stack = d3.layout.stack()\r\n      offset = 'zero'\r\n      layers = null\r\n      _showMarkers = false\r\n      layerKeys = []\r\n      layerData = []\r\n      layoutNew = []\r\n      layoutOld = []\r\n      layerKeysOld = []\r\n      area = undefined\r\n      deletedSucc = {}\r\n      addedPred = {}\r\n      _tooltip = undefined\r\n      _ttHighlight = undefined\r\n      _circles = undefined\r\n      _scaleList = {}\r\n      scaleX = undefined\r\n      offs = 0\r\n      _id = 'area-stacked-vert' + areaStackedVertCntr++\r\n\r\n      #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n      ttMoveData = (idx) ->\r\n        ttLayers = layerData.map((l) -> {name:l.key, value:_scaleList.x.formatValue(l.layer[idx].xx), color: {'background-color': l.color}})\r\n        @headerName = _scaleList.y.axisLabel()\r\n        @headerValue = _scaleList.y.formatValue(layerData[0].layer[idx].yy)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      ttMoveMarker = (idx) ->\r\n        _circles = this.selectAll(\".wk-chart-marker-#{_id}\").data(layerData, (d) -> d.key)\r\n        _circles.enter().append('g').attr('class',\"wk-chart-marker-#{_id}\").call(tooltipUtils.createTooltipMarkers)\r\n        _circles.selectAll('circle').attr('cx', (d) -> scaleX(d.layer[idx].y + d.layer[idx].y0))  # weird!!! however, the data is for a horizontal chart which gets transformed\r\n        _circles.exit().remove()\r\n\r\n        this.attr('transform', \"translate(0,#{_scaleList.y.scale()(layerData[0].layer[idx].yy)+offs})\")\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n\r\n      getLayerByKey = (key, layout) ->\r\n        for l in layout\r\n          if l.key is key\r\n            return l\r\n\r\n      layout = stack.values((d)->d.layer).y((d) -> d.xx)\r\n\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n      ###\r\n      prepData = (x,y,color) ->\r\n\r\n        layoutOld = layoutNew.map((d) -> {key: d.key, path: area(d.layer.map((p) -> {x: p.x, y: 0, y0: p.y + p.y0}))})\r\n        layerKeysOld = layerKeys\r\n\r\n        layerKeys = y.layerKeys(@)\r\n        layerData = layerKeys.map((k) => {key: k, color:color.scale()(k), layer: @map((d) -> {x: x.value(d), yy: +y.layerValue(d,k), y0: 0})}) # yy: need to avoid overwriting by layout calc -> see stack y accessor\r\n        #layoutNew = layout(layerData)\r\n\r\n        deletedSucc = utils.diff(layerKeysOld, layerKeys, 1)\r\n        addedPred = utils.diff(layerKeys, layerKeysOld, -1)\r\n      ###\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n        #$log.log \"rendering Area Chart\"\r\n\r\n\r\n        layerKeys = x.layerKeys(data)\r\n        deletedSucc = utils.diff(layerKeysOld, layerKeys, 1)\r\n        addedPred = utils.diff(layerKeys, layerKeysOld, -1)\r\n\r\n        layerData = layerKeys.map((k) => {key: k, color:color.scale()(k), layer: data.map((d) -> {yy: y.value(d), xx: +x.layerValue(d,k), y0: 0, data:d})}) # yy: need to avoid overwriting by layout calc -> see stack y accessor\r\n        layoutNew = layout(layerData)\r\n\r\n        offs = if y.isOrdinal() then y.scale().rangeBand() / 2 else 0\r\n\r\n        if _tooltip then _tooltip.data(data)\r\n\r\n        if not layers\r\n          layers = this.selectAll('.wk-chart-layer')\r\n\r\n        if offset is 'expand'\r\n          scaleX = x.scale().copy()\r\n          scaleX.domain([0, 1])\r\n        else scaleX = x.scale()\r\n\r\n        area = d3.svg.area()\r\n          .x((d) ->  y.scale()(d.yy))\r\n          .y0((d) ->  scaleX(d.y0 + d.y))\r\n          .y1((d) ->  scaleX(d.y0))\r\n\r\n        layers = layers\r\n          .data(layoutNew, (d) -> d.key)\r\n\r\n        enter = layers.enter()\r\n          .append('path').attr('class', 'wk-chart-area-path')\r\n          .style('pointer-events', 'none')\r\n          .style('opacity', 0)\r\n        if layoutOld.length > 0\r\n          enter.attr('d', (d) -> if addedPred[d.key] then getLayerByKey(addedPred[d.key], layoutOld).path else area(d.layer.map((p) ->  {yy: p.yy, y: 0, y0: 0})))\r\n\r\n        layers\r\n          .style('fill', (d, i) -> color.scale()(d.key))\r\n          .style('stroke', (d, i) -> color.scale()(d.key))\r\n          .attr('transform', \"rotate(90) scale(1,-1)\")\r\n          .transition().duration(options.duration)\r\n            .attr('d', (d) -> area(d.layer))\r\n            .style('opacity', 1)\r\n\r\n\r\n\r\n        layers.exit().transition().duration(options.duration)\r\n          .attr('d', (d) ->\r\n            succ = deletedSucc[d.key]\r\n            if succ then area(getLayerByKey(succ, layoutNew).layer.map((p) -> {yy: p.yy, y: 0, y0: p.y0})) else area(layoutNew[layoutNew.length - 1].layer.map((p) -> {yy: p.yy, y: 0, y0: p.y0 + p.y}))\r\n          )\r\n          .remove()\r\n\r\n        layoutOld = layoutNew.map((d) -> {key: d.key, path: area(d.layer.map((p) -> {yy: p.yy, y: 0, y0: p.y + p.y0}))})\r\n        layerKeysOld = layerKeys\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('x').domainCalc('total').resetOnNewData(true)\r\n        @getKind('y').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.markerScale(_scaleList.y)\r\n        _tooltip.on \"enter.#{_id}\", ttMoveData\r\n        _tooltip.on \"moveData.#{_id}\", ttMoveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttMoveMarker\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      ###*\r\n          @ngdoc attr\r\n          @name areaStackedVertical#areaStackedVertical\r\n          @values zero, silhouette, expand, wiggle\r\n          @param [areaStackedVertical=zero] {string} Defines how the areas are stacked.\r\n          For a description of the stacking algorithms please see [d3 Documentation on Stack Layout](https://github.com/mbostock/d3/wiki/Stack-Layout#offset)\r\n\r\n      ###\r\n      attrs.$observe 'areaStackedVertical', (val) ->\r\n        if val in ['zero', 'silhouette', 'expand', 'wiggle']\r\n          offset = val\r\n        else\r\n          offset = \"zero\"\r\n        stack.offset(offset)\r\n        host.lifeCycle().update()\r\n\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n  }\r\n\r\n#TODO implement enter / exit animations like in line\r\n#TODO implement external brushing optimizations","###*\r\n  @ngdoc layout\r\n  @name areaVertical\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'areaVertical', ($log, utils, tooltipUtils) ->\r\n  lineCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking s-line'\r\n      layerKeys = []\r\n      _layout = []\r\n      _dataOld = []\r\n      _pathValuesOld = []\r\n      _pathValuesNew = []\r\n      _pathArray = []\r\n      _tooltip = undefined\r\n      _ttHighlight = undefined\r\n      _circles = undefined\r\n      _scaleList = {}\r\n      _showMarkers = false\r\n      offset = 0\r\n      areaBrush = undefined\r\n      brushStartIdx = 0\r\n      _id = 'areaVertical' + lineCntr++\r\n\r\n      #--- Tooltip handlers --------------------------------------------------------------------------------------------\r\n\r\n      ttEnter = (idx) ->\r\n        _pathArray = _.toArray(_pathValuesNew)\r\n        ttMoveData.apply(this, [idx])\r\n\r\n      ttMoveData = (idx) ->\r\n        offs = idx + brushStartIdx\r\n        ttLayers = _pathArray.map((l) -> {name:l[offs].key, value:_scaleList.x.formatValue(l[offs].xv), color:{'background-color': l[offs].color}, yv:l[offs].yv})\r\n        @headerName = _scaleList.y.axisLabel()\r\n        @headerValue = _scaleList.y.formatValue(ttLayers[0].yv)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      ttMoveMarker = (idx) ->\r\n        offs = idx + brushStartIdx\r\n        _circles = this.selectAll(\".wk-chart-marker-#{_id}\").data(_pathArray, (d) -> d[offs].key)\r\n        _enter_group = _circles.enter().append('g').attr('class',\"wk-chart-marker-#{_id}\").call(tooltipUtils.createTooltipMarkers, offs)\r\n        _circles.selectAll('circle').attr('cx', (d) -> d[offs].x)\r\n        _circles.exit().remove()\r\n        o = if _scaleList.y.isOrdinal then _scaleList.y.scale().rangeBand() / 2 else 0\r\n        this.attr('transform', \"translate(0,#{_scaleList.y.scale()(_pathArray[0][offs].yv) + o})\") # need to compute form scale because of brushing\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n\r\n        if y.isOrdinal()\r\n          mergedY = utils.mergeSeriesUnsorted(y.value(_dataOld), y.value(data))\r\n        else\r\n          mergedY = utils.mergeSeriesSorted(y.value(_dataOld), y.value(data))\r\n        _layerKeys = x.layerKeys(data)\r\n        _layout = []\r\n        _pathValuesNew = {}\r\n\r\n        #_layout = layerKeys.map((key) => {key:key, color:color.scale()(key), value:data.map((d)-> {y:y.value(d),x:x.layerValue(d, key)})})\r\n\r\n        for key in _layerKeys\r\n          _pathValuesNew[key] = data.map((d)-> {y:y.map(d), x:x.scale()(x.layerValue(d, key)), yv:y.value(d), xv:x.layerValue(d,key), key:key, color:color.scale()(key), data:d})\r\n\r\n          layer = {key:key, color:color.scale()(key), value:[]}\r\n          # find starting value for old\r\n          i = 0\r\n          while i < mergedY.length\r\n            if mergedY[i][0] isnt undefined\r\n              oldFirst = _pathValuesOld[key][mergedY[i][0]]\r\n              break\r\n            i++\r\n\r\n          while i < mergedY.length\r\n            if mergedY[i][1] isnt undefined\r\n              newFirst = _pathValuesNew[key][mergedY[i][1]]\r\n              break\r\n            i++\r\n\r\n          for val, i in mergedY\r\n            v = {color:layer.color, y:val[2]}\r\n            # set x and y values for old values. If there is a added value, maintain the last valid position\r\n            if val[1] is undefined #ie an old value is deleted, maintain the last new position\r\n              v.yNew = newFirst.y\r\n              v.xNew = newFirst.x # animate to the predesessors new position\r\n              v.deleted = true\r\n            else\r\n              v.yNew = _pathValuesNew[key][val[1]].y\r\n              v.xNew = _pathValuesNew[key][val[1]].x\r\n              newFirst = _pathValuesNew[key][val[1]]\r\n              v.deleted = false\r\n\r\n            if _dataOld.length > 0\r\n              if  val[0] is undefined # ie a new value has been added\r\n                v.yOld = oldFirst.y\r\n                v.xOld = oldFirst.x # start x-animation from the predecessors old position\r\n              else\r\n                v.yOld = _pathValuesOld[key][val[0]].y\r\n                v.xOld = _pathValuesOld[key][val[0]].x\r\n                oldFirst = _pathValuesOld[key][val[0]]\r\n            else\r\n              v.xOld = v.xNew\r\n              v.yOld = v.yNew\r\n\r\n\r\n            layer.value.push(v)\r\n\r\n          _layout.push(layer)\r\n\r\n        offset = if y.isOrdinal() then y.scale().rangeBand() / 2 else 0\r\n\r\n        if _tooltip then _tooltip.data(data)\r\n\r\n        areaOld = d3.svg.area()    # tricky. Draw this like a vertical chart and then rotate and position it.\r\n          .x((d) -> options.width - d.yOld)\r\n          .y0((d) ->  d.xOld)\r\n          .y1((d) ->  x.scale()(0))\r\n\r\n        areaNew = d3.svg.area()    # tricky. Draw this like a vertical chart and then rotate and position it.\r\n          .x((d) -> options.width - d.yNew)\r\n          .y0((d) ->  d.xNew)\r\n          .y1((d) ->  x.scale()(0))\r\n\r\n        areaBrush = d3.svg.area()    # tricky. Draw this like a vertical chart and then rotate and position it.\r\n          .x((d) -> options.width - y.scale()(d.y))\r\n          .y0((d) ->  d.xNew)\r\n          .y1((d) ->  x.scale()(0))\r\n\r\n        layers = this.selectAll(\".wk-chart-layer\")\r\n          .data(_layout, (d) -> d.key)\r\n        layers.enter().append('g')\r\n          .attr('class', \"wk-chart-layer\")\r\n          .append('path')\r\n          .attr('class','wk-chart-area-path')\r\n          .style('stroke', (d) -> d.color)\r\n          .style('fill', (d) -> d.color)\r\n          .style('opacity', 0)\r\n          .style('pointer-events', 'none')\r\n        layers.select('.wk-chart-area-path')\r\n          .attr('transform', \"translate(0,#{options.width + offset})rotate(-90)\") #rotate and position chart\r\n            .attr('d', (d) -> areaOld(d.value))\r\n            .transition().duration(options.duration)\r\n              .attr('d', (d) -> areaNew(d.value))\r\n              .style('opacity', 0.7).style('pointer-events', 'none')\r\n        layers.exit().transition().duration(options.duration)\r\n          .style('opacity', 0)\r\n          .remove()\r\n\r\n        _dataOld = data\r\n        _pathValuesOld = _pathValuesNew\r\n\r\n      brush = (axis, idxRange, width, height) ->\r\n        layers = this.selectAll(\".wk-chart-area-path\")\r\n        if axis.isOrdinal()\r\n          layers.attr('transform', \"translate(0,#{width + axis.scale().rangeBand() / 2})rotate(-90)\")\r\n          layers.attr('d', (d) ->  areaBrush(d.value.slice(idxRange[0], idxRange[1] + 1)))\r\n          brushStartIdx = idxRange[0]\r\n        else\r\n          layers.attr('d', (d) -> areaBrush(d.value))\r\n        #layers.call(markers, 0)\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.markerScale(_scaleList.y)\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n        _tooltip.on \"moveData.#{_id}\", ttMoveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttMoveMarker\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', brush\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n  }","###*\r\n  @ngdoc layout\r\n  @name bars\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a bar chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'bars', ($log, utils, barConfig, wkChartMargins)->\r\n  sBarCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: '^layout'\r\n\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n\r\n    _id = \"bars#{sBarCntr++}\"\r\n\r\n    bars = null\r\n    barPaddingOld = 0\r\n    barOuterPaddingOld = 0\r\n    _scaleList = {}\r\n    _selected = undefined\r\n\r\n    _merge = utils.mergeData()\r\n    _merge([]).key((d) -> d.key)\r\n\r\n    initial = true\r\n\r\n    config = _.clone(barConfig, true)\r\n\r\n    #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n    _tooltip = undefined\r\n\r\n    ttEnter = (data) ->\r\n      @headerName = _scaleList.y.axisLabel()\r\n      @headerValue = _scaleList.x.axisLabel()\r\n      @layers.push({name: _scaleList.color.formattedValue(data.data), value: _scaleList.x.formattedValue(data.data), color:{'background-color': _scaleList.color.map(data.data)}})\r\n\r\n    #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n    draw = (data, options, x, y, color) ->\r\n\r\n      if not bars\r\n        bars = @selectAll('.wk-chart-bars')\r\n      #$log.log \"rendering stacked-bar\"\r\n\r\n      barPadding = y.scale().rangeBand() / (1 - config.padding) * config.padding\r\n      barOuterPadding = y.scale().rangeBand() / (1 - config.outerPadding) * config.outerPadding\r\n\r\n      layout = data.map((d) -> {key:y.value(d), x:x.map(d), y:y.map(d), color:color.map(d), height:y.scale().rangeBand(y.value(d)), data:d})\r\n\r\n      _merge(layout).first({y:options.height + barPaddingOld / 2 - barOuterPadding}).last({y:0, height:barOuterPaddingOld - barPaddingOld / 2})  #y.scale().range()[y.scale().range().length-1]\r\n\r\n      bars = bars.data(layout, (d) -> d.key)\r\n\r\n      enter = bars.enter().append('g').attr('class','wk-chart-bar')\r\n        .attr('transform', (d)-> \"translate(0, #{if initial then d.y else _merge.addedPred(d).y - barPaddingOld / 2}) scale(1, #{if initial then 1 else 0})\")\r\n      enter.append('rect')\r\n        .attr('class', 'wk-chart-rect wk-chart-selectable')\r\n        #.attr('y', (d) -> if initial then d.y else _merge.addedPred(d).y - barPaddingOld / 2)\r\n        .attr('height', (d) -> d.height)\r\n        .style('opacity', if initial then 0 else 1)\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n      enter.append('text')\r\n        .attr('class':'wk-chart-data-label')\r\n        .attr('y', (d) -> d.height / 2 )\r\n        .attr('x', (d) -> d.x + wkChartMargins.dataLabelPadding.hor)\r\n        .attr({dy: '0.35em', 'text-anchor':'start'})\r\n        .style({opacity: 0})\r\n\r\n      bars.transition().duration(options.duration)\r\n        .attr('transform', (d) -> \"translate(0, #{d.y}) scale(1,1)\")\r\n      bars.select('rect')\r\n        .style('fill', (d) -> d.color)\r\n        .transition().duration(options.duration)\r\n          .attr('height', (d) -> d.height)\r\n          .attr('width', (d) -> Math.abs(x.scale()(0) - d.x))\r\n          .style('opacity', 1)\r\n      bars.select('text')\r\n        .text((d) -> x.formattedValue(d.data))\r\n        .transition().duration(options.duration)\r\n          .attr('y', (d) -> d.height / 2)\r\n          .attr('x', (d) -> d.x + wkChartMargins.dataLabelPadding.hor)\r\n          .style('opacity', if host.showDataLabels() then 1 else 0)\r\n\r\n\r\n      bars.exit()\r\n        .transition().duration(options.duration)\r\n          .attr('transform', (d) -> \"translate(0,#{_merge.deletedSucc(d).y + _merge.deletedSucc(d).height + barPadding / 2}) scale(1,0)\")\r\n          .attr('height', 0)\r\n          .remove()\r\n\r\n      initial = false\r\n\r\n      barPaddingOld = barPadding\r\n      barOuterPaddingOld = barOuterPadding\r\n\r\n    brush = (axis, idxRange) ->\r\n      bars\r\n        .attr('transform',(d) -> \"translate(0, #{if (y = axis.scale()(d.key)) >= 0 then y else -1000})\")\r\n        .selectAll('.wk-chart-rect')\r\n        .attr('height', (d) -> axis.scale().rangeBand())\r\n      bars.selectAll('text')\r\n        .attr('y',axis.scale().rangeBand() / 2)\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'y', 'color'])\r\n      @getKind('x').domainCalc('max').resetOnNewData(true)\r\n      @getKind('y').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n      _tooltip = host.behavior().tooltip\r\n      _selected = host.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n    host.lifeCycle().on 'drawChart', draw\r\n    host.lifeCycle().on 'brushDraw', brush\r\n\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name bars#padding\r\n      @values true, false, [padding, outerPadding]\r\n      @description bla bla\r\n      @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n    ###\r\n    attrs.$observe 'padding', (val) ->\r\n      if val is 'false'\r\n        config.padding = 0\r\n        config.outerPadding = 0\r\n      else if val is 'true'\r\n        config = _.clone(barConfig, true)\r\n      else\r\n        values = utils.parseList(val)\r\n        if values\r\n          if values.length is 1\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[0]/100\r\n          if values.length is 2\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[1]/100\r\n      _scaleList.y.rangePadding(config)\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name bars#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        host.showDataLabels(false)\r\n      else if val is 'true' or val is \"\"\r\n        host.showDataLabels('x')\r\n      host.lifeCycle().update()\r\n  }","###*\r\n  @ngdoc layout\r\n  @name barClustered\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a clustered bar layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'barClustered', ($log, utils, barConfig)->\r\n\r\n  clusteredBarCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      _id = \"clusteredBar#{clusteredBarCntr++}\"\r\n\r\n      layers = null\r\n      clusterY = undefined\r\n\r\n      _merge = utils.mergeData().key((d) -> d.key)\r\n      _mergeLayers = utils.mergeData().key((d) -> d.layerKey)\r\n\r\n      barPaddingOld = 0\r\n      barOuterPaddingOld = 0\r\n      config = _.clone(barConfig, true)\r\n\r\n      initial = true\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n\r\n      ttEnter = (data) ->\r\n        ttLayers = data.layers.map((l) -> {name:l.layerKey, value:_scaleList.x.formatValue(l.value), color: {'background-color': l.color}})\r\n        @headerName = _scaleList.y.axisLabel()\r\n        @headerValue = _scaleList.y.formatValue(data.key)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n        #$log.info \"rendering clustered-bar\"\r\n\r\n        barPadding = y.scale().rangeBand() / (1 - config.padding) * config.padding\r\n        barOuterPadding = y.scale().rangeBand() / (1 - config.outerPadding) * config.outerPadding\r\n\r\n        # map data to the right format for rendering\r\n        layerKeys = x.layerKeys(data)\r\n\r\n        clusterY = d3.scale.ordinal().domain(x.layerKeys(data)).rangeBands([0, y.scale().rangeBand()], 0, 0)\r\n\r\n        cluster = data.map((d) -> l = {\r\n          key:y.value(d), data:d, y:y.map(d), height: y.scale().rangeBand(y.value(d))\r\n          layers: layerKeys.map((k) -> {layerKey: k, color:color.scale()(k), key:y.value(d), value: d[k], y:clusterY(k), x: x.scale()(d[k]), width:x.scale()(d[k]), height:clusterY.rangeBand(k)})}\r\n        )\r\n\r\n        _merge(cluster).first({y:options.height + barPaddingOld / 2 - barOuterPadding, height:y.scale().rangeBand()}).last({y:0, height:barOuterPaddingOld - barPaddingOld / 2})\r\n        _mergeLayers(cluster[0].layers).first({y:0, height:0}).last({y:cluster[0].height, height:0})\r\n\r\n        if not layers\r\n          layers = @selectAll('.wk-chart-layer')\r\n\r\n        layers = layers.data(cluster, (d) -> d.key)\r\n\r\n        layers.enter().append('g')\r\n          .attr('class', 'wk-chart-layer').call(_tooltip.tooltip)\r\n          .attr('transform', (d)->\r\n            null\r\n            \"translate(0, #{if initial then d.y else _merge.addedPred(d).y - barPaddingOld / 2}) scale(1,#{if initial then 1 else 0})\")\r\n          .style('opacity', if initial then 0 else 1)\r\n\r\n        layers\r\n          .transition().duration(options.duration)\r\n            .attr('transform',(d) -> \"translate(0,#{d.y}) scale(1,1)\")\r\n            .style('opacity', 1)\r\n\r\n        layers.exit()\r\n          .transition().duration(options.duration)\r\n            .attr('transform',(d) -> \"translate(0, #{_merge.deletedSucc(d).y + _merge.deletedSucc(d).height + barPadding / 2}) scale(1,0)\")\r\n            .remove()\r\n\r\n        bars = layers.selectAll('.wk-chart-bar')\r\n          .data(\r\n            (d) -> d.layers\r\n          , (d) -> d.layerKey + '|' + d.key\r\n          )\r\n\r\n        bars.enter().append('rect')\r\n          .attr('class', 'wk-chart-bar wk-chart-selectable')\r\n          .attr('y', (d) -> if initial then d.y else _mergeLayers.addedPred(d).y + _mergeLayers.addedPred(d).height)\r\n          .attr('height', (d) -> if initial then d.height else 0)\r\n          .attr('x', x.scale()(0))\r\n\r\n\r\n        bars.style('fill', (d) -> color.scale()(d.layerKey)).transition().duration(options.duration)\r\n          .attr('width', (d) -> d.width)\r\n          .attr('y', (d) -> d.y)\r\n          .attr('x', (d) -> Math.min(x.scale()(0), d.x))\r\n          .attr('height', (d) -> Math.abs(d.height))\r\n\r\n        bars.exit()\r\n          .transition().duration(options.duration)\r\n            #.attr('width',0)\r\n            .attr('height', 0)\r\n            .attr('y', (d) -> _mergeLayers.deletedSucc(d).y)\r\n            .remove()\r\n\r\n        initial = false\r\n        barPaddingOld = barPadding\r\n        barOuterPaddingOld = barOuterPadding\r\n\r\n      drawBrush = (axis, idxRange) ->\r\n        clusterY.rangeBands([0,axis.scale().rangeBand()], 0, 0)\r\n        height = clusterY.rangeBand()\r\n        layers\r\n          .attr('transform',(d) -> \"translate(0, #{if (y = axis.scale()(d.key)) >= 0 then y else -1000})\")\r\n          .selectAll('.wk-chart-bar')\r\n            .attr('height', height)\r\n            .attr('y', (d) -> clusterY(d.layerKey))\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @getKind('x').domainCalc('max').resetOnNewData(true)\r\n        @getKind('y').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n        @layerScale('color')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', drawBrush\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name barClustered#padding\r\n        @values true, false, [padding, outerPadding]\r\n        @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n      ###\r\n      attrs.$observe 'padding', (val) ->\r\n        if val is 'false'\r\n          config.padding = 0\r\n          config.outerPadding = 0\r\n        else if val is 'true'\r\n          config = _.clone(barConfig, true)\r\n        else\r\n          values = utils.parseList(val)\r\n          if values\r\n            if values.length is 1\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[0]/100\r\n            if values.length is 2\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[1]/100\r\n        _scaleList.y.rangePadding(config)\r\n        host.lifeCycle().update()\r\n  }\r\n\r\n","###*\r\n  @ngdoc layout\r\n  @name barStacked\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @description\r\n\r\n  draws a stacked bar chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=total] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'barStacked', ($log, utils, barConfig) ->\r\n\r\n  stackedBarCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking Stacked bar'\r\n\r\n      _id = \"stackedBar#{stackedBarCntr++}\"\r\n\r\n      layers = null\r\n\r\n      stack = []\r\n      _tooltip = ()->\r\n      _scaleList = {}\r\n      _selected = undefined\r\n      barPaddingOld = 0\r\n      barOuterPaddingOld = 0\r\n\r\n      _merge = utils.mergeData().key((d) -> d.key)\r\n      _mergeLayers = utils.mergeData()\r\n\r\n      initial = true\r\n\r\n      config = _.clone(barConfig, true)\r\n\r\n      ttEnter = (data) ->\r\n        ttLayers = data.layers.map((l) -> {name:l.layerKey, value:_scaleList.y.formatValue(l.value), color: {'background-color': l.color}})\r\n        @headerName = _scaleList.x.axisLabel()\r\n        @headerValue = _scaleList.x.formatValue(data.key)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color, size, shape) ->\r\n\r\n        if not layers\r\n          layers = @selectAll(\".wk-chart-layer\")\r\n        #$log.debug \"drawing stacked-bar\"\r\n\r\n        barPadding = y.scale().rangeBand() / (1 - config.padding) * config.padding\r\n        barOuterPadding = y.scale().rangeBand() / (1 - config.outerPadding) * config.outerPadding\r\n\r\n        layerKeys = x.layerKeys(data)\r\n\r\n        stack = []\r\n        for d in data\r\n          x0 = 0\r\n          l = {key:y.value(d), layers:[], data:d, y:y.map(d), height:if y.scale().rangeBand then y.scale().rangeBand() else 1}\r\n          if l.y isnt undefined\r\n            l.layers = layerKeys.map((k) ->\r\n              layer = {layerKey:k, key:l.key, value:d[k], width: x.scale()(+d[k]), height: (if y.scale().rangeBand then y.scale().rangeBand() else 1), x: x.scale()(+x0), color: color.scale()(k)}\r\n              x0 += +d[k]\r\n              return layer\r\n            )\r\n            stack.push(l)\r\n\r\n        _merge(stack).first({y:options.height + barPaddingOld / 2 - barOuterPadding, height:0}).last({y:0, height:barOuterPaddingOld - barPaddingOld / 2})\r\n        _mergeLayers(layerKeys)\r\n\r\n        layers = layers\r\n          .data(stack, (d)-> d.key)\r\n\r\n        layers.enter().append('g')\r\n          .attr('class', \"wk-chart-layer\").attr('transform',(d) -> \"translate(0,#{if initial then d.y else _merge.addedPred(d).y - barPaddingOld / 2}) scale(1,#{if initial then 1 else 0})\")\r\n          .style('opacity',if initial then 0 else 1)\r\n          .call(_tooltip.tooltip)\r\n\r\n        layers\r\n          .transition().duration(options.duration)\r\n          .attr('transform',(d) -> return \"translate(0, #{d.y}) scale(1,1)\").style('opacity', 1)\r\n\r\n        layers.exit()\r\n          .transition().duration(options.duration)\r\n          .attr('transform',(d) -> \"translate(0,#{_merge.deletedSucc(d).y + _merge.deletedSucc(d).height + barPadding / 2}) scale(1,0)\")\r\n          .remove()\r\n\r\n        bars = layers.selectAll('.wk-chart-bar')\r\n          .data(\r\n            (d) -> d.layers\r\n          , (d) -> d.layerKey + '|' + d.key\r\n          )\r\n\r\n        bars.enter().append('rect')\r\n          .attr('class', 'wk-chart-bar wk-chart-selectable')\r\n          .attr('x', (d) ->\r\n            if _merge.prev(d.key)\r\n              idx = layerKeys.indexOf(_mergeLayers.addedPred(d.layerKey))\r\n              if idx >= 0 then _merge.prev(d.key).layers[idx].x + _merge.prev(d.key).layers[idx].width else x.scale()(0)\r\n            else\r\n              d.x\r\n          )\r\n          .attr('width', (d) -> if _merge.prev(d.key) then 0 else d.width)\r\n          .attr('height',(d) -> d.height)\r\n          .call(_selected)\r\n\r\n        bars.style('fill', (d) -> d.color)\r\n          .transition().duration(options.duration)\r\n            .attr('x', (d) -> d.x)\r\n            .attr('width', (d) -> d.width)\r\n            .attr('height', (d) -> d.height)\r\n\r\n        bars.exit()\r\n          .transition().duration(options.duration)\r\n          .attr('x', (d) ->\r\n            idx = layerKeys.indexOf(_mergeLayers.deletedSucc(d.layerKey))\r\n            if idx >= 0 then _merge.current(d.key).layers[idx].x else _merge.current(d.key).layers[layerKeys.length - 1].x + _merge.current(d.key).layers[layerKeys.length - 1].width\r\n          )\r\n          .attr('width', 0)\r\n          .remove()\r\n\r\n        initial = false\r\n        barPaddingOld = barPadding\r\n        barOuterPaddingOld = barOuterPadding\r\n\r\n      drawBrush = (axis, idxRange) ->\r\n        layers\r\n          .attr('transform',(d) -> \"translate(0, #{if (x = axis.scale()(d.key)) >= 0 then x else -1000})\")\r\n          .selectAll('.wk-chart-bar')\r\n            .attr('height', (d) -> axis.scale().rangeBand())\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @getKind('x').domainCalc('total').resetOnNewData(true)\r\n        @getKind('y').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n        @layerScale('color')\r\n        _tooltip = host.behavior().tooltip\r\n        _selected = host.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', drawBrush\r\n\r\n      ###*\r\n          @ngdoc attr\r\n          @name barStacked#padding\r\n          @values true, false, [padding, outerPadding]\r\n          @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n      ###\r\n      attrs.$observe 'padding', (val) ->\r\n        if val is 'false'\r\n          config.padding = 0\r\n          config.outerPadding = 0\r\n        else if val is 'true'\r\n          config = _.clone(barConfig, true)\r\n        else\r\n          values = utils.parseList(val)\r\n          if values\r\n            if values.length is 1\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[0]/100\r\n            if values.length is 2\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[1]/100\r\n        _scaleList.y.rangePadding(config)\r\n        host.lifeCycle().update()\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name bubble\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a bubble chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear]\r\n  @usesDimension color [type=category20]\r\n  @usesDimension size [type=linear]\r\n###\r\nangular.module('wk.chart').directive 'bubble', ($log, utils) ->\r\n  bubbleCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      #$log.debug 'bubbleChart linked'\r\n      layout = controller.me\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n      _id = 'bubble' + bubbleCntr++\r\n      _selected = undefined\r\n\r\n      #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n      ttEnter = (data) ->\r\n        for sName, scale of _scaleList\r\n          @layers.push({name: scale.axisLabel(), value: scale.formattedValue(data), color: if sName is 'color' then {'background-color':scale.map(data)} else undefined})\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color, size) ->\r\n\r\n        bubbles = @selectAll('.wk-chart-bubble').data(data, (d) -> color.value(d))\r\n        bubbles.enter().append('circle').attr('class','wk-chart-bubble wk-chart-selectable')\r\n          .style('opacity', 0)\r\n          .call(_tooltip.tooltip)\r\n          .call(_selected)\r\n        bubbles\r\n          .style('fill', (d) -> color.map(d))\r\n          .transition().duration(options.duration)\r\n            .attr({\r\n              r:  (d) -> size.map(d)\r\n              cx: (d) -> x.map(d)\r\n              cy: (d) -> y.map(d)\r\n            })\r\n            .style('opacity', 1)\r\n        bubbles.exit()\r\n          .transition().duration(options.duration)\r\n            .style('opacity',0).remove()\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color', 'size'])\r\n        @getKind('y').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true)\r\n        _tooltip = layout.behavior().tooltip\r\n        _selected = layout.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      layout.lifeCycle().on 'drawChart', draw\r\n\r\n  }\r\n\r\n  #TODO verify and test custom tooltips behavior","###*\r\n  @ngdoc layout\r\n  @name column\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a column chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'column', ($log, utils, barConfig, wkChartMargins)->\r\n  sBarCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: '^layout'\r\n\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n\r\n    _id = \"column#{sBarCntr++}\"\r\n\r\n    columns = null\r\n    _scaleList = {}\r\n    _selected = undefined\r\n    _merge = utils.mergeData()\r\n    _merge([]).key((d) -> d.key)\r\n    initial = true\r\n    barPaddingOld = 0\r\n    barOuterPaddingOld = 0\r\n\r\n    config = _.clone(barConfig, true)\r\n\r\n    #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n    _tooltip = undefined\r\n\r\n    ttEnter = (data) ->\r\n      @headerName = _scaleList.x.axisLabel()\r\n      @headerValue = _scaleList.y.axisLabel()\r\n      @layers.push({name: _scaleList.color.formattedValue(data.data), value: _scaleList.y.formattedValue(data.data), color:{'background-color': _scaleList.color.map(data.data)}})\r\n\r\n    #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n    draw = (data, options, x, y, color) ->\r\n\r\n      if not columns\r\n        columns = @selectAll('.wk-chart-column')\r\n      #$log.log \"rendering stacked-bar\"\r\n\r\n      barPadding = x.scale().rangeBand() / (1 - config.padding) * config.padding\r\n      barOuterPadding = x.scale().rangeBand() / (1 - config.outerPadding) * config.outerPadding\r\n\r\n      layout = data.map((d) -> {data:d, key:x.value(d), x:x.map(d), y:Math.min(y.scale()(0), y.map(d)), color:color.map(d), width:x.scale().rangeBand(x.value(d)), height:Math.abs(y.scale()(0) - y.map(d))})\r\n\r\n      _merge(layout).first({x:0, width:0}).last({x:options.width + barPadding/2 - barOuterPaddingOld, width: barOuterPadding})\r\n\r\n\r\n      columns = columns.data(layout, (d) -> d.key)\r\n\r\n      enter = columns.enter().append('g').attr('class','wk-chart-column')\r\n        .attr('transform', (d,i) -> \"translate(#{if initial then d.x else _merge.addedPred(d).x  + _merge.addedPred(d).width + if i then barPaddingOld / 2 else barOuterPaddingOld},#{d.y}) scale(#{if initial then 1 else 0},1)\")\r\n      enter.append('rect')\r\n        .attr('class', 'wk-chart-rect wk-chart-selectable')\r\n        .attr('height', (d) -> d.height)\r\n        .attr('width', (d) -> d.width)\r\n        .style('fill',(d) -> d.color)\r\n        .style('opacity', if initial then 0 else 1)\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n      enter.append('text')\r\n        .attr('class', 'wk-chart-data-label')\r\n        .attr('x', (d) -> d.width / 2)\r\n        .attr('y', - wkChartMargins.dataLabelPadding.vert)\r\n        .attr({'text-anchor':'middle'})\r\n        .style({opacity: 0})\r\n\r\n      columns.transition().duration(options.duration)\r\n        .attr(\"transform\", (d) -> \"translate(#{d.x}, #{d.y}) scale(1,1)\")\r\n      columns.select('rect').transition().duration(options.duration)\r\n        .attr('width', (d) -> d.width)\r\n        .attr('height', (d) -> d.height)\r\n        .style('opacity',1)\r\n      columns.select('text')\r\n        .text((d) -> y.formattedValue(d.data))\r\n        .transition().duration(options.duration)\r\n          .attr('x', (d) -> d.width / 2)\r\n          .style('opacity', if host.showDataLabels() then 1 else 0)\r\n\r\n      columns.exit().transition().duration(options.duration)\r\n        .attr('transform', (d) -> \"translate(#{_merge.deletedSucc(d).x - barPadding / 2},#{d.y}) scale(0,1)\")\r\n        .remove()\r\n\r\n      initial = false\r\n      barPaddingOld = barPadding\r\n      barOuterPaddingOld = barOuterPadding\r\n\r\n    brush = (axis, idxRange) ->\r\n      columns\r\n        .attr('transform',(d) -> \"translate(#{if (x = axis.scale()(d.key)) >= 0 then x else -1000}, #{d.y})\")\r\n        .selectAll('.wk-chart-rect')\r\n        .attr('width', (d) -> axis.scale().rangeBand())\r\n      columns.selectAll('text')\r\n          .attr('x',axis.scale().rangeBand() / 2)\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'y', 'color'])\r\n      @getKind('y').domainCalc('max').resetOnNewData(true)\r\n      @getKind('x').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n      _tooltip = host.behavior().tooltip\r\n      _selected = host.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n    host.lifeCycle().on 'drawChart', draw\r\n    host.lifeCycle().on 'brushDraw', brush\r\n    ###*\r\n    @ngdoc attr\r\n      @name column#padding\r\n      @values true, false, [padding, outerPadding]\r\n      @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n    ###\r\n    attrs.$observe 'padding', (val) ->\r\n      if val is 'false'\r\n        config.padding = 0\r\n        config.outerPadding = 0\r\n      else if val is 'true'\r\n        config = _.clone(barConfig, true)\r\n      else\r\n        values = utils.parseList(val)\r\n        if values\r\n          if values.length is 1\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[0]/100\r\n          if values.length is 2\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[1]/100\r\n      _scaleList.x.rangePadding(config)\r\n      host.lifeCycle().update()\r\n    ###*\r\n        @ngdoc attr\r\n        @name column#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        host.showDataLabels(false)\r\n      else if val is 'true' or val is \"\"\r\n        host.showDataLabels('y')\r\n      host.lifeCycle().update()\r\n\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name columnClustered\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a clustered column chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'columnClustered', ($log, utils, barConfig)->\r\n\r\n  clusteredBarCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      _id = \"clusteredColumn#{clusteredBarCntr++}\"\r\n\r\n      layers = null\r\n\r\n      _merge = utils.mergeData().key((d) -> d.key)\r\n      _mergeLayers = utils.mergeData().key((d) -> d.layerKey)\r\n\r\n      barPaddingOld = 0\r\n      barOuterPaddingOld = 0\r\n\r\n      config = _.clone(barConfig, true)\r\n      drawBrush = undefined\r\n      clusterX = undefined\r\n\r\n      initial = true\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n\r\n      ttEnter = (data) ->\r\n        ttLayers = data.layers.map((l) -> {name:l.layerKey, value:_scaleList.y.formatValue(l.value), color: {'background-color': l.color}})\r\n        @headerName = _scaleList.x.axisLabel()\r\n        @headerValue = _scaleList.x.formatValue(data.key)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n        #$log.info \"rendering clustered-bar\"\r\n\r\n        barPadding = x.scale().rangeBand() / (1 - config.padding) * config.padding\r\n        barOuterPadding = x.scale().rangeBand() / (1 - config.outerPadding) * config.outerPadding\r\n\r\n        # map data to the right format for rendering\r\n        layerKeys = y.layerKeys(data)\r\n\r\n        clusterX = d3.scale.ordinal().domain(y.layerKeys(data)).rangeBands([0,x.scale().rangeBand()], 0, 0)\r\n\r\n        cluster = data.map((d) -> l = {\r\n          key:x.value(d), data:d, x:x.map(d), width: x.scale().rangeBand(x.value(d))\r\n          layers: layerKeys.map((k) -> {layerKey: k, color:color.scale()(k), key:x.value(d), value: d[k], x:clusterX(k), y: y.scale()(d[k]), height:y.scale()(0) - y.scale()(d[k]), width:clusterX.rangeBand(k)})}\r\n        )\r\n\r\n        _merge(cluster).first({x:barPaddingOld / 2 - barOuterPadding, width:0}).last({x:options.width + barPadding/2 - barOuterPaddingOld, width:0})\r\n        _mergeLayers(cluster[0].layers).first({x:0, width:0}).last({x:cluster[0].width, width:0})\r\n\r\n        if not layers\r\n          layers = @selectAll('.wk-chart-layer')\r\n\r\n        layers = layers.data(cluster, (d) -> d.key)\r\n\r\n        layers.enter().append('g')\r\n          .attr('class', 'wk-chart-layer').call(_tooltip.tooltip)\r\n          .attr('transform',(d) -> \"translate(#{if initial then d.x else _merge.addedPred(d).x + _merge.addedPred(d).width + barPaddingOld / 2},0) scale(#{if initial then 1 else 0}, 1)\")\r\n          .style('opacity', if initial then 0 else 1)\r\n\r\n        layers\r\n          .transition().duration(options.duration)\r\n            .attr('transform',(d) -> \"translate(#{d.x},0) scale(1,1)\")\r\n            .style('opacity', 1)\r\n\r\n        layers.exit()\r\n          .transition().duration(options.duration)\r\n            .attr('transform',(d) -> \"translate(#{_merge.deletedSucc(d).x - barPadding / 2}, 0) scale(0,1)\")\r\n            .remove()\r\n\r\n        bars = layers.selectAll('.wk-chart-bar')\r\n          .data(\r\n            (d) -> d.layers\r\n          , (d) -> d.layerKey + '|' + d.key\r\n          )\r\n\r\n        bars.enter().append('rect')\r\n          .attr('class', 'wk-chart-bar wk-chart-selectable')\r\n          .attr('x', (d) -> if initial then d.x else _mergeLayers.addedPred(d).x + _mergeLayers.addedPred(d).width)\r\n          .attr('width', (d) ->if initial then d.width else 0)\r\n\r\n        bars.style('fill', (d) -> color.scale()(d.layerKey)).transition().duration(options.duration)\r\n          .attr('width', (d) -> d.width)\r\n          .attr('x', (d) -> d.x)\r\n          .attr('y', (d) -> Math.min(y.scale()(0), d.y))\r\n          .attr('height', (d) -> Math.abs(d.height))\r\n\r\n        bars.exit()\r\n          .transition().duration(options.duration)\r\n          .attr('width',0)\r\n          .attr('x', (d) -> _mergeLayers.deletedSucc(d).x)\r\n          .remove()\r\n\r\n        initial = false\r\n        barPaddingOld = barPadding\r\n        barOuterPaddingOld = barOuterPadding\r\n\r\n      drawBrush = (axis, idxRange) ->\r\n        clusterX.rangeBands([0,axis.scale().rangeBand()], 0, 0)\r\n        width = clusterX.rangeBand()\r\n        layers\r\n          .attr('transform',(d) -> \"translate(#{if (x = axis.scale()(d.key)) >= 0 then x else -1000},0)\")\r\n          .selectAll('.wk-chart-bar')\r\n            .attr('width', width)\r\n            .attr('x', (d) -> clusterX(d.layerKey))\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @getKind('y').domainCalc('max').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n        @layerScale('color')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', drawBrush\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name columnClustered#padding\r\n        @values true, false, [padding, outerPadding]\r\n        @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n      ###\r\n\r\n      attrs.$observe 'padding', (val) ->\r\n        if val is 'false'\r\n          config.padding = 0\r\n          config.outerPadding = 0\r\n        else if val is 'true'\r\n          config = _.clone(barConfig, true)\r\n        else\r\n          values = utils.parseList(val)\r\n          if values\r\n            if values.length is 1\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[0]/100\r\n            if values.length is 2\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[1]/100\r\n        _scaleList.x.rangePadding(config)\r\n        host.lifeCycle().update()\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name columnStacked\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a stacked column chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=total]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'columnStacked', ($log, utils, barConfig) ->\r\n\r\n  stackedColumnCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking Stacked bar'\r\n\r\n      _id = \"stackedColumn#{stackedColumnCntr++}\"\r\n\r\n      layers = null\r\n\r\n      stack = []\r\n      _tooltip = ()->\r\n      _scaleList = {}\r\n      _selected = undefined\r\n\r\n      barPaddingOld = 0\r\n      barOuterPaddingOld = 0\r\n\r\n      _merge = utils.mergeData().key((d) -> d.key)\r\n      _mergeLayers = utils.mergeData()\r\n\r\n      initial = true\r\n\r\n      config = _.clone(barConfig, true)\r\n\r\n      ttEnter = (data) ->\r\n        ttLayers = data.layers.map((l) -> {name:l.layerKey, value:_scaleList.y.formatValue(l.value), color: {'background-color': l.color}})\r\n        @headerName = _scaleList.x.axisLabel()\r\n        @headerValue = _scaleList.x.formatValue(data.key)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color, size, shape) ->\r\n        if not layers\r\n          layers = @selectAll(\".layer\")\r\n        #$log.debug \"drawing stacked-bar\"\r\n\r\n        barPadding = x.scale().rangeBand() / (1 - config.padding) * config.padding\r\n        barOuterPadding = x.scale().rangeBand() / (1 - config.outerPadding) * config.outerPadding\r\n\r\n        layerKeys = y.layerKeys(data)\r\n\r\n        stack = []\r\n        for d in data\r\n          y0 = 0\r\n          l = {key:x.value(d), layers:[], data:d, x:x.map(d), width:if x.scale().rangeBand then x.scale().rangeBand() else 1}\r\n          if l.x isnt undefined\r\n            l.layers = layerKeys.map((k) ->\r\n              layer = {layerKey:k, key:l.key, value:d[k], height:  y.scale()(0) - y.scale()(+d[k]), width: (if x.scale().rangeBand then x.scale().rangeBand() else 1), y: y.scale()(+y0 + +d[k]), color: color.scale()(k)}\r\n              y0 += +d[k]\r\n              return layer\r\n            )\r\n            stack.push(l)\r\n\r\n        _merge(stack).first({x: barPaddingOld / 2 - barOuterPadding, width:0}).last({x:options.width + barPadding/2 - barOuterPaddingOld, width:0})\r\n        _mergeLayers(layerKeys)\r\n\r\n        layers = layers\r\n          .data(stack, (d)-> d.key)\r\n\r\n        layers.enter().append('g')\r\n          .attr('transform',(d) -> \"translate(#{if initial then d.x else _merge.addedPred(d).x + _merge.addedPred(d).width + barPaddingOld / 2},0) scale(#{if initial then 1 else 0}, 1)\")\r\n          .style('opacity',if initial then 0 else 1)\r\n          .call(_tooltip.tooltip)\r\n\r\n        layers\r\n          .transition().duration(options.duration)\r\n          .attr('transform',(d) -> \"translate(#{d.x},0) scale(1,1)\")\r\n          .style('opacity', 1)\r\n\r\n        layers.exit()\r\n          .transition().duration(options.duration)\r\n            .attr('transform',(d) -> \"translate(#{_merge.deletedSucc(d).x - barPadding / 2}, 0) scale(0,1)\")\r\n            .remove()\r\n\r\n        bars = layers.selectAll('.wk-chart-bar')\r\n          .data(\r\n            (d) -> d.layers\r\n          , (d) -> d.layerKey + '|' + d.key\r\n          )\r\n\r\n        bars.enter().append('rect')\r\n          .attr('class', 'wk-chart-bar wk-chart-selectable')\r\n          .attr('y', (d) ->\r\n            if _merge.prev(d.key)\r\n              idx = layerKeys.indexOf(_mergeLayers.addedPred(d.layerKey))\r\n              if idx >= 0 then _merge.prev(d.key).layers[idx].y else y.scale()(0)\r\n            else\r\n              d.y\r\n          )\r\n          .attr('height',(d) -> d.height)\r\n          .call(_selected)\r\n\r\n        bars.style('fill', (d) -> d.color)\r\n          .transition().duration(options.duration)\r\n            .attr('y', (d) -> d.y)\r\n            .attr('width', (d) -> d.width)\r\n            .attr('height', (d) -> d.height)\r\n\r\n        bars.exit()\r\n          .transition().duration(options.duration)\r\n          .attr('height',0)\r\n          .attr('y', (d) ->\r\n            idx = layerKeys.indexOf(_mergeLayers.deletedSucc(d.layerKey))\r\n            if idx >= 0 then _merge.current(d.key).layers[idx].y + _merge.current(d.key).layers[idx].height else _merge.current(d.key).layers[layerKeys.length - 1].y\r\n          )\r\n          .remove()\r\n\r\n        initial = false\r\n        barPaddingOld = barPadding\r\n        barOuterPaddingOld = barOuterPadding\r\n\r\n      drawBrush = (axis, idxRange) ->\r\n        layers\r\n          .attr('transform',(d) -> \"translate(#{if (x = axis.scale()(d.key)) >= 0 then x else -1000},0)\")\r\n          .selectAll('.wk-chart-bar')\r\n            .attr('width', (d) -> axis.scale().rangeBand())\r\n\r\n\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @getKind('y').domainCalc('total').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n        @layerScale('color')\r\n        _tooltip = host.behavior().tooltip\r\n        _selected = host.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', drawBrush\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name columnStacked#padding\r\n        @values true, false, [padding, outerPadding]\r\n        @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n      ###\r\n      attrs.$observe 'padding', (val) ->\r\n        if val is 'false'\r\n          config.padding = 0\r\n          config.outerPadding = 0\r\n        else if val is 'true'\r\n          config = _.clone(barConfig, true)\r\n        else\r\n          values = utils.parseList(val)\r\n          if values\r\n            if values.length is 1\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[0]/100\r\n            if values.length is 2\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[1]/100\r\n        _scaleList.x.rangePadding(config)\r\n        host.lifeCycle().update()\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name gauge\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @description\r\n\r\n  draws a area chart layout\r\n\r\n  @requires x\r\n  @requires y\r\n  @requires color\r\n  @requires layout\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'gauge', ($log, utils) ->\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n    controller: ($scope, $attrs) ->\r\n      me = {chartType: 'GaugeChart', id:utils.getId()}\r\n      $attrs.$set('chart-id', me.id)\r\n      return me\r\n    \r\n    link: (scope, element, attrs, controller) ->\r\n      layout = controller.me\r\n\r\n      initalShow = true\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n        $log.info 'drawing Gauge Chart'\r\n\r\n        dat = [data]\r\n\r\n        yDomain = y.scale().domain()\r\n        colorDomain = angular.copy(color.scale().domain())\r\n        colorDomain.unshift(yDomain[0])\r\n        colorDomain.push(yDomain[1])\r\n        ranges = []\r\n        for i in [1..colorDomain.length-1]\r\n          ranges.push {from:+colorDomain[i-1],to:+colorDomain[i]}\r\n\r\n        #draw color scale\r\n\r\n        bar = @selectAll('.wk-chart-bar')\r\n        bar = bar.data(ranges, (d, i) -> i)\r\n        if initalShow\r\n          bar.enter().append('rect').attr('class', 'wk-chart-bar')\r\n            .attr('x', 0).attr('width', 50)\r\n            .style('opacity', 0)\r\n        else\r\n          bar.enter().append('rect').attr('class', 'wk-chart-bar')\r\n            .attr('x', 0).attr('width', 50)\r\n\r\n        bar.transition().duration(options.duration)\r\n          .attr('height',(d) -> y.scale()(0) - y.scale()(d.to - d.from))\r\n          .attr('y',(d) -> y.scale()(d.to))\r\n          .style('fill', (d) -> color.scale()(d.from))\r\n          .style('opacity', 1)\r\n\r\n        bar.exit().remove()\r\n\r\n        # draw value\r\n\r\n        addMarker = (s) ->\r\n          s.append('rect').attr('width', 55).attr('height', 4).style('fill', 'black')\r\n          s.append('circle').attr('r', 10).attr('cx', 65).attr('cy',2).style('stroke', 'black')\r\n\r\n        marker = @selectAll('.wk-chart-marker')\r\n        marker = marker.data(dat, (d) -> 'wk-chart-marker')\r\n        marker.enter().append('g').attr('class','wk-chart-marker').call(addMarker)\r\n\r\n        if initalShow\r\n          marker.attr('transform', (d) -> \"translate(0,#{y.scale()(d.value)})\").style('opacity', 0)\r\n\r\n        marker\r\n          .transition().duration(options.duration)\r\n            .attr('transform', (d) -> \"translate(0,#{y.scale()(d.value)})\")\r\n            .style('fill',(d) -> color.scale()(d.value)).style('opacity', 1)\r\n\r\n        initalShow = false\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        this.requiredScales(['y', 'color'])\r\n        @getKind('color').resetOnNewData(true)\r\n\r\n      layout.lifeCycle().on 'drawChart', draw\r\n\r\n  }\r\n\r\n  #todo refector","###*\r\n  @ngdoc layout\r\n  @name geoMap\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  Draws a map form the `geoJson` data provided. Colors the map elements according to the data provided in the cart data and the mapping rules provided in the `idMap` attribute.\r\n  The map is drawn according to the properties provided in the `projection` attribute\r\n\r\n  For a more detailed description of the various attributes, and a reference to geoJson, projections and other relevant topic please see the {@link guide/geoMap geoMap section in the guide}\r\n\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'geoMap', ($log, utils) ->\r\n  mapCntr = 0\r\n\r\n  parseList = (val) ->\r\n    if val\r\n      l = val.trim().replace(/^\\[|\\]$/g, '').split(',').map((d) -> d.replace(/^[\\\"|']|[\\\"|']$/g, ''))\r\n      l = l.map((d) -> if isNaN(d) then d else +d)\r\n      return if l.length is 1 then return l[0] else l\r\n\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    scope: {\r\n      geojson: '='\r\n      projection: '='\r\n    }\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      layout = controller.me\r\n\r\n      _tooltip = undefined\r\n      _selected = undefined\r\n      _scaleList = {}\r\n      _id = 'geoMap' + mapCntr++\r\n      _dataMapping = d3.map()\r\n\r\n      _scale = 1\r\n      _rotate = [0,0]\r\n      _idProp = ''\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      ttEnter = (data) ->\r\n\r\n        val = _dataMapping.get(data.properties[_idProp[0]])\r\n        @layers.push({name:val.RS, value:val.DES})\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n      pathSel = []\r\n\r\n      _projection = d3.geo.orthographic()\r\n      _width = 0\r\n      _height = 0\r\n      _path = undefined\r\n      _zoom = d3.geo.zoom()\r\n        .projection(_projection)\r\n        #.scaleExtent([projection.scale() * .7, projection.scale() * 10])\r\n        .on \"zoom.redraw\", () ->\r\n          d3.event.sourceEvent.preventDefault();\r\n          pathSel.attr(\"d\", _path);\r\n\r\n      _geoJson = undefined\r\n\r\n      draw = (data, options, x, y, color) ->\r\n        _width = options.width\r\n        _height = options.height\r\n        if data and data[0].hasOwnProperty(_idProp[1])\r\n          for e in data\r\n            _dataMapping.set(e[_idProp[1]], e)\r\n\r\n        if _geoJson\r\n\r\n          _projection.translate([_width/2, _height/2])\r\n          pathSel = this.selectAll(\"path\").data(_geoJson.features, (d) -> d.properties[_idProp[0]])\r\n          pathSel\r\n            .enter().append(\"svg:path\")\r\n              .style('fill','lightgrey').style('stroke', 'darkgrey')\r\n              .call(_tooltip.tooltip)\r\n              .call(_selected)\r\n              .call(_zoom)\r\n\r\n          pathSel\r\n            .attr(\"d\", _path)\r\n            .style('fill', (d) ->\r\n              val = _dataMapping.get(d.properties[_idProp[0]])\r\n              color.map(val)\r\n          )\r\n\r\n          pathSel.exit().remove()\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['color'])\r\n        _scaleList.color.resetOnNewData(true)\r\n\r\n      layout.lifeCycle().on 'drawChart', draw\r\n      _tooltip = layout.behavior().tooltip\r\n      _selected = layout.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      # GeoMap specific properties -------------------------------------------------------------------------------------\r\n      ###*\r\n          @ngdoc attr\r\n          @name geoMap#projection\r\n          @param projection {object} sets the projection attributes for the map defined in `geojson`\r\n      ###\r\n      scope.$watch 'projection', (val) ->\r\n        if val isnt undefined\r\n          $log.log 'setting Projection params', val\r\n          if d3.geo.hasOwnProperty(val.projection)\r\n            _projection = d3.geo[val.projection]()\r\n            _projection.center(val.center).scale(val.scale).rotate(val.rotate).clipAngle(val.clipAngle)\r\n            _idProp = val.idMap\r\n            if _projection.parallels\r\n              _projection.parallels(val.parallels)\r\n            _scale = _projection.scale()\r\n            _rotate = _projection.rotate()\r\n            _path = d3.geo.path().projection(_projection)\r\n            _zoom.projection(_projection)\r\n\r\n            layout.lifeCycle().update()\r\n\r\n      , true #deep watch\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name geoMap#geojson\r\n        @param geojson {object} the geojson object that describes the the map.\r\n      ###\r\n      scope.$watch 'geojson', (val) ->\r\n        if val isnt undefined and val isnt ''\r\n          _geoJson = val\r\n          layout.lifeCycle().update()\r\n\r\n\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name columnHistogram\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a histogram chart layout\r\n\r\n  @usesDimension rangeX [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'columnHistogram', ($log, barConfig, utils, wkChartMargins) ->\r\n\r\n  sHistoCntr = 0\r\n\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      _id = \"histogram#{sHistoCntr++}\"\r\n\r\n      _scaleList = {}\r\n      buckets = undefined\r\n      labels = undefined\r\n      config = {}\r\n\r\n      _tooltip = undefined\r\n      _selected = undefined\r\n      config = _.clone(barConfig, true)\r\n\r\n      _merge = utils.mergeData().key((d)-> d.xVal)\r\n\r\n      initial = true\r\n\r\n      #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n      _tooltip = undefined\r\n\r\n      ttEnter = (data) ->\r\n        @headerName = _scaleList.rangeX.axisLabel()\r\n        @headerValue = _scaleList.y.axisLabel()\r\n        lower = _scaleList.rangeX.formatValue(_scaleList.rangeX.lowerValue(data.data))\r\n        if _scaleList.rangeX.upperProperty()\r\n          upper = _scaleList.rangeX.formatValue(_scaleList.rangeX.upperValue(data.data))\r\n          name = lower + ' - ' + upper\r\n        else\r\n          name = _scaleList.rangeX.formatValue(_scaleList.rangeX.lowerValue(data.data))\r\n\r\n        @layers.push({name: name, value: _scaleList.y.formattedValue(data.data), color:{'background-color': _scaleList.color.map(data.data)}})\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color, size, shape, rangeX) ->\r\n\r\n        if rangeX.upperProperty()\r\n          layout = data.map((d) -> {x:rangeX.scale()(rangeX.lowerValue(d)), xVal:rangeX.lowerValue(d), width:rangeX.scale()(rangeX.upperValue(d)) - rangeX.scale()(rangeX.lowerValue(d)), y:y.map(d), height:options.height - y.map(d), color:color.map(d), data:d})\r\n        else\r\n          if data.length > 0\r\n            start = rangeX.lowerValue(data[0])\r\n            step = rangeX.lowerValue(data[1]) - start\r\n            width = options.width / data.length\r\n            layout = data.map((d, i) -> {x:rangeX.scale()(start + step * i), xVal:rangeX.lowerValue(d), width:width, y:y.map(d), height:options.height - y.map(d), color:color.map(d), data:d})\r\n\r\n        _merge(layout).first({x:0, width:0}).last({x:options.width, width: 0})\r\n\r\n        if not buckets\r\n          buckets = @selectAll('.wk-chart-bucket')\r\n\r\n        buckets = buckets.data(layout, (d) -> d.xVal)\r\n\r\n        enter = buckets.enter().append('g').attr('class','wk-chart-bucket')\r\n          .attr('transform', (d) -> \"translate(#{if initial then d.x else _merge.addedPred(d).x  + _merge.addedPred(d).width},#{d.y}) scale(#{if initial then 1 else 0},1)\")\r\n        enter.append('rect')\r\n          .attr('class', 'wk-chart-selectable')\r\n          .attr('height', (d) -> d.height)\r\n          .attr('width', (d) -> d.width)\r\n          .style('fill',(d) -> d.color)\r\n          .style('opacity', if initial then 0 else 1)\r\n          .call(_tooltip.tooltip)\r\n          .call(_selected)\r\n        enter.append('text')\r\n          .attr('class','wk-chart-data-label')\r\n          .attr('x', (d) -> d.width / 2)\r\n          .attr('y', -wkChartMargins.dataLabelPadding.vert)\r\n          .attr({'text-anchor':'middle'})\r\n          .style({opacity: 0})\r\n\r\n        buckets.transition().duration(options.duration)\r\n          .attr(\"transform\", (d) -> \"translate(#{d.x}, #{d.y}) scale(1,1)\")\r\n        buckets.select('rect').transition().duration(options.duration)\r\n          .attr('width', (d) -> d.width)\r\n          .attr('height', (d) -> d.height)\r\n          .style('fill',(d) -> d.color)\r\n          .style('opacity',1)\r\n        buckets.select('text')\r\n          .text((d) -> y.formattedValue(d.data))\r\n          .transition().duration(options.duration)\r\n            .attr('x', (d) -> d.width / 2)\r\n            .style('opacity', if host.showDataLabels() then 1 else 0)\r\n\r\n        buckets.exit().transition().duration(options.duration)\r\n          .attr('transform', (d) -> \"translate(#{_merge.deletedSucc(d).x},#{d.y}) scale(0,1)\")\r\n          .remove()\r\n\r\n        initial = false\r\n\r\n      brush = (axis, idxRange, width, height) ->\r\n        bucketWidth = (axis, d) ->\r\n          if axis.upperProperty()\r\n            return axis.scale()(axis.upperValue(d.data)) - axis.scale()(axis.lowerValue(d.data))\r\n          else\r\n            return width / Math.max(idxRange[1] - idxRange[0] + 1, 1)\r\n\r\n        buckets\r\n          .attr('transform',(d) ->\r\n            null\r\n            \"translate(#{if (x = axis.scale()(d.xVal)) >= 0 then x else -1000}, #{d.y})\")\r\n        buckets.select('rect')\r\n          .attr('width', (d) -> bucketWidth(axis, d))\r\n        buckets.selectAll('text')\r\n          .attr('x',(d) -> bucketWidth(axis, d) / 2)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['rangeX', 'y', 'color'])\r\n        @getKind('y').domainCalc('max').resetOnNewData(true)\r\n        @getKind('rangeX').resetOnNewData(true).scaleType('linear').domainCalc('rangeExtent')\r\n        @getKind('color').resetOnNewData(true)\r\n        _tooltip = host.behavior().tooltip\r\n        _selected = host.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', brush\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n      ###*\r\n          @ngdoc attr\r\n          @name columnHistogram#labels\r\n          @values true, false\r\n          @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n      ###\r\n      attrs.$observe 'labels', (val) ->\r\n        if val is 'false'\r\n          host.showDataLabels(false)\r\n        else if val is 'true' or val is \"\"\r\n          host.showDataLabels('y')\r\n        host.lifeCycle().update()\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name line\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  Draws a horizontal line chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent] The vertical dimension\r\n  @usesDimension color [type=category20] the line coloring dimension\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'line', ($log, behavior, utils, tooltipUtils, timing) ->\r\n  lineCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking s-line'\r\n      _layerKeys = []\r\n      _layout = []\r\n      _dataOld = []\r\n      _pathValuesOld = []\r\n      _pathValuesNew = []\r\n      _pathArray = []\r\n      _initialOpacity = 0\r\n\r\n      _tooltip = undefined\r\n      _ttHighlight = undefined\r\n      _circles = undefined\r\n      _showMarkers = false\r\n      _scaleList = {}\r\n      offset = 0\r\n      _id = 'line' + lineCntr++\r\n      line = undefined\r\n      markers = undefined\r\n      markersBrushed = undefined\r\n\r\n      lineBrush = undefined\r\n\r\n\r\n      #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n      ttEnter = (idx) ->\r\n        _pathArray = _.toArray(_pathValuesNew)\r\n        ttMoveData.apply(this, [idx])\r\n\r\n      ttMoveData = (idx) ->\r\n        ttLayers = _pathArray.map((l) -> {name:l[idx].key, value:_scaleList.y.formatValue(l[idx].yv), color:{'background-color': l[idx].color}, xv:l[idx].xv})\r\n        @headerName = _scaleList.x.axisLabel()\r\n        @headerValue = _scaleList.x.formatValue(ttLayers[0].xv)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      ttMoveMarker = (idx) ->\r\n        _circles = this.selectAll(\".wk-chart-marker-#{_id}\").data(_pathArray, (d) -> d[idx].key)\r\n        _circles.enter().append('g').attr('class', \"wk-chart-marker-#{_id}\").call(tooltipUtils.createTooltipMarkers, idx)\r\n        _circles.selectAll('circle').attr('cy', (d) -> d[idx].y)\r\n        _circles.exit().remove()\r\n        this.attr('transform', \"translate(#{_scaleList.x.scale()(_pathArray[0][idx].xv) + offset})\") # need to compute form scale because of brushing\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n\r\n        mergedX = utils.mergeSeriesSorted(x.value(_dataOld), x.value(data))\r\n        _layerKeys = y.layerKeys(data)\r\n        _layout = []\r\n\r\n        _pathValuesNew = {}\r\n\r\n        for key in _layerKeys\r\n          _pathValuesNew[key] = data.map((d)-> {x:x.map(d),y:y.scale()(y.layerValue(d, key)), xv:x.value(d), yv:y.layerValue(d,key), key:key, color:color.scale()(key), data:d})\r\n\r\n          layer = {key:key, color:color.scale()(key), value:[]}\r\n          # find starting value for old\r\n          i = 0\r\n          while i < mergedX.length\r\n            if mergedX[i][0] isnt undefined\r\n              oldLast = _pathValuesOld[key][mergedX[i][0]]\r\n              break\r\n            i++\r\n\r\n          while i < mergedX.length\r\n            if mergedX[i][1] isnt undefined\r\n              newLast = _pathValuesNew[key][mergedX[i][1]]\r\n              break\r\n            i++\r\n\r\n          for val, i in mergedX\r\n            v = {color:layer.color, x:val[2]}\r\n            # set x and y values for old values. If there is a added value, maintain the last valid position\r\n            if val[1] is undefined #ie an old value is deleted, maintain the last new position\r\n              v.yNew = newLast.y\r\n              v.xNew = newLast.x # animate to the predesessors new position\r\n              v.deleted = true\r\n            else\r\n              v.yNew = _pathValuesNew[key][val[1]].y\r\n              v.xNew = _pathValuesNew[key][val[1]].x\r\n              newLast = _pathValuesNew[key][val[1]]\r\n              v.deleted = false\r\n\r\n            if _dataOld.length > 0\r\n              if  val[0] is undefined # ie a new value has been added\r\n                v.yOld = oldLast.y\r\n                v.xOld = oldLast.x # start x-animation from the predecessors old position\r\n              else\r\n                v.yOld = _pathValuesOld[key][val[0]].y\r\n                v.xOld = _pathValuesOld[key][val[0]].x\r\n                oldLast = _pathValuesOld[key][val[0]]\r\n            else\r\n              v.xOld = v.xNew\r\n              v.yOld = v.yNew\r\n\r\n\r\n            layer.value.push(v)\r\n\r\n          _layout.push(layer)\r\n\r\n        offset = if x.isOrdinal() then x.scale().rangeBand() / 2 else 0\r\n\r\n        if _tooltip then _tooltip.data(data)\r\n\r\n        markers = (layer, duration) ->\r\n          if _showMarkers\r\n            m = layer.selectAll('.wk-chart-marker').data(\r\n                (l) -> l.value\r\n              , (d) -> d.x\r\n            )\r\n            m.enter().append('circle').attr('class','wk-chart-marker wk-chart-selectable')\r\n              .attr('r', 5)\r\n              .style('pointer-events','none')\r\n              .style('opacity', 0)\r\n              .style('fill', (d) -> d.color)\r\n            m\r\n              .attr('cy', (d) -> d.yOld)\r\n              .attr('cx', (d) -> d.xOld + offset)\r\n              .classed('wk-chart-deleted',(d) -> d.deleted)\r\n            .transition().duration(duration)\r\n              .attr('cy', (d) -> d.yNew)\r\n              .attr('cx', (d) -> d.xNew + offset)\r\n              .style('opacity', (d) -> if d.deleted then 0 else 1)\r\n\r\n            m.exit()\r\n              .remove()\r\n          else\r\n            layer.selectAll('.wk-chart-marker').transition().duration(duration).style('opacity', 0).remove()\r\n\r\n        markersBrushed = (layer) ->\r\n          if _showMarkers\r\n            layer\r\n              .attr('cx', (d) ->\r\n                null\r\n                x.scale()(d.x)\r\n            )\r\n\r\n        lineOld = d3.svg.line()\r\n          .x((d) -> d.xOld)\r\n          .y((d) -> d.yOld)\r\n\r\n        lineNew = d3.svg.line()\r\n          .x((d) -> d.xNew)\r\n          .y((d) -> d.yNew)\r\n\r\n        lineBrush = d3.svg.line()\r\n          .x((d) -> x.scale()(d.x))\r\n          .y((d) -> d.yNew)\r\n\r\n        layers = this.selectAll(\".wk-chart-layer\")\r\n          .data(_layout, (d) -> d.key)\r\n        enter = layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        enter.append('path')\r\n          .attr('class','wk-chart-line')\r\n          .attr('d', (d) -> lineNew(d.value))\r\n          .style('opacity', _initialOpacity)\r\n          .style('pointer-events', 'none')\r\n\r\n        layers.select('.wk-chart-line').attr('transform', \"translate(#{offset})\")\r\n          .attr('d', (d) -> lineOld(d.value))\r\n          .transition().duration(options.duration)\r\n            .attr('d', (d) -> lineNew(d.value))\r\n            .style('stroke', (d) -> d.color)\r\n            .style('opacity', 1).style('pointer-events', 'none')\r\n\r\n        layers.exit().transition().duration(options.duration)\r\n          .style('opacity', 0)\r\n          .remove()\r\n\r\n        layers.call(markers, options.duration)\r\n\r\n        _initialOpacity = 0\r\n        _dataOld = data\r\n        _pathValuesOld = _pathValuesNew\r\n\r\n      brush = (axis, idxRange) ->\r\n        lines = this.selectAll(\".wk-chart-line\")\r\n        if axis.isOrdinal()\r\n          lines.attr('d', (d) -> lineBrush(d.value.slice(idxRange[0],idxRange[1] + 1)))\r\n        else\r\n          lines.attr('d', (d) -> lineBrush(d.value))\r\n        markers = this.selectAll('.wk-chart-marker').call(markersBrushed)\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.markerScale(_scaleList.x)\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n        _tooltip.on \"moveData.#{_id}\", ttMoveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttMoveMarker\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', brush\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name line#markers\r\n        @values true, false\r\n        @param [markers=false] {boolean} - show a data maker icon for each data point\r\n      ###\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n        host.lifeCycle().update()\r\n  }","###*\r\n  @ngdoc layout\r\n  @name lineVertical\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  Draws a vertical line chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent] The vertical dimension\r\n  @usesDimension color [type=category20] the line coloring dimension\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'lineVertical', ($log, utils, tooltipUtils) ->\r\n  lineCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking s-line'\r\n      layerKeys = []\r\n      _layout = []\r\n      _dataOld = []\r\n      _pathValuesOld = []\r\n      _pathValuesNew = []\r\n      _pathArray = []\r\n      lineBrush = undefined\r\n      markersBrushed = undefined\r\n      brushStartIdx = 0\r\n      _tooltip = undefined\r\n      _ttHighlight = undefined\r\n      _circles = undefined\r\n      _showMarkers = false\r\n      _scaleList = {}\r\n      offset = 0\r\n      _id = 'lineVertical' + lineCntr++\r\n\r\n      prepData = (x, y, color) ->\r\n        #layerKeys = y.layerKeys(@)\r\n        #_layout = layerKeys.map((key) => {key:key, color:color.scale()(key), value:@map((d)-> {x:x.value(d),y:y.layerValue(d, key)})})\r\n\r\n      ttEnter = (idx) ->\r\n        _pathArray = _.toArray(_pathValuesNew)\r\n        ttMoveData.apply(this, [idx])\r\n\r\n      ttMoveData = (idx) ->\r\n        offs = idx + brushStartIdx\r\n        ttLayers = _pathArray.map((l) -> {name:l[offs].key, value:_scaleList.x.formatValue(l[offs].xv), color:{'background-color': l[offs].color}, yv:l[offs].yv})\r\n        @headerName = _scaleList.y.axisLabel()\r\n        @headerValue = _scaleList.y.formatValue(ttLayers[0].yv)\r\n        @layers = @layers.concat(ttLayers)\r\n\r\n      ttMoveMarker = (idx) ->\r\n\r\n        offs = idx + brushStartIdx\r\n        _circles = this.selectAll(\".wk-chart-marker-#{_id}\").data(_pathArray, (d) -> d[offs].key)\r\n        _circles.enter().append('g').attr('class', \"wk-chart-marker-#{_id}\").call(tooltipUtils.createTooltipMarkers, offs)\r\n        _circles.selectAll('circle').attr('cx', (d) -> d[offs].x)\r\n        _circles.exit().remove()\r\n        o = if _scaleList.y.isOrdinal then _scaleList.y.scale().rangeBand() / 2 else 0\r\n        this.attr('transform', \"translate(0,#{_scaleList.y.scale()(_pathArray[0][offs].yv) + o})\") # need to compute form scale because of brushing\r\n\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      markers = (layer, duration) ->\r\n        if _showMarkers\r\n          m = layer.selectAll('.wk-chart-marker').data(\r\n            (l) -> l.value\r\n          , (d) -> d.y\r\n          )\r\n          m.enter().append('circle').attr('class','wk-chart-marker wk-chart-selectable')\r\n            .attr('r', 5)\r\n            .style('pointer-events','none')\r\n            .style('opacity',0)\r\n            .style('fill', (d) -> d.color)\r\n          m\r\n            .attr('cy', (d) -> d.yOld + offset)\r\n            .attr('cx', (d) -> d.xOld)\r\n            .classed('wk-chart-deleted',(d) -> d.deleted)\r\n            .transition().duration(duration)\r\n            .attr('cy', (d) -> d.yNew + offset)\r\n            .attr('cx', (d) -> d.xNew)\r\n            .style('opacity', (d) -> if d.deleted then 0 else 1)\r\n\r\n          m.exit()\r\n            .remove()\r\n        else\r\n          layer.selectAll('.wk-chart-marker').transition().duration(duration).style('opacity', 0).remove()\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n\r\n        if y.isOrdinal()\r\n          mergedY = utils.mergeSeriesUnsorted(y.value(_dataOld), y.value(data))\r\n        else\r\n          mergedY = utils.mergeSeriesSorted(y.value(_dataOld), y.value(data))\r\n        _layerKeys = x.layerKeys(data)\r\n        _layout = []\r\n        _pathValuesNew = {}\r\n\r\n        #_layout = layerKeys.map((key) => {key:key, color:color.scale()(key), value:data.map((d)-> {y:y.value(d),x:x.layerValue(d, key)})})\r\n\r\n        for key in _layerKeys\r\n          _pathValuesNew[key] = data.map((d)-> {y:y.map(d), x:x.scale()(x.layerValue(d, key)), yv:y.value(d), xv:x.layerValue(d,key), key:key, color:color.scale()(key), data:d})\r\n\r\n          layer = {key:key, color:color.scale()(key), value:[]}\r\n          # find starting value for old\r\n          i = 0\r\n          while i < mergedY.length\r\n            if mergedY[i][0] isnt undefined\r\n              oldFirst = _pathValuesOld[key][mergedY[i][0]]\r\n              break\r\n            i++\r\n\r\n          while i < mergedY.length\r\n            if mergedY[i][1] isnt undefined\r\n              newFirst = _pathValuesNew[key][mergedY[i][1]]\r\n              break\r\n            i++\r\n\r\n          for val, i in mergedY\r\n            v = {color:layer.color, y:val[2]}\r\n            # set x and y values for old values. If there is a added value, maintain the last valid position\r\n            if val[1] is undefined #ie an old value is deleted, maintain the last new position\r\n              v.yNew = newFirst.y\r\n              v.xNew = newFirst.x # animate to the predesessors new position\r\n              v.deleted = true\r\n            else\r\n              v.yNew = _pathValuesNew[key][val[1]].y\r\n              v.xNew = _pathValuesNew[key][val[1]].x\r\n              newFirst = _pathValuesNew[key][val[1]]\r\n              v.deleted = false\r\n\r\n            if _dataOld.length > 0\r\n              if  val[0] is undefined # ie a new value has been added\r\n                v.yOld = oldFirst.y\r\n                v.xOld = oldFirst.x # start x-animation from the predecessors old position\r\n              else\r\n                v.yOld = _pathValuesOld[key][val[0]].y\r\n                v.xOld = _pathValuesOld[key][val[0]].x\r\n                oldFirst = _pathValuesOld[key][val[0]]\r\n            else\r\n              v.xOld = v.xNew\r\n              v.yOld = v.yNew\r\n\r\n\r\n            layer.value.push(v)\r\n\r\n          _layout.push(layer)\r\n\r\n        offset = if y.isOrdinal() then y.scale().rangeBand() / 2 else 0\r\n\r\n        markersBrushed = (layer) ->\r\n          if _showMarkers\r\n            layer\r\n            .attr('cy', (d) ->\r\n              null\r\n              y.scale()(d.y) + if y.isOrdinal() then y.scale().rangeBand() / 2 else 0\r\n            )\r\n\r\n        if _tooltip then _tooltip.data(data)\r\n\r\n        lineOld = d3.svg.line()\r\n          .x((d) -> d.xOld)\r\n          .y((d) -> d.yOld)\r\n\r\n        lineNew = d3.svg.line()\r\n          .x((d) -> d.xNew)\r\n          .y((d) -> d.yNew)\r\n\r\n        lineBrush = d3.svg.line()\r\n          .x((d) -> d.xNew)\r\n          .y((d) -> y.scale()(d.y))\r\n\r\n\r\n        layers = this.selectAll(\".wk-chart-layer\")\r\n          .data(_layout, (d) -> d.key)\r\n        enter = layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        enter.append('path')\r\n          .attr('class','wk-chart-line')\r\n          .style('stroke', (d) -> d.color)\r\n          .style('opacity', 0)\r\n          .style('pointer-events', 'none')\r\n        layers.select('.wk-chart-line')\r\n          .attr('transform', \"translate(0,#{offset})\")\r\n          .attr('d', (d) -> lineOld(d.value))\r\n          .transition().duration(options.duration)\r\n            .attr('d', (d) -> lineNew(d.value))\r\n            .style('opacity', 1).style('pointer-events', 'none')\r\n        layers.exit().transition().duration(options.duration)\r\n          .style('opacity', 0)\r\n          .remove()\r\n\r\n        layers.call(markers, options.duration)\r\n\r\n        _dataOld = data\r\n        _pathValuesOld = _pathValuesNew\r\n\r\n      brush = (axis, idxRange) ->\r\n        layers = this.selectAll(\".wk-chart-line\")\r\n        if axis.isOrdinal()\r\n          brushStartIdx = idxRange[0]\r\n          layers.attr('d', (d) -> lineBrush(d.value.slice(idxRange[0],idxRange[1] + 1)))\r\n            .attr('transform', \"translate(0,#{axis.scale().rangeBand() / 2})\")\r\n        else\r\n          layers.attr('d', (d) -> lineBrush(d.value))\r\n        markers = this.selectAll('.wk-chart-marker').call(markersBrushed)\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.markerScale(_scaleList.y)\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n        _tooltip.on \"moveData.#{_id}\", ttMoveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttMoveMarker\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', brush\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name lineVertical#markers\r\n        @values true, false\r\n        @param [markers=false] {boolean} - show a data maker icon for each data point\r\n      ###\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n        host.lifeCycle().update()\r\n  }","###*\r\n  @ngdoc layout\r\n  @name pie\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a pie chart layout\r\n\r\n  @usesDimension size [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'pie', ($log, utils) ->\r\n  pieCntr = 0\r\n\r\n  return {\r\n  restrict: 'EA'\r\n  require: '^layout'\r\n  link: (scope, element, attrs, controller) ->\r\n    layout = controller.me\r\n\r\n    # set chart specific defaults\r\n\r\n    _id = \"pie#{pieCntr++}\"\r\n\r\n    inner = undefined\r\n    outer = undefined\r\n    labels = undefined\r\n    pieBox = undefined\r\n    polyline = undefined\r\n    _scaleList = []\r\n    _selected = undefined\r\n    _tooltip = undefined\r\n    _showLabels = false\r\n    selectionOffset = 0\r\n    animationDuration = 0\r\n\r\n    _merge = utils.mergeData()\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    ttEnter = (data) ->\r\n      @headerName = _scaleList.color.axisLabel()\r\n      @headerValue = _scaleList.size.axisLabel()\r\n      @layers.push({name: _scaleList.color.formattedValue(data.data), value: _scaleList.size.formattedValue(data.data), color:{'background-color': _scaleList.color.map(data.data)}})\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    initialShow = true\r\n\r\n    draw = (data, options, x, y, color, size) ->\r\n      #$log.debug 'drawing pie chart v2'\r\n      animationDuration = options.duration\r\n\r\n      r = Math.min(options.width, options.height) / 2\r\n      selectionOffset = r * 0.06\r\n\r\n      if not pieBox\r\n        pieBox= @append('g').attr('class','wk-chart-pieBox')\r\n      pieBox.attr('transform', \"translate(#{options.width / 2},#{options.height / 2})\")\r\n\r\n      innerArc = d3.svg.arc()\r\n        .outerRadius(r * if _showLabels then 0.8 else 0.9)\r\n        .innerRadius(0)\r\n\r\n      highlArc = d3.svg.arc()\r\n        .outerRadius(r * if _showLabels then 0.85 else 1)\r\n        .innerRadius(r * if _showLabels then 0.8 else 0.95)\r\n\r\n      outerArc = d3.svg.arc()\r\n        .outerRadius(r * 0.9)\r\n        .innerRadius(r * 0.9)\r\n\r\n      key = (d) -> _scaleList.color.value(d.data)\r\n\r\n      pie = d3.layout.pie()\r\n        .sort(null)\r\n        .value(size.value)\r\n\r\n      arcTween = (a) ->\r\n        i = d3.interpolate(this._current, a)\r\n        this._current = i(0)\r\n        return (t) ->\r\n          innerArc(i(t))\r\n\r\n      segments = pie(data) # pie computes for each segment the start angle and the end angle\r\n      _merge.key(key)\r\n      _merge(segments).first({startAngle:0, endAngle:0}).last({startAngle:Math.PI * 2, endAngle: Math.PI * 2})\r\n\r\n      #--- Draw Pie segments -------------------------------------------------------------------------------------------\r\n\r\n      if not inner\r\n        inner = pieBox.selectAll('.wk-chart-innerArc')\r\n\r\n      inner = inner\r\n        .data(segments,key)\r\n\r\n      inner.enter().append('path')\r\n        .each((d) -> this._current = if initialShow then d else {startAngle:_merge.addedPred(d).endAngle, endAngle:_merge.addedPred(d).endAngle})\r\n        .attr('class','wk-chart-innerArc wk-chart-selectable')\r\n        .style('fill', (d) ->  color.map(d.data))\r\n        .style('stroke', (d) -> color.map(d.data))\r\n        .style('opacity', if initialShow then 0 else 1)\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n\r\n      inner\r\n        #.attr('transform', \"translate(#{options.width / 2},#{options.height / 2})\")\r\n        .transition().duration(options.duration)\r\n          .style('opacity', 1)\r\n          .attrTween('d',arcTween)\r\n\r\n      inner.exit().datum((d) ->  {startAngle:_merge.deletedSucc(d).startAngle, endAngle:_merge.deletedSucc(d).startAngle})\r\n        .transition().duration(options.duration)\r\n          .attrTween('d',arcTween)\r\n          .remove()\r\n\r\n      #--- Draw Segment Label Text -------------------------------------------------------------------------------------\r\n\r\n      midAngle = (d) -> d.startAngle + (d.endAngle - d.startAngle) / 2\r\n\r\n      if _showLabels\r\n\r\n        labels = pieBox.selectAll('.wk-chart-data-label').data(segments, key)\r\n\r\n        labels.enter().append('text').attr('class', 'wk-chart-data-label')\r\n          .each((d) -> @_current = d)\r\n          .attr(\"dy\", \".35em\")\r\n          .style('font-size','1.3em')\r\n          .style('opacity', 0)\r\n          .text((d) -> size.formattedValue(d.data))\r\n\r\n        labels.transition().duration(options.duration)\r\n          .style('opacity',1)\r\n          .text((d) -> size.formattedValue(d.data))\r\n          .attrTween('transform', (d) ->\r\n            _this = this\r\n            interpolate = d3.interpolate(_this._current, d)\r\n            return (t) ->\r\n              d2 = interpolate(t)\r\n              _this._current = d2\r\n              pos = outerArc.centroid(d2)\r\n              pos[0] += 15 * (if midAngle(d2) < Math.PI then  1 else -1)\r\n              return \"translate(#{pos})\")\r\n          .styleTween('text-anchor', (d) ->\r\n            interpolate = d3.interpolate(@_current, d)\r\n            return (t) ->\r\n              d2 = interpolate(t)\r\n              return if midAngle(d2) < Math.PI then  \"start\" else \"end\"\r\n            )\r\n          \r\n        labels.exit()\r\n          .transition().duration(options.duration).style('opacity',0).remove()\r\n\r\n      #--- Draw Connector Lines ----------------------------------------------------------------------------------------\r\n\r\n        polyline = pieBox.selectAll(\".wk-chart-polyline\").data(segments, key)\r\n\r\n        polyline.enter()\r\n        . append(\"polyline\").attr('class','wk-chart-polyline')\r\n          .style(\"opacity\", 0)\r\n          .style('pointer-events','none')\r\n          .each((d) ->  this._current = d)\r\n\r\n        polyline.transition().duration(options.duration)\r\n          .style(\"opacity\", (d) -> if d.data.value is 0 then  0 else .5)\r\n          .attrTween(\"points\", (d) ->\r\n            this._current = this._current\r\n            interpolate = d3.interpolate(this._current, d)\r\n            _this = this\r\n            return (t) ->\r\n              d2 = interpolate(t)\r\n              _this._current = d2;\r\n              pos = outerArc.centroid(d2)\r\n              pos[0] += 10 * (if midAngle(d2) < Math.PI then  1 else -1)\r\n              return [innerArc.centroid(d2), outerArc.centroid(d2), pos];\r\n          )\r\n\r\n        polyline.exit()\r\n          .transition().duration(options.duration)\r\n          .style('opacity',0)\r\n          .remove();\r\n\r\n      else\r\n        pieBox.selectAll('.wk-chart-polyline').remove()\r\n        pieBox.selectAll('.wk-chart-data-label').remove()\r\n\r\n      initialShow = false\r\n\r\n    highlightSelected = (s) ->\r\n      obj = d3.select(this)\r\n      if obj.classed('wk-chart-selected')\r\n        arc = (s.startAngle + s.endAngle) / 2\r\n        offsX = Math.sin(arc) * selectionOffset\r\n        offsY = -Math.cos(arc) * selectionOffset\r\n        obj.transition().duration(animationDuration)\r\n          .attr('transform',\"translate(#{offsX},#{offsY})\")\r\n      else\r\n        obj.transition().duration(animationDuration)\r\n          .attr('transform','translate(0,0)')\r\n\r\n    selectionHandler = (objects) ->\r\n      pieBox.selectAll('.wk-chart-innerArc').each(highlightSelected)\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    layout.lifeCycle().on 'configure', ->\r\n      _scaleList = this.getScales(['size', 'color'])\r\n      _scaleList.color.scaleType('category20')\r\n      _tooltip = layout.behavior().tooltip\r\n      _selected = layout.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n    layout.lifeCycle().on 'drawChart', draw\r\n    layout.lifeCycle().on 'objectsSelected', selectionHandler\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name pie#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the pie segments.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        _showLabels = false\r\n      else if val is 'true' or val is \"\"\r\n        _showLabels = true\r\n      layout.lifeCycle().update()\r\n  }\r\n\r\n  #TODO verify behavior with custom tooltips","###*\r\n  @ngdoc layout\r\n  @name rangeArea\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a range-area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension rangeY [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n  @example\r\n###\r\n\r\nangular.module('wk.chart').directive 'rangeArea', ($log, utils, tooltipUtils) ->\r\n  lineCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: 'layout'\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n    #$log.log 'linking s-line'\r\n    layerKeys = []\r\n    _layout = []\r\n    _dataOld = []\r\n    _pathValuesOld = []\r\n    _pathValuesNew = []\r\n    _pathArray = []\r\n    _tooltip = undefined\r\n    _ttHighlight = undefined\r\n    _circles = undefined\r\n    _scaleList = {}\r\n    _showMarkers = false\r\n    offset = 0\r\n    _id = 'rangeArea' + lineCntr++\r\n    area = undefined\r\n    areaBrush = undefined\r\n    m = []\r\n\r\n    #--- Tooltip handlers --------------------------------------------------------------------------------------------\r\n\r\n    ttEnter = (idx) ->\r\n      _pathArray = _pathValuesNew\r\n      ttMoveData.apply(this, [idx])\r\n      _circles = undefined\r\n      m = [\r\n        {i:1, y:_pathArray[idx].y0, color:_pathArray[idx].color},\r\n        {i:2, y:_pathArray[idx].y1, color:_pathArray[idx].color}\r\n      ]\r\n\r\n    ttMoveData = (idx) ->\r\n      datum = _pathArray[idx].data\r\n      ttLayers = []\r\n      ttLayers.push({name:_scaleList.rangeY.lowerProperty(),value:_scaleList.rangeY.formatValue(_scaleList.rangeY.lowerValue(datum)), color:{'background-color': _pathArray[idx].color}})\r\n      ttLayers.push({name:_scaleList.rangeY.upperProperty(),value:_scaleList.rangeY.formatValue(_scaleList.rangeY.upperValue(datum)), color:{'background-color': _pathArray[idx].color}})\r\n      @headerName = _scaleList.x.axisLabel()\r\n      @headerValue = _scaleList.x.formattedValue(datum)\r\n      @layers = @layers.concat(ttLayers)\r\n\r\n    ttMoveMarker = (idx) ->\r\n      m[0].y = _pathArray[idx].y0\r\n      m[1].y = _pathArray[idx].y1\r\n      if not _circles\r\n        _circles = this.selectAll(\".wk-chart-marker-#{_id}\")\r\n      _circles = _circles.data(m, (d) -> d.i)\r\n      _circles.enter().append('g').attr('class', \"wk-chart-marker-#{_id}\").call(tooltipUtils.createTooltipMarkers)\r\n      _circles.selectAll('circle').attr('cy', (d) -> d.y)\r\n      _circles.exit().remove()\r\n      this.attr('transform', \"translate(#{_scaleList.x.scale()(_pathArray[idx].xv) + offset})\")\r\n\r\n    #-----------------------------------------------------------------------------------------------------------------\r\n\r\n    draw = (data, options, x, y, color, size, shape, rangeX, rangeY) ->\r\n\r\n      mergedX = utils.mergeSeriesUnsorted(x.value(_dataOld), x.value(data))\r\n      _layout = []\r\n\r\n      _pathValuesNew = []\r\n\r\n      _pathValuesNew = data.map((d)-> {x:x.map(d),y1:rangeY.scale()(rangeY.upperValue(d)), y0:rangeY.scale()(rangeY.lowerValue(d)), xv:x.value(d), yv1:rangeY.upperValue(d), yv0:rangeY.lowerValue(d), color:color.scale()(0), data:d})\r\n\r\n      oldFirst = newFirst = undefined\r\n\r\n      layer = {value:[], color:color.scale()(0)}\r\n      # find starting value for old\r\n      i = 0\r\n      while i < mergedX.length\r\n        if mergedX[i][0] isnt undefined\r\n          oldFirst = _pathValuesOld[mergedX[i][0]]\r\n          break\r\n        i++\r\n      # find starting value for new\r\n\r\n      while i < mergedX.length\r\n        if mergedX[i][1] isnt undefined\r\n          newFirst = _pathValuesNew[mergedX[i][1]]\r\n          break\r\n        i++\r\n      for val, i in mergedX\r\n        v = {x:val[2]}\r\n        # set x and y values for old values. If there is a added value, maintain the last valid position\r\n        if val[1] is undefined #ie an old value is deleted, maintain the last new position\r\n          v.y0New = newFirst.y0\r\n          v.y1New = newFirst.y1\r\n          v.xNew = newFirst.x # animate to the predesessors new position\r\n          v.deleted = true\r\n        else\r\n          v.y0New = _pathValuesNew[val[1]].y0\r\n          v.y1New = _pathValuesNew[val[1]].y1\r\n          v.xNew = _pathValuesNew[val[1]].x\r\n          newFirst = _pathValuesNew[val[1]]\r\n          v.deleted = false\r\n\r\n        if _dataOld.length > 0\r\n          if  val[0] is undefined # ie a new value has been added\r\n            v.y0Old = oldFirst.y0\r\n            v.y1Old = oldFirst.y1\r\n            v.xOld = oldFirst.x # start x-animation from the predecessors old position\r\n          else\r\n            v.y0Old = _pathValuesOld[val[0]].y0\r\n            v.y1Old = _pathValuesOld[val[0]].y1\r\n            v.xOld = _pathValuesOld[val[0]].x\r\n            oldFirst = _pathValuesOld[val[0]]\r\n        else\r\n          v.xOld = v.xNew\r\n          v.y0Old = v.y0New\r\n          v.y1Old = v.y1New\r\n\r\n        layer.value.push(v)\r\n\r\n      offset = if x.isOrdinal() then x.scale().rangeBand() / 2 else 0\r\n\r\n      if _tooltip then _tooltip.data(data)\r\n\r\n      areaOld = d3.svg.area()\r\n      .x((d) ->  d.xOld)\r\n      .y0((d) ->  d.y0Old)\r\n      .y1((d) ->  d.y1Old)\r\n\r\n      areaNew = d3.svg.area()\r\n      .x((d) ->  d.xNew)\r\n      .y0((d) ->  d.y0New)\r\n      .y1((d) ->  d.y1New)\r\n\r\n      areaBrush = d3.svg.area()\r\n      .x((d) ->  x.scale()(d.x))\r\n      .y0((d) ->  d.y0New)\r\n      .y1((d) ->  d.y1New)\r\n\r\n      path = this.selectAll(\".wk-chart-area-path\").data([layer])\r\n      enter = path.enter().append('path')\r\n        .attr('class','wk-chart-area-path')\r\n        .style('stroke', (d) -> d.color)\r\n        .style('fill', (d) -> d.color)\r\n        .style('opacity', 0)\r\n        .style('pointer-events', 'none')\r\n\r\n      path.attr('transform', \"translate(#{offset})\")\r\n        .attr('d', (d) -> areaOld(d.value))\r\n        .transition().duration(options.duration)\r\n          .attr('d', (d) -> areaNew(d.value))\r\n          .style('opacity', 0.7).style('pointer-events', 'none')\r\n\r\n      path.exit().transition().duration(options.duration)\r\n        .style('opacity', 0)\r\n        .remove()\r\n\r\n      _dataOld = data\r\n      _pathValuesOld = _pathValuesNew\r\n\r\n    brush = (axis, idxRange) ->\r\n      layers = this.select('.wk-chart-area-path')\r\n      if axis.isOrdinal()\r\n        layers.attr('d', (d) -> areaBrush(d.value.slice(idxRange[0],idxRange[1] + 1)))\r\n      else\r\n        layers.attr('d', (d) -> areaBrush(d.value))\r\n\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'rangeY', 'color'])\r\n      @layerScale('color')\r\n      @getKind('rangeY').domainCalc('extent').resetOnNewData(true)\r\n      @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n      _tooltip = host.behavior().tooltip\r\n      _tooltip.markerScale(_scaleList.x)\r\n      _tooltip.on \"enter.#{_id}\", ttEnter\r\n      _tooltip.on \"moveData.#{_id}\", ttMoveData\r\n      _tooltip.on \"moveMarker.#{_id}\", ttMoveMarker\r\n\r\n    host.lifeCycle().on 'drawChart', draw\r\n    host.lifeCycle().on 'brushDraw', brush\r\n\r\n    #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n    attrs.$observe 'markers', (val) ->\r\n      if val is '' or val is 'true'\r\n        _showMarkers = true\r\n      else\r\n        _showMarkers = false\r\n\r\n  }","###*\r\n  @ngdoc layout\r\n  @name rangeBars\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a range bar chart layout\r\n\r\n  @usesDimension rangeX [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'rangeBars', ($log, utils, barConfig, wkChartMargins)->\r\n  sBarCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: '^layout'\r\n\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n\r\n    _id = \"rangebars#{sBarCntr++}\"\r\n\r\n    bars = null\r\n    barPaddingOld = 0\r\n    barOuterPaddingOld = 0\r\n    _scaleList = {}\r\n    _selected = undefined\r\n\r\n    _merge = utils.mergeData()\r\n    _merge([]).key((d) -> d.key)\r\n\r\n    initial = true\r\n\r\n    config = _.clone(barConfig, true)\r\n\r\n    #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n    _tooltip = undefined\r\n\r\n    ttEnter = (data) ->\r\n      @headerName = _scaleList.y.axisLabel()\r\n      @headerValue = _scaleList.y.formattedValue(data.data)\r\n      @layers.push({name: _scaleList.rangeX.lowerProperty(), value: _scaleList.rangeX.formatValue(_scaleList.rangeX.lowerValue(data.data)), color:{'background-color': _scaleList.color.map(data.data)}})\r\n      @layers.push({name: _scaleList.rangeX.upperProperty(), value: _scaleList.rangeX.formatValue(_scaleList.rangeX.upperValue(data.data)), color:{'background-color': _scaleList.color.map(data.data)}})\r\n\r\n    #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n    draw = (data, options, x, y, color, size, shape, rangeX, rangeY) ->\r\n\r\n      if not bars\r\n        bars = @selectAll('.wk-chart-bars')\r\n      #$log.log \"rendering stacked-bar\"\r\n\r\n      barPadding = y.scale().rangeBand() / (1 - config.padding) * config.padding\r\n      barOuterPadding = y.scale().rangeBand() / (1 - config.outerPadding) * config.outerPadding\r\n\r\n      layout = data.map((d) -> {\r\n        key:y.value(d),\r\n        x:rangeX.scale()(rangeX.lowerValue(d)),\r\n        width:Math.abs(rangeX.scale()(rangeX.upperValue(d)) - rangeX.scale()(rangeX.lowerValue(d)))\r\n        y:y.map(d),\r\n        color:color.map(d),\r\n        height:y.scale().rangeBand(y.value(d)),\r\n        data:d\r\n      })\r\n\r\n      _merge(layout).first({y:options.height + barPaddingOld / 2 - barOuterPadding}).last({y:0, height:barOuterPaddingOld - barPaddingOld / 2})  #y.scale().range()[y.scale().range().length-1]\r\n\r\n      bars = bars.data(layout, (d) -> d.key)\r\n\r\n      enter = bars.enter().append('g').attr('class','wk-chart-bar')\r\n        .attr('transform', (d)-> \"translate(0, #{if initial then d.y else _merge.addedPred(d).y - barPaddingOld / 2}) scale(1, #{if initial then 1 else 0})\")\r\n      enter.append('rect')\r\n        .attr('class', 'wk-chart-rect wk-chart-selectable')\r\n        #.attr('y', (d) -> if initial then d.y else _merge.addedPred(d).y - barPaddingOld / 2)\r\n        .attr('height', (d) -> d.height)\r\n        .style('opacity', if initial then 0 else 1)\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n      enter.append('text')\r\n        .attr('class':'wk-chart-data-label')\r\n        .attr('y', (d) -> d.height / 2 )\r\n        .attr('x', (d) -> d.x + wkChartMargins.dataLabelPadding.hor)\r\n        .attr({dy: '0.35em', 'text-anchor':'start'})\r\n        .style({opacity: 0})\r\n\r\n      bars.transition().duration(options.duration)\r\n        .attr('transform', (d) -> \"translate(0, #{d.y}) scale(1,1)\")\r\n      bars.select('rect')\r\n        .style('fill', (d) -> d.color)\r\n        .transition().duration(options.duration)\r\n          .attr('x',(d) -> d.x)\r\n          .attr('height', (d) -> d.height)\r\n          .attr('width', (d) -> d.width)\r\n          .style('opacity', 1)\r\n      bars.select('text')\r\n        .text((d) -> rangeX.formatValue(rangeX.lowerValue(d.data)))\r\n        .transition().duration(options.duration)\r\n          .attr('y', (d) -> d.height / 2)\r\n          .attr('x', (d) -> d.x + wkChartMargins.dataLabelPadding.hor)\r\n          .style('opacity', if host.showDataLabels() then 1 else 0)\r\n\r\n\r\n      bars.exit()\r\n        .transition().duration(options.duration)\r\n          .attr('transform', (d) -> \"translate(0,#{_merge.deletedSucc(d).y + _merge.deletedSucc(d).height + barPadding / 2}) scale(1,0)\")\r\n          .attr('height', 0)\r\n          .remove()\r\n\r\n      initial = false\r\n\r\n      barPaddingOld = barPadding\r\n      barOuterPaddingOld = barOuterPadding\r\n\r\n    brush = (axis, idxRange) ->\r\n      bars\r\n        .attr('transform',(d) -> \"translate(0, #{if (y = axis.scale()(d.key)) >= 0 then y else -1000})\")\r\n        .selectAll('.wk-chart-rect')\r\n        .attr('height', (d) -> axis.scale().rangeBand())\r\n      bars.selectAll('text')\r\n        .attr('y',axis.scale().rangeBand() / 2)\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['rangeX', 'y', 'color'])\r\n      @getKind('rangeX').domainCalc('extent').resetOnNewData(true)\r\n      @getKind('y').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n      _tooltip = host.behavior().tooltip\r\n      _selected = host.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n    host.lifeCycle().on 'drawChart', draw\r\n    host.lifeCycle().on 'brushDraw', brush\r\n\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name bars#padding\r\n      @values true, false, [padding, outerPadding]\r\n      @description bla bla\r\n      @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n    ###\r\n    attrs.$observe 'padding', (val) ->\r\n      if val is 'false'\r\n        config.padding = 0\r\n        config.outerPadding = 0\r\n      else if val is 'true'\r\n        config = _.clone(barConfig, true)\r\n      else\r\n        values = utils.parseList(val)\r\n        if values\r\n          if values.length is 1\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[0]/100\r\n          if values.length is 2\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[1]/100\r\n      _scaleList.y.rangePadding(config)\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name bars#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        host.showDataLabels(false)\r\n      else if val is 'true' or val is \"\"\r\n        host.showDataLabels('x')\r\n      host.lifeCycle().update()\r\n  }","###*\r\n  @ngdoc layout\r\n  @name rangeColumn\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a column range chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension rangeY [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'rangeColumn', ($log, utils, barConfig, wkChartMargins)->\r\n  sBarCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: '^layout'\r\n\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n\r\n    _id = \"rangeColumn#{sBarCntr++}\"\r\n\r\n    columns = null\r\n    _scaleList = {}\r\n    _selected = undefined\r\n    _merge = utils.mergeData()\r\n    _merge([]).key((d) -> d.key)\r\n    initial = true\r\n    barPaddingOld = 0\r\n    barOuterPaddingOld = 0\r\n\r\n    config = _.clone(barConfig, true)\r\n\r\n    #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n    _tooltip = undefined\r\n\r\n    ttEnter = (data) ->\r\n      @headerName = _scaleList.x.axisLabel()\r\n      @headerValue = _scaleList.x.formattedValue(data.data)\r\n      @layers.push({name: _scaleList.rangeY.upperProperty(), value: _scaleList.rangeY.formatValue(_scaleList.rangeY.upperValue(data.data)), color:{'background-color': _scaleList.color.map(data.data)}})\r\n      @layers.push({name: _scaleList.rangeY.lowerProperty(), value: _scaleList.rangeY.formatValue(_scaleList.rangeY.lowerValue(data.data)), color:{'background-color': _scaleList.color.map(data.data)}})\r\n    #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n    draw = (data, options, x, y, color, size, shape, rangeX, rangeY) ->\r\n\r\n      if not columns\r\n        columns = @selectAll('.wk-chart-column')\r\n\r\n      barPadding = x.scale().rangeBand() / (1 - config.padding) * config.padding\r\n      barOuterPadding = x.scale().rangeBand() / (1 - config.outerPadding) * config.outerPadding\r\n\r\n      layout = data.map((d) -> {\r\n        data:d,\r\n        key:x.value(d),\r\n        x:x.map(d),\r\n        y:rangeY.scale()(rangeY.lowerValue(d)),\r\n        color:color.map(d),\r\n        width:x.scale().rangeBand(x.value(d)),\r\n        height:Math.abs(rangeY.scale()(rangeY.lowerValue(d)) - rangeY.scale()(rangeY.upperValue(d)))\r\n      })\r\n\r\n      _merge(layout).first({x:0, width:0}).last({x:options.width + barPadding/2 - barOuterPaddingOld, width: barOuterPadding})\r\n\r\n\r\n      columns = columns.data(layout, (d) -> d.key)\r\n\r\n      enter = columns.enter().append('g').attr('class','wk-chart-column')\r\n        .attr('transform', (d,i) -> \"translate(#{if initial then d.x else _merge.addedPred(d).x  + _merge.addedPred(d).width + if i then barPaddingOld / 2 else barOuterPaddingOld},#{d.y - d.height}) scale(#{if initial then 1 else 0},1)\")\r\n      enter.append('rect')\r\n        .attr('class', 'wk-chart-rect wk-chart-selectable')\r\n        .attr('height', (d) -> d.height)\r\n        .attr('width', (d) -> d.width)\r\n        .style('fill',(d) -> d.color)\r\n        .style('opacity', if initial then 0 else 1)\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n\r\n      enter.append('text')\r\n        .attr('class', 'wk-chart-data-label')\r\n        .attr('x', (d) -> d.width / 2)\r\n        .attr('y', - wkChartMargins.dataLabelPadding.vert)\r\n        .attr({'text-anchor':'middle'})\r\n        .style({opacity: 0})\r\n\r\n      columns.transition().duration(options.duration)\r\n        .attr(\"transform\", (d) -> \"translate(#{d.x}, #{d.y - d.height}) scale(1,1)\")\r\n      columns.select('rect').transition().duration(options.duration)\r\n        .attr('width', (d) -> d.width)\r\n        .attr('height', (d) -> d.height)\r\n        .style('opacity',1)\r\n      columns.select('text')\r\n        .text((d) -> rangeY.formatValue(rangeY.upperValue(d)))\r\n        .transition().duration(options.duration)\r\n        .attr('x', (d) -> d.width / 2)\r\n        .style('opacity', if host.showDataLabels() then 1 else 0)\r\n\r\n      columns.exit().transition().duration(options.duration)\r\n        .attr('transform', (d) -> \"translate(#{_merge.deletedSucc(d).x - barPadding / 2},#{d.y}) scale(0,1)\")\r\n        .remove()\r\n\r\n      initial = false\r\n      barPaddingOld = barPadding\r\n      barOuterPaddingOld = barOuterPadding\r\n\r\n    brush = (axis, idxRange) ->\r\n      columns\r\n      .attr('transform',(d) -> \"translate(#{if (x = axis.scale()(d.key)) >= 0 then x else -1000}, #{d.y})\")\r\n      .selectAll('.wk-chart-rect')\r\n      .attr('width', (d) -> axis.scale().rangeBand())\r\n      columns.selectAll('text')\r\n      .attr('x',axis.scale().rangeBand() / 2)\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'rangeY', 'color'])\r\n      @getKind('rangeY').domainCalc('extent').resetOnNewData(true)\r\n      @getKind('x').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n      _tooltip = host.behavior().tooltip\r\n      _selected = host.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n    host.lifeCycle().on 'drawChart', draw\r\n    host.lifeCycle().on 'brushDraw', brush\r\n    ###*\r\n    @ngdoc attr\r\n      @name column#padding\r\n      @values true, false, [padding, outerPadding]\r\n      @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n    ###\r\n    attrs.$observe 'padding', (val) ->\r\n      if val is 'false'\r\n        config.padding = 0\r\n        config.outerPadding = 0\r\n      else if val is 'true'\r\n        config = _.clone(barConfig, true)\r\n      else\r\n        values = utils.parseList(val)\r\n        if values\r\n          if values.length is 1\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[0]/100\r\n          if values.length is 2\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[1]/100\r\n      _scaleList.x.rangePadding(config)\r\n      host.lifeCycle().update()\r\n    ###*\r\n        @ngdoc attr\r\n        @name column#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        host.showDataLabels(false)\r\n      else if val is 'true' or val is \"\"\r\n        host.showDataLabels('y')\r\n      host.lifeCycle().update()\r\n\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name scatter\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a icon chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear]\r\n  @usesDimension color [type=category20]\r\n  @usesDimension size [type=linear]\r\n  @usesDimension shape [type=ordinal]\r\n###\r\nangular.module('wk.chart').directive 'scatter', ($log, utils) ->\r\n  scatterCnt = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      layout = controller.me\r\n      _tooltip = undefined\r\n      _selected = undefined\r\n      _id = 'scatter' + scatterCnt++\r\n      _scaleList = []\r\n\r\n      ttEnter = (data) ->\r\n        for sName, scale of _scaleList\r\n          @layers.push({\r\n            name: scale.axisLabel(),\r\n            value: scale.formattedValue(data),\r\n            color: if sName is 'color' then {'background-color':scale.map(data)} else undefined,\r\n            path: if sName is 'shape' then d3.svg.symbol().type(scale.map(data)).size(80)() else undefined\r\n            class: if sName is 'shape' then 'wk-chart-tt-svg-shape' else ''\r\n          })\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      initialShow = true\r\n\r\n\r\n\r\n      draw = (data, options, x, y, color, size, shape) ->\r\n        #$log.debug 'drawing scatter chart'\r\n        init = (s) ->\r\n          if initialShow\r\n            s.style('fill', color.map)\r\n            .attr('transform', (d)-> \"translate(#{x.map(d)},#{y.map(d)})\").style('opacity', 1)\r\n          initialShow = false\r\n\r\n        points = @selectAll('.wk-chart-points')\r\n          .data(data)\r\n        points.enter()\r\n          .append('path').attr('class', 'wk-chart-points wk-chart-selectable')\r\n          .attr('transform', (d)-> \"translate(#{x.map(d)},#{y.map(d)})\")\r\n          .call(init)\r\n          .call(_tooltip.tooltip)\r\n          .call(_selected)\r\n        points\r\n          .transition().duration(options.duration)\r\n          .attr('d', d3.svg.symbol().type((d) -> shape.map(d)).size((d) -> size.map(d) * size.map(d)))\r\n          .style('fill', color.map)\r\n          .attr('transform', (d)-> \"translate(#{x.map(d)},#{y.map(d)})\").style('opacity', 1)\r\n\r\n        points.exit().remove()\r\n\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color', 'size', 'shape'])\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = layout.behavior().tooltip\r\n        _selected = layout.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      layout.lifeCycle().on 'drawChart', draw\r\n  }\r\n\r\n#TODO verify behavior with custom tooltips\r\n#TODO Implement in new demo app","###*\r\n  @ngdoc layout\r\n  @name spider\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a spider chart layout\r\n\r\n  @usesDimension x [type=ordinal] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=max]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'spider', ($log, utils) ->\r\n  spiderCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      layout = controller.me\r\n      #$log.debug 'bubbleChart linked'\r\n\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n      _id = 'spider' + spiderCntr++\r\n      axis = d3.svg.axis()\r\n      _data = undefined\r\n\r\n      #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n      ttEnter = (data) ->\r\n        @layers = _data.map((d) ->  {name:_scaleList.x.value(d), value:_scaleList.y.formatValue(d[data]), color: {'background-color':_scaleList.color.scale()(data)}})\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n        _data = data\r\n        $log.log data\r\n        # compute center of area\r\n        centerX = options.width/2\r\n        centerY = options.height/2\r\n        radius = d3.min([centerX, centerY]) * 0.8\r\n        textOffs = 20\r\n        nbrAxis = data.length\r\n        arc = Math.PI * 2 / nbrAxis\r\n        degr = 360 / nbrAxis\r\n\r\n        axisG = this.select('.wk-chart-axis')\r\n        if axisG.empty()\r\n          axisG = this.append('g').attr('class', 'wk-chart-axis')\r\n\r\n        ticks = y.scale().ticks(y.ticks())\r\n        y.scale().range([radius,0]) # tricks the way axis are drawn. Not pretty, but works :-)\r\n        axis.scale(y.scale()).orient('right').tickValues(ticks).tickFormat(y.tickFormat())\r\n        axisG.call(axis).attr('transform', \"translate(#{centerX},#{centerY-radius})\")\r\n        y.scale().range([0,radius])\r\n\r\n        lines = this.selectAll('.wk-chart-axis-line').data(data,(d) -> d.axis)\r\n        lines.enter()\r\n          .append('line').attr('class', 'wk-chart-axis-line')\r\n          .style('stroke', 'darkgrey')\r\n\r\n        lines\r\n          .attr({x1:0, y1:0, x2:0, y2:radius})\r\n          .attr('transform',(d,i) -> \"translate(#{centerX}, #{centerY})rotate(#{degr * i})\")\r\n\r\n        lines.exit().remove()\r\n\r\n        #draw tick lines\r\n        tickLine = d3.svg.line().x((d) -> d.x).y((d)->d.y)\r\n        tickPath = this.selectAll('.wk-chart-tickPath').data(ticks)\r\n        tickPath.enter().append('path').attr('class', 'wk-chart-tickPath')\r\n          .style('fill', 'none').style('stroke', 'lightgrey')\r\n\r\n        tickPath\r\n          .attr('d',(d) ->\r\n            p = data.map((a, i) -> {x:Math.sin(arc*i) * y.scale()(d),y:Math.cos(arc*i) * y.scale()(d)})\r\n            tickLine(p) + 'Z')\r\n          .attr('transform', \"translate(#{centerX}, #{centerY})\")\r\n\r\n        tickPath.exit().remove()\r\n\r\n        axisLabels = this.selectAll('.wk-chart-axis-text').data(data,(d) -> x.value(d))\r\n        axisLabels.enter().append('text')\r\n          .attr('class', 'wk-chart-axis-text')\r\n          .style('fill', 'black')\r\n          .attr('dy', '0.8em')\r\n          .attr('text-anchor', 'middle')\r\n        axisLabels\r\n          .attr({\r\n              x: (d, i) -> centerX + Math.sin(arc * i) * (radius + textOffs)\r\n              y: (d, i) -> centerY + Math.cos(arc * i) * (radius + textOffs)\r\n            })\r\n          .text((d) -> x.value(d))\r\n\r\n        # draw data lines\r\n\r\n        dataPath = d3.svg.line().x((d) -> d.x).y((d) -> d.y)\r\n\r\n        dataLine = this.selectAll('.wk-chart-data-line').data(y.layerKeys(data))\r\n        dataLine.enter().append('path').attr('class', 'wk-chart-data-line')\r\n          .style({\r\n            stroke:(d) -> color.scale()(d)\r\n            fill:(d) -> color.scale()(d)\r\n            'fill-opacity': 0.2\r\n            'stroke-width': 2\r\n          })\r\n          .call(_tooltip.tooltip)\r\n        dataLine.attr('d', (d) ->\r\n            p = data.map((a, i) -> {x:Math.sin(arc*i) * y.scale()(a[d]),y:Math.cos(arc*i) * y.scale()(a[d])})\r\n            dataPath(p) + 'Z'\r\n          )\r\n          .attr('transform', \"translate(#{centerX}, #{centerY})\")\r\n\r\n\r\n      #--- Configuration and registration --------------------------------------------------------------------------------\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        _scaleList.y.domainCalc('max')\r\n        _scaleList.x.resetOnNewData(true).scaleType('ordinal')\r\n        #@layerScale('color')\r\n        _tooltip = layout.behavior().tooltip\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      layout.lifeCycle().on 'drawChart', draw\r\n\r\n  }\r\n\r\n#TODO verify behavior with custom tooltips\r\n#TODO fix 'tooltip attribute list too long' problem\r\n#TODO add enter / exit animation behavior\r\n#TODO Implement data labels\r\n#TODO implement and test object selection","angular.module('wk.chart').factory 'behaviorBrush', ($log, $window, selectionSharing, timing) ->\r\n\r\n  behaviorBrush = () ->\r\n\r\n    me = () ->\r\n\r\n    _active = false\r\n    _overlay = undefined\r\n    _extent = undefined\r\n    _startPos = undefined\r\n    _evTargetData = undefined\r\n    _area = undefined\r\n    _chart = undefined\r\n    _data = undefined\r\n    _areaSelection = undefined\r\n    _areaBox = undefined\r\n    _backgroundBox = undefined\r\n    _container = undefined\r\n    _selectables =  undefined\r\n    _brushGroup = undefined\r\n    _x = undefined\r\n    _y = undefined\r\n    _tooltip = undefined\r\n    _brushXY = false\r\n    _brushX = false\r\n    _brushY = false\r\n    _boundsIdx = undefined\r\n    _boundsValues = undefined\r\n    _boundsDomain = []\r\n    _brushEvents = d3.dispatch('brushStart', 'brush', 'brushEnd')\r\n\r\n    left = top = right = bottom = startTop = startLeft = startRight = startBottom = undefined\r\n\r\n    #--- Brush utility functions ----------------------------------------------------------------------------------------\r\n\r\n    positionBrushElements = (left, right, top, bottom) ->\r\n      width = right - left\r\n      height = bottom - top\r\n\r\n      # position resize-handles into the right corners\r\n      if _brushXY\r\n        _overlay.selectAll('.wk-chart-n').attr('transform', \"translate(#{left},#{top})\").select('rect').attr('width', width)\r\n        _overlay.selectAll('.wk-chart-s').attr('transform', \"translate(#{left},#{bottom})\").select('rect').attr('width', width)\r\n        _overlay.selectAll('.wk-chart-w').attr('transform', \"translate(#{left},#{top})\").select('rect').attr('height', height)\r\n        _overlay.selectAll('.wk-chart-e').attr('transform', \"translate(#{right},#{top})\").select('rect').attr('height', height)\r\n        _overlay.selectAll('.wk-chart-ne').attr('transform', \"translate(#{right},#{top})\")\r\n        _overlay.selectAll('.wk-chart-nw').attr('transform', \"translate(#{left},#{top})\")\r\n        _overlay.selectAll('.wk-chart-se').attr('transform', \"translate(#{right},#{bottom})\")\r\n        _overlay.selectAll('.wk-chart-sw').attr('transform', \"translate(#{left},#{bottom})\")\r\n        _extent.attr('width', width).attr('height', height).attr('x', left).attr('y', top)\r\n      if _brushX\r\n        _overlay.selectAll('.wk-chart-w').attr('transform', \"translate(#{left},0)\").select('rect').attr('height', height)\r\n        _overlay.selectAll('.wk-chart-e').attr('transform', \"translate(#{right},0)\").select('rect').attr('height', height)\r\n        _overlay.selectAll('.wk-chart-e').select('rect').attr('height', _areaBox.height)\r\n        _overlay.selectAll('.wk-chart-w').select('rect').attr('height', _areaBox.height)\r\n        _extent.attr('width', width).attr('height', _areaBox.height).attr('x', left).attr('y', 0)\r\n      if _brushY\r\n        _overlay.selectAll('.wk-chart-n').attr('transform', \"translate(0,#{top})\").select('rect').attr('width', width)\r\n        _overlay.selectAll('.wk-chart-s').attr('transform', \"translate(0,#{bottom})\").select('rect').attr('width', width)\r\n        _overlay.selectAll('.wk-chart-n').select('rect').attr('width', _areaBox.width)\r\n        _overlay.selectAll('.wk-chart-s').select('rect').attr('width', _areaBox.width)\r\n        _extent.attr('width', _areaBox.width).attr('height', height).attr('x', 0).attr('y', top)\r\n\r\n    hideBrushElements = () ->\r\n      d3.select(_area).selectAll('.wk-chart-resize').style('display', 'none')\r\n      _extent.attr('width',0).attr('height', 0).attr('x', 0).attr('y', 0).style('display', 'none')\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    getSelectedObjects = () ->\r\n      er = _extent.node().getBoundingClientRect()\r\n      _selectables.each((d) ->\r\n          cr = this.getBoundingClientRect()\r\n          xHit = er.left < cr.right - cr.width / 3 and cr.left + cr.width / 3 < er.right\r\n          yHit = er.top < cr.bottom - cr.height / 3 and cr.top + cr.height / 3 < er.bottom\r\n          d3.select(this).classed('wk-chart-selected', yHit and xHit)\r\n        )\r\n      allSelected = _container.selectAll('.wk-chart-selected').data()\r\n      _container.classed('wk-chart-has-selected-items', allSelected.length > 0)\r\n      return allSelected\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    setSelection = (left, right, top, bottom) ->\r\n      if _brushX\r\n        #test if selected elements are changed\r\n        _left = me.x().invert(left)\r\n        _right = me.x().invert(right)\r\n        if _boundsIdx[0] isnt _left or _boundsIdx[1] isnt _right\r\n          _boundsIdx = [_left, _right]\r\n          # bounds have changed, update bounds values array\r\n          if me.x().isOrdinal()\r\n            _boundsValues = _data.map((d) -> me.x().value(d)).slice(_left, _right + 1)\r\n          else\r\n            if me.x().kind() is 'rangeX'\r\n              if me.x().upperProperty()\r\n                _boundsValues = [me.x().lowerValue(_data[_left]), me.x().upperValue(_data[_right])]\r\n              else\r\n                step = me.x().lowerValue(_data[1]) - me.x().lowerValue(_data[0])\r\n                _boundsValues = [me.x().lowerValue(_data[_left]), me.x().lowerValue(_data[_right]) + step]\r\n            else\r\n              _boundsValues = [me.x().value(_data[_boundsIdx[0]]), me.x().value(_data[_right])]\r\n          _boundsDomain = _data.slice(_left, _right+ 1)\r\n          _brushEvents.brush(_boundsIdx, _boundsValues, _boundsDomain)\r\n          selectionSharing.setSelection _boundsValues, _boundsIdx, _brushGroup\r\n      if _brushY\r\n        #test if selected elements are changed\r\n        _bottom = me.y().invert(bottom)\r\n        _top = me.y().invert(top)\r\n        if _boundsIdx[0] isnt _bottom or _boundsIdx[1] isnt _top\r\n          _boundsIdx = [_bottom, _top]\r\n          if me.y().isOrdinal()\r\n            _boundsValues = _data.map((d) -> me.y().value(d)).slice(_bottom, _top + 1)\r\n          else\r\n            if me.y().kind() is 'rangeY'\r\n              step = me.y().lowerValue(_data[1]) - me.y().lowerValue(_data[0])\r\n              _boundsValues = [me.y().lowerValue(_data[_bottom]), me.y().lowerValue(_data[_top]) + step]\r\n            else\r\n              _boundsValues = [me.y().value(_data[_bottom]), me.y().value(_data[_top])]\r\n          _boundsDomain = _data.slice(_bottom, _top + 1)\r\n          _brushEvents.brush(_boundsIdx, _boundsValues, _boundsDomain)\r\n          selectionSharing.setSelection _boundsValues, _boundsIdx, _brushGroup\r\n      if _brushXY\r\n        newDomain = getSelectedObjects()\r\n        if _.xor(_boundsDomain, newDomain).length > 0\r\n          _boundsIdx = []\r\n          _boundsValues = []\r\n          _boundsDomain = newDomain\r\n          _brushEvents.brush(_boundsIdx, _boundsValues, _boundsDomain)\r\n          selectionSharing.setSelection _boundsValues, _boundsIdx, _brushGroup\r\n\r\n    clearSelection = () ->\r\n      _boundsIdx = []\r\n      _boundsValues = []\r\n      _boundsDomain = []\r\n      _selectables.classed('wk-chart-selected', false)\r\n      _container.classed('wk-chart-has-selected-items', false)\r\n      selectionSharing.setSelection _boundsValues, _boundsIdx, _brushGroup\r\n      _.delay(   # ensure digest cycle from button pressed is completed\r\n          () ->\r\n            _brushEvents.brush(_boundsIdx, _boundsValues, _boundsDomain)\r\n            _brushEvents.brushEnd(_boundsIdx, _boundsValues, _boundsDomain)\r\n        , 20\r\n      )\r\n\r\n\r\n\r\n    #--- BrushStart Event Handler --------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n    brushStart = () ->\r\n      #register a mouse handlers for the brush\r\n      d3.event.preventDefault()\r\n      _evTargetData = d3.select(d3.event.target).datum()\r\n      _ if not _evTargetData\r\n        _evTargetData = {name:'forwarded'}\r\n      _areaBox = _area.getBBox()\r\n      _startPos = d3.mouse(_area)\r\n      startTop = top\r\n      startLeft = left\r\n      startRight = right\r\n      startBottom = bottom\r\n      d3.select(_area).style('pointer-events','none').selectAll(\".wk-chart-resize\").style(\"display\", null)\r\n      _extent.style('display',null)\r\n      d3.select('body').style('cursor', d3.select(d3.event.target).style('cursor'))\r\n\r\n      d3.select($window).on('mousemove.brush', brushMove).on('mouseup.brush', brushEnd)\r\n\r\n      _tooltip.hide(true)\r\n      _boundsIdx = [undefined, undefined]\r\n      _boundsDomain = [undefined]\r\n      _selectables = _container.selectAll('.wk-chart-selectable')\r\n      _brushEvents.brushStart()\r\n      timing.clear()\r\n      timing.init()\r\n\r\n    #--- BrushEnd Event Handler ----------------------------------------------------------------------------------------\r\n\r\n    brushEnd = () ->\r\n      #de-register handlers\r\n\r\n      d3.select($window).on 'mousemove.brush', null\r\n      d3.select($window).on 'mouseup.brush', null\r\n      d3.select(_area).style('pointer-events','all').selectAll('.wk-chart-resize').style('display', null) # show the resize handles\r\n      d3.select('body').style('cursor', null)\r\n      _tooltip.hide(false)\r\n      _brushEvents.brushEnd(_boundsIdx, _boundsValues, _boundsDomain)\r\n      #timing.report()\r\n\r\n    #--- BrushMove Event Handler ---------------------------------------------------------------------------------------\r\n\r\n    brushMove = () ->\r\n      #$log.info 'brushmove'\r\n      pos = d3.mouse(_area)\r\n      deltaX = pos[0] - _startPos[0]\r\n      deltaY = pos[1] - _startPos[1]\r\n\r\n      # this elaborate code is needed to deal with scenarios when mouse moves fast and the events do not hit x/y + delta\r\n      # does not hi the 0 point maye there is a more elegant way to write this, but for now it works :-)\r\n\r\n      leftMv = (delta) ->\r\n        pos = startLeft + delta\r\n        left = if pos >= 0 then (if pos < startRight then pos else startRight) else 0\r\n        right = if pos <= _areaBox.width then (if pos < startRight then startRight else pos) else _areaBox.width\r\n\r\n      rightMv = (delta) ->\r\n        pos = startRight + delta\r\n        left = if pos >= 0 then (if pos < startLeft then pos else startLeft) else 0\r\n        right = if pos <= _areaBox.width then (if pos < startLeft then startLeft else pos) else _areaBox.width\r\n\r\n      topMv = (delta) ->\r\n        pos = startTop + delta\r\n        top = if pos >= 0 then (if pos < startBottom then pos else startBottom) else 0\r\n        bottom = if pos <= _areaBox.height then (if pos > startBottom then pos else startBottom ) else _areaBox.height\r\n\r\n      bottomMv = (delta) ->\r\n        pos = startBottom + delta\r\n        top = if pos >= 0 then (if pos < startTop then pos else startTop) else 0\r\n        bottom = if pos <= _areaBox.height then (if pos > startTop then pos else startTop ) else _areaBox.height\r\n\r\n      horMv = (delta) ->\r\n        if startLeft + delta >= 0\r\n          if startRight + delta <= _areaBox.width\r\n            left = startLeft + delta\r\n            right = startRight + delta\r\n          else\r\n            right = _areaBox.width\r\n            left = _areaBox.width - (startRight - startLeft)\r\n        else\r\n          left = 0\r\n          right = startRight - startLeft\r\n\r\n      vertMv = (delta) ->\r\n        if startTop + delta >= 0\r\n          if startBottom + delta <= _areaBox.height\r\n            top = startTop + delta\r\n            bottom = startBottom + delta\r\n          else\r\n            bottom = _areaBox.height\r\n            top = _areaBox.height - (startBottom - startTop)\r\n        else\r\n          top = 0\r\n          bottom = startBottom - startTop\r\n\r\n      switch _evTargetData.name\r\n        when 'background', 'forwarded'\r\n          if deltaX + _startPos[0] > 0\r\n            left = if deltaX < 0 then _startPos[0] + deltaX else _startPos[0]\r\n            if left + Math.abs(deltaX) < _areaBox.width\r\n              right = left + Math.abs(deltaX)\r\n            else\r\n              right = _areaBox.width\r\n          else\r\n            left = 0\r\n\r\n          if deltaY + _startPos[1] > 0\r\n            top = if deltaY < 0 then _startPos[1] + deltaY else _startPos[1]\r\n            if top + Math.abs(deltaY) < _areaBox.height\r\n              bottom = top + Math.abs(deltaY)\r\n            else\r\n              bottom = _areaBox.height\r\n          else\r\n            top = 0\r\n        when 'extent'\r\n          vertMv(deltaY); horMv(deltaX)\r\n        when 'n'\r\n          topMv(deltaY)\r\n        when 's'\r\n          bottomMv(deltaY)\r\n        when 'w'\r\n          leftMv(deltaX)\r\n        when 'e'\r\n          rightMv(deltaX)\r\n        when 'nw'\r\n          topMv(deltaY); leftMv(deltaX)\r\n        when 'ne'\r\n          topMv(deltaY); rightMv(deltaX)\r\n        when 'sw'\r\n          bottomMv(deltaY); leftMv(deltaX)\r\n        when 'se'\r\n          bottomMv(deltaY); rightMv(deltaX)\r\n\r\n      positionBrushElements(left, right, top, bottom)\r\n      setSelection(left, right, top, bottom)\r\n\r\n    #--- Brush ---------------------------------------------------------------------------------------------------------\r\n\r\n    me.brush = (s) ->\r\n      if arguments.length is 0 then return _overlay\r\n      else\r\n        if not _active then return\r\n        _overlay = s\r\n        _brushXY = me.x() and me.y()\r\n        _brushX = me.x() and not me.y()\r\n        _brushY = me.y() and not me.x()\r\n        # create the handler elements and register the handlers\r\n        s.style({'pointer-events': 'all', cursor: 'crosshair'})\r\n        _extent = s.append('rect').attr({class:'wk-chart-extent', x:0, y:0, width:0, height:0}).style('cursor','move').datum({name:'extent'})\r\n        # resize handles for the sides\r\n        if _brushY or _brushXY\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-n').style({cursor:'ns-resize', display:'none'})\r\n            .append('rect').attr({x:0, y: -3, width:0, height:6}).datum({name:'n'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-s').style({cursor:'ns-resize', display:'none'})\r\n            .append('rect').attr({x:0, y: -3, width:0, height:6}).datum({name:'s'})\r\n        if _brushX or _brushXY\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-w').style({cursor:'ew-resize', display:'none'})\r\n            .append('rect').attr({y:0, x: -3, width:6, height:0}).datum({name:'w'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-e').style({cursor:'ew-resize', display:'none'})\r\n            .append('rect').attr({y:0, x: -3, width:6, height:0}).datum({name:'e'})\r\n        # resize handles for the corners\r\n        if _brushXY\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-nw').style({cursor:'nwse-resize', display:'none'})\r\n          .append('rect').attr({x: -3, y: -3, width:6, height:6}).datum({name:'nw'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-ne').style({cursor:'nesw-resize', display:'none'})\r\n          .append('rect').attr({x: -3, y: -3, width:6, height:6}).datum({name:'ne'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-sw').style({cursor:'nesw-resize', display:'none'})\r\n          .append('rect').attr({x: -3, y: -3, width:6, height:6}).datum({name:'sw'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-se').style({cursor:'nwse-resize', display:'none'})\r\n          .append('rect').attr({x: -3, y: -3, width:6, height:6}).datum({name:'se'})\r\n        #register handler. Please note, brush wants the mouse down exclusively !!!\r\n        s.on 'mousedown.brush', brushStart\r\n        return me\r\n\r\n    #--- Extent resize handler -----------------------------------------------------------------------------------------\r\n\r\n    resizeExtent = () ->\r\n      if _areaBox\r\n        #$log.info 'resizeHandler'\r\n        newBox = _area.getBBox()\r\n        horizontalRatio = _areaBox.width / newBox.width\r\n        verticalRatio = _areaBox.height / newBox.height\r\n        top = top / verticalRatio\r\n        startTop = startTop / verticalRatio\r\n        bottom = bottom / verticalRatio\r\n        startBottom = startBottom / verticalRatio\r\n        left = left / horizontalRatio\r\n        startLeft = startLeft / horizontalRatio\r\n        right = right / horizontalRatio\r\n        startRight = startRight / horizontalRatio\r\n        _startPos[0] = _startPos[0] / horizontalRatio\r\n        _startPos[1] = _startPos[1] / verticalRatio\r\n        _areaBox = newBox\r\n        positionBrushElements(left, right, top, bottom)\r\n\r\n    #--- Brush Properties --------------------------------------------------------------------------------------------\r\n\r\n    me.chart = (val) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = val\r\n        _chart.lifeCycle().on 'resize.brush', resizeExtent\r\n        return me #to enable chaining\r\n\r\n    me.active = (val) ->\r\n      if arguments.length is 0 then return _active\r\n      else\r\n        _active = val\r\n        return me #to enable chaining\r\n\r\n    me.x = (val) ->\r\n      if arguments.length is 0 then return _x\r\n      else\r\n        _x = val\r\n        return me #to enable chaining\r\n\r\n    me.y = (val) ->\r\n      if arguments.length is 0 then return _y\r\n      else\r\n        _y = val\r\n        return me #to enable chaining\r\n\r\n    me.area = (val) ->\r\n      if arguments.length is 0 then return _areaSelection\r\n      else\r\n        if not _areaSelection\r\n          _areaSelection = val\r\n          _area = _areaSelection.node()\r\n          #_areaBox = _area.getBBox() need to get when calculating size to deal with resizing\r\n          me.brush(_areaSelection)\r\n\r\n        return me #to enable chaining\r\n\r\n    me.container = (val) ->\r\n      if arguments.length is 0 then return _container\r\n      else\r\n        _container = val\r\n        _selectables = _container.selectAll('.wk-chart-selectable')\r\n        return me #to enable chaining\r\n\r\n    me.data = (val) ->\r\n      if arguments.length is 0 then return _data\r\n      else\r\n        _data = val\r\n        return me #to enable chaining\r\n\r\n    me.brushGroup = (val) ->\r\n      if arguments.length is 0 then return _brushGroup\r\n      else\r\n        _brushGroup = val\r\n        selectionSharing.createGroup(_brushGroup)\r\n        return me #to enable chaining\r\n\r\n    me.tooltip = (val) ->\r\n      if arguments.length is 0 then return _tooltip\r\n      else\r\n        _tooltip = val\r\n        return me #to enable chaining\r\n\r\n    me.on = (name, callback) ->\r\n      _brushEvents.on name, callback\r\n\r\n    me.extent = () ->\r\n      return _boundsIdx\r\n\r\n    me.events = () ->\r\n      return _brushEvents\r\n\r\n    me.empty = () ->\r\n      return _boundsDomain.length is 0\r\n\r\n    me.clearBrush = () ->\r\n      console.log 'Brush cleared'\r\n      hideBrushElements()\r\n      clearSelection()\r\n\r\n\r\n    return me\r\n  return behaviorBrush","angular.module('wk.chart').factory 'behavior', ($log, $window, behaviorTooltip, behaviorBrush, behaviorSelect) ->\r\n\r\n  behavior = () ->\r\n\r\n    _tooltip = behaviorTooltip()\r\n    _brush = behaviorBrush()\r\n    _selection = behaviorSelect()\r\n    _brush.tooltip(_tooltip)\r\n\r\n    area = (area) ->\r\n      _brush.area(area)\r\n      _tooltip.area(area)\r\n\r\n    container = (container) ->\r\n      _brush.container(container)\r\n      _selection.container(container)\r\n      _tooltip.container(container)\r\n\r\n    chart = (chart) ->\r\n      _brush.chart(chart)\r\n      _tooltip.chart(chart)\r\n\r\n    return {tooltip:_tooltip, brush:_brush, selected:_selection, overlay:area, container:container, chart:chart}\r\n  return behavior","angular.module('wk.chart').factory 'behaviorSelect', ($log) ->\r\n  selectId = 0\r\n\r\n  select = () ->\r\n\r\n    _id = \"select#{selectId++}\"\r\n    _container = undefined\r\n    _layout = undefined\r\n    _active = false\r\n    _selectionEvents = d3.dispatch('selected')\r\n\r\n    clicked = () ->\r\n      if not _active then return\r\n      obj = d3.select(this)\r\n      if not _active then return\r\n      if obj.classed('wk-chart-selectable')\r\n        isSelected = obj.classed('wk-chart-selected')\r\n        obj.classed('wk-chart-selected', not isSelected)\r\n        selectedObjects = _container.selectAll('.wk-chart-selected')\r\n        selectedObjectsData = selectedObjects.data().map((d) -> if d.data then d.data else d)\r\n        _container.classed('wk-chart-has-selected-items', selectedObjectsData.length > 0)\r\n        # ensure that only the original values are reported back\r\n\r\n        _layout.lifeCycle().objectsSelected(selectedObjects)\r\n        _selectionEvents.selected(selectedObjectsData)\r\n\r\n    me = (sel) ->\r\n      if arguments.length is 0 then return me\r\n      else\r\n        sel\r\n          # register selection events\r\n          .on 'click', clicked\r\n        return me\r\n\r\n    me.id = () ->\r\n      return _id\r\n\r\n    me.active = (val) ->\r\n      if arguments.length is 0 then return _active\r\n      else\r\n        _active = val\r\n        return me #to enable chaining\r\n\r\n    me.clearSelection = () ->\r\n      $log.log 'selection Cleared'\r\n      _container.selectAll('.wk-chart-selected').classed('wk-chart-selected', false)\r\n      _container.classed('wk-chart-has-selected-items', false)\r\n      _.delay(\r\n        () ->\r\n          _selectionEvents.selected([])\r\n          _layout.lifeCycle().objectsSelected(_container.selectAll('.wk-chart-selected'))\r\n      ,\r\n        20\r\n      )\r\n\r\n    me.container = (val) ->\r\n      if arguments.length is 0 then return _container\r\n      else\r\n        _container = val\r\n        return me #to enable chaining\r\n\r\n    me.layout = (val) ->\r\n      if arguments.length is 0 then return _layout\r\n      else\r\n        _layout = val\r\n        return me\r\n\r\n    me.events = () ->\r\n      return _selectionEvents\r\n\r\n    me.on = (name, callback) ->\r\n      _selectionEvents.on name, callback\r\n      return me\r\n\r\n    return me\r\n\r\n  return select","angular.module('wk.chart').factory 'behaviorTooltip', ($log, $document, $rootScope, $compile, $templateCache, wkChartTemplates) ->\r\n\r\n  behaviorTooltip = () ->\r\n\r\n    _active = false\r\n    _path = ''\r\n    _hide = false\r\n    _showMarkerLine = undefined\r\n    _markerG = undefined\r\n    _markerLine = undefined\r\n    _areaSelection = undefined\r\n    _chart = undefined\r\n    _area= undefined\r\n    _container = undefined\r\n    _scales = undefined\r\n    _markerScale = undefined\r\n    _data = undefined\r\n    _tooltipDispatch = d3.dispatch('enter', 'moveData', 'moveMarker', 'leave')\r\n\r\n    _templ = wkChartTemplates.tooltipTemplate()\r\n    _templScope = undefined #_chart.scope().$new(true)\r\n    _compiledTempl = undefined #$compile(_templ)(_templScope)\r\n    body = $document.find('body')\r\n\r\n    bodyRect = body[0].getBoundingClientRect()\r\n\r\n    me = () ->\r\n\r\n    #--- helper Functions ----------------------------------------------------------------------------------------------\r\n\r\n    positionBox = () ->\r\n      rect = _compiledTempl[0].getBoundingClientRect()\r\n      clientX = if bodyRect.right - 20 > d3.event.clientX + rect.width + 10 then d3.event.clientX + 10 else d3.event.clientX - rect.width - 10\r\n      clientY = if bodyRect.bottom - 20 > d3.event.clientY + rect.height + 10 then d3.event.clientY + 10 else d3.event.clientY - rect.height - 10\r\n      _templScope.position = {\r\n        position: 'absolute'\r\n        left: clientX + 'px'\r\n        top: clientY + 'px'\r\n        'z-index': 1500\r\n        opacity: 1\r\n      }\r\n      _templScope.$apply()\r\n\r\n    positionInitial = () ->\r\n      _templScope.position = {\r\n        position: 'absolute'\r\n        left: 0 + 'px'\r\n        top: 0 + 'px'\r\n        'z-index': 1500\r\n        opacity: 0\r\n      }\r\n      _templScope.$apply()  # ensure tooltip gets rendered and size attributes get set correctly\r\n\r\n      _.throttle positionBox, 200 #wait until it is rendered and then reposition\r\n\r\n    #--- TooltipStart Event Handler ------------------------------------------------------------------------------------\r\n\r\n    tooltipEnter = () ->\r\n      if not _active or _hide then return\r\n      # append data div\r\n      body.append(_compiledTempl)\r\n      _templScope.layers = []\r\n\r\n      # get tooltip data value\r\n\r\n      if _showMarkerLine\r\n        _pos = d3.mouse(this)\r\n        value = _markerScale.invert(if _markerScale.isHorizontal() then _pos[0] else _pos[1])\r\n        _templScope.ttData = me.data()[value]\r\n      else\r\n        value = d3.select(this).datum()\r\n        _templScope.ttData = if value.data then value.data else value\r\n\r\n      _tooltipDispatch.enter.apply(_templScope, [value]) # call layout to fill in data\r\n      positionInitial()\r\n\r\n      # create a marker line if required\r\n      if _showMarkerLine\r\n        #_area = this\r\n        _areaBox = _areaSelection.select('.wk-chart-background').node().getBBox()\r\n        _pos = d3.mouse(_area)\r\n        _markerG = _areaSelection.append('g')  # need to append marker to chart area to ensure it is on top of the chart elements Fix 10\r\n          .attr('class', 'wk-chart-tooltip-marker')\r\n        _markerLine = _markerG.append('line')\r\n        if _markerScale.isHorizontal()\r\n          _markerLine.attr({class:'wk-chart-marker-line', x0:0, x1:0, y0:0,y1:_areaBox.height})\r\n        else\r\n          _markerLine.attr({class:'wk-chart-marker-line', x0:0, x1:_areaBox.width, y0:0,y1:0})\r\n\r\n        _markerLine.style({stroke: 'darkgrey', 'pointer-events': 'none'})\r\n\r\n        _tooltipDispatch.moveMarker.apply(_markerG, [value])\r\n\r\n    #--- TooltipMove  Event Handler ------------------------------------------------------------------------------------\r\n\r\n    tooltipMove = () ->\r\n      if not _active or _hide then return\r\n      _pos = d3.mouse(_area)\r\n      positionBox()\r\n      if _showMarkerLine\r\n        dataIdx = _markerScale.invert(if _markerScale.isHorizontal() then _pos[0] else _pos[1])\r\n        _tooltipDispatch.moveMarker.apply(_markerG, [dataIdx])\r\n        _templScope.layers = []\r\n        _templScope.ttData = me.data()[dataIdx]\r\n        _tooltipDispatch.moveData.apply(_templScope, [dataIdx])\r\n      _templScope.$apply()\r\n\r\n    #--- TooltipLeave Event Handler ------------------------------------------------------------------------------------\r\n\r\n    tooltipLeave = () ->\r\n      #$log.debug 'tooltipLeave', _area\r\n      if _markerG\r\n        _markerG.remove()\r\n      _markerG = undefined\r\n      _compiledTempl.remove()\r\n\r\n\r\n    #--- Interface to brush --------------------------------------------------------------------------------------------\r\n\r\n    forwardToBrush = (e) ->\r\n      # forward the mousdown event to the brush overlay to ensure that brushing can start at any point in the drawing area\r\n\r\n      brush_elm = d3.select(_container.node().parentElement).select(\".wk-chart-overlay\").node();\r\n      if d3.event.target isnt brush_elm #do not dispatch if target is overlay\r\n        new_click_event = new Event('mousedown');\r\n        new_click_event.pageX = d3.event.pageX;\r\n        new_click_event.clientX = d3.event.clientX;\r\n        new_click_event.pageY = d3.event.pageY;\r\n        new_click_event.clientY = d3.event.clientY;\r\n        brush_elm.dispatchEvent(new_click_event);\r\n\r\n\r\n    me.hide = (val) ->\r\n      if arguments.length is 0 then return _hide\r\n      else\r\n        _hide = val\r\n        if _markerG\r\n          _markerG.style('visibility', if _hide then 'hidden' else 'visible')\r\n        _templScope.ttShow = not _hide\r\n        _templScope.$apply()\r\n        return me #to enable chaining\r\n\r\n\r\n    #-- Tooltip properties ---------------------------------------------------------------------------------------------\r\n\r\n    me.chart = (chart) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = chart\r\n        return me\r\n\r\n    me.active = (val) ->\r\n      if arguments.length is 0 then return _active\r\n      else\r\n        _active = val\r\n        return me #to enable chaining\r\n\r\n    me.template = (path) ->\r\n      if arguments.length is 0 then return _path\r\n      else\r\n        _path = path\r\n        if _path.length > 0\r\n          _customTempl = $templateCache.get(_path)\r\n          # wrap template into positioning div\r\n          _templ = \"<div class=\\\"wk-chart-tooltip\\\" ng-style=\\\"position\\\">#{_customTempl}</div>\"\r\n\r\n        return me\r\n\r\n    me.area = (val) ->\r\n      if arguments.length is 0 then return _areaSelection\r\n      else\r\n        _areaSelection = val\r\n        _area = _areaSelection.node()\r\n        if _showMarkerLine\r\n          me.tooltip(_areaSelection)\r\n        return me #to enable chaining\r\n\r\n    me.container = (val) ->\r\n      if arguments.length is 0 then return _container\r\n      else\r\n        _container = val\r\n        return me #to enable chaining\r\n\r\n    me.markerScale = (val) ->\r\n      if arguments.length is 0 then return _markerScale\r\n      else\r\n        if val\r\n          _showMarkerLine = true\r\n          _markerScale = val\r\n        else\r\n          _showMarkerLine = false\r\n        return me #to enable chaining\r\n\r\n    me.data = (val) ->\r\n      if arguments.length is 0 then return _data\r\n      else\r\n        _data = val\r\n        return me #to enable chaining\r\n\r\n    me.on = (name, callback) ->\r\n      _tooltipDispatch.on name, callback\r\n\r\n    #--- Utility functions ---------------------------------------------------------------------------------------------\r\n\r\n    createClosure = (scaleFn) ->\r\n      return () ->\r\n        if _templScope.ttData then scaleFn(_templScope.ttData)\r\n\r\n\r\n    compileTemplate = (template) ->\r\n      if not _templScope\r\n        _templScope = _chart.scope().$parent.$new(true)   ## create the template scope as child of the chart's scope\r\n        # add scale access functions to scope\r\n        _templScope.properties = {}\r\n        _templScope.map = {}\r\n        _templScope.scale = {}\r\n        _templScope.label = {}\r\n        _templScope.value = {}\r\n        for name, scale of _chart.allScales().allKinds()\r\n          _templScope.map[name] = createClosure(scale.map)\r\n          _templScope.scale[name] = scale.scale()\r\n          _templScope.properties[name] = createClosure(scale.layerKeys)\r\n          _templScope.label[name] = scale.axisLabel()\r\n          _templScope.value[name] = createClosure(scale.value)\r\n\r\n      if not _compiledTempl\r\n        _compiledTempl = $compile(_templ)(_templScope) # and bind it to the tooltip template\r\n\r\n    #--- Tooltip -------------------------------------------------------------------------------------------------------\r\n\r\n    me.tooltip = (s) -> # register the tooltip events with the selection\r\n      if arguments.length is 0 then return me\r\n      else  # set tooltip for an objects selection\r\n        compileTemplate _templ # set up tooltip template\r\n        me.chart().lifeCycle().on 'destroy.tooltip', tooltipLeave\r\n\r\n        s.on 'mouseenter.tooltip', tooltipEnter\r\n          .on 'mousemove.tooltip', tooltipMove\r\n          .on 'mouseleave.tooltip', tooltipLeave\r\n        if not s.empty() and not s.classed('wk-chart-overlay')\r\n          s.on 'mousedown.tooltip', forwardToBrush\r\n\r\n    return me\r\n\r\n  return behaviorTooltip","angular.module('wk.chart').factory 'chart', ($log, scaleList, container, behavior, d3Animation) ->\r\n\r\n  chartCntr = 0\r\n\r\n  chart = () ->\r\n\r\n    _id = \"chart#{chartCntr++}\"\r\n\r\n    me = () ->\r\n\r\n    #--- Variable declarations and defaults ----------------------------------------------------------------------------\r\n\r\n    _layouts = []               # List of layouts for the chart\r\n    _container = undefined    # the charts drawing container object\r\n    _allScales = undefined    # Holds all scales of the chart, regardless of scale owner\r\n    _ownedScales = undefined  # holds the scles owned by chart, i.e. share scales\r\n    _data = undefined           # pointer to the last data set bound to chart\r\n    _showTooltip = false        # tooltip property\r\n    _scope = undefined          # holds a reference to the chart isolated scope\r\n    _toolTipTemplate = ''\r\n    _title = undefined\r\n    _subTitle = undefined\r\n    _behavior = behavior()\r\n    _animationDuration = d3Animation.duration\r\n\r\n    #--- LifeCycle Dispatcher ------------------------------------------------------------------------------------------\r\n\r\n    _lifeCycle = d3.dispatch('configure', 'resize', 'prepareData', 'scaleDomains', 'rescaleDomains', 'sizeContainer', 'drawAxis', 'drawChart', 'newData', 'update', 'updateAttrs', 'scopeApply', 'destroy' )\r\n    _brush = d3.dispatch('draw', 'change')\r\n\r\n    #--- Getter/Setter Functions ---------------------------------------------------------------------------------------\r\n\r\n    me.id = (id) ->\r\n      return _id\r\n\r\n    me.scope = (scope) ->\r\n      if arguments.length is 0 then return _scope\r\n      else\r\n        _scope = scope\r\n        return me\r\n\r\n    me.showTooltip = (trueFalse) ->\r\n      if arguments.length is 0 then return _showTooltip\r\n      else\r\n        _showTooltip = trueFalse\r\n        _behavior.tooltip.active(_showTooltip)\r\n        return me\r\n\r\n    me.toolTipTemplate = (path) ->\r\n      if arguments.length is 0 then return _toolTipTemplate\r\n      else\r\n        _toolTipTemplate = path\r\n        _behavior.tooltip.template(path)\r\n        return me\r\n\r\n    me.title = (val) ->\r\n      if arguments.length is 0 then return _title\r\n      else\r\n        _title = val\r\n        return me\r\n\r\n    me.subTitle = (val) ->\r\n      if arguments.length is 0 then return _subTitle\r\n      else\r\n        _subTitle = val\r\n        return me\r\n\r\n    me.addLayout = (layout) ->\r\n      if arguments.length is 0 then return _layouts\r\n      else\r\n        _layouts.push(layout)\r\n        return me\r\n\r\n    me.addScale = (scale, layout) ->\r\n      _allScales.add(scale)\r\n      if layout\r\n        layout.scales().add(scale)\r\n      else\r\n        _ownedScales.add(scale)\r\n      return me\r\n\r\n    me.animationDuration = (val) ->\r\n      if arguments.length is 0 then return _animationDuration\r\n      else\r\n        _animationDuration = val\r\n        return me #to enable chaining\r\n\r\n    #--- Getter Functions ----------------------------------------------------------------------------------------------\r\n\r\n    me.lifeCycle = (val) ->\r\n      return _lifeCycle\r\n\r\n    me.layouts = () ->\r\n      return _layouts\r\n\r\n    me.scales = () ->\r\n      return _ownedScales\r\n\r\n    me.allScales = () ->\r\n      return _allScales\r\n\r\n    me.hasScale = (scale) ->\r\n      return !!_allScales.has(scale)\r\n\r\n    me.container = () ->\r\n      return _container\r\n\r\n    me.brush = () ->\r\n      return _brush\r\n\r\n    me.getData = () ->\r\n      return _data\r\n\r\n    me.behavior = () ->\r\n      return _behavior\r\n\r\n    #--- Chart drawing life cycle --------------------------------------------------------------------------------------\r\n\r\n    lifecycleFull = (data,noAnimation) ->\r\n      if data\r\n        $log.log 'executing full life cycle'\r\n        _data = data\r\n        _scope.filteredData = data                    # put data on scope so tooltip and legend can access it\r\n        _scope.scales = _allScales\r\n        _lifeCycle.prepareData(data, noAnimation)    # calls the registered layout types\r\n        _lifeCycle.scaleDomains(data, noAnimation)   # calls registered the scales\r\n        _lifeCycle.sizeContainer(data, noAnimation)  # calls container\r\n        _lifeCycle.drawAxis(noAnimation)             # calls container\r\n        _lifeCycle.drawChart(data, noAnimation)     # calls layout\r\n        _lifeCycle.scopeApply()                     # need a digest cycle after the debouce to ensure legend animations execute\r\n\r\n    debounced = _.debounce(lifecycleFull, 100)\r\n\r\n    me.execLifeCycleFull = debounced\r\n\r\n    me.resizeLifeCycle = (noAnimation) ->\r\n      if _data\r\n        $log.log 'executing resize life cycle'\r\n        _lifeCycle.sizeContainer(_data, noAnimation)  # calls container\r\n        _lifeCycle.drawAxis(noAnimation)              # calls container\r\n        _lifeCycle.drawChart(_data, noAnimation)\r\n        _lifeCycle.scopeApply()\r\n\r\n    me.newDataLifeCycle = (data, noAnimation) ->\r\n      if data\r\n        $log.log 'executing new data life cycle'\r\n        _data = data\r\n        _scope.filteredData = data\r\n        _lifeCycle.prepareData(data, noAnimation)    # calls the registered layout types\r\n        _lifeCycle.scaleDomains(data, noAnimation)\r\n        _lifeCycle.drawAxis(noAnimation)              # calls container\r\n        _lifeCycle.drawChart(data, noAnimation)\r\n\r\n    me.attributeChange = (noAnimation) ->\r\n      if _data\r\n        $log.log 'executing attribute change life cycle'\r\n        _lifeCycle.sizeContainer(_data, noAnimation)\r\n        _lifeCycle.drawAxis(noAnimation)              # calls container\r\n        _lifeCycle.drawChart(_data, noAnimation)\r\n\r\n    me.brushExtentChanged = () ->\r\n      if _data\r\n        _lifeCycle.drawAxis(true)              # No Animation\r\n        _lifeCycle.drawChart(_data, true)\r\n\r\n    me.lifeCycle().on 'newData.chart', me.execLifeCycleFull\r\n    me.lifeCycle().on 'resize.chart', me.resizeLifeCycle\r\n    me.lifeCycle().on 'update.chart', (noAnimation) -> me.execLifeCycleFull(_data, noAnimation)\r\n    me.lifeCycle().on 'updateAttrs', me.attributeChange\r\n    me.lifeCycle().on 'rescaleDomains', _lifeCycle.scaleDomains(_data, true) #no animation\r\n\r\n    #--- Initialization ------------------------------------------------------------------------------------------------\r\n\r\n    _behavior.chart(me)\r\n    _container = container().chart(me)   # the charts drawing container object\r\n    _allScales = scaleList()    # Holds all scales of the chart, regardless of scale owner\r\n    _ownedScales = scaleList()  # holds the scales owned by chart, i.e. share scales\r\n\r\n    return me\r\n\r\n  return chart","angular.module('wk.chart').factory 'container', ($log, $window, wkChartMargins, scaleList, axisConfig, d3Animation, behavior) ->\r\n\r\n  containerCnt = 0\r\n\r\n  container = () ->\r\n\r\n    me = ()->\r\n\r\n    #--- Variable declarations and defaults ----------------------------------------------------------------------------\r\n\r\n    _containerId = 'cntnr' + containerCnt++\r\n    _chart = undefined\r\n    _element = undefined\r\n    _elementSelection = undefined\r\n    _layouts = []\r\n    _legends = []\r\n    _svg = undefined\r\n    _container = undefined\r\n    _spacedContainer = undefined\r\n    _chartArea = undefined\r\n    _gridArea = undefined\r\n    _margin = angular.copy(wkChartMargins.default)\r\n    _innerWidth = 0\r\n    _innerHeight = 0\r\n    _titleHeight = 0\r\n    _data = undefined\r\n    _overlay = undefined\r\n    _behavior = undefined\r\n    _duration = 0\r\n\r\n    #--- Getter/Setter Functions ---------------------------------------------------------------------------------------\r\n\r\n    me.id = () ->\r\n      return _containerId\r\n\r\n    me.chart = (chart) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = chart\r\n        # register to lifecycle events\r\n        _chart.lifeCycle().on \"sizeContainer.#{me.id()}\", me.drawChartFrame\r\n        #_chart.lifeCycle().on \"drawAxis.#{me.id()}\", me.drawChartFrame\r\n        return me\r\n\r\n    me.element = (elem) ->\r\n      if arguments.length is 0 then return _element\r\n      else\r\n        _resizeHandler = () ->  me.chart().lifeCycle().resize(true) # no animation\r\n        _element = elem\r\n        _elementSelection = d3.select(_element)\r\n        if _elementSelection.empty()\r\n          $log.error \"Error: Element #{_element} does not exist\"\r\n        else\r\n          _genChartFrame()\r\n          # find the div element to attach the handler to\r\n          resizeTarget = _elementSelection.select('.wk-chart').node()\r\n          new ResizeSensor(resizeTarget, _resizeHandler)\r\n\r\n        return me\r\n\r\n    me.addLayout = (layout) ->\r\n      _layouts.push(layout)\r\n      return me\r\n\r\n    me.height = () ->\r\n      return _innerHeight\r\n\r\n    me.width = () ->\r\n      return _innerWidth\r\n\r\n    me.margins = () ->\r\n      return _margin\r\n\r\n    me.getChartArea = () ->\r\n      return _chartArea\r\n\r\n    me.getOverlay = () ->\r\n      return _overlay\r\n\r\n    me.getContainer = () ->\r\n      return _spacedContainer\r\n\r\n    #--- utility functions ---------------------------------------------------------------------------------------------\r\n    #  Return: text height\r\n    drawAndPositionText = (container, text, selector, fontSize, offset) ->\r\n      elem = container.select('.' + selector)\r\n      if elem.empty()\r\n        elem = container.append('text')\r\n          .attr({class:selector, 'text-anchor': 'middle', y:if offset then offset else 0})\r\n          .style('font-size',fontSize)\r\n      elem.text(text)\r\n      #measure size and return it\r\n      return elem.node().getBBox().height\r\n\r\n\r\n    drawTitleArea = (title, subTitle) ->\r\n      titleAreaHeight = 0\r\n      area = _container.select('.wk-chart-title-area')\r\n      if area.empty()\r\n        area = _container.append('g').attr('class','wk-chart-title-area wk-center-hor')\r\n      if title\r\n        _titleHeight = drawAndPositionText(area, title, 'wk-chart-title', '2em')\r\n      if subTitle\r\n        drawAndPositionText(area, subTitle, 'wk-chart-subtitle', '1.8em', _titleHeight)\r\n\r\n      return area.node().getBBox().height\r\n\r\n    measureText = (textList, container, textClasses) ->\r\n      measureContainer = container.append('g')\r\n      for t in textList\r\n        measureContainer.append('text').attr('class':textClasses).text(t)\r\n\r\n      bounds = measureContainer.node().getBBox()\r\n      measureContainer.remove()\r\n      return bounds\r\n\r\n    getAxisRect = (dim) ->\r\n      axis = _container.append('g')\r\n      dim.range([0,500])\r\n      axis.call(dim.axis())\r\n\r\n      if dim.rotateTickLabels()\r\n        axis.selectAll(\"text\")\r\n        .attr({dy:'0.35em'})\r\n        .attr('transform',\"rotate(#{dim.rotateTickLabels()}, 0, #{if dim.axisOrient() is 'bottom' then 10 else -10})\")\r\n        .style('text-anchor', if dim.axisOrient() is 'bottom' then 'end' else 'start')\r\n\r\n      box = axis.node().getBBox()\r\n      axis.remove()\r\n      return box\r\n\r\n    drawAxis = (dim) ->\r\n      axis = _container.select(\".wk-chart-axis.wk-chart-#{dim.axisOrient()}\")\r\n      if axis.empty()\r\n        axis = _container.append('g').attr('class', 'wk-chart-axis wk-chart-' + dim.axisOrient())\r\n\r\n      axis.transition().duration(_duration).call(dim.axis())\r\n\r\n      if dim.rotateTickLabels()\r\n        axis.selectAll(\".wk-chart-#{dim.axisOrient()}.wk-chart-axis text\")\r\n          .attr({dy:'0.35em'})\r\n          .attr('transform',\"rotate(#{dim.rotateTickLabels()}, 0, #{if dim.axisOrient() is 'bottom' then 10 else -10})\")\r\n          .style('text-anchor', if dim.axisOrient() is 'bottom' then 'end' else 'start')\r\n      else\r\n        axis.selectAll(\".wk-chart-#{dim.axisOrient()}.wk-chart-axis text\").attr('transform', null)\r\n\r\n    _removeAxis = (orient) ->\r\n      _container.select(\".wk-chart-axis.wk-chart-#{orient}\").remove()\r\n\r\n    _removeLabel = (orient) ->\r\n      _container.select(\".wk-chart-label.wk-chart-#{orient}\").remove()\r\n\r\n    drawGrid = (s, noAnimation) ->\r\n      duration = if noAnimation then 0 else _duration\r\n      kind = s.kind()\r\n      ticks = if s.isOrdinal() then s.scale().range() else s.scale().ticks()\r\n      offset = if s.isOrdinal() then s.scale().rangeBand() / 2 else 0\r\n      gridLines = _gridArea.selectAll(\".wk-chart-grid.wk-chart-#{kind}\").data(ticks, (d) -> d)\r\n      gridLines.enter().append('line').attr('class', \"wk-chart-grid wk-chart-#{kind}\")\r\n        .style('pointer-events', 'none')\r\n        .style('opacity',0)\r\n      if kind is 'y'\r\n        gridLines.transition().duration(duration)\r\n          .attr({\r\n            x1:0,\r\n            x2: _innerWidth,\r\n            y1:(d) -> if s.isOrdinal() then d + offset else s.scale()(d),\r\n            y2:(d) -> if s.isOrdinal() then d + offset else s.scale()(d)\r\n          })\r\n          .style('opacity',1)\r\n      else\r\n        gridLines.transition().duration(duration)\r\n          .attr({\r\n            y1:0,\r\n            y2: _innerHeight,\r\n            x1:(d) -> if s.isOrdinal() then d + offset else s.scale()(d),\r\n            x2:(d) -> if s.isOrdinal() then d + offset else s.scale()(d)\r\n          })\r\n          .style('opacity',1)\r\n      gridLines.exit().transition().duration(duration).style('opacity',0).remove()\r\n\r\n    #--- Build the container -------------------------------------------------------------------------------------------\r\n    # build generic elements first\r\n\r\n    _genChartFrame = () ->\r\n      _svg = _elementSelection.append('div').attr('class', 'wk-chart').append('svg').attr('class', 'wk-chart')\r\n      _svg.append('defs').append('clipPath').attr('id', \"wk-chart-clip-#{_containerId}\").append('rect')\r\n      _container= _svg.append('g').attr('class','wk-chart-container')\r\n      _overlay = _container.append('g').attr('class', 'wk-chart-overlay').style('pointer-events', 'all')\r\n      _overlay.append('rect').style('visibility', 'hidden').attr('class', 'wk-chart-background').datum({name:'background'})\r\n      _gridArea = _container.append('g').attr('class', 'wk-chart-grid-lines')\r\n      _chartArea = _container.append('g').attr('class', 'wk-chart-area')\r\n\r\n\r\n    # start to build and size the elements from top to bottom\r\n\r\n    #--- chart frame (title, axis, grid) -------------------------------------------------------------------------------\r\n\r\n    me.drawChartFrame = (data, notAnimated) ->\r\n      bounds = _elementSelection.node().getBoundingClientRect()\r\n      _duration = if notAnimated then 0 else me.chart().animationDuration()\r\n      _height = bounds.height\r\n      _width = bounds.width\r\n      titleAreaHeight = drawTitleArea(_chart.title(), _chart.subTitle())\r\n\r\n      #--- get sizing of frame components before positioning them -------------------------------------------------------\r\n\r\n      axisRect = {top:{height:0, width:0},bottom:{height:0, width:0},left:{height:0, width:0},right:{height:0, width:0}}\r\n      labelHeight = {top:0 ,bottom:0, left:0, right:0}\r\n      dataLabelRect = {width:0, height:0}\r\n\r\n      for l in _layouts\r\n        dataLabelHeight = dataLabelWidth = 0\r\n\r\n        for k, s of l.scales().allKinds()\r\n          if s.showAxis()\r\n            s.axis().scale(s.scale()).orient(s.axisOrient())  # ensure the axis works on the right scale\r\n            axis = _container.select(\".wk-chart-axis.wk-chart-#{s.axisOrient()}\")\r\n            axisRect[s.axisOrient()] = getAxisRect(s)\r\n            #--- draw label ---\r\n            label = _container.select(\".wk-chart-label.wk-chart-#{s.axisOrient()}\")\r\n            if s.showLabel()\r\n              if label.empty()\r\n                label = _container.append('g').attr('class', 'wk-chart-label wk-chart-'  + s.axisOrient())\r\n              labelHeight[s.axisOrient()] = drawAndPositionText(label, s.axisLabel(), 'wk-chart-label-text', '1.5em');\r\n            else\r\n              label.remove()\r\n          if s.axisOrientOld() and s.axisOrientOld() isnt s.axisOrient()\r\n            _removeAxis(s.axisOrientOld())\r\n            _removeLabel(s.axisOrientOld())\r\n\r\n          # calculate space required for data labels\r\n\r\n\r\n\r\n          if l.showDataLabels() is k\r\n            if s.isHorizontal()\r\n              dataLabelWidth = wkChartMargins.dataLabelPadding.hor + measureText(s.formattedValue(data), _container, 'wk-chart-data-label').width\r\n            else\r\n              dataLabelHeight = wkChartMargins.dataLabelPadding.vert + measureText(s.formattedValue(data), _container, 'wk-chart-data-label').height\r\n\r\n      #--- compute size of the drawing area  ---------------------------------------------------------------------------\r\n      _frameHeight = titleAreaHeight + axisRect.top.height + labelHeight.top + axisRect.bottom.height + labelHeight.bottom + _margin.top + _margin.bottom\r\n\r\n      _frameWidth = axisRect.right.width + labelHeight.right + axisRect.left.width + labelHeight.left + _margin.left + _margin.right\r\n\r\n      if _frameHeight < _height\r\n        _innerHeight = _height - _frameHeight\r\n      else\r\n        _innerHeight = 0\r\n\r\n      if _frameWidth < _width\r\n        _innerWidth = _width - _frameWidth\r\n      else\r\n        _innerWidth = 0\r\n\r\n      #--- reset scale ranges and redraw axis with adjusted range ------------------------------------------------------\r\n\r\n      for l in _layouts\r\n        for k, s of l.scales().allKinds()\r\n          if k is 'x' or k is 'rangeX'\r\n            if l.showDataLabels() is 'x'\r\n              s.range(if s.reverse() then  [_innerWidth - dataLabelWidth, 0] else [0, _innerWidth - dataLabelWidth])\r\n            else\r\n              s.range(if s.reverse() then  [_innerWidth, 0] else [0, _innerWidth])\r\n          else if k is 'y' or k is 'rangeY'\r\n            if l.showDataLabels() is 'y'\r\n              s.range(if s.reverse() then  [dataLabelHeight, _innerHeight ] else [_innerHeight ,dataLabelHeight ])\r\n            else\r\n              s.range(if s.reverse() then  [0, _innerHeight] else [_innerHeight, 0])\r\n          if s.showAxis()\r\n            drawAxis(s)\r\n\r\n      #--- position frame elements -------------------------------------------------------------------------------------\r\n\r\n      leftMargin = axisRect.left.width + labelHeight.left + _margin.left\r\n      topMargin = titleAreaHeight + axisRect.top.height  + labelHeight.top + _margin.top\r\n\r\n      _spacedContainer = _container.attr('transform', \"translate(#{leftMargin}, #{topMargin})\")\r\n      _svg.select(\"#wk-chart-clip-#{_containerId} rect\").attr('width', _innerWidth).attr('height', _innerHeight)\r\n      _spacedContainer.select('.wk-chart-overlay>.wk-chart-background').attr('width', _innerWidth).attr('height', _innerHeight)\r\n      _spacedContainer.select('.wk-chart-area').style('clip-path', \"url(#wk-chart-clip-#{_containerId})\")\r\n\r\n      _container.selectAll('.wk-chart-axis.wk-chart-right').attr('transform', \"translate(#{_innerWidth}, 0)\")\r\n      _container.selectAll('.wk-chart-axis.wk-chart-bottom').attr('transform', \"translate(0, #{_innerHeight})\")\r\n\r\n      _container.select('.wk-chart-label.wk-chart-left').attr('transform', \"translate(#{-axisRect.left.width-labelHeight.left / 2 }, #{_innerHeight/2}) rotate(-90)\")\r\n      _container.select('.wk-chart-label.wk-chart-right').attr('transform', \"translate(#{_innerWidth+axisRect.right.width + labelHeight.right / 2}, #{_innerHeight/2}) rotate(90)\")\r\n      _container.select('.wk-chart-label.wk-chart-top').attr('transform', \"translate(#{_innerWidth / 2}, #{-axisRect.top.height - labelHeight.top / 2 })\")\r\n      _container.select('.wk-chart-label.wk-chart-bottom').attr('transform', \"translate(#{_innerWidth / 2}, #{_innerHeight + axisRect.bottom.height + labelHeight.bottom })\")\r\n\r\n      _container.selectAll('.wk-chart-title-area').attr('transform', \"translate(#{_innerWidth/2}, #{-topMargin + _titleHeight})\")\r\n\r\n      #--- finally, draw grid lines\r\n\r\n      for l in _layouts\r\n        for k, s of l.scales().allKinds()\r\n          if s.showAxis() and s.showGrid()\r\n            drawGrid(s)\r\n\r\n      _chart.behavior().overlay(_overlay)\r\n      _chart.behavior().container(_chartArea)\r\n\r\n    #--- Brush Accelerator ---------------------------------------------------------------------------------------------\r\n\r\n    me.drawSingleAxis = (scale) ->\r\n      if scale.showAxis()\r\n        a = _spacedContainer.select(\".wk-chart-axis.wk-chart-#{scale.axis().orient()}\")\r\n        a.call(scale.axis())\r\n\r\n        if scale.showGrid()\r\n          drawGrid(scale, true)\r\n      return me\r\n\r\n    return me\r\n\r\n  return container","angular.module('wk.chart').factory 'layout', ($log, scale, scaleList, timing) ->\r\n\r\n  layoutCntr = 0\r\n\r\n  layout = () ->\r\n    _id = \"layout#{layoutCntr++}\"\r\n    _container = undefined\r\n    _data = undefined\r\n    _chart = undefined\r\n    _scaleList = scaleList()\r\n    _showLabels = false\r\n    _layoutLifeCycle = d3.dispatch('configure', 'drawChart', 'prepareData', 'brush', 'redraw', 'drawAxis', 'update', 'updateAttrs', 'brushDraw', 'destroy', 'objectsSelected')\r\n\r\n    me = () ->\r\n\r\n    me.id = (id) ->\r\n      return _id\r\n\r\n    me.chart = (chart) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = chart\r\n        _scaleList.parentScales(chart.scales())\r\n        _chart.lifeCycle().on \"configure.#{me.id()}\", () -> _layoutLifeCycle.configure.apply(me.scales()) #passthrough\r\n        _chart.lifeCycle().on \"drawChart.#{me.id()}\", me.draw # register for the drawing event\r\n        _chart.lifeCycle().on \"prepareData.#{me.id()}\", me.prepareData\r\n        _chart.lifeCycle().on \"destroy.#{me.id()}\", () -> _layoutLifeCycle.destroy() #passthrough\r\n        return me\r\n\r\n    me.scales = () ->\r\n      return _scaleList\r\n\r\n    me.scaleProperties = () ->\r\n      return me.scales().getScaleProperties()\r\n\r\n    me.container = (obj) ->\r\n      if arguments.length is 0 then return _container\r\n      else\r\n        _container = obj\r\n        return me\r\n\r\n    me.showDataLabels = (trueFalse) ->\r\n      if arguments.length is 0 then return _showLabels\r\n      else\r\n        _showLabels = trueFalse\r\n        return me\r\n\r\n    me.behavior = () ->\r\n      me.chart().behavior()\r\n\r\n    me.prepareData = (data) ->\r\n      args = []\r\n      for kind in ['x','y', 'color', 'size', 'shape', 'rangeX', 'rangeY']\r\n        args.push(_scaleList.getKind(kind))\r\n      _layoutLifeCycle.prepareData.apply(data, args)\r\n\r\n    me.lifeCycle = ()->\r\n      return _layoutLifeCycle\r\n\r\n\r\n    #--- DRYout from draw ----------------------------------------------------------------------------------------------\r\n\r\n    getDrawArea = () ->\r\n      container = _container.getChartArea()\r\n      drawArea = container.select(\".#{me.id()}\")\r\n      if drawArea.empty()\r\n        drawArea = container.append('g').attr('class', (d) -> me.id())\r\n      return drawArea\r\n\r\n    buildArgs = (data, notAnimated) ->\r\n      options = {\r\n        height:_container.height(),\r\n        width:_container.width(),\r\n        margins:_container.margins(),\r\n        duration: if notAnimated then 0 else me.chart().animationDuration()\r\n      }\r\n      args = [data, options]\r\n      for kind in ['x','y', 'color', 'size', 'shape', 'rangeX', 'rangeY']\r\n        args.push(_scaleList.getKind(kind))\r\n      return args\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    me.draw = (data, notAnimated) ->\r\n      _data = data\r\n\r\n      _layoutLifeCycle.drawChart.apply(getDrawArea(), buildArgs(data, notAnimated))\r\n\r\n      _layoutLifeCycle.on 'redraw', me.redraw\r\n      _layoutLifeCycle.on 'update', me.chart().lifeCycle().update\r\n      _layoutLifeCycle.on 'drawAxis', me.chart().lifeCycle().drawAxis\r\n      _layoutLifeCycle.on 'updateAttrs', me.chart().lifeCycle().updateAttrs\r\n\r\n      _layoutLifeCycle.on 'brush', (axis, notAnimated, idxRange) ->\r\n          _container.drawSingleAxis(axis)\r\n          _layoutLifeCycle.brushDraw.apply(getDrawArea(), [axis, idxRange, _container.width(), _container.height()])\r\n\r\n    return me\r\n\r\n  return layout","angular.module('wk.chart').factory 'legend', ($log, $compile, $rootScope, $templateCache, wkChartTemplates) ->\r\n\r\n  legendCnt = 0\r\n\r\n  uniqueValues = (arr) ->\r\n    set = {}\r\n    for e in arr\r\n      set[e] = 0\r\n    return Object.keys(set)\r\n\r\n  legend = () ->\r\n\r\n    _id = \"legend-#{legendCnt++}\"\r\n    _position = 'top-right'\r\n    _scale = undefined\r\n    _templatePath = undefined\r\n    _legendScope = $rootScope.$new(true)\r\n    _template = undefined\r\n    _parsedTemplate = undefined\r\n    _containerDiv = undefined\r\n    _legendDiv = undefined\r\n    _title = undefined\r\n    _layout = undefined\r\n    _data = undefined\r\n    _options = undefined\r\n    _show = false\r\n    _showValues = false\r\n\r\n    me = {}\r\n\r\n    me.position = (pos) ->\r\n      if arguments.length is 0 then return _position\r\n      else\r\n        _position = pos\r\n        return me\r\n\r\n    me.show = (val) ->\r\n      if arguments.length is 0 then return _show\r\n      else\r\n        _show = val\r\n        return me #to enable chaining\r\n\r\n    me.showValues = (val) ->\r\n      if arguments.length is 0 then return _showValues\r\n      else\r\n        _showValues = val\r\n        return me #to enable chaining\r\n\r\n    me.div = (selection) ->\r\n      if arguments.length is 0 then return _legendDiv\r\n      else\r\n        _legendDiv = selection\r\n        return me\r\n\r\n    me.layout = (layout) ->\r\n      if arguments.length is 0 then return _layout\r\n      else\r\n        _layout = layout\r\n        return me\r\n\r\n    me.scale = (scale) ->\r\n      if arguments.length is 0 then return _scale\r\n      else\r\n        _scale = scale\r\n        return me\r\n\r\n    me.title = (title) ->\r\n      if arguments.length is 0 then return _title\r\n      else\r\n        _title = title\r\n        return me\r\n\r\n    me.template = (path) ->\r\n      if arguments.length is 0 then return _templatePath\r\n      else\r\n        _templatePath = path\r\n        _template = $templateCache.get(_templatePath)\r\n        _parsedTemplate = $compile(_template)(_legendScope)\r\n        return me\r\n\r\n    me.draw = (data, options) ->\r\n      _data = data\r\n      _options = options\r\n      #$log.info 'drawing Legend'\r\n      _containerDiv = _legendDiv or d3.select(me.scale().parent().container().element()).select('.wk-chart')\r\n      if me.show()\r\n        if _containerDiv.select('.wk-chart-legend').empty()\r\n          angular.element(_containerDiv.node()).append(_parsedTemplate)\r\n\r\n        if me.showValues()\r\n          layers = uniqueValues(_scale.value(data))\r\n        else\r\n          layers = _scale.layerKeys(data)\r\n\r\n        s = _scale.scale()\r\n        if me.layout()?.scales().layerScale()\r\n          s = me.layout().scales().layerScale().scale()\r\n        if _scale.kind() isnt 'shape'\r\n          _legendScope.legendRows = layers.map((d) -> {value:d, color:{'background-color':s(d)}})\r\n        else\r\n          _legendScope.legendRows = layers.map((d) -> {value:d, path:d3.svg.symbol().type(s(d)).size(80)()})\r\n          #$log.log _legendScope.legendRows\r\n        _legendScope.showLegend = true\r\n        _legendScope.position = {\r\n          position: if _legendDiv then 'relative' else 'absolute'\r\n        }\r\n\r\n        if not _legendDiv\r\n          containerRect = _containerDiv.node().getBoundingClientRect()\r\n          chartAreaRect = _containerDiv.select('.wk-chart-overlay rect').node().getBoundingClientRect()\r\n          for p in _position.split('-')\r\n              _legendScope.position[p] = \"#{Math.abs(containerRect[p] - chartAreaRect[p])}px\"\r\n        _legendScope.title = _title\r\n      else\r\n        _parsedTemplate.remove()\r\n      return me\r\n\r\n    _parsedTemplate = $compile(wkChartTemplates.legendTemplate())(_legendScope)\r\n\r\n    destroyme = () ->\r\n      _legendScope.$destroy()\r\n\r\n    me.register = (layout) ->\r\n      layout.lifeCycle().on \"drawChart.#{_id}\", me.draw\r\n      layout.lifeCycle().on \"destroy.#{_id}\", destroyme\r\n      return me\r\n\r\n    me.redraw = () ->\r\n      if _data and _options\r\n        me.draw(_data, _options)\r\n      return me\r\n\r\n    return me\r\n\r\n  return legend","angular.module('wk.chart').factory 'scale', ($log, legend, formatDefaults, wkChartScales, wkChartLocale) ->\r\n\r\n  scale = () ->\r\n    _id = ''\r\n    _scale = d3.scale.linear()\r\n    _scaleType = 'linear'\r\n    _exponent = 1\r\n    _isOrdinal = false\r\n    _domain = undefined\r\n    _domainCalc = undefined\r\n    _calculatedDomain = undefined\r\n    _resetOnNewData = false\r\n    _property = ''\r\n    _layerProp = ''\r\n    _layerExclude = []\r\n    _lowerProperty = ''\r\n    _upperProperty = ''\r\n    _range = undefined\r\n    _rangePadding = 0.3\r\n    _rangeOuterPadding = 0.3\r\n    _inputFormatString = undefined\r\n    _inputFormatFn = (data) -> if isNaN(+data) or _.isDate(data) then data else +data\r\n\r\n    _showAxis = false\r\n    _axisOrient = undefined\r\n    _axisOrientOld = undefined\r\n    _axis = undefined\r\n    _ticks = undefined\r\n    _tickFormat = undefined\r\n    _tickValues = undefined\r\n    _rotateTickLabels = undefined\r\n    _showLabel = false\r\n    _axisLabel = undefined\r\n    _showGrid = false\r\n    _reverse = false\r\n    _isHorizontal = false\r\n    _isVertical = false\r\n    _kind = undefined\r\n    _parent = undefined\r\n    _chart = undefined\r\n    _layout = undefined\r\n    _legend = legend()\r\n    _outputFormatString = undefined\r\n    _outputFormatFn = undefined\r\n\r\n    _tickFormat = wkChartLocale.timeFormat.multi([\r\n      [\".%L\", (d) ->  d.getMilliseconds()],\r\n      [\":%S\", (d) ->  d.getSeconds()],\r\n      [\"%I:%M\", (d) ->  d.getMinutes()],\r\n      [\"%I %p\", (d) ->  d.getHours()],\r\n      [\"%a %d\", (d) ->  d.getDay() and d.getDate() isnt 1],\r\n      [\"%b %d\", (d) ->  d.getDate() isnt 1],\r\n      [\"%B\", (d) ->  d.getMonth()],\r\n      [\"%Y\", () ->  true]\r\n    ])\r\n\r\n    me = () ->\r\n\r\n    #---- utility functions ----------------------------------------------------------------------------------------\r\n\r\n    keys = (data) -> if _.isArray(data) then _.reject(_.keys(data[0]), (d) -> d is '$$hashKey') else _.reject(_.keys(data), (d) -> d is '$$hashKey')\r\n\r\n    layerTotal = (d, layerKeys) ->\r\n      layerKeys.reduce(\r\n        (prev, next) -> +prev + +me.layerValue(d,next)\r\n      , 0)\r\n\r\n    layerMax = (data, layerKeys) ->\r\n      d3.max(data, (d) -> d3.max(layerKeys, (k) -> me.layerValue(d,k)))\r\n\r\n    layerMin = (data, layerKeys) ->\r\n      d3.min(data, (d) -> d3.min(layerKeys, (k) -> me.layerValue(d,k)))\r\n\r\n    parsedValue = (v) ->\r\n      if _inputFormatFn.parse then _inputFormatFn.parse(v) else _inputFormatFn(v)\r\n\r\n    calcDomain = {\r\n      extent: (data) ->\r\n        layerKeys = me.layerKeys(data)\r\n        return [layerMin(data, layerKeys), layerMax(data, layerKeys)]\r\n      max: (data) ->\r\n        layerKeys = me.layerKeys(data)\r\n        return [0, layerMax(data, layerKeys)]\r\n      min: (data) ->\r\n        layerKeys = me.layerKeys(data)\r\n        return [0, layerMin(data, layerKeys)]\r\n      totalExtent: (data) ->\r\n        if data[0].hasOwnProperty('total')\r\n          return d3.extent(data.map((d) ->\r\n            d.total))\r\n        else\r\n          layerKeys = me.layerKeys(data)\r\n          return d3.extent(data.map((d) ->\r\n            layerTotal(d, layerKeys)))\r\n      total: (data) ->\r\n        if data[0].hasOwnProperty('total')\r\n          return [0, d3.max(data.map((d) ->\r\n            d.total))]\r\n        else\r\n          layerKeys = me.layerKeys(data)\r\n          return [0, d3.max(data.map((d) ->\r\n            layerTotal(d, layerKeys)))]\r\n      rangeExtent: (data) ->\r\n        if me.upperProperty()\r\n          return [d3.min(me.lowerValue(data)), d3.max(me.upperValue(data))]\r\n        else\r\n          if data.length > 1\r\n            start = me.lowerValue(data[0])\r\n            step = me.lowerValue(data[1]) - start\r\n            return [me.lowerValue(data[0]), start + step * (data.length) ]\r\n      rangeMin: (data) ->\r\n        return [0, d3.min(me.lowerValue(data))]\r\n      rangeMax: (data) ->\r\n        if me.upperProperty()\r\n          return [0, d3.max(me.upperValue(data))]\r\n        else\r\n          start = me.lowerValue(data[0])\r\n          step = me.lowerValue(data[1]) - start\r\n          return [0, start + step * (data.length) ]\r\n      }\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    me.id = () ->\r\n      return _kind + '.' + _parent.id()\r\n\r\n    me.kind = (kind) ->\r\n      if arguments.length is 0 then return _kind\r\n      else\r\n        _kind = kind\r\n        return me\r\n\r\n    me.parent = (parent) ->\r\n      if arguments.length is 0 then return _parent\r\n      else\r\n        _parent = parent\r\n        return me\r\n\r\n    me.chart = (val) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = val\r\n        return me #to enable chaining\r\n\r\n    me.layout = (val) ->\r\n      if arguments.length is 0 then return _layout\r\n      else\r\n        _layout = val\r\n        return me #to enable chaining\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    me.scale = () ->\r\n      return _scale\r\n\r\n    me.legend = () ->\r\n      return _legend\r\n\r\n    me.isOrdinal = () ->\r\n      _isOrdinal\r\n\r\n    me.isHorizontal = (trueFalse) ->\r\n      if arguments.length is 0 then return _isHorizontal\r\n      else\r\n        _isHorizontal = trueFalse\r\n        if trueFalse\r\n          _isVertical = false\r\n        return me\r\n\r\n    me.isVertical = (trueFalse) ->\r\n      if arguments.length is 0 then return _isVertical\r\n      else\r\n        _isVertical = trueFalse\r\n        if trueFalse\r\n          _isHorizontal = false\r\n        return me\r\n\r\n    #-- ScaleType ------------------------------------------------------------------------------------------------------\r\n\r\n    me.scaleType = (type) ->\r\n      if arguments.length is 0 then return _scaleType\r\n      else\r\n        if d3.scale.hasOwnProperty(type) # support the full list of d3 scale types\r\n          _scale = d3.scale[type]()\r\n          _scaleType = type\r\n          me.format(formatDefaults.number)\r\n        else if type is 'time' # time scale is in d3.time object, not in d3.scale.\r\n          _scale = d3.time.scale()\r\n          _scaleType = 'time'\r\n          if _inputFormatString\r\n            me.dataFormat(_inputFormatString)\r\n          me.format(formatDefaults.date)\r\n        else if wkChartScales.hasOwnProperty(type)\r\n          _scaleType = type\r\n          _scale = wkChartScales[type]()\r\n        else\r\n          $log.error 'Error: illegal scale type:', type\r\n\r\n        _isOrdinal = _.has(_scale,'rangeBand') #_scaleType in ['ordinal', 'category10', 'category20', 'category20b', 'category20c']\r\n        if _range\r\n          me.range(_range)\r\n\r\n        if _showAxis\r\n          _axis.scale(_scale)\r\n\r\n        if _exponent and _scaleType is 'pow'\r\n          _scale.exponent(_exponent)\r\n        return me\r\n\r\n    me.exponent = (value) ->\r\n      if arguments.length is 0 then return _exponent\r\n      else\r\n        _exponent = value\r\n        if _scaleType is 'pow'\r\n          _scale.exponent(_exponent)\r\n        return me\r\n\r\n    me.scaleMapFn = (fn) ->\r\n      if arguments.length is 0\r\n        if _scale.mapFn\r\n          return _scale.mapFn()\r\n        return undefined\r\n      else\r\n        if _.isFunction(fn) and _scale.mapFn\r\n          _scale.mapFn(fn)\r\n        return me\r\n\r\n    #--- Domain functions ----------------------------------------------------------------------------------------------\r\n\r\n    me.domain = (dom) ->\r\n      if arguments.length is 0 then return _domain\r\n      else\r\n        _domain = dom\r\n        if _.isArray(_domain)\r\n          _scale.domain(_domain)\r\n        return me\r\n\r\n    me.domainCalc = (rule) ->\r\n      if arguments.length is 0\r\n        return if _isOrdinal then undefined else _domainCalc\r\n      else\r\n        if calcDomain.hasOwnProperty(rule)\r\n          _domainCalc = rule\r\n        else\r\n          $log.error 'illegal domain calculation rule:', rule, \" expected\", _.keys(calcDomain)\r\n        return me\r\n\r\n    me.getDomain = (data) ->\r\n      if arguments.length is 0 then return _scale.domain()\r\n      else\r\n        if not _domain and me.domainCalc()\r\n            return _calculatedDomain\r\n        else\r\n          if _domain\r\n            return _domain\r\n          else\r\n            return me.value(data)\r\n\r\n    me.resetOnNewData = (trueFalse) ->\r\n      if arguments.length is 0 then return _resetOnNewData\r\n      else\r\n        _resetOnNewData = trueFalse\r\n        return me\r\n\r\n    #--- Range Functions -----------------------------------------------------------------------------------------------\r\n\r\n    me.range = (range) ->\r\n      if arguments.length is 0 then return _scale.range()\r\n      else\r\n        _range = range\r\n        if _isOrdinal and me.kind() in ['x','y', 'rangeX', 'rangeY']\r\n            _scale.rangeBands(range, _rangePadding, _rangeOuterPadding)  # if ordinal, set range only for horizontal and vertical dimensions\r\n        else if not (_scaleType in ['category10', 'category20', 'category20b', 'category20c']) #ordinal scales with pre-et range\r\n          _scale.range(range)\r\n        return me\r\n\r\n    me.rangePadding = (config) ->\r\n      if arguments.length is 0 then return {padding:_rangePadding, outerPadding:_rangeOuterPadding}\r\n      else\r\n        _rangePadding = config.padding\r\n        _rangeOuterPadding = config.outerPadding\r\n        return me\r\n\r\n    #--- property related attributes -----------------------------------------------------------------------------------\r\n\r\n    me.property = (name) ->\r\n      if arguments.length is 0 then return _property\r\n      else\r\n        _property = name\r\n        return me\r\n\r\n    me.layerProperty = (name) ->\r\n      if arguments.length is 0 then return _layerProp\r\n      else\r\n        _layerProp = name\r\n        return me\r\n\r\n    me.layerExclude = (excl) ->\r\n      if arguments.length is 0 then return _layerExclude\r\n      else\r\n        _layerExclude = excl\r\n        return me\r\n\r\n    me.layerKeys = (data) ->\r\n      if _property\r\n        if _.isArray(_property)\r\n          return _.intersection(_property, keys(data)) # ensure only keys also in the data are returned and $$hashKey is not returned\r\n        else\r\n          return [_property] #always return an array !!!\r\n      else\r\n        _.reject(keys(data), (d) -> d in _layerExclude)\r\n\r\n    me.lowerProperty = (name) ->\r\n      if arguments.length is 0 then return _lowerProperty\r\n      else\r\n        _lowerProperty = name\r\n        return me\r\n\r\n    me.upperProperty = (name) ->\r\n      if arguments.length is 0 then return _upperProperty\r\n      else\r\n        _upperProperty = name\r\n        return me\r\n\r\n    #--- Data Formatting -----------------------------------------------------------------------------------------------\r\n\r\n    me.dataFormat = (format) ->\r\n      if arguments.length is 0 then return _inputFormatString\r\n      else\r\n        _inputFormatString = format\r\n        if _scaleType is 'time'\r\n          _inputFormatFn = wkChartLocale.timeFormat(format)\r\n        else\r\n          _inputFormatFn = (d) -> d\r\n        return me\r\n\r\n    #--- Core data transformation interface ----------------------------------------------------------------------------\r\n\r\n    me.value = (data) ->\r\n      if _layerProp\r\n        if _.isArray(data) then data.map((d) -> parsedValue(d[_property][_layerProp])) else parsedValue(data[_property][_layerProp])\r\n      else\r\n        if _.isArray(data) then data.map((d) -> parsedValue(d[_property])) else parsedValue(data[_property])\r\n\r\n    me.layerValue = (data, layerKey) ->\r\n      if _layerProp\r\n        parsedValue(data[layerKey][_layerProp])\r\n      else\r\n        parsedValue(data[layerKey])\r\n\r\n    me.lowerValue = (data) ->\r\n      if _.isArray(data) then data.map((d) -> parsedValue(d[_lowerProperty])) else parsedValue(data[_lowerProperty])\r\n\r\n    me.upperValue = (data) ->\r\n      if _.isArray(data) then data.map((d) -> parsedValue(d[_upperProperty])) else parsedValue(data[_upperProperty])\r\n\r\n    me.formattedValue = (data) ->\r\n      if _.isArray(data) then data.map((d) -> me.formatValue(me.value(d))) else me.formatValue(me.value(data))\r\n\r\n    me.formatValue = (val) ->\r\n      if _outputFormatString and val and  (val.getUTCDate or not isNaN(val))\r\n        _outputFormatFn(val)\r\n      else\r\n        val\r\n\r\n    me.map = (data) ->\r\n      if Array.isArray(data) then data.map((d) -> _scale(me.value(data))) else _scale(me.value(data))\r\n\r\n    me.invert = (mappedValue) ->\r\n      # takes a mapped value (pixel position , color value, returns the corresponding value in the input domain\r\n      # the type of inverse is dependent on the scale type for quantitative scales.\r\n      # Ordinal scales ...\r\n\r\n      if _.has(me.scale(),'invert') # i.e. the d3 scale supports the inverse calculation: linear, log, pow, sqrt\r\n        _data = me.chart().getData()\r\n\r\n        # bisect.left never returns 0 in this specific scenario. We need to move the val by an interval to hit the middle of the range and to ensure\r\n        # that the first element will be captured. Also ensures better visual experience with tooltips\r\n        if me.kind() is 'rangeX' or me.kind() is 'rangeY'\r\n          val = me.scale().invert(mappedValue)\r\n          if me.upperProperty()\r\n            bisect = d3.bisector(me.upperValue).left\r\n          else\r\n            step = me.lowerValue(_data[1]) - me.lowerValue(_data[0])\r\n            bisect = d3.bisector((d) -> me.lowerValue(d) + step).left\r\n        else\r\n          range = _scale.range()\r\n          interval = (range[1] - range[0]) / _data.length\r\n          val = me.scale().invert(mappedValue - interval/2)\r\n          bisect = d3.bisector(me.value).left\r\n\r\n        idx = bisect(_data, val)\r\n        idx = if idx < 0 then 0 else if idx >= _data.length then _data.length - 1 else idx\r\n        return idx # the inverse value does not necessarily correspond to a value in the data\r\n\r\n      if _.has(me.scale(),'invertExtent') # d3 supports this for quantize, quantile, threshold. returns the range that gets mapped to the value\r\n        return me.scale().invertExtent(mappedValue) #TODO How should this be mapped correctly. Use case???\r\n\r\n      # d3 does not support invert for ordinal scales, thus things become a bit more tricky.\r\n      # in case we are setting the domain explicitly, we know tha the range values and the domain elements are in the same order\r\n      # in case the domain is set 'lazy' (i.e. as values are used) we cannot map range and domain values easily. Not clear how to do this effectively\r\n\r\n      if me.resetOnNewData()\r\n        domain = _scale.domain()\r\n        range = _scale.range()\r\n        if _isVertical\r\n          interval = range[0] - range[1]\r\n          idx = range.length - Math.floor(mappedValue / interval) - 1\r\n          if idx < 0 then idx = 0\r\n        else\r\n          interval = range[1] - range[0]\r\n          idx = Math.floor(mappedValue / interval)\r\n          if idx >= range.length then idx = range.length - 1\r\n        return idx\r\n\r\n    me.invertOrdinal = (mappedValue) ->\r\n      if me.isOrdinal() and me.resetOnNewData()\r\n        idx = me.invert(mappedValue)\r\n        return _scale.domain()[idx]\r\n\r\n\r\n    #--- Axis Attributes and functions ---------------------------------------------------------------------------------\r\n\r\n    me.showAxis = (trueFalse) ->\r\n      if arguments.length is 0 then return _showAxis\r\n      else\r\n        _showAxis = trueFalse\r\n        if trueFalse\r\n          _axis = d3.svg.axis()\r\n          if me.scaleType() is 'time'\r\n            _axis.tickFormat(_tickFormat)\r\n        else\r\n          _axis = undefined\r\n        return me\r\n\r\n    me.axisOrient = (val) ->\r\n      if arguments.length is 0 then return _axisOrient\r\n      else\r\n        _axisOrientOld = _axisOrient\r\n        _axisOrient = val\r\n        return me #to enable chaining\r\n\r\n    me.axisOrientOld = (val) ->  #TODO This is not the best place to keep the old axis value. Only needed by container in case the axis position changes\r\n      if arguments.length is 0 then return _axisOrientOld\r\n      else\r\n        _axisOrientOld = val\r\n        return me #to enable chaining\r\n\r\n    me.axis = () ->\r\n      return _axis\r\n\r\n    me.ticks = (val) ->\r\n      if arguments.length is 0 then return _ticks\r\n      else\r\n        _ticks = val\r\n        if me.axis()\r\n          me.axis().ticks(_ticks)\r\n        return me #to enable chaining\r\n\r\n    me.tickFormat = (val) ->\r\n      if arguments.length is 0 then return _tickFormat\r\n      else\r\n        _tickFormat = val\r\n        if me.axis()\r\n          me.axis().tickFormat(val)\r\n        return me #to enable chaining\r\n\r\n    me.tickValues = (val) ->\r\n      if arguments.length is 0 then return _tickValues\r\n      else\r\n        _tickValues = val\r\n        if me.axis()\r\n          me.axis().tickValues(val)\r\n        return me\r\n\r\n    me.showLabel = (val) ->\r\n      if arguments.length is 0 then return _showLabel\r\n      else\r\n        _showLabel = val\r\n        return me #to enable chaining\r\n\r\n    me.axisLabel = (text) ->\r\n      if arguments.length is 0\r\n        return if _axisLabel then _axisLabel else me.property()\r\n      else\r\n        _axisLabel = text\r\n        return me\r\n\r\n    me.rotateTickLabels = (nbr) ->\r\n      if arguments.length is 0 then return _rotateTickLabels\r\n      else\r\n        _rotateTickLabels = nbr\r\n        return me\r\n\r\n    me.format = (val) ->\r\n      if arguments.length is 0 then return _outputFormatString\r\n      else\r\n        if val.length > 0\r\n          _outputFormatString = val\r\n        else\r\n          _outputFormatString = if me.scaleType() is 'time' then formatDefaults.date else formatDefaults.number\r\n        _outputFormatFn = if me.scaleType() is 'time' then wkChartLocale.timeFormat(_outputFormatString) else wkChartLocale.numberFormat(_outputFormatString)\r\n        return me #to enable chainingF\r\n\r\n    me.showGrid = (trueFalse) ->\r\n      if arguments.length is 0 then return _showGrid\r\n      else\r\n        _showGrid = trueFalse\r\n        return me\r\n\r\n    me.reverse = (trueFalse) ->\r\n      if arguments.length is 0 then return _reverse \r\n      else\r\n        _reverse = trueFalse\r\n        return me\r\n\r\n    #-- Register for drawing lifecycle events --------------------------------------------------------------------------\r\n\r\n    me.register = () ->\r\n      me.chart().lifeCycle().on \"scaleDomains.#{me.id()}\", (data) ->\r\n        # set the domain if required\r\n        if me.resetOnNewData()\r\n          # ensure robust behavior in case of problematic definitions\r\n          domain = me.getDomain(data)\r\n          if _scaleType is 'linear' and _.some(domain, isNaN)\r\n            throw \"Scale #{me.kind()}, Type '#{_scaleType}': cannot compute domain for property '#{_property}' . Possible reasons: property not set, data not compatible with defined type. Domain:#{domain}\"\r\n\r\n          _scale.domain(domain)\r\n\r\n      me.chart().lifeCycle().on \"prepareData.#{me.id()}\", (data) ->\r\n        # compute the domain range calculation if required\r\n        calcRule =  me.domainCalc()\r\n        if me.parent().scaleProperties\r\n          me.layerExclude(me.parent().scaleProperties())\r\n        if calcRule and calcDomain[calcRule]\r\n          _calculatedDomain = calcDomain[calcRule](data)\r\n\r\n    me.update = (noAnimation) ->\r\n      me.parent().lifeCycle().update(noAnimation)\r\n      return me\r\n\r\n    me.updateAttrs = () ->\r\n      me.parent().lifeCycle().updateAttrs()\r\n\r\n    me.drawAxis = () ->\r\n      me.parent().lifeCycle().drawAxis()\r\n      return me\r\n\r\n    return me\r\n\r\n  return scale","angular.module('wk.chart').factory 'scaleList', ($log) ->\r\n  return scaleList = () ->\r\n    _list = {}\r\n    _kindList = {}\r\n    _parentList = {}\r\n    _owner = undefined\r\n    _requiredScales = []\r\n    _layerScale = undefined\r\n\r\n    me = () ->\r\n\r\n    me.owner = (owner) ->\r\n      if arguments.length is 0 then return _owner\r\n      else\r\n        _owner = owner\r\n        return me\r\n\r\n    me.add = (scale) ->\r\n      if _list[scale.id()]\r\n        $log.error \"scaleList.add: scale #{scale.id()} already defined in scaleList of #{_owner.id()}. Duplicate scales are not allowed\"\r\n      _list[scale.id()] = scale\r\n      _kindList[scale.kind()] = scale\r\n      return me\r\n\r\n    me.hasScale = (scale) ->\r\n      s = me.getKind(scale.kind())\r\n      return s.id() is scale.id()\r\n\r\n    me.getKind = (kind) ->\r\n      if _kindList[kind] then _kindList[kind] else if _parentList.getKind then _parentList.getKind(kind) else undefined\r\n\r\n    me.hasKind = (kind) ->\r\n      return !!me.getKind(kind)\r\n\r\n    me.remove = (scale) ->\r\n      if not _list[scale.id()]\r\n        $log.warn \"scaleList.delete: scale #{scale.id()} not defined in scaleList of #{_owner.id()}. Ignoring\"\r\n        return me\r\n      delete _list[scale.id()]\r\n      delete me[scale.id]\r\n      return me\r\n\r\n    me.parentScales = (scaleList) ->\r\n      if arguments.length is 0 then return _parentList\r\n      else\r\n        _parentList = scaleList\r\n        return me\r\n\r\n    me.getOwned = () ->\r\n      _list\r\n\r\n    me.allKinds = () ->\r\n      ret = {}\r\n      if _parentList.allKinds\r\n        for k, s of _parentList.allKinds()\r\n          ret[k] = s\r\n      for k,s of _kindList\r\n        ret[k] = s\r\n      return ret\r\n\r\n    me.requiredScales = (req) ->\r\n      if arguments.length is 0 then return _requiredScales\r\n      else\r\n        _requiredScales = req\r\n        for k in req\r\n          if not me.hasKind(k)\r\n            throw \"Fatal Error: scale '#{k}' required but not defined\"\r\n      return me\r\n\r\n    me.getScales = (kindList) ->\r\n      l = {}\r\n      for kind in kindList\r\n        if me.hasKind(kind)\r\n          l[kind] = me.getKind(kind)\r\n        else\r\n          throw \"Fatal Error: scale '#{kind}' required but not defined\"\r\n      return l\r\n\r\n    me.getScaleProperties = () ->\r\n      l = []\r\n      for k,s of me.allKinds()\r\n        prop = s.property()\r\n        if prop\r\n          if Array.isArray(prop)\r\n            l.concat(prop)\r\n          else\r\n            l.push(prop)\r\n      return l\r\n\r\n    me.layerScale = (kind) ->\r\n      if arguments.length is 0\r\n        if _layerScale\r\n          return me.getKind(_layerScale)\r\n        return undefined\r\n      else\r\n        _layerScale = kind\r\n        return me\r\n\r\n    return me\r\n","###*\r\n  @ngdoc provider\r\n  @module wk.chart\r\n  @name wkChartLocaleProvider\r\n  @description\r\n  registers a den locale\r\n\r\n###\r\nangular.module('wk.chart').provider 'wkChartLocale', () ->\r\n\r\n  locale = 'en_US'\r\n\r\n  locales = {\r\n\r\n    de_DE:d3.locale({\r\n      decimal: \",\",\r\n      thousands: \".\",\r\n      grouping: [3],\r\n      currency: [\"\", \" €\"],\r\n      dateTime: \"%A, der %e. %B %Y, %X\",\r\n      date: \"%e.%m.%Y\",\r\n      time: \"%H:%M:%S\",\r\n      periods: [\"AM\", \"PM\"], # unused\r\n      days: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\r\n      shortDays: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\r\n      months: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\",\r\n               \"November\", \"Dezember\"],\r\n      shortMonths: [\"Jan\", \"Feb\", \"Mrz\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\"]\r\n    }),\r\n\r\n    'en_US': d3.locale({\r\n      \"decimal\": \".\",\r\n      \"thousands\": \",\",\r\n      \"grouping\": [3],\r\n      \"currency\": [\"$\", \"\"],\r\n      \"dateTime\": \"%a %b %e %X %Y\",\r\n      \"date\": \"%m/%d/%Y\",\r\n      \"time\": \"%H:%M:%S\",\r\n      \"periods\": [\"AM\", \"PM\"],\r\n      \"days\": [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n      \"shortDays\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n      \"months\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\r\n                 \"November\", \"December\"],\r\n      \"shortMonths\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n    })\r\n  }\r\n\r\n  ###*\r\n    @ngdoc method\r\n    @name wkChartLocaleProvider#setLocale\r\n    @param name {string} name of the locale. If locale is unknown it reports an error and sets locale to en_US\r\n  ###\r\n  this.setLocale = (l) ->\r\n    if _.has(locales, l)\r\n      locale = l\r\n    else\r\n      throw \"unknowm locale '#{l}' using 'en-US' instead\"\r\n\r\n  ###*\r\n    @ngdoc method\r\n    @name wkChartLocaleProvider#addLocaleDefinition\r\n    @param name {string} name of the locale.\r\n    @param localeDefinition {object} A d3.js locale definition object. See [d3 documentation](https://github.com/mbostock/d3/wiki/Localization#d3_locale) for details of the format.\r\n  ###\r\n  this.addLocaleDefinition = (name, l) ->\r\n    locales[name] = d3.locale(l)\r\n      #$log.warn 'locale ' + name + ' already defined. Using new definition'\r\n\r\n  ###*\r\n    @ngdoc service\r\n    @module wk.chart\r\n    @name wkChartLocale\r\n    @description\r\n    @returns d3.ls locale definition\r\n  ###\r\n  this.$get = ['$log',($log) ->\r\n    return locales[locale]\r\n  ]\r\n\r\n  return this","angular.module('wk.chart').provider 'wkChartScales', () ->\r\n\r\n  _customColors = ['red', 'orange', 'yellow', 'green', 'blue']\r\n  _customMapFn = undefined\r\n\r\n  hashed = () ->\r\n    d3Scale = d3.scale.ordinal()\r\n\r\n    _hashFn = (value) ->\r\n      hash = 0;\r\n      m = d3Scale.range().length - 1\r\n      for i in [0 .. value.length]\r\n        hash = (31 * hash + value.charAt(i)) % m;\r\n\r\n    me = (value) ->\r\n      if not arguments then return me\r\n      d3Scale(_hashFn(value))\r\n\r\n    me.range = (range) ->\r\n      if not arguments then return d3Scale.range()\r\n      d3Scale.domain(d3.range(range.length))\r\n      d3Scale.range(range)\r\n\r\n    me.domain = d3Scale.domain\r\n    me.rangePoint = d3Scale.rangePoints\r\n    me.rangeBands = d3Scale.rangeBands\r\n    me.rangeRoundBands = d3Scale.rangeRoundBands\r\n    me.rangeBand = d3Scale.rangeBand\r\n    me.rangeExtent = d3Scale.rangeExtent\r\n\r\n    me.hash = (fn) ->\r\n      if not arguments then return _hashFn\r\n      _hashFn = fn\r\n      return me\r\n\r\n    return me\r\n\r\n  customScale = () ->\r\n    d3Scale = d3.scale.ordinal()\r\n    mapFn = _customMapFn || d3Scale # use the d3 function unless a mapFn is configured\r\n\r\n    me = (value) ->\r\n      if not arguments then return me\r\n      # use the mapFn to compute the return value\r\n      return mapFn.apply(me, [value])\r\n\r\n    me.mapFn = (fn) ->\r\n      if not arguments then return mapFn\r\n      if _.isFunction(fn)\r\n        mapFn = fn\r\n      return me\r\n\r\n    me.domain = d3Scale.domain\r\n    me.range = d3Scale.range\r\n    me.rangePoint = d3Scale.rangePoints\r\n    me.rangeBands = d3Scale.rangeBands\r\n    me.rangeRoundBands = d3Scale.rangeRoundBands\r\n    me.rangeBand = d3Scale.rangeBand\r\n    me.rangeExtent = d3Scale.rangeExtent\r\n\r\n    return me\r\n\r\n\r\n  categoryColors = () -> return d3.scale.ordinal().range(_customColors)\r\n\r\n  categoryColorsHashed = () -> return hashed().range(_customColors)\r\n\r\n  this.colors = (colors) ->\r\n    _customColors = colors\r\n\r\n  this.customMapFn = (fn) ->\r\n    if _.isFunction(fn)\r\n      mapFn = fn\r\n\r\n\r\n  this.$get = ['$log',($log) ->\r\n    return {\r\n      hashed: hashed,\r\n      customCategory: categoryColors,\r\n      customCategoryHashed: categoryColorsHashed\r\n      customScale: customScale\r\n    }\r\n  ]\r\n\r\n  return this","###*\r\n  @ngdoc provider\r\n  @module wk.chart\r\n  @name wkChartTemplatesProvider\r\n  @description\r\n  used to register a custom tooltip or legend default template and overwrite the default system templates.\r\n\r\n###\r\nangular.module('wk.chart').provider 'wkChartTemplates', () ->\r\n\r\n  tooltipTemplateUrl = 'templates/toolTip.html'\r\n  legendTemplateUrl = 'templates/legend.html'\r\n  ###*\r\n    @ngdoc method\r\n    @name wkChartTemplatesProvider#setTooltipTemplate\r\n    @param url {string} the url of the template file\r\n  ###\r\n  this.setTooltipTemplate = (url)  ->\r\n    tooltipTemplateUrl = url\r\n\r\n  ###*\r\n      @ngdoc method\r\n      @name wkChartTemplatesProvider#setLegendTemplate\r\n      @param url {string} the url of the template file\r\n    ###\r\n  this.setLegendTemplate = (url) ->\r\n    legendTemplateUrl = url\r\n\r\n  ###*\r\n    @ngdoc service\r\n    @module wk.chart\r\n    @name wkChartTemplates\r\n    @description\r\n    provides the default tooltip and legend template.\r\n  ###\r\n  this.$get = ['$log', '$templateCache',($log, $templateCache) ->\r\n    return {\r\n      ###*\r\n        @ngdoc method\r\n        @name wkChartTemplates#tooltipTemplate\r\n        @returns {string} the tooltips template\r\n      ###\r\n      tooltipTemplate: () -> $templateCache.get(tooltipTemplateUrl)\r\n\r\n      ###*\r\n        @ngdoc method\r\n        @name wkChartTemplates#legendTemplate\r\n        @returns {string} the legends template\r\n      ###\r\n      legendTemplate: () -> $templateCache.get(legendTemplateUrl)}\r\n  ]\r\n\r\n  return this\r\n","angular.module('wk.chart').service 'selectionSharing', ($log) ->\r\n  _selection = {}\r\n  _selectionIdxRange = {}\r\n  callbacks = {}\r\n\r\n  this.createGroup = (group) ->\r\n\r\n\r\n  this.setSelection = (selection, selectionIdxRange, group) ->\r\n    if group\r\n      _selection[group] = selection\r\n      _selectionIdxRange[group] = selectionIdxRange\r\n      if callbacks[group]\r\n        for cb in callbacks[group]\r\n          cb(selection, selectionIdxRange)\r\n\r\n  this.getSelection = (group) ->\r\n    grp = group or 'default'\r\n    return selection[grp]\r\n\r\n  this.register = (group, callback) ->\r\n    if group\r\n      if not callbacks[group]\r\n        callbacks[group] = []\r\n      #ensure that callbacks are not registered more than once\r\n      if not _.contains(callbacks[group], callback)\r\n        callbacks[group].push(callback)\r\n\r\n  this.unregister = (group, callback) ->\r\n    if callbacks[group]\r\n      idx = callbacks[group].indexOf callback\r\n      if idx >= 0\r\n        callbacks[group].splice(idx, 1)\r\n\r\n  return this\r\n\r\n","angular.module('wk.chart').service 'timing', ($log) ->\r\n\r\n  timers = {}\r\n  elapsedStart = 0\r\n  elapsed = 0\r\n\r\n  this.init = () ->\r\n    elapsedStart = Date.now()\r\n\r\n  this.start = (topic) ->\r\n    top = timers[topic]\r\n    if not top\r\n      top = timers[topic] = {name:topic, start:0, total:0, callCnt:0, active: false}\r\n    top.start = Date.now()\r\n    top.active = true\r\n\r\n  this.stop = (topic) ->\r\n    if top = timers[topic]\r\n      top.active = false\r\n      top.total += Date.now() - top.start\r\n      top.callCnt += 1\r\n    elapsed = Date.now() - elapsedStart\r\n\r\n  this.report = () ->\r\n    for topic, val of timers\r\n      val.avg = val.total / val.callCnt\r\n    $log.info timers\r\n    $log.info 'Elapsed Time (ms)', elapsed\r\n    return timers\r\n\r\n  this.clear = () ->\r\n    timers = {}\r\n\r\n  return this","angular.module('wk.chart').factory 'layeredData', ($log) ->\r\n\r\n  layered = () ->\r\n    _data = []\r\n    _layerKeys = []\r\n    _x = undefined\r\n    _calcTotal = false\r\n    _min = Infinity\r\n    _max = -Infinity\r\n    _tMin = Infinity\r\n    _tMax = -Infinity\r\n\r\n    me = () ->\r\n\r\n    me.data = (dat) ->\r\n      if arguments.length Is 0\r\n        return _data\r\n      else\r\n        _data = dat\r\n        return me\r\n\r\n    me.layerKeys = (keys) ->\r\n      if arguments.length is 0\r\n        return _layerKeys\r\n      else\r\n        _layerKeys = keys\r\n        return me\r\n\r\n    me.x = (name) ->\r\n      if arguments.length is 0\r\n        return _x\r\n      else\r\n        _x = name\r\n        return me\r\n\r\n    me.calcTotal = (t_f) ->\r\n      if arguments.length is 0\r\n        return _calcTotal\r\n      else\r\n        _calcTotal = t_f\r\n        return me\r\n\r\n    me.min = () ->\r\n      _min\r\n\r\n    me.max = () ->\r\n      _max\r\n\r\n    me.minTotal = () ->\r\n      _tMin\r\n\r\n    me.maxTotal = () ->\r\n      _tMax\r\n\r\n    me.extent = () ->\r\n      [me.min(), me.max()]\r\n\r\n    me.totalExtent = () ->\r\n      [me.minTotal(), me.maxTotal()]\r\n\r\n    me.columns = (data) ->\r\n      if arguments.length is 1\r\n        #_layerKeys.map((k) -> {key:k, values:data.map((d) -> {x: d[_x], value: d[k], data: d} )})\r\n        res = []\r\n        _min = Infinity\r\n        _max = -Infinity\r\n        _tMin = Infinity\r\n        _tMax = -Infinity\r\n\r\n        for k, i in _layerKeys\r\n          res[i] = {key:k, value:[], min:Infinity, max:-Infinity}\r\n        for d, i in data\r\n          t = 0\r\n          xv = if typeof _x is 'string' then d[_x] else _x(d)\r\n\r\n          for l in res\r\n            v = +d[l.key]\r\n            l.value.push {x:xv, value: v, key:l.key}\r\n            if l.max < v then l.max = v\r\n            if l.min > v then l.min = v\r\n            if _max < v then _max = v\r\n            if _min > v then _min = v\r\n            if _calcTotal then t += +v\r\n          if _calcTotal\r\n            #total.value.push {x:d[_x], value:t, key:total.key}\r\n            if _tMax < t then _tMax = t\r\n            if _tMin > t then _tMin = t\r\n        return {min:_min, max:_max, totalMin:_tMin,totalMax:_tMax, data:res}\r\n      return me\r\n\r\n\r\n\r\n    me.rows = (data) ->\r\n      if arguments.length is 1\r\n        return data.map((d) -> {x: d[_x], layers: layerKeys.map((k) -> {key:k, value: d[k], x:d[_x]})})\r\n      return me\r\n\r\n\r\n    return me","angular.module('wk.chart').directive 'svgIcon', ($log) ->\r\n  ## insert svg path into interpolated HTML. Required prevent Angular from throwing error (Fix 22)\r\n  return {\r\n    restrict: 'E'\r\n    template: '<svg ng-style=\"style\"><path></path></svg>'\r\n    scope:\r\n      path: \"=\"\r\n      width: \"@\"\r\n    link: (scope, elem, attrs ) ->\r\n      scope.style = {  # fix IE problem with interpolating style values\r\n        height: '20px'\r\n        width: scope.width + 'px'\r\n        'vertical-align': 'middle'\r\n      }\r\n      scope.$watch 'path', (val) ->\r\n        if val\r\n          d3.select(elem[0]).select('path').attr('d', val).attr('transform', \"translate(8,8)\")\r\n  }","angular.module('wk.chart').service 'tooltipUtils', ($log) ->\r\n\r\n  this.createTooltipMarkers = (selection, idx) ->\r\n    hasIdx = arguments.length is 2\r\n    selection.append('circle').attr('class', 'wk-chart-tt-marker')\r\n    .attr('r', 9)\r\n    .style('fill', (d)-> if hasIdx then d[idx].color else d.color)\r\n    .style('fill-opacity', 0.3)\r\n    .style('stroke', (d)-> if hasIdx then d[idx].color else d.color)\r\n    .style('pointer-events', 'none')\r\n\r\n    selection.append('circle').attr('class', 'wk-chart-tt-marker')\r\n    .attr('r', 4)\r\n    .style('fill', (d)-> if hasIdx then d[idx].color else d.color)\r\n    .style('fill-opacity', 0.6)\r\n    .style('stroke', 'white')\r\n    .style('pointer-events','none')\r\n\r\n  return this","angular.module('wk.chart').service 'utils', ($log) ->\r\n\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  @diff = (a,b,direction) ->\r\n    notInB = (v) ->\r\n      b.indexOf(v) < 0\r\n\r\n    res = {}\r\n    i = 0\r\n    while i < a.length\r\n      if notInB(a[i])\r\n        res[a[i]] = undefined\r\n        j = i + direction\r\n        while 0 <= j < a.length\r\n          if notInB(a[j])\r\n            j += direction\r\n          else\r\n            res[a[i]] =  a[j]\r\n            break\r\n      i++\r\n    return res\r\n\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  id = 0\r\n  @getId = () ->\r\n    return 'Chart' + id++\r\n\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  @parseList = (val) ->\r\n    if val\r\n      l = val.trim().replace(/^\\[|\\]$/g, '').split(',').map((d) -> d.replace(/^[\\\"|']|[\\\"|']$/g, ''))\r\n      return if l.length is 1 then return l[0] else l\r\n    return undefined\r\n\r\n  @parseTrueFalse = (val) ->\r\n    if val is '' or val is 'true' then true else (if val is 'false' then false else undefined)\r\n\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  @mergeData = () ->\r\n\r\n    _prevData = []\r\n    _data = []\r\n    _prevHash = {}\r\n    _hash = {}\r\n    _prevCommon = []\r\n    _common = []\r\n    _first = undefined\r\n    _last = undefined\r\n\r\n    _key = (d) -> d # identity\r\n    _layerKey = (d) -> d\r\n\r\n\r\n    me = (data) ->\r\n      # save _data to _previousData and update _previousHash;\r\n      _prevData = []\r\n      _prevHash = {}\r\n      for d,i  in _data\r\n        _prevData[i] = d;\r\n        _prevHash[_key(d)] = i\r\n\r\n      #iterate over data and determine the common elements\r\n      _prevCommon = [];\r\n      _common = [];\r\n      _hash = {};\r\n      _data = data;\r\n\r\n      for d,j in _data\r\n        key = _key(d)\r\n        _hash[key] = j\r\n        if _prevHash.hasOwnProperty(key)\r\n          #element is in both arrays\r\n          _prevCommon[_prevHash[key]] = true\r\n          _common[j] = true\r\n      return me;\r\n\r\n    me.key = (fn) ->\r\n      if not arguments then return _key\r\n      _key = fn;\r\n      return me;\r\n\r\n    me.first = (first) ->\r\n      if not arguments then return _first\r\n      _first = first\r\n      return me\r\n\r\n    me.last = (last) ->\r\n      if not arguments then return _last\r\n      _last = last\r\n      return me\r\n\r\n    me.added = () ->\r\n      ret = [];\r\n      for d, i in _data\r\n        if !_common[i] then ret.push(_d)\r\n      return ret\r\n\r\n    me.deleted = () ->\r\n      ret = [];\r\n      for p, i in _prevData\r\n        if !_prevCommon[i] then ret.push(_prevData[i])\r\n      return ret\r\n\r\n    me.current = (key) ->\r\n      return _data[_hash[key]]\r\n\r\n    me.prev = (key) ->\r\n      return _prevData[_prevHash[key]]\r\n\r\n    me.addedPred = (added) ->\r\n      predIdx = _hash[_key(added)]\r\n      while !_common[predIdx]\r\n        if predIdx-- < 0 then return _first\r\n      return _prevData[_prevHash[_key(_data[predIdx])]]\r\n\r\n    me.addedPred.left = (added) ->\r\n      me.addedPred(added).x\r\n\r\n    me.addedPred.right = (added) ->\r\n      obj = me.addedPred(added)\r\n      if _.has(obj, 'width') then obj.x + obj.width else obj.x\r\n\r\n    me.deletedSucc = (deleted) ->\r\n      succIdx = _prevHash[_key(deleted)]\r\n      while !_prevCommon[succIdx]\r\n        if succIdx++ >= _prevData.length then return _last\r\n      return _data[_hash[_key(_prevData[succIdx])]]\r\n\r\n    return me;\r\n\r\n  @mergeSeriesSorted =  (aOld, aNew)  ->\r\n    iOld = 0\r\n    iNew = 0\r\n    lOldMax = aOld.length - 1\r\n    lNewMax = aNew.length - 1\r\n    lMax = Math.max(lOldMax, lNewMax)\r\n    result = []\r\n\r\n    while iOld <= lOldMax and iNew <= lNewMax\r\n      if +aOld[iOld] is +aNew[iNew]\r\n        result.push([iOld, Math.min(iNew,lNewMax),aOld[iOld]]);\r\n        #console.log('same', aOld[iOld]);\r\n        iOld++;\r\n        iNew++;\r\n      else if +aOld[iOld] < +aNew[iNew]\r\n        # aOld[iOld is deleted\r\n        result.push([iOld,undefined, aOld[iOld]])\r\n        # console.log('deleted', aOld[iOld]);\r\n        iOld++\r\n      else\r\n        # aNew[iNew] is added\r\n        result.push([undefined, Math.min(iNew,lNewMax),aNew[iNew]])\r\n        # console.log('added', aNew[iNew]);\r\n        iNew++\r\n\r\n    while iOld <= lOldMax\r\n      # if there is more old items, mark them as deleted\r\n      result.push([iOld,undefined, aOld[iOld]]);\r\n      # console.log('deleted', aOld[iOld]);\r\n      iOld++;\r\n\r\n    while iNew <= lNewMax\r\n      # if there is more new items, mark them as added\r\n      result.push([undefined, Math.min(iNew,lNewMax),aNew[iNew]]);\r\n      # console.log('added', aNew[iNew]);\r\n      iNew++;\r\n\r\n    return result\r\n\r\n  @mergeSeriesUnsorted = (aOld,aNew) ->\r\n    iOld = 0\r\n    iNew = 0\r\n    lOldMax = aOld.length - 1\r\n    lNewMax = aNew.length - 1\r\n    lMax = Math.max(lOldMax, lNewMax)\r\n    result = []\r\n\r\n    while iOld <= lOldMax and iNew <= lNewMax\r\n      if aOld[iOld] is aNew[iNew]\r\n        result.push([iOld, Math.min(iNew,lNewMax),aOld[iOld]]);\r\n        #console.log('same', aOld[iOld]);\r\n        iOld++;\r\n        iNew++;\r\n      else if aNew.indexOf(aOld[iOld]) < 0\r\n        # aOld[iOld is deleted\r\n        result.push([iOld,undefined, aOld[iOld]])\r\n        # console.log('deleted', aOld[iOld]);\r\n        iOld++\r\n      else\r\n        # aNew[iNew] is added\r\n        result.push([undefined, Math.min(iNew,lNewMax),aNew[iNew]])\r\n        # console.log('added', aNew[iNew]);\r\n        iNew++\r\n\r\n    while iOld <= lOldMax\r\n      # if there is more old items, mark them as deleted\r\n      result.push([iOld,undefined, aOld[iOld]]);\r\n      # console.log('deleted', aOld[iOld]);\r\n      iOld++;\r\n\r\n    while iNew <= lNewMax\r\n      # if there is more new items, mark them as added\r\n      result.push([undefined, Math.min(iNew,lNewMax),aNew[iNew]]);\r\n      # console.log('added', aNew[iNew]);\r\n      iNew++;\r\n\r\n    return result\r\n\r\n  return @\r\n","angular.module('wk.chart').directive 'chartGenerator', ($log, chartFactory, modelTypes) ->\r\n\r\n  return {\r\n    restrict:'E'\r\n    scope:\r\n      markup:'='\r\n      properties:'='\r\n      error:'&'\r\n      warning:'&'\r\n\r\n    link: (scope, iElement, iAttrs) ->\r\n      if iAttrs.properties\r\n        scope.properties = chartFactory.create()\r\n\r\n      scope.$watch('properties', (values) ->\r\n        if chartFactory.verify()\r\n          if iAttrs.markup\r\n            scope.markup = chartFactory.generateMarkup(scope.properties)\r\n          if iAttrs.warning and chartFactory.hasWarnings\r\n            scope.warning({warnings:chartFactory.warnings})\r\n        else\r\n          if iAttrs.error\r\n            scope.error({errors:chartFactory.errors})\r\n      , true\r\n      )\r\n  }","angular.module('wk.chart').service 'modelUtils', ($log, $templateCache, modelTypes) ->\r\n\r\n  this.stringList = (list) ->\r\n    return /(\\[(.*)\\])|(.*)/g.test(list)\r\n\r\n  this.string  = (value) ->\r\n    return _.isString(value)\r\n\r\n  this.number = (value) ->\r\n    return _.isNumber(value)\r\n\r\n  this.trueFalse = (value) ->\r\n    return _.isBoolean(value)\r\n\r\n  this.templateUrl = (value) ->\r\n    return not _.isEmpty($templateCache.get(value))\r\n\r\n  this.listVerifier = () ->\r\n    return (value) ->\r\n      return value in this.values\r\n\r\n  this.attributeGenerator = (name, value) ->\r\n    if value\r\n      return \"#{name}=\\\"#{value}\\\"\"\r\n    else\r\n      return name\r\n\r\n  this.attributeListGenerator = (model) ->\r\n    val = ''\r\n    for name, value of model\r\n      if value.type isnt 'object'\r\n        if _.has(value, 'generator')\r\n          val += ' ' + value.generator(value)\r\n        else\r\n          if value.value\r\n            val += ' ' + this.attributeGenerator(name, value.value)\r\n    return val\r\n\r\n\r\n  this.addProperty = (obj, store, name) ->\r\n    return Object.defineProperty(obj, name, {\r\n      get: () -> store[name].value\r\n      set: (val) -> store[name].value = val\r\n      enumerable:true\r\n    })\r\n\r\n  this.addGetter = (obj, store, name) ->\r\n    return Object.defineProperty(obj, name, {\r\n      get: () -> store[name]\r\n      enumerable:true\r\n    })\r\n\r\n\r\n  this.addProperties = (props, _data, me) ->\r\n    for name, dataType of props\r\n      if not _.has(me, name)\r\n        _data[name] = {}\r\n        this.addProperty(me, _data, name)\r\n        if _.isString(dataType)\r\n          _data[name].validator = modelTypes.getValidator(dataType)\r\n        else\r\n          if _.has(dataType, 'validator')\r\n            _data[name].validator = dataType.validator\r\n          if dataType.type is 'enum'\r\n            _data[name].enum = dataType.values\r\n            _data[name].validator = modelTypes.getValidator(dataType)\r\n\r\n    me.validate = (name, value) -> return _data[name].validator.apply(_data[name], [value])\r\n    me.acceptedValues = (name) -> return _data[name].enum\r\n\r\n  this.addDecorator = (deco, _data, me) ->\r\n    _data[deco.name] = {}\r\n    _data[deco.name + '$set'] = {}\r\n    this.addProperty(me, _data, deco.name + '$set')\r\n    if _.has(deco, 'value')\r\n      this.addProperty(me, _data, deco.name)\r\n      if _.isString(deco.value)\r\n        _data[deco.name].validator = modelTypes.getValidator(deco.value)\r\n      else\r\n      if _.has(deco, 'validator')\r\n        _data[deco.name].validator = deco.value.validator\r\n      if deco.value.type is 'enum'\r\n        _data[deco.name].enum = deco.value.values\r\n        _data[deco.name].validator = modelTypes.getValidator(deco.value)\r\n\r\n    this.addProperties(deco.properties, _data, me)\r\n\r\n  this.addDecorators = (decorators, _data, me) ->\r\n    if decorators\r\n      for deco in decorators\r\n        this.addDecorator(deco, _data, me)\r\n\r\n  this.generateProperties = (dProperties, iModel) ->\r\n    markup = ''\r\n    for name, type of dProperties\r\n      if iModel[name]\r\n        if _.has(dProperties[name], 'generator')\r\n          markup += dProperties[name].generator(iModel[name])\r\n        else\r\n          markup += \" #{name}=\\\"#{iModel[name]}\\\"\"\r\n    return markup\r\n\r\n\r\n\r\n  this.generateDecorators = (dDecorators, iModel) ->\r\n    markup = ''\r\n    if dDecorators\r\n      for deco in dDecorators\r\n        if iModel[deco.name + '$set']\r\n          if _.has(deco, 'generator')\r\n            markup += deco.generator(iModel[deco.name])\r\n          else\r\n            if iModel[deco.name]\r\n              markup += \" #{deco.name}=\\\"#{iModel[deco.name]}\\\"\"\r\n            else\r\n              markup += ' ' + deco.name\r\n          markup += this.generateProperties(deco.properties, iModel)\r\n      return markup\r\n    return ''\r\n\r\n  return this\r\n","angular.module('wk.chart').service 'chartFactory', ($log, modelTypes, dimensionFactory, layoutFactory, modelUtils) ->\r\n\r\n  CreateObj = (model) ->\r\n    ((model) ->\r\n      _data = {}\r\n      _data.dimensions = {}\r\n      _data.layouts = []\r\n      me = {}\r\n\r\n      modelUtils.addProperties(model.properties, _data, me)\r\n\r\n      modelUtils.addDecorators(model.decorators, _data, me)\r\n\r\n      modelUtils.addGetter(me, _data, 'dimensions')\r\n      modelUtils.addGetter(me, _data, 'layouts')\r\n\r\n      me.availableDimensions = () ->\r\n        return _.keys(modelTypes.dimension)\r\n      me.addDimension = (name) ->\r\n        _data.dimensions[name] = dimensionFactory.create(name)\r\n        return _data.dimensions[name]\r\n      me.removeDimension = (name) ->\r\n        delete _data.dimensions[name]\r\n        return undefined\r\n      me.availableLayouts = () ->\r\n        return _.keys(modelTypes.layouts)\r\n      me.addLayout = (type) ->\r\n        l = layoutFactory.create(type)\r\n        _data.layouts.push(l)\r\n        return l\r\n      me.removeLayout = (layout) ->\r\n        idx = _data.layouts.indexOf(layout)\r\n        if idx >= 0\r\n          _data.layouts.splice(idx,1)\r\n        return undefined\r\n\r\n      me.getDescriptor = () -> return model\r\n      return me\r\n    )(model)\r\n\r\n  this.create = () ->\r\n    return CreateObj(modelTypes.chart)\r\n\r\n  this.verify = () ->\r\n    return true\r\n\r\n  this.generateMarkup = (iModel) ->\r\n    dModel = iModel.getDescriptor()\r\n    markup = \"<#{dModel.name}\"\r\n    markup += modelUtils.generateProperties(dModel.properties, iModel)\r\n    markup += modelUtils.generateDecorators(dModel.decorators, iModel)\r\n    markup += '>'\r\n\r\n    markup += dimensionFactory.generateMarkup(iModel.dimensions)\r\n    markup += layoutFactory.generateMarkup(iModel.layouts)\r\n\r\n    markup += \"\\n</#{dModel.name}>\"\r\n    return markup\r\n\r\n  this.hasErrors = false\r\n  this.errors = []\r\n\r\n  this.hasWarnings = false\r\n  this.warnings = []\r\n\r\n  return this\r\n\r\n\r\n\r\n\r\n","angular.module('wk.chart').service 'dimensionFactory', ($log, modelUtils, modelTypes) ->\r\n\r\n  addProperty = (obj, store, name) ->\r\n    return Object.defineProperty(obj, name, {\r\n      get: () -> store[name].value\r\n      set: (val) -> store[name].value = val\r\n    })\r\n\r\n  CreateObj = (model) ->\r\n    ((model) ->\r\n      _data = {}\r\n      me = {}\r\n\r\n      modelUtils.addProperties(model.properties, _data, me)\r\n\r\n      modelUtils.addDecorators(model.decorators, _data, me)\r\n\r\n      me.getDescriptor = () -> return model\r\n\r\n      return me\r\n    )(model)\r\n\r\n\r\n  this.create = (type) ->\r\n    if _.has(modelTypes.dimension,type)\r\n      return CreateObj(modelTypes.dimension[type])\r\n\r\n\r\n  this.getTypes = () ->\r\n    return _.keys(dimension)\r\n\r\n  this.verifyType = (type) ->\r\n    return _.has(dimension,type)\r\n\r\n  this.generateMarkup = (iDimensions) ->\r\n    markup = ''\r\n    for name, dim of iDimensions\r\n      dModel = dim.getDescriptor()\r\n      markup += \"\\n\\t\\t<#{dModel.name}\"\r\n      markup += modelUtils.generateProperties(dModel.properties, dim)\r\n      markup += modelUtils.generateDecorators(dModel.decorators, dim)\r\n      markup += ' />'\r\n    return markup\r\n\r\n  return this","angular.module('wk.chart').service 'layoutFactory', ($log, dimensionFactory, modelTypes, modelUtils) ->\r\n\r\n  addProperty = (obj, store, name) ->\r\n    return Object.defineProperty(obj, name, {\r\n      get: () -> store[name].value\r\n      set: (val) -> store[name].value = val\r\n    })\r\n\r\n  addGetter = (obj, store, name) ->\r\n    return Object.defineProperty(obj, name, {\r\n      get: () -> store[name]\r\n    })\r\n\r\n\r\n  CreateObj = (model) ->\r\n    ((model) ->\r\n      _data = {}\r\n      _data.dimensions = {}\r\n      _data.layout = model.name\r\n      me = {}\r\n\r\n      modelUtils.addProperties(model.properties, _data, me)\r\n\r\n      modelUtils.addDecorators(model.decorators, _data, me)\r\n\r\n      for name, dim of model.dimensions\r\n        _data.dimensions[name] = dimensionFactory.create(name)\r\n\r\n      modelUtils.addGetter(me, _data, 'dimensions')\r\n      modelUtils.addGetter(me, _data, 'layout')\r\n      me.addDimension = (name) ->\r\n        _data.dimensions[name] = dimensionFactory.create(name)\r\n        return _data.dimensions[name]\r\n      me.removeDimension = (name) ->\r\n        delete _data.dimensions[name]\r\n        return undefined\r\n\r\n      me.getDescriptor = () -> return model\r\n\r\n      return me\r\n    )(model)\r\n\r\n  this.create = (type) ->\r\n    if _.has(modelTypes.layouts, type)\r\n      return CreateObj(modelTypes.layouts[type])\r\n\r\n\r\n  this.getTypes = () ->\r\n    return _.keys(layouts)\r\n\r\n  this.verifyType = (type) ->\r\n    return _.has(layouts, type)\r\n\r\n  this.generateMarkup = (layoutModel) ->\r\n    markup = ''\r\n    for layout in layoutModel\r\n      dModel = layout.getDescriptor()\r\n      markup += \"\\n\\t<layout #{dModel.name}\"\r\n      if dModel.value\r\n        if layout[dModel.name]\r\n          markup += \"=\\\"#{dModel.value}\\\"\"\r\n\r\n      markup += modelUtils.generateProperties(dModel.properties, layout)\r\n      markup += modelUtils.generateDecorators(dModel.decorators, layout)\r\n      markup += '>'\r\n\r\n      markup += dimensionFactory.generateMarkup(layout.dimensions)\r\n      markup += \"\\n\\t</layout>\"\r\n    return markup\r\n\r\n\r\n\r\n\r\n\r\n  return this","'use strict'\r\n\r\nangular.module('wk.chart').service 'modelTypes', ($log, wkChartScales) ->\r\n  \r\n  #----Setup helpers ---------------------------------------------------------------------------------------------------\r\n\r\n  layout = (name, dimensionList, value, layerDimension, properties, decorators) ->\r\n    # generate the layout descriptor object\r\n\r\n    ret =  {\r\n      name: name\r\n      clazz: 'layout'\r\n      value: value\r\n      layerDimension: layerDimension\r\n      properties: assign(properties)\r\n      decorators: decorators\r\n      dimensions:{}\r\n    }\r\n    dims = dimensionList.trim().split(',')\r\n    for d in dims\r\n      ret.dimensions[d.trim()] = {}\r\n\r\n    return ret\r\n\r\n  dim = (name, properties, decorators) ->\r\n    return {\r\n    clazz:'dimension'\r\n    name:name\r\n    properties : assign(properties)\r\n    decorators : decorators\r\n    }\r\n\r\n  getScaleTypes = () ->\r\n    return _.keys(d3.scale).concat('time').concat(_.keys(wkChartScales))\r\n\r\n  assign = (list) ->\r\n    ret = {}\r\n    return _.assign.apply(this, [].concat(list))\r\n\r\n  propertyType = {\r\n    string:'string'\r\n    number:'number'\r\n    bool:'boolean'\r\n    list:'list'\r\n    enum:(list) ->\r\n      return {\r\n        type:'enum'\r\n        values:list\r\n      }\r\n    object: 'scope variable'\r\n    event: 'scope event'\r\n    callback: 'callback'\r\n    objArray: 'scope variable'\r\n  }\r\n\r\n  this.getValidator = (type) ->\r\n    switch type\r\n      when propertyType.string then return _.isString\r\n      when propertyType.number then return _.isNumber\r\n      when propertyType.bool then return _.isBoolean\r\n      when propertyType.list then return (val) -> true #//.test(val) #TODO define regex\r\n      else\r\n        if _.isObject(type) and type.type is 'enum'\r\n          return (val) -> val in this.enum\r\n        else\r\n          return () -> true\r\n    \r\n  #--- property Definitions --------------------------------------------------------------------------------------------\r\n\r\n  markers = {markers:propertyType.bool}\r\n  labels = {labels:propertyType.bool}\r\n  padding = {padding:propertyType.number}\r\n  outerPadding = {outerPadding:propertyType.number}\r\n  areaStyle = propertyType.enum(['zero', 'silhouette','expand','wiggle'])\r\n\r\n  property = {\r\n    property:propertyType.list\r\n  }\r\n  range = {\r\n    lowerProperty:propertyType.string\r\n    upperProperty:propertyType.string\r\n  }\r\n  base = {\r\n    type:propertyType.enum(getScaleTypes())\r\n    domain:propertyType.list\r\n    reset:propertyType.bool\r\n    range:propertyType.list\r\n    domainRange:propertyType.enum(['min', 'max', 'extent','total'])\r\n    series:propertyType.bool\r\n    label:propertyType.string\r\n    exponent:propertyType.number\r\n    reverse:propertyType.bool\r\n  }\r\n  \r\n  #---- Decorators -----------------------------------------------------------------------------------------------------\r\n\r\n  tooltips = {\r\n    name: 'tooltips'\r\n    clazz:'decorator'\r\n    key:'tooltips$set'\r\n    show: propertyType.bool\r\n    value: propertyType.bool\r\n    properties: {\r\n      tooltipsTemplate:propertyType.string # templateUrl\r\n    }\r\n  }\r\n\r\n  axis = {\r\n    name:'axis'\r\n    clazz:'decorator'\r\n    key:'axis$set'\r\n    show: propertyType.bool\r\n    value: propertyType.enum(['top', 'bottom','left','right'])\r\n    properties: {\r\n      grid: propertyType.bool\r\n      format: propertyType.string\r\n      showLabel: propertyType.bool\r\n      ticks: propertyType.number\r\n      tickFormat: propertyType.string\r\n      axisFormatter: propertyType.object\r\n    }\r\n  }\r\n\r\n  legend = {\r\n    name:'legend'\r\n    clazz:'decorator'\r\n    key:'legend$set'\r\n    show: propertyType.bool\r\n    value: propertyType.enum(['top-left','top-right','bottom-left','bottom-right'])\r\n    properties: {\r\n      templateUrl:propertyType.string\r\n    }\r\n  }\r\n\r\n  valuesLegend = {\r\n    name:'valuesLegend'\r\n    clazz:'decorator'\r\n    key:'valuesLegend$set'\r\n    show: propertyType.bool\r\n    value: propertyType.enum(['top-left','top-right','bottom-left','bottom-right'])\r\n    properties: {\r\n      templateUrl:propertyType.string\r\n    }\r\n  }\r\n\r\n  selection = {\r\n    name:'selection'\r\n    clazz:'decorator'\r\n    key:'selection$set'\r\n    show: propertyType.bool\r\n    properties: {\r\n      selectedDomain: propertyType.object\r\n      clearSelection: propertyType.callback\r\n      selectedDomainChange: propertyType.event\r\n    }\r\n  }\r\n\r\n  brush = {\r\n    name:'brush'\r\n    key:'brush$set'\r\n    clazz:'decorator'\r\n    show: propertyType.bool\r\n    value: propertyType.string\r\n    properties: {\r\n      selectedDomain: propertyType.object\r\n      selectedValues: propertyType.object\r\n      brushExtent: propertyType.object\r\n      selectedDomainChange: propertyType.event\r\n      brushStart: propertyType.event\r\n      brushEnd: propertyType.event\r\n      clearBrush: propertyType.callback\r\n    }\r\n  }\r\n\r\n  brushed = {\r\n    name:'brushed'\r\n    clazz:'decorator'\r\n    key:'brushed$set'\r\n    show: propertyType.bool\r\n    value:  propertyType.string\r\n  }\r\n  \r\n  #---------------------------------------------------------------------------------------------------------------------\r\n  #---- Chart ----------------------------------------------------------------------------------------------------------\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  this.chart = {\r\n    name:'chart'\r\n    clazz:'chart'\r\n    properties: {\r\n      data: propertyType.objArray\r\n      title: propertyType.string\r\n      subtitle: propertyType.string\r\n      deepWatch: propertyType.bool\r\n      filter: propertyType.string\r\n    }\r\n    decorators: [tooltips]\r\n    dimensions: {} # shared dimension\r\n    layouts: []    # layouts\r\n  }\r\n  \r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n  this.layouts = {\r\n    line:               layout('line','x,y,color',false,'y', [markers])\r\n    lineVertical:       layout('line-vertical','x,y,color', false,'x', [markers])\r\n    area:               layout('area','x,y,color', false, 'x')\r\n    areaVertical:       layout('area-vertical','x,y,color', false, 'y')\r\n    areaStacked:        layout('area-stacked','x,y,color', areaStyle, 'y')\r\n    areaStackedVertical:layout('area-stacked-vertical','x,y,color', areaStyle, 'x')\r\n    bars:               layout('bars','x,y,color', false, false, [labels, padding, outerPadding],[selection])\r\n    barStacked:         layout('barStacked','x,y,color', false, 'x', [padding, outerPadding],[selection])\r\n    barClustered:       layout('barClustered','x,y,color', false, 'x', [padding, outerPadding],[selection])\r\n    column:             layout('column','x,y,color', false, false, [labels, padding, outerPadding],[selection])\r\n    columnStacked:      layout('columnStacked','x,y,color', false, 'y', [padding, outerPadding],[selection])\r\n    columnClustered:    layout('columnClustered','x,y,color', false, 'y', [padding, outerPadding],[selection])\r\n    rangeArea:          layout('range-area','x,rangeY,color', false, false,[],[selection])\r\n    rangeAreaVertical:  layout('range-area-vertical','x,rangeX,color', false, false,[],[selection])\r\n    rangeBars:          layout('range-bars','x,rangeX,color', false, false,[labels],[selection])\r\n    rangeColumn:        layout('range-column','x,rangeY,color', false, false,[labels],[selection])\r\n    histogram:          layout('histogram','x,rangeX,color', false, false,[labels],[selection])\r\n    pie:                layout('pie','size,color', false, false,[labels],[selection])\r\n    spider:             layout('spider','x,y,color', false, false,[],[selection])\r\n    bubble:             layout('bubble','x,y,color,size', false, false,[],[selection, brush])\r\n    scatter:            layout('scatter','x,y,color,size,shape', false, false,[],[selection, brush])\r\n  }\r\n   \r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  this.dimension = {\r\n    x: dim('x', [property, base], [axis, brush, brushed])\r\n    y: dim('y', [property, base],[axis, brush, brushed])\r\n    rangeX : dim('rangeX', [range, base],[axis, brush, brushed])\r\n    rangeY : dim('rangeY', [range, base],[axis, brush, brushed])\r\n    color: dim('color', [property, base],[legend, valuesLegend])\r\n    size: dim('size', [property, base],[legend, valuesLegend])\r\n    shape: dim('shape', [property, base],[legend, valuesLegend])\r\n  }\r\n  \r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  return this"],"sourceRoot":"/source/"}