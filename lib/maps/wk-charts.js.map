{"version":3,"sources":["wk-charts/wk-charts/app/config/wkChartConstants.coffee","wk-charts/wk-charts/app/util/d3.geo.zoom.js","wk-charts/wk-charts/app/container/brush.coffee","wk-charts/wk-charts/app/util/innerSVG.js","wk-charts/wk-charts/app/container/brushed.coffee","wk-charts/wk-charts/app/util/ResizeSensor.js","templates.js","wk-charts/wk-charts/app/container/chart.coffee","wk-charts/wk-charts/app/util/saveSvgAsPng.js","wk-charts/wk-charts/app/container/layout.coffee","wk-charts/wk-charts/app/container/print.coffee","wk-charts/wk-charts/app/container/selection.coffee","wk-charts/wk-charts/app/container/tooltips.coffee","wk-charts/wk-charts/app/dataManager/dataManager.coffee","wk-charts/wk-charts/app/dimensions/color.coffee","wk-charts/wk-charts/app/dimensions/scaleUtils.coffee","wk-charts/wk-charts/app/dimensions/shape.coffee","wk-charts/wk-charts/app/dimensions/size.coffee","wk-charts/wk-charts/app/dimensions/x.coffee","wk-charts/wk-charts/app/dimensions/xRange.coffee","wk-charts/wk-charts/app/dimensions/y.coffee","wk-charts/wk-charts/app/dimensions/yRange.coffee","wk-charts/wk-charts/app/models/behaviorBrush.coffee","wk-charts/wk-charts/app/models/behaviors.coffee","wk-charts/wk-charts/app/models/behaviorSelect.coffee","wk-charts/wk-charts/app/models/behaviorTooltip.coffee","wk-charts/wk-charts/app/models/chart.coffee","wk-charts/wk-charts/app/models/container.coffee","wk-charts/wk-charts/app/models/layout.coffee","wk-charts/wk-charts/app/models/legend.coffee","wk-charts/wk-charts/app/models/scale.coffee","wk-charts/wk-charts/app/models/scaleList.coffee","wk-charts/wk-charts/app/layouts/area.coffee","wk-charts/wk-charts/app/layouts/areaStacked.coffee","wk-charts/wk-charts/app/layouts/areaStackedVertical.coffee","wk-charts/wk-charts/app/layouts/areaVertical.coffee","wk-charts/wk-charts/app/layouts/bar.coffee","wk-charts/wk-charts/app/layouts/barClustered.coffee","wk-charts/wk-charts/app/layouts/barStacked.coffee","wk-charts/wk-charts/app/layouts/boxPlot.coffee","wk-charts/wk-charts/app/layouts/bubble.coffee","wk-charts/wk-charts/app/layouts/column.coffee","wk-charts/wk-charts/app/layouts/columnClustered.coffee","wk-charts/wk-charts/app/layouts/columnStacked.coffee","wk-charts/wk-charts/app/layouts/gauge.coffee","wk-charts/wk-charts/app/layouts/geoMap.coffee","wk-charts/wk-charts/app/layouts/histogram.coffee","wk-charts/wk-charts/app/layouts/line.coffee","wk-charts/wk-charts/app/layouts/lineVertical.coffee","wk-charts/wk-charts/app/layouts/pie.coffee","wk-charts/wk-charts/app/layouts/rangeArea.coffee","wk-charts/wk-charts/app/layouts/rangeAreaVertical.coffee","wk-charts/wk-charts/app/layouts/rangeBar.coffee","wk-charts/wk-charts/app/layouts/rangeColumn.coffee","wk-charts/wk-charts/app/layouts/scatter.coffee","wk-charts/wk-charts/app/layouts/spider.coffee","wk-charts/wk-charts/app/providers/localization.coffee","wk-charts/wk-charts/app/providers/scaleExtention.coffee","wk-charts/wk-charts/app/providers/template.coffee","wk-charts/wk-charts/app/services/selectionSharing.coffee","wk-charts/wk-charts/app/services/timer.coffee","wk-charts/wk-charts/app/util/dataLabelFactory.coffee","wk-charts/wk-charts/app/util/layerData.coffee","wk-charts/wk-charts/app/util/markerFactory.coffee","wk-charts/wk-charts/app/util/svgIcon.coffee","wk-charts/wk-charts/app/util/tooltipHelperFactory.coffee","wk-charts/wk-charts/app/util/utilities.coffee","wk-charts/wk-charts/app/reflection/directives/chartGenerator.coffee","wk-charts/wk-charts/app/reflection/helpers/modelUtils.coffee","wk-charts/wk-charts/app/reflection/services/chartFactory.coffee","wk-charts/wk-charts/app/reflection/services/dimensionFactory.coffee","wk-charts/wk-charts/app/reflection/services/layoutFactory.coffee","wk-charts/wk-charts/app/reflection/types/modelTypes.coffee"],"names":[],"mappings":"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C,gBAApC,EAAsD;AAAA,EACpD,IAAA,EAAM,IAD8C;AAAA,EAEpD,MAAA,EAAU,MAF0C;CAAtD,CAvGA,CAAA;;AAAA,OA4GO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,QAA3B,CAAoC,WAApC,EAAiD;AAAA,EAC/C,OAAA,EAAS,GADsC;AAAA,EAE/C,YAAA,EAAc,CAFiC;CAAjD,CA5GA,CAAA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7HA;AAAA;;;;;;;;;GAAA;AAWA;AAAA;;;;;;GAXA;AAAA,OAkBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,OAArC,EAA8C,SAAC,IAAD,EAAO,gBAAP,EAAyB,QAAzB,GAAA;AAC5C,MAAA,OAAA;AAAA,EAAA,OAAA,GAAU,CAAV,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,CAAC,QAAD,EAAW,UAAX,EAAuB,IAAvB,EAA6B,IAA7B,CAFJ;AAAA,IAGL,KAAA,EACE;AAAA;AAAA;;;;SAAA;AAAA,MAKA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,OAAzC,CAAA,CAAA;eACA,KAAK,CAAC,SAAN,CAAA,CAAiB,CAAC,EAAlB,CAAsB,GAAA,GAAG,GAAzB,EAAgC,IAAhC,EAFqC;MAAA,CAAvC,EArCI;IAAA,CAHD;GAAP,CAF8C;AAAA,CAAhD,CAXA,CAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9HA;AACA;AACA;ACFA;AAAA;;;;;;;;;;;;;;;;;;GAAA;AAAA,OAmBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,OAArC,EAA8C,SAAC,IAAD,EAAO,KAAP,EAAc,OAAd,GAAA;AAC5C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,OAFJ;AAAA,IAGL,KAAA,EACE;AAAA,MAAA,IAAA,EAAM,GAAN;AAAA,MACA,MAAA,EAAQ,GADR;KAJG;AAAA,IAOL,UAAA,EAAY,SAAC,MAAD,GAAA;AACV,MAAA,IAAI,CAAC,EAAL,GAAU,KAAA,CAAA,CAAV,CAAA;aACA,IAAI,CAAC,EAAE,CAAC,KAAR,CAAc,MAAd,EAFU;IAAA,CAPP;AAAA,IAWL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,2DAAA;AAAA,MAAA,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,KAAK,CAAC,GAA9B,CAAA,CAAA;AAAA,MACA,EAAA,GAAK,UAAU,CAAC,EADhB,CAAA;AAAA,MAGA,SAAA,GAAY,KAHZ,CAAA;AAAA,MAIA,eAAA,GAAkB,MAJlB,CAAA;AAAA,MAKA,OAAO,CAAC,QAAR,CAAiB,EAAE,CAAC,EAAH,CAAA,CAAjB,CALA,CAAA;AAAA,MAOA,KAAA,GAAQ,MAPR,CAAA;AAAA,MAQA,OAAA,GAAU,MARV,CAAA;AAAA,MAUA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,OAAf,CAAuB,OAAQ,CAAA,CAAA,CAA/B,CAVA,CAAA;AAAA,MAYA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,SAAf,CAAA,CAZA,CAAA;AAAA,MAcA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,EAAf,CAAkB,kBAAlB,EAAsC,SAAA,GAAA;eACpC,KAAK,CAAC,MAAN,CAAA,EADoC;MAAA,CAAtC,CAdA,CAAA;AAAA,MAiBA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,EAAf,CAAkB,oBAAlB,EAAwC,SAAC,SAAD,EAAY,MAAZ,GAAA;AACtC,QAAA,IAAG,IAAI,CAAC,YAAR;iBAEE,KAAK,CAAC,MAAN,CAAA,EAFF;SADsC;MAAA,CAAxC,CAjBA,CAAA;AAAA,MAsBA,KAAK,CAAC,QAAN,CAAe,mBAAf,EAAoC,SAAC,GAAD,GAAA;AAClC,QAAA,IAAG,GAAA,IAAQ,CAAC,CAAC,QAAF,CAAW,CAAA,GAAX,CAAR,IAA6B,CAAA,GAAA,IAAQ,CAAxC;iBACE,EAAE,CAAC,iBAAH,CAAqB,GAArB,EADF;SADkC;MAAA,CAApC,CAtBA,CAAA;AAAA,MA0BA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,KAAH,CAAS,GAAT,EADF;SAAA,MAAA;iBAGE,EAAE,CAAC,KAAH,CAAS,MAAT,EAHF;SADuB;MAAA,CAAzB,CA1BA,CAAA;AAAA,MAgCA,KAAK,CAAC,QAAN,CAAe,aAAf,EAA8B,SAAC,GAAD,GAAA;AAC5B,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,UAAH,CAAc,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAd,EADF;SAD4B;MAAA,CAA9B,CAhCA,CAAA;AAAA,MAoCA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,QAAH,CAAY,GAAZ,EADF;SAAA,MAAA;iBAGE,EAAE,CAAC,QAAH,CAAY,MAAZ,EAHF;SAD0B;MAAA,CAA5B,CApCA,CAAA;AAAA,MA0CA,KAAK,CAAC,QAAN,CAAe,gBAAf,EAAiC,SAAC,GAAD,GAAA;AAC/B,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,aAAH,CAAiB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAjB,EADF;SAD+B;MAAA,CAAjC,CA1CA,CAAA;AAAA,MA8CA,KAAK,CAAC,QAAN,CAAe,iBAAf,EAAkC,SAAC,GAAD,GAAA;AAChC,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,eAAH,CAAmB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAnB,EADF;SADgC;MAAA,CAAlC,CA9CA,CAAA;AAAA,MAkDA,KAAK,CAAC,MAAN,CAAa,QAAb,EAAuB,SAAC,GAAD,GAAA;AACrB,QAAA,IAAG,GAAH;AACE,UAAA,OAAA,GAAU,GAAV,CAAA;AACA,UAAA,IAAG,KAAH;mBACE,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,OAAf,CAAuB,OAAA,CAAQ,QAAR,CAAA,CAAkB,KAAlB,EAAyB,OAAzB,CAAvB,EADF;WAFF;SAAA,MAAA;AAKE,UAAA,OAAA,GAAU,MAAV,CAAA;AACA,UAAA,IAAG,KAAH;mBACE,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,OAAf,CAAuB,KAAvB,EADF;WANF;SADqB;MAAA,CAAvB,CAlDA,CAAA;AAAA,MA4DA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAA,KAAS,MAAT,IAAuB,GAAA,KAAS,OAAnC;AACE,UAAA,SAAA,GAAY,IAAZ,CADF;SAAA,MAAA;AAGE,UAAA,SAAA,GAAY,KAAZ,CAHF;SAAA;AAIA,QAAA,IAAG,eAAH;AACE,UAAA,eAAA,CAAA,CAAA,CADF;SAJA;eAMA,eAAA,GAAkB,KAAK,CAAC,MAAN,CAAa,MAAb,EAAqB,WAArB,EAAkC,SAAlC,EAPQ;MAAA,CAA5B,CA5DA,CAAA;AAAA,MAqEA,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,SAAC,GAAD,GAAA;AACrB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;iBACE,EAAE,CAAC,QAAH,CAAY,IAAZ,EADF;SAAA,MAAA;iBAGE,EAAE,CAAC,QAAH,CAAY,KAAZ,EAHF;SADqB;MAAA,CAAvB,CArEA,CAAA;AAAA,MA2EA,WAAA,GAAc,SAAC,GAAD,GAAA;AACZ,QAAA,IAAG,GAAH;AACE,UAAA,KAAA,GAAQ,GAAR,CAAA;AACA,UAAA,IAAG,CAAC,CAAC,OAAF,CAAU,KAAV,CAAA,IAAqB,KAAK,CAAC,MAAN,KAAgB,CAAxC;AAA+C,kBAAA,CAA/C;WADA;AAEA,UAAA,IAAG,OAAH;mBACE,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,OAAf,CAAuB,OAAA,CAAQ,QAAR,CAAA,CAAkB,GAAlB,EAAuB,OAAvB,CAAvB,EADF;WAAA,MAAA;mBAGE,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,OAAf,CAAuB,GAAvB,EAHF;WAHF;SADY;MAAA,CA3Ed,CAAA;AAAA,MAoFA,eAAA,GAAkB,KAAK,CAAC,MAAN,CAAa,MAAb,EAAqB,WAArB,EAAkC,SAAlC,CApFlB,CAAA;aAwFA,OAAO,CAAC,EAAR,CAAW,UAAX,EAAuB,SAAA,GAAA;AACrB,QAAA,IAAG,eAAH;AACE,UAAA,eAAA,CAAA,CAAA,CADF;SAAA;AAAA,QAEA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,EAAf,CAAkB,QAAlB,EAA4B,IAA5B,CAFA,CAAA;AAAA,QAGA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,OAAf,CAAuB,MAAvB,CAHA,CAAA;AAAA,QAIA,IAAI,CAAC,GAAL,CAAS,kBAAT,CAJA,CAAA;AAAA,QAKA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,OAAf,CAAA,CALA,CAAA;eAMA,KAAK,CAAC,QAAN,CAAA,EAPqB;MAAA,CAAvB,EAzFI;IAAA,CAXD;GAAP,CAF4C;AAAA,CAA9C,CAnrHA;AAAA;;;;;;;;;GAAA;AAAA,OAUO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,QAArC,EAA+C,SAAC,IAAD,EAAO,MAAP,EAAe,SAAf,GAAA;AAC7C,MAAA,SAAA;AAAA,EAAA,SAAA,GAAY,CAAZ,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,IADL;AAAA,IAEL,OAAA,EAAS,CAAC,QAAD,EAAU,QAAV,CAFJ;AAAA,IAIL,UAAA,EAAY,SAAC,QAAD,GAAA;aACV,IAAI,CAAC,EAAL,GAAU,MAAA,CAAA,EADA;IAAA,CAJP;AAAA,IAML,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,WAAxB,GAAA;AAEJ,UAAA,SAAA;AAAA,MAAA,EAAA,GAAK,WAAY,CAAA,CAAA,CAAE,CAAC,EAApB,CAAA;AAAA,MACA,KAAA,GAAQ,WAAY,CAAA,CAAA,CAAE,CAAC,EADvB,CAAA;AAAA,MAEA,EAAE,CAAC,KAAH,CAAS,KAAT,CAFA,CAAA;AAAA,MAIA,OAAO,CAAC,QAAR,CAAiB,EAAE,CAAC,EAAH,CAAA,CAAjB,CAJA,CAAA;AAAA,MAOA,KAAK,CAAC,SAAN,CAAgB,EAAhB,CAPA,CAAA;AAAA,MAQA,KAAK,CAAC,SAAN,CAAA,CAAiB,CAAC,SAAlB,CAA4B,EAA5B,CARA,CAAA;aASA,EAAE,CAAC,SAAH,CAAa,KAAK,CAAC,SAAN,CAAA,CAAb,EAXI;IAAA,CAND;GAAP,CAF6C;AAAA,CAA/C,CAVA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,aAArC,EAAoD,SAAC,IAAD,GAAA;AAElD,SAAO;AAAA,IACL,OAAA,EAAQ,OADH;AAAA,IAEL,QAAA,EAAU,GAFL;AAAA,IAGL,IAAA,EAAK,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACH,UAAA,WAAA;AAAA,MAAA,KAAA,GAAQ,UAAU,CAAC,EAAnB,CAAA;AAAA,MAEA,IAAA,GAAO,SAAA,GAAA;AACL,YAAA,aAAA;AAAA,QAAA,aAAA,GAAgB,EAAE,CAAC,MAAH,CAAU,KAAK,CAAC,SAAN,CAAA,CAAiB,CAAC,OAAlB,CAAA,CAAV,CAAsC,CAAC,MAAvC,CAA8C,cAA9C,CAAhB,CAAA;eACA,aAAa,CAAC,MAAd,CAAqB,QAArB,CACE,CAAC,IADH,CACQ,OADR,EACgB,uBADhB,CAEE,CAAC,KAFH,CAES;AAAA,UAAC,QAAA,EAAS,UAAV;AAAA,UAAsB,GAAA,EAAI,CAA1B;AAAA,UAA6B,KAAA,EAAM,CAAnC;SAFT,CAGE,CAAC,IAHH,CAGQ,OAHR,CAIE,CAAC,EAJH,CAIM,OAJN,EAIe,SAAA,GAAA;AACX,cAAA,GAAA;AAAA,UAAA,IAAI,CAAC,GAAL,CAAS,sBAAT,CAAA,CAAA;AAAA,UAEA,GAAA,GAAO,aAAa,CAAC,MAAd,CAAqB,cAArB,CAAoC,CAAC,IAArC,CAAA,CAFP,CAAA;iBAGA,YAAA,CAAa,GAAb,EAAkB,WAAlB,EAA8B,CAA9B,EAJW;QAAA,CAJf,EAFK;MAAA,CAFP,CAAA;aAeA,KAAK,CAAC,SAAN,CAAA,CAAiB,CAAC,EAAlB,CAAqB,iBAArB,EAAwC,IAAxC,EAhBG;IAAA,CAHA;GAAP,CAFkD;AAAA,CAApD,CAAA,CAAA;;ACAA;AAAA;;;;;;;;GAAA;AAAA,OASO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,WAArC,EAAkD,SAAC,IAAD,GAAA;AAChD,MAAA,KAAA;AAAA,EAAA,KAAA,GAAQ,CAAR,CAAA;AAEA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,KAAA,EACE;AAAA;AAAA;;;;SAAA;AAAA,MAKA,cAAA,EAAgB,GALhB;AAOA;AAAA;;;;SAPA;AAAA,MAYA,oBAAA,EAAsB,GAZtB;KAHG;AAAA,IAiBL,OAAA,EAAS,QAjBJ;AAAA,IAmBL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,uBAAA;AAAA,MAAA,IAAI,CAAC,GAAL,CAAS,iBAAT,EAA4B,KAAK,CAAC,GAAlC,CAAA,CAAA;AAAA,MACA,MAAA,GAAS,UAAU,CAAC,EADpB,CAAA;AAAA,MAEA,UAAA,GAAa,MAFb,CAAA;AAAA,MAGA,GAAA,GAAM,KAAA,EAHN,CAAA;AAAA,MAKA,KAAK,CAAC,MAAN,CAAa,gBAAb,EAA+B,SAAC,GAAD,GAAA;AAC7B,QAAA,IAAG,CAAC,CAAC,OAAF,CAAU,GAAV,CAAA,IAAmB,GAAG,CAAC,MAAJ,KAAc,CAApC;AACE,UAAA,UAAU,CAAC,cAAX,CAAA,CAAA,CAAA;iBACA,KAAK,CAAC,oBAAN,CAA2B;AAAA,YAAC,MAAA,EAAO,EAAR;WAA3B,EAFF;SAD6B;MAAA,CAA/B,CALA,CAAA;aAUA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,qBAAA,GAAqB,GAA5C,EAAmD,SAAA,GAAA;AACjD,QAAA,UAAA,GAAa,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,QAA/B,CAAA;AAAA,QACA,UAAU,CAAC,MAAX,CAAkB,MAAlB,CADA,CAAA;AAAA,QAEA,UAAU,CAAC,MAAX,CAAkB,IAAlB,CAFA,CAAA;AAAA,QAGA,UAAU,CAAC,EAAX,CAAe,oBAAA,GAAoB,GAAnC,EAA0C,SAAC,eAAD,GAAA;AACxC,UAAA,IAAG,KAAK,CAAC,cAAT;AAA6B,YAAA,KAAK,CAAC,cAAN,GAAuB,eAAvB,CAA7B;WAAA;AAAA,UACA,KAAK,CAAC,oBAAN,CAA2B;AAAA,YAAC,MAAA,EAAO,eAAR;WAA3B,CADA,CAAA;iBAEA,KAAK,CAAC,MAAN,CAAA,EAHwC;QAAA,CAA1C,CAHA,CAAA;eAQA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,mBAAA,GAAmB,GAA1C,EAAiD,SAAA,GAAA;AAC/C,UAAA,UAAU,CAAC,EAAX,CAAe,YAAA,GAAY,GAA3B,EAAkC,IAAlC,CAAA,CAAA;AAAA,UACA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,YAAA,GAAY,GAAnC,EAA0C,IAA1C,CADA,CAAA;iBAEA,KAAK,CAAC,QAAN,CAAA,EAH+C;QAAA,CAAjD,EATiD;MAAA,CAAnD,EAXI;IAAA,CAnBD;GAAP,CAHgD;AAAA,CAAlD,CATA,CAAA;;ACAA;AAAA;;;;;;;;GAAA;AAAA,OASO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,UAArC,EAAiD,SAAC,IAAD,EAAO,QAAP,GAAA;AAE/C,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,OAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,SAAxB,GAAA;AACJ,UAAA,KAAA;AAAA,MAAA,KAAA,GAAQ,SAAS,CAAC,EAAlB,CAAA;AAAA,MACA,IAAI,CAAC,GAAL,CAAS,gBAAT,EAA2B,KAAK,CAAC,GAAjC,CADA,CAAA;AAGA;AAAA;;;;;;SAHA;AAAA,MAUA,KAAK,CAAC,QAAN,CAAe,UAAf,EAA2B,SAAC,GAAD,GAAA;AACzB,QAAA,KAAK,CAAC,eAAN,CAAsB,EAAtB,CAAA,CAAA;AACA,QAAA,IAAG,GAAA,KAAS,MAAT,IAAuB,CAAC,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAArB,CAA1B;iBACE,KAAK,CAAC,WAAN,CAAkB,IAAlB,EADF;SAAA,MAEK,IAAG,GAAG,CAAC,MAAJ,GAAa,CAAb,IAAmB,GAAA,KAAS,OAA/B;AACH,UAAA,KAAK,CAAC,eAAN,CAAsB,GAAtB,CAAA,CAAA;iBACA,KAAK,CAAC,WAAN,CAAkB,IAAlB,EAFG;SAAA,MAAA;iBAGA,KAAK,CAAC,WAAN,CAAkB,KAAlB,EAHA;SAJoB;MAAA,CAA3B,CAVA,CAAA;aAmBA,KAAK,CAAC,QAAN,CAAe,cAAf,EAA+B,SAAC,GAAD,GAAA;AAC7B,QAAA,IAAG,GAAH;iBACE,KAAK,CAAC,YAAN,CAAmB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAnB,EADF;SAD6B;MAAA,CAA/B,EApBI;IAAA,CAHD;GAAP,CAF+C;AAAA,CAAjD,CATA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,oBAAnC,EAAwD,SAAC,IAAD,GAAA;AAEtD,MAAA,sBAAA;AAAA,EAAA,eAAA,GAAkB,SAAC,IAAD,EAAM,IAAN,EAAY,aAAZ,GAAA;AAChB,QAAA,+EAAA;AAAA,IAAA,IAAA,GAAO,CAAP,CAAA;AAAA,IACA,IAAA,GAAO,CADP,CAAA;AAAA,IAEA,OAAA,GAAU,IAAI,CAAC,MAAL,GAAc,CAFxB,CAAA;AAAA,IAGA,OAAA,GAAU,IAAI,CAAC,MAAL,GAAc,CAHxB,CAAA;AAAA,IAIA,IAAA,GAAO,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAlB,CAJP,CAAA;AAAA,IAKA,MAAA,GAAS,EALT,CAAA;AAAA,IAOA,KAAA,GAAQ,CAPR,CAAA;AASA,IAAA,IAAG,aAAH;AACE,aAAM,IAAA,IAAQ,OAAR,IAAoB,IAAA,IAAQ,OAAlC,GAAA;AACE,QAAA,IAAG,CAAC,GAAA,GAAM,IAAI,CAAC,OAAL,CAAa,IAAK,CAAA,IAAA,CAAlB,CAAP,CAAA,IAAoC,CAAvC;AACE,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,IAAA,EAAM,IAAP;AAAA,YAAa,IAAA,EAAM,GAAnB;AAAA,YAAuB,GAAA,EAAK,IAAK,CAAA,IAAA,CAAjC;WAAZ,CAAA,CAAA;AAAA,UACA,KAAA,GAAQ,IADR,CAAA;AAAA,UAGA,IAAA,EAHA,CADF;SAAA,MAAA;AAQE,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,OAAA,EAAS,IAAV;AAAA,YAAgB,IAAA,EAAM,IAAtB;AAAA,YAA4B,GAAA,EAAK,IAAK,CAAA,IAAA,CAAtC;AAAA,YAA6C,QAAA,EAAU,IAAA,KAAQ,CAA/D;AAAA,YAAkE,SAAA,EAAW,IAAA,KAAQ,CAArF;WAAZ,CAAA,CAAA;AAAA,UAEA,IAAA,EAFA,CARF;SAAA;AAWA,eAAM,IAAI,CAAC,OAAL,CAAa,IAAK,CAAA,IAAA,CAAlB,CAAA,GAA2B,CAA3B,IAAiC,IAAA,IAAQ,OAA/C,GAAA;AAEE,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,KAAA,EAAO,IAAR;AAAA,YAAc,KAAA,EAAO,KAArB;AAAA,YAA4B,OAAA,EAAS,IAAK,CAAA,KAAA,CAA1C;AAAA,YAAkD,IAAA,EAAM,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAxD;AAAA,YAAgF,GAAA,EAAK,IAAK,CAAA,IAAA,CAA1F;AAAA,YAAiG,QAAA,EAAS,IAAA,KAAQ,CAAlH;AAAA,YAAqH,SAAA,EAAU,IAAA,KAAQ,CAAvI;WAAZ,CAAA,CAAA;AAAA,UAEA,IAAA,EAFA,CAFF;QAAA,CAXA;AAAA,QAgBA,IAAA,EAhBA,CADF;MAAA,CAAA;AAmBA,aAAM,IAAA,IAAQ,OAAd,GAAA;AACE,QAAA,IAAG,CAAC,GAAA,GAAM,IAAI,CAAC,OAAL,CAAa,IAAK,CAAA,IAAA,CAAlB,CAAP,CAAA,IAAoC,CAAvC;AACE,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,IAAA,EAAM,IAAP;AAAA,YAAa,IAAA,EAAM,GAAnB;AAAA,YAAuB,GAAA,EAAK,IAAK,CAAA,IAAA,CAAjC;WAAZ,CAAA,CAAA;AAAA,UACA,KAAA,GAAQ,IADR,CAAA;AAAA,UAGA,IAAA,EAHA,CADF;SAAA,MAAA;AAQE,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,OAAA,EAAS,IAAV;AAAA,YAAgB,IAAA,EAAM,IAAtB;AAAA,YAA4B,GAAA,EAAK,IAAK,CAAA,IAAA,CAAtC;AAAA,YAA6C,QAAA,EAAU,IAAvD;AAAA,YAA6D,UAAA,EAAY,IAAzE;WAAZ,CAAA,CAAA;AAAA,UAEA,IAAA,EAFA,CARF;SADF;MAAA,CAnBA;AAgCA,aAAM,IAAA,IAAQ,OAAd,GAAA;AACE,QAAA,IAAG,IAAI,CAAC,OAAL,CAAa,IAAK,CAAA,IAAA,CAAlB,CAAA,GAA2B,CAA9B;AAEE,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,KAAA,EAAO,IAAR;AAAA,YAAc,KAAA,EAAO,KAArB;AAAA,YAA4B,OAAA,EAAS,IAAK,CAAA,KAAA,CAA1C;AAAA,YAAkD,IAAA,EAAM,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAxD;AAAA,YAAgF,GAAA,EAAK,IAAK,CAAA,IAAA,CAA1F;AAAA,YAAiG,QAAA,EAAS,IAA1G;AAAA,YAAgH,UAAA,EAAW,IAA3H;WAAZ,CAAA,CAAA;AAAA,UAEA,IAAA,EAFA,CAFF;SAAA,MAAA;AAME,UAAA,IAAA,EAAA,CANF;SADF;MAAA,CAjCF;KAAA,MAAA;AA2CE,aAAM,IAAA,IAAQ,OAAR,IAAoB,IAAA,IAAQ,OAAlC,GAAA;AACE,QAAA,IAAG,IAAK,CAAA,IAAA,CAAL,KAAc,IAAK,CAAA,IAAA,CAAtB;AACE,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,IAAA,EAAM,IAAP;AAAA,YAAa,IAAA,EAAM,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAnB;AAAA,YAA0C,GAAA,EAAK,IAAK,CAAA,IAAA,CAApD;WAAZ,CAAA,CAAA;AAAA,UACA,KAAA,GAAQ,IADR,CAAA;AAAA,UAGA,IAAA,EAHA,CAAA;AAAA,UAIA,IAAA,EAJA,CADF;SAAA,MAMK,IAAG,IAAI,CAAC,OAAL,CAAa,IAAK,CAAA,IAAA,CAAlB,EAAyB,IAAzB,CAAA,IAAkC,CAArC;AAGH,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,OAAA,EAAS,IAAV;AAAA,YAAgB,IAAA,EAAM,IAAtB;AAAA,YAA4B,GAAA,EAAK,IAAK,CAAA,IAAA,CAAtC;AAAA,YAA6C,QAAA,EAAU,IAAA,KAAQ,CAA/D;AAAA,YAAkE,SAAA,EAAW,IAAA,KAAQ,CAArF;WAAZ,CAAA,CAAA;AAAA,UAEA,IAAA,EAFA,CAHG;SAAA,MAAA;AAQH,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,KAAA,EAAO,IAAR;AAAA,YAAc,KAAA,EAAO,KAArB;AAAA,YAA4B,OAAA,EAAS,IAAK,CAAA,KAAA,CAA1C;AAAA,YAAkD,IAAA,EAAM,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAxD;AAAA,YAAgF,GAAA,EAAK,IAAK,CAAA,IAAA,CAA1F;AAAA,YAAiG,QAAA,EAAS,IAAA,KAAQ,CAAlH;AAAA,YAAqH,SAAA,EAAU,IAAA,KAAQ,CAAvI;WAAZ,CAAA,CAAA;AAAA,UAEA,IAAA,EAFA,CARG;SAPP;MAAA,CAAA;AAmBA,aAAM,IAAA,IAAQ,OAAd,GAAA;AAEE,QAAA,MAAM,CAAC,IAAP,CAAY;AAAA,UAAC,OAAA,EAAS,IAAV;AAAA,UAAgB,IAAA,EAAM,IAAtB;AAAA,UAA4B,GAAA,EAAK,IAAK,CAAA,IAAA,CAAtC;AAAA,UAA6C,QAAA,EAAS,IAAtD;AAAA,UAA4D,UAAA,EAAY,IAAxE;SAAZ,CAAA,CAAA;AAAA,QAEA,IAAA,EAFA,CAFF;MAAA,CAnBA;AAyBA,aAAM,IAAA,IAAQ,OAAd,GAAA;AAEE,QAAA,MAAM,CAAC,IAAP,CAAY;AAAA,UAAC,KAAA,EAAO,IAAR;AAAA,UAAc,KAAA,EAAO,KAArB;AAAA,UAA4B,OAAA,EAAS,IAAK,CAAA,KAAA,CAA1C;AAAA,UAAkD,IAAA,EAAM,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAxD;AAAA,UAAgF,GAAA,EAAK,IAAK,CAAA,IAAA,CAA1F;AAAA,UAAiG,QAAA,EAAS,IAA1G;AAAA,UAAgH,UAAA,EAAY,IAA5H;SAAZ,CAAA,CAAA;AAAA,QAEA,IAAA,EAFA,CAFF;MAAA,CApEF;KATA;AAAA,IAqFA,CAAA,GAAI,MAAM,CAAC,MAAP,GAAgB,CArFpB,CAAA;AAAA,IAsFA,QAAA,GAAW,IAtFX,CAAA;AAAA,IAuFA,KAAA,GAAQ,IAAI,CAAC,MAAL,GAAc,CAvFtB,CAAA;AAwFA,WAAM,CAAA,IAAK,CAAX,GAAA;AACE,MAAA,GAAA,GAAM,MAAO,CAAA,CAAA,CAAb,CAAA;AACA,MAAA,IAAG,GAAG,CAAC,OAAP;AACE,QAAA,GAAG,CAAC,KAAJ,GAAY,KAAZ,CAAA;AAAA,QACA,GAAG,CAAC,OAAJ,GAAc,IAAK,CAAA,KAAA,CADnB,CADF;OAAA,MAAA;AAIE,QAAA,KAAA,GAAQ,GAAG,CAAC,IAAZ,CAAA;AAAA,QACA,QAAA,GAAW,KADX,CAJF;OADA;AAAA,MAOA,CAAA,EAPA,CADF;IAAA,CAxFA;AAkGA,WAAO,MAAP,CAnGgB;EAAA,CAAlB,CAAA;AAAA,EAqGA,KAAA,GAAQ,SAAA,GAAA;AACN,QAAA,sLAAA;AAAA,IAAA,QAAA,GAAW,EAAX,CAAA;AAAA,IACA,QAAA,GAAW,EADX,CAAA;AAAA,IAEA,OAAA,GAAU,EAFV,CAAA;AAAA,IAGA,OAAA,GAAU,EAHV,CAAA;AAAA,IAIA,SAAA,GAAY,MAJZ,CAAA;AAAA,IAKA,WAAA,GAAc,MALd,CAAA;AAAA,IAMA,WAAA,GAAc,EANd,CAAA;AAAA,IAOA,aAAA,GAAgB,EAPhB,CAAA;AAAA,IAQA,aAAA,GAAgB,EARhB,CAAA;AAAA,IASA,gBAAA,GAAmB,MATnB,CAAA;AAAA,IAUA,UAAA,GAAa,IAVb,CAAA;AAAA,IAWA,aAAA,GAAgB,KAXhB,CAAA;AAAA,IAaA,EAAA,GAAK,EAbL,CAAA;AAAA,IAeA,EAAE,CAAC,IAAH,GAAU,SAAC,IAAD,EAAO,aAAP,GAAA;AACR,MAAA,QAAA,GAAW,QAAX,CAAA;AAAA,MACA,OAAA,GAAU,OADV,CAAA;AAAA,MAEA,aAAA,GAAgB,aAFhB,CAAA;AAAA,MAGA,aAAA,GAAiB,WAAW,CAAC,SAAZ,CAAsB,IAAtB,CAHjB,CAAA;AAAA,MAIA,QAAA,GAAW,CAAC,CAAC,KAAF,CAAQ,IAAR,CAJX,CAAA;AAAA,MAKA,OAAA,GAAU,SAAS,CAAC,KAAV,CAAgB,IAAhB,CALV,CAAA;AAMA,MAAA,IAAG,SAAS,CAAC,SAAV,CAAA,CAAA,KAAyB,MAA5B;AACE,QAAA,OAAA,GAAU,OAAO,CAAC,GAAR,CAAY,SAAC,CAAD,GAAA;iBAAO,CAAA,EAAP;QAAA,CAAZ,CAAV,CADF;OANA;AAAA,MAQA,WAAA,GAAc,eAAA,CAAgB,OAAhB,EAAyB,OAAzB,EAAkC,aAAlC,CARd,CAAA;AAAA,MASA,gBAAA,GAAmB,eAAA,CAAgB,aAAhB,EAA+B,aAA/B,CATnB,CAAA;AAUA,aAAO,EAAP,CAXQ;IAAA,CAfV,CAAA;AAAA,IA4BA,EAAE,CAAC,SAAH,GAAe,SAAA,GAAA;AACb,aAAO,QAAQ,CAAC,MAAT,KAAmB,CAA1B,CADa;IAAA,CA5Bf,CAAA;AAAA,IA+BA,cAAA,GAAiB,CAAA,SAAA,KAAA,GAAA;aAAA,SAAA,GAAA;AACf,YAAA,kDAAA;AAAA,QAAA,GAAA,GAAM,EAAN,CAAA;AAAA,QACA,OAAA,GAAU,OAAQ,CAAA,CAAA,CADlB,CAAA;AAAA,QAEA,QAAA,GAAW,IAFX,CAAA;AAAA,QAGA,OAAA,GAAU,MAHV,CAAA;AAAA,QAIA,GAAA,GAAM,MAJN,CAAA;AAAA,QAKA,CAAA,GAAI,CALJ,CAAA;AAAA,QAOA,SAAA,GAAY,SAAC,GAAD,GAAA;AACR,UAAA,IAAG,UAAH;mBAAmB,QAAnB;WAAA,MAAA;mBAAgC,GAAG,CAAC,IAApC;WADQ;QAAA,CAPZ,CAAA;AAUA,eAAM,CAAA,GAAI,WAAW,CAAC,MAAtB,GAAA;AACE,UAAA,GAAA,GAAM,WAAY,CAAA,CAAA,CAAlB,CAAA;AACA,UAAA,IAAG,GAAG,CAAC,IAAJ,KAAc,MAAjB;AACE,YAAA,GAAG,CAAC,IAAJ,CAAS;AAAA,cACP,KAAA,EAAM,KADC;AAAA,cAEP,GAAA,EAAI,GAAG,CAAC,GAFD;AAAA,cAGP,SAAA,EAAW,GAAG,CAAC,GAHR;AAAA,cAIP,IAAA,EAAK,QAAS,CAAA,GAAG,CAAC,IAAJ,CAJP;AAAA,cAKP,UAAA,EAAY,QAAS,CAAA,GAAG,CAAC,IAAJ,CALd;AAAA,cAMP,OAAA,EAAQ,QAAS,CAAA,GAAG,CAAC,IAAJ,CANV;aAAT,CAAA,CAAA;AAAA,YAQA,OAAA,GAAU,GAAG,CAAC,GARd,CAAA;AAAA,YASA,OAAA,GAAU,GAAG,CAAC,IATd,CAAA;AAAA,YAUA,QAAA,GAAW,KAVX,CADF;WAAA,MAAA;AAaE,YAAA,GAAG,CAAC,IAAJ,CAAS;AAAA,cACP,KAAA,EAAM,IADC;AAAA,cAEP,QAAA,EAAU,GAAG,CAAC,QAFP;AAAA,cAGP,SAAA,EAAW,GAAG,CAAC,SAHR;AAAA,cAIP,UAAA,EAAY,GAAG,CAAC,UAJT;AAAA,cAKP,SAAA,EAAW,CAAI,GAAG,CAAC,QAAJ,IAAiB,CAAA,UAApB,GAAwC,GAAG,CAAC,GAA5C,GAAqD,OAAtD,CALJ;AAAA,cAMP,GAAA,EAAI,GAAG,CAAC,GAND;AAAA,cAOP,IAAA,EAAS,GAAG,CAAC,QAAP,GAAqB,QAAS,CAAA,GAAG,CAAC,IAAJ,CAA9B,GAA6C,QAAS,CAAA,OAAA,CAPrD;AAAA,cAQP,UAAA,EAAY,QAAS,CAAA,GAAG,CAAC,IAAJ,CARd;AAAA,cASP,OAAA,EAAQ,QAAS,CAAA,GAAG,CAAC,IAAJ,CATV;aAAT,CAAA,CAbF;WADA;AAAA,UAyBA,CAAA,EAzBA,CADF;QAAA,CAVA;AAqCA,eAAO,GAAP,CAtCe;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CA/BjB,CAAA;AAAA,IAuEA,EAAE,CAAC,oBAAH,GAA0B,SAAA,GAAA;AACxB,UAAA,MAAA;AAAA,MAAA,MAAA,GAAQ,cAAA,CAAA,CAAR,CAAA;AACA,aAAO,gBAAgB,CAAC,GAAjB,CAAqB,SAAC,KAAD,GAAA;eAAW;AAAA,UACrC,QAAA,EAAa,KAAK,CAAC,IAAN,KAAc,MAAjB,GAAgC,aAAc,CAAA,KAAK,CAAC,IAAN,CAA9C,GAA+D,KAAK,CAAC,GAD1C;AAAA,UAErC,KAAA,EAAO,KAAK,CAAC,KAFwB;AAAA,UAGrC,MAAA,EAAQ,MAAM,CAAC,GAAP,CAAW,SAAC,CAAD,GAAA;mBAAO;AAAA,cACxB,GAAA,EAAK,CAAC,CAAC,GADiB;AAAA,cAExB,SAAA,EAAW,CAAC,CAAC,SAFW;AAAA,cAGxB,QAAA,EAAU,KAAK,CAAC,GAHQ;AAAA,cAIxB,UAAA,EAAY,KAAK,CAAC,KAJM;AAAA,cAKxB,KAAA,EAAO,CAAC,CAAC,KALe;AAAA,cAMxB,QAAA,EAAU,CAAC,CAAC,QANY;AAAA,cAOxB,SAAA,EAAW,CAAC,CAAC,SAPW;AAAA,cAQxB,UAAA,EAAY,CAAC,CAAC,UARU;AAAA,cASxB,KAAA,EAAO,WAAW,CAAC,UAAZ,CAAuB,CAAC,CAAC,IAAzB,EAA+B,KAAK,CAAC,GAArC,CATiB;AAAA,cAUxB,WAAA,EAAgB,KAAK,CAAC,KAAT,GAAoB,WAAW,CAAC,UAAZ,CAAuB,CAAC,CAAC,OAAzB,EAAkC,KAAK,CAAC,GAAxC,CAAA,IAAgD,CAApE,GAA2E,WAAW,CAAC,UAAZ,CAAuB,CAAC,CAAC,UAAzB,EAAqC,KAAK,CAAC,GAA3C,CAAA,IAAmD,CAVnH;AAAA,cAWxB,IAAA,EAAK,CAAC,CAAC,IAXiB;cAAP;UAAA,CAAX,CAH6B;UAAX;MAAA,CAArB,CAAP,CAFwB;IAAA,CAvE1B,CAAA;AAAA,IA0FA,YAAA,GAAe,CAAA,SAAA,KAAA,GAAA;aAAA,SAAA,GAAA;AACb,YAAA,kDAAA;AAAA,QAAA,GAAA,GAAM,EAAN,CAAA;AAAA,QACA,OAAA,GAAU,OAAQ,CAAA,OAAO,CAAC,MAAR,GAAiB,CAAjB,CADlB,CAAA;AAAA,QAEA,OAAA,GAAU,MAFV,CAAA;AAAA,QAGA,QAAA,GAAW,IAHX,CAAA;AAAA,QAIA,CAAA,GAAI,WAAW,CAAC,MAAZ,GAAqB,CAJzB,CAAA;AAAA,QAMA,SAAA,GAAY,SAAC,GAAD,GAAA;AACV,UAAA,IAAG,UAAH;mBAAmB,QAAnB;WAAA,MAAA;mBAAgC,GAAG,CAAC,IAApC;WADU;QAAA,CANZ,CAAA;AASA,eAAM,CAAA,IAAK,CAAX,GAAA;AACE,UAAA,GAAA,GAAM,WAAY,CAAA,CAAA,CAAlB,CAAA;AACA,UAAA,IAAG,GAAG,CAAC,IAAJ,KAAc,MAAjB;AACE,YAAA,GAAG,CAAC,OAAJ,CAAY;AAAA,cACV,OAAA,EAAQ,KADE;AAAA,cAEV,GAAA,EAAK,GAAG,CAAC,GAFC;AAAA,cAGV,SAAA,EAAW,GAAG,CAAC,GAHL;AAAA,cAIV,IAAA,EAAK,QAAS,CAAA,GAAG,CAAC,IAAJ,CAJJ;AAAA,cAKV,UAAA,EAAY,QAAS,CAAA,GAAG,CAAC,IAAJ,CALX;AAAA,cAMV,OAAA,EAAS,QAAS,CAAA,GAAG,CAAC,IAAJ,CANR;aAAZ,CAAA,CAAA;AAAA,YAQA,OAAA,GAAU,GAAG,CAAC,GARd,CAAA;AAAA,YASA,OAAA,GAAU,GAAG,CAAC,IATd,CAAA;AAAA,YAUA,QAAA,GAAW,KAVX,CADF;WAAA,MAAA;AAaE,YAAA,GAAG,CAAC,OAAJ,CAAY;AAAA,cACV,OAAA,EAAQ,IADE;AAAA,cAEV,QAAA,EAAU,GAAG,CAAC,QAFJ;AAAA,cAGV,SAAA,EAAW,GAAG,CAAC,SAHL;AAAA,cAIV,UAAA,EAAY,GAAG,CAAC,UAJN;AAAA,cAKV,SAAA,EAAW,CAAI,GAAG,CAAC,QAAJ,IAAiB,CAAA,UAApB,GAAwC,GAAG,CAAC,GAA5C,GAAqD,OAAtD,CALD;AAAA,cAMV,GAAA,EAAI,GAAG,CAAC,GANE;AAAA,cAOV,IAAA,EAAM,QAAS,CAAA,OAAA,CAPL;AAAA,cAQV,UAAA,EAAY,QAAS,CAAA,GAAG,CAAC,IAAJ,CARX;AAAA,cASV,OAAA,EAAS,QAAS,CAAA,GAAG,CAAC,IAAJ,CATR;aAAZ,CAAA,CAbF;WADA;AAAA,UAyBA,CAAA,EAzBA,CADF;QAAA,CATA;AAoCA,eAAO,GAAP,CArCa;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CA1Ff,CAAA;AAAA,IAkIA,EAAE,CAAC,kBAAH,GAAwB,SAAA,GAAA;AACtB,UAAA,MAAA;AAAA,MAAA,MAAA,GAAS,YAAA,CAAA,CAAT,CAAA;AACA,aAAO,gBAAgB,CAAC,GAAjB,CAAqB,SAAC,KAAD,GAAA;AAC1B,eAAO;AAAA,UACL,QAAA,EAAU,KAAK,CAAC,GADX;AAAA,UAEL,OAAA,EAAQ,KAAK,CAAC,OAFT;AAAA,UAGL,MAAA,EAAQ,MAAM,CAAC,GAAP,CAAW,SAAC,CAAD,GAAA;AACjB,mBAAO;AAAA,cACL,GAAA,EAAK,CAAC,CAAC,GADF;AAAA,cAEL,SAAA,EAAW,CAAC,CAAC,SAFR;AAAA,cAGL,QAAA,EAAU,KAAK,CAAC,GAHX;AAAA,cAIL,YAAA,EAAc,KAAK,CAAC,OAJf;AAAA,cAKL,OAAA,EAAQ,CAAC,CAAC,OALL;AAAA,cAML,QAAA,EAAU,CAAC,CAAC,QANP;AAAA,cAOL,SAAA,EAAW,CAAC,CAAC,SAPR;AAAA,cAQL,UAAA,EAAY,CAAC,CAAC,UART;AAAA,cASL,KAAA,EAAU,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,QAAnB,GAAiC,WAAW,CAAC,UAAZ,CAAuB,CAAC,CAAC,UAAzB,EAAqC,KAAK,CAAC,GAA3C,CAAjC,GAAsF,WAAW,CAAC,UAAZ,CAAuB,CAAC,CAAC,IAAzB,EAA+B,KAAK,CAAC,GAArC,CATxF;AAAA,cAUL,WAAA,EAAgB,KAAK,CAAC,OAAT,GAAsB,WAAW,CAAC,UAAZ,CAAuB,CAAC,CAAC,OAAzB,EAAkC,KAAK,CAAC,GAAxC,CAAA,IAAgD,CAAtE,GAA6E,WAAW,CAAC,UAAZ,CAAuB,CAAC,CAAC,UAAzB,EAAqC,KAAK,CAAC,GAA3C,CAAA,IAAmD,CAVxI;AAAA,cAWL,IAAA,EAAK,CAAC,CAAC,UAXF;aAAP,CADiB;UAAA,CAAX,CAHH;SAAP,CAD0B;MAAA,CAArB,CAAP,CAFsB;IAAA,CAlIxB,CAAA;AAAA,IAuJA,EAAE,CAAC,QAAH,GAAc,SAAC,KAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA;AAAA,MACA,SAAA,GAAY,KADZ,CAAA;AAAA,MAEA,UAAA,GAAa,KAAK,CAAC,SAAN,CAAA,CAFb,CAAA;AAGA,aAAO,EAAP,CAJY;IAAA,CAvJd,CAAA;AAAA,IA6JA,EAAE,CAAC,UAAH,GAAgB,SAAC,KAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA;AAAA,MACA,WAAA,GAAc,KADd,CAAA;AAAA,MAEA,aAAA,GAAgB,KAAK,CAAC,IAAN,CAAA,CAAA,KAAgB,QAAhB,IAA4B,KAAK,CAAC,IAAN,CAAA,CAAA,KAAgB,QAF5D,CAAA;AAIA,aAAO,EAAP,CALc;IAAA,CA7JhB,CAAA;AAoKA,WAAO,EAAP,CArKM;EAAA,CArGR,CAAA;AA4QA,SAAO,KAAP,CA9QsD;AAAA,CAAxD,CAAA,CAAA;;ACAA;AAAA;;;;;;;;GAAA;AAAA,OAWO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,OAArC,EAA8C,SAAC,IAAD,EAAO,KAAP,EAAc,MAAd,EAAsB,UAAtB,GAAA;AAC5C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,CAAC,OAAD,EAAS,QAAT,EAAmB,UAAnB,CAFJ;AAAA,IAGL,UAAA,EAAY,SAAC,QAAD,GAAA;aACV,IAAI,CAAC,EAAL,GAAU,KAAA,CAAA,EADA;IAAA,CAHP;AAAA,IAML,KAAA,EACE;AAAA,MAAA,WAAA,EAAa,GAAb;KAPG;AAAA,IASL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,WAAxB,GAAA;AACJ,UAAA,gCAAA;AAAA,MAAA,EAAA,GAAK,WAAY,CAAA,CAAA,CAAE,CAAC,EAApB,CAAA;AAAA,MACA,KAAA,GAAQ,WAAY,CAAA,CAAA,CAAE,CAAC,EADvB,CAAA;AAAA,MAEA,MAAA,yCAAuB,CAAE,WAFzB,CAAA;AAAA,MAGA,CAAA,GAAI,MAHJ,CAAA;AAKA,MAAA,IAAG,CAAA,CAAK,KAAA,IAAS,MAAV,CAAP;AACE,QAAA,IAAI,CAAC,KAAL,CAAW,6DAAX,CAAA,CAAA;AACA,cAAA,CAFF;OALA;AAAA,MASA,IAAA,GAAO,OATP,CAAA;AAAA,MAUA,EAAE,CAAC,IAAH,CAAQ,IAAR,CAVA,CAAA;AAAA,MAWA,EAAE,CAAC,MAAH,CAAU,MAAA,IAAU,KAApB,CAXA,CAAA;AAAA,MAYA,EAAE,CAAC,KAAH,CAAS,KAAT,CAZA,CAAA;AAAA,MAaA,EAAE,CAAC,SAAH,CAAa,YAAb,CAbA,CAAA;AAAA,MAcA,OAAO,CAAC,QAAR,CAAiB,EAAE,CAAC,EAAH,CAAA,CAAjB,CAdA,CAAA;AAAA,MAgBA,KAAK,CAAC,QAAN,CAAe,EAAf,EAAmB,MAAnB,CAhBA,CAAA;AAAA,MAiBA,EAAE,CAAC,QAAH,CAAA,CAjBA,CAAA;AAAA,MAuBA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,CAvBA,CAAA;AAAA,MAwBA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,EAA8C,MAA9C,EAAsD,KAAtD,CAxBA,CAAA;AAAA,MA0BA,KAAK,CAAC,MAAN,CAAa,aAAb,EAA4B,SAAC,EAAD,GAAA;AAC1B,QAAA,IAAG,EAAA,IAAO,CAAC,CAAC,UAAF,CAAa,EAAb,CAAV;iBACE,EAAE,CAAC,UAAH,CAAc,EAAd,EADF;SAD0B;MAAA,CAA5B,CA1BA,CAAA;aA8BA,KAAK,CAAC,SAAN,CAAA,CAAiB,CAAC,EAAlB,CAAqB,eAArB,EAAsC,SAAA,GAAA;eACpC,KAAK,CAAC,QAAN,CAAA,EADoC;MAAA,CAAtC,EA/BI;IAAA,CATD;GAAP,CAF4C;AAAA,CAA9C,CAXA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,YAAnC,EAAiD,SAAC,IAAD,EAAO,aAAP,EAAsB,KAAtB,GAAA;AAE/C,MAAA,SAAA;AAAA,EAAA,SAAA,GAAY,SAAC,GAAD,GAAA;AACV,QAAA,CAAA;AAAA,IAAA,IAAG,GAAH;AACE,MAAA,CAAA,GAAI,GAAG,CAAC,IAAJ,CAAA,CAAU,CAAC,OAAX,CAAmB,UAAnB,EAA+B,EAA/B,CAAkC,CAAC,KAAnC,CAAyC,GAAzC,CAA6C,CAAC,GAA9C,CAAkD,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,OAAF,CAAU,kBAAV,EAA8B,EAA9B,EAAP;MAAA,CAAlD,CAAJ,CAAA;AAAA,MACA,CAAA,GAAI,CAAC,CAAC,GAAF,CAAM,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,KAAA,CAAM,CAAN,CAAH;iBAAiB,EAAjB;SAAA,MAAA;iBAAwB,CAAA,EAAxB;SAAP;MAAA,CAAN,CADJ,CAAA;AAEO,MAAA,IAAG,CAAC,CAAC,MAAF,KAAY,CAAf;AAAsB,eAAO,CAAE,CAAA,CAAA,CAAT,CAAtB;OAAA,MAAA;eAAuC,EAAvC;OAHT;KADU;EAAA,CAAZ,CAAA;AAMA,SAAO;AAAA,IAEP,uBAAA,EAAyB,SAAC,KAAD,EAAQ,EAAR,GAAA;AACvB;AAAA;;;;;;SAAA;AAAA,MAOA,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,SAAC,GAAD,GAAA;AACrB,QAAA,IAAG,GAAA,KAAS,MAAZ;AACE,UAAA,IAAG,EAAE,CAAC,KAAK,CAAC,cAAT,CAAwB,GAAxB,CAAA,IAAgC,GAAA,KAAO,MAAvC,IAAiD,aAAa,CAAC,cAAd,CAA6B,GAA7B,CAApD;AACE,YAAA,EAAE,CAAC,SAAH,CAAa,GAAb,CAAA,CADF;WAAA,MAAA;AAGE,YAAA,IAAG,GAAA,KAAS,EAAZ;AAEE,cAAA,IAAI,CAAC,KAAL,CAAY,8BAAA,GAA8B,GAA9B,GAAkC,gCAA9C,CAAA,CAFF;aAHF;WAAA;iBAMA,EAAE,CAAC,MAAH,CAAA,EAPF;SADqB;MAAA,CAAvB,CAPA,CAAA;AAiBA;AAAA;;;;;;SAjBA;AAAA,MAwBA,KAAK,CAAC,QAAN,CAAe,UAAf,EAA2B,SAAC,GAAD,GAAA;AACzB,QAAA,IAAG,EAAE,CAAC,SAAH,CAAA,CAAA,KAAkB,KAAlB,IAA4B,CAAC,CAAC,QAAF,CAAW,CAAA,GAAX,CAA/B;iBACE,EAAE,CAAC,QAAH,CAAY,CAAA,GAAZ,CAAiB,CAAC,MAAlB,CAAA,EADF;SADyB;MAAA,CAA3B,CAxBA,CAAA;AA4BA;AAAA;;;;;;;SA5BA;AAAA,MAoCA,KAAK,CAAC,QAAN,CAAe,UAAf,EAA2B,SAAC,GAAD,GAAA;eACzB,EAAE,CAAC,QAAH,CAAY,SAAA,CAAU,GAAV,CAAZ,CAA2B,CAAC,MAA5B,CAAA,EADyB;MAAA,CAA3B,CApCA,CAAA;AAuCA;AAAA;;;;;;;SAvCA;AAAA,MA+CA,KAAK,CAAC,QAAN,CAAe,eAAf,EAAgC,SAAC,GAAD,GAAA;AAC9B,QAAA,IAAG,GAAA,IAAQ,GAAG,CAAC,MAAJ,GAAa,CAAxB;iBACE,EAAE,CAAC,aAAH,CAAiB,GAAjB,CAAqB,CAAC,MAAtB,CAAA,EADF;SAD8B;MAAA,CAAhC,CA/CA,CAAA;AAmDA;AAAA;;;;;;SAnDA;AAAA,MA0DA,KAAK,CAAC,QAAN,CAAe,OAAf,EAAwB,SAAC,GAAD,GAAA;AACtB,YAAA,KAAA;AAAA,QAAA,KAAA,GAAQ,SAAA,CAAU,GAAV,CAAR,CAAA;AACA,QAAA,IAAG,KAAK,CAAC,OAAN,CAAc,KAAd,CAAH;iBACE,EAAE,CAAC,KAAH,CAAS,KAAT,CAAe,CAAC,MAAhB,CAAA,EADF;SAFsB;MAAA,CAAxB,CA1DA,CAAA;AA+DA;AAAA;;;;;;;SA/DA;AAAA,MAuEA,KAAK,CAAC,QAAN,CAAe,YAAf,EAA6B,SAAC,GAAD,GAAA;AAC3B,QAAA,IAAG,GAAH;AACE,UAAA,IAAG,EAAE,CAAC,SAAH,CAAA,CAAA,KAAkB,MAArB;mBACE,EAAE,CAAC,UAAH,CAAc,GAAd,CAAkB,CAAC,MAAnB,CAAA,EADF;WADF;SAD2B;MAAA,CAA7B,CAvEA,CAAA;AA4EA;AAAA;;;;;;;SA5EA;AAAA,MAoFA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,YAAA,UAAA;AAAA,QAAA,IAAG,GAAH;AACE,UAAA,IAAI,CAAC,IAAL,CAAU,QAAV,EAAoB,GAApB,CAAA,CAAA;AAAA,UACA,UAAA,GAAa,SAAA,CAAU,GAAV,CADb,CAAA;AAEA,UAAA,IAAG,KAAK,CAAC,OAAN,CAAc,UAAd,CAAH;mBACE,EAAE,CAAC,MAAH,CAAU,UAAV,CAAqB,CAAC,MAAtB,CAAA,EADF;WAAA,MAAA;mBAGE,IAAI,CAAC,KAAL,CAAW,qDAAX,EAAkE,GAAlE,EAHF;WAHF;SAAA,MAAA;iBAQE,EAAE,CAAC,MAAH,CAAU,MAAV,CAAoB,CAAC,MAArB,CAAA,EARF;SADuB;MAAA,CAAzB,CApFA,CAAA;AA8FA;AAAA;;;;;;;;;;SA9FA;AAAA,MAyGA,KAAK,CAAC,QAAN,CAAe,aAAf,EAA8B,SAAC,GAAD,GAAA;AAC5B,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,UAAH,CAAc,GAAd,CAAkB,CAAC,MAAnB,CAAA,EADF;SAD4B;MAAA,CAA9B,CAzGA,CAAA;AA6GA;AAAA;;;;;;SA7GA;AAAA,MAoHA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,SAAH,CAAa,GAAb,EADF;SAD0B;MAAA,CAA5B,CApHA,CAAA;AAwHA;AAAA;;;;;;SAxHA;AAAA,MA+HA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,SAAH,CAAa,GAAb,EADF;SAD0B;MAAA,CAA5B,CA/HA,CAAA;AAmIA;AAAA;;;;;;SAnIA;AAAA,MA0IA,KAAK,CAAC,QAAN,CAAe,OAAf,EAAwB,SAAC,GAAD,GAAA;AACtB,QAAA,IAAG,GAAA,KAAS,MAAZ;iBACE,EAAE,CAAC,SAAH,CAAa,GAAb,CAAiB,CAAC,WAAlB,CAAA,EADF;SADsB;MAAA,CAAxB,CA1IA,CAAA;AA8IA;AAAA;;;;;;;SA9IA;AAAA,MAsJA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAS,MAAZ;iBACE,EAAE,CAAC,MAAH,CAAU,GAAV,EADF;SADuB;MAAA,CAAzB,CAtJA,CAAA;AA0JA;AAAA;;;;;;SA1JA;aAiKA,KAAK,CAAC,QAAN,CAAe,OAAf,EAAwB,SAAC,GAAD,GAAA;eACtB,EAAE,CAAC,cAAH,CAAkB,KAAK,CAAC,cAAN,CAAqB,GAArB,CAAlB,EADsB;MAAA,CAAxB,EAlKuB;IAAA,CAFlB;AAAA,IAyKP,qBAAA,EAAuB,SAAC,KAAD,EAAQ,EAAR,EAAY,KAAZ,GAAA;AACrB;AAAA;;;;;SAAA;AAAA,MAMA,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,SAAC,GAAD,GAAA;eACrB,EAAE,CAAC,UAAH,CAAc,EAAE,CAAC,WAAH,CAAA,CAAd,CAA+B,CAAC,QAAhC,CAAyC,KAAK,CAAC,cAAN,CAAqB,GAArB,CAAzC,CAAmE,CAAC,MAApE,CAAA,EADqB;MAAA,CAAvB,CANA,CAAA;AASA;AAAA;;;;;SATA;AAAA,MAeA,KAAK,CAAC,QAAN,CAAe,YAAf,EAA6B,SAAC,GAAD,GAAA;AAC3B,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,cAAH,CAAkB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAlB,EADF;SAD2B;MAAA,CAA7B,CAfA,CAAA;AAmBA;AAAA;;;;;SAnBA;AAAA,MAyBA,KAAK,CAAC,QAAN,CAAe,YAAf,EAA6B,SAAC,GAAD,GAAA;AAC3B,QAAA,IAAG,GAAA,KAAS,MAAZ;iBACE,EAAE,CAAC,UAAH,CAAc,EAAE,CAAC,MAAH,CAAU,GAAV,CAAd,CAA6B,CAAC,MAA9B,CAAA,EADF;SAD2B;MAAA,CAA7B,CAzBA,CAAA;AA6BA;AAAA;;;;;SA7BA;AAAA,MAmCA,KAAK,CAAC,QAAN,CAAe,OAAf,EAAwB,SAAC,GAAD,GAAA;AACtB,QAAA,IAAG,GAAA,KAAS,MAAZ;AACE,UAAA,EAAE,CAAC,KAAH,CAAS,CAAA,GAAT,CAAA,CAAA;AACA,UAAA,IAAG,EAAE,CAAC,IAAH,CAAA,CAAH;mBACE,EAAE,CAAC,WAAH,CAAA,EADF;WAFF;SADsB;MAAA,CAAxB,CAnCA,CAAA;AAyCA;AAAA;;;;;;;;SAzCA;AAAA,MAkDA,KAAK,CAAC,QAAN,CAAe,cAAf,EAA+B,SAAC,GAAD,GAAA;AAC7B,QAAA,IAAG,GAAA,KAAS,MAAZ;AACE,UAAA,EAAE,CAAC,YAAH,CAAgB,GAAhB,CAAA,CAAA;AACA,UAAA,IAAG,EAAE,CAAC,IAAH,CAAA,CAAH;mBACE,EAAE,CAAC,WAAH,CAAA,EADF;WAFF;SAD6B;MAAA,CAA/B,CAlDA,CAAA;AAwDA;AAAA;;;;;SAxDA;AAAA,MA8DA,KAAK,CAAC,QAAN,CAAe,gBAAf,EAAiC,SAAC,GAAD,GAAA;AAC/B,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,cAAH,CAAkB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAlB,EADF;SAD+B;MAAA,CAAjC,CA9DA,CAAA;AAkEA;AAAA;;;;;SAlEA;AAAA,MAwEA,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,SAAC,GAAD,GAAA;AACrB,QAAA,IAAG,GAAA,KAAS,MAAZ;iBACE,EAAE,CAAC,QAAH,CAAY,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAhC,CAAuC,CAAC,WAAxC,CAAA,EADF;SADqB;MAAA,CAAvB,CAxEA,CAAA;AA4EA;AAAA;;;;;SA5EA;AAAA,MAkFA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,SAAH,CAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAb,EADF;SAD0B;MAAA,CAA5B,CAlFA,CAAA;AAuFA;AAAA;;;;;SAvFA;AAAA,MA6FA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAA,KAAS,MAAZ;iBACE,EAAE,CAAC,SAAH,CAAa,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAjC,CAAwC,CAAC,MAAzC,CAAgD,IAAhD,EADF;SAD0B;MAAA,CAA5B,CA7FA,CAAA;AAiGA;AAAA;;;;;;;;;;;;;;;SAjGA;AAkHA;AAAA;;;;;;SAlHA;AAAA,MAyHA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,QAAA,IAAG,GAAA,KAAS,MAAZ;iBACE,EAAE,CAAC,OAAH,CAAW,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAA/B,CAAsC,CAAC,MAAvC,CAAA,EADF;SADwB;MAAA,CAA1B,CAzHA,CAAA;AA6HA;AAAA;;;;;;SA7HA;aAoIA,KAAK,CAAC,QAAN,CAAe,kBAAf,EAAmC,SAAC,GAAD,GAAA;AACjC,QAAA,IAAG,GAAA,IAAQ,CAAC,CAAC,QAAF,CAAW,CAAA,GAAX,CAAX;AACE,UAAA,EAAE,CAAC,gBAAH,CAAoB,CAAA,GAApB,CAAA,CADF;SAAA,MAAA;AAGE,UAAA,EAAE,CAAC,gBAAH,CAAoB,MAApB,CAAA,CAHF;SAAA;eAIA,EAAE,CAAC,MAAH,CAAU,IAAV,EALiC;MAAA,CAAnC,EArIqB;IAAA,CAzKhB;AAAA,IAuTP,uBAAA,EAAyB,SAAC,KAAD,EAAQ,EAAR,EAAY,MAAZ,EAAoB,KAApB,GAAA;AAEvB;AAAA;;;;;;SAAA;AAAA,MAOA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,YAAA,YAAA;AAAA,QAAA,IAAG,GAAA,KAAS,MAAZ;AACE,UAAA,CAAA,GAAI,EAAE,CAAC,MAAH,CAAA,CAAJ,CAAA;AAAA,UACA,CAAC,CAAC,UAAF,CAAa,KAAb,CADA,CAAA;AAEA,kBAAO,GAAP;AAAA,iBACO,OADP;AAEI,cAAA,CAAC,CAAC,IAAF,CAAO,KAAP,CAAA,CAFJ;AACO;AADP,iBAGO,UAHP;AAAA,iBAGmB,WAHnB;AAAA,iBAGgC,aAHhC;AAAA,iBAG+C,cAH/C;AAII,cAAA,CAAC,CAAC,QAAF,CAAW,GAAX,CAAe,CAAC,GAAhB,CAAoB,MAApB,CAA8B,CAAC,IAA/B,CAAoC,IAApC,CAAA,CAJJ;AAG+C;AAH/C,iBAKO,MALP;AAAA,iBAKe,EALf;AAMI,cAAA,CAAC,CAAC,QAAF,CAAW,WAAX,CAAuB,CAAC,IAAxB,CAA6B,IAA7B,CAAkC,CAAC,GAAnC,CAAuC,MAAvC,CAAA,CANJ;AAKe;AALf;AAQI,cAAA,SAAA,GAAY,EAAE,CAAC,MAAH,CAAU,GAAV,CAAZ,CAAA;AACA,cAAA,IAAG,SAAS,CAAC,KAAV,CAAA,CAAH;AACE,gBAAA,IAAI,CAAC,IAAL,CAAU,kCAAV,EAA8C,GAA9C,CAAA,CAAA;AAAA,gBACA,CAAC,CAAC,GAAF,CAAM,MAAN,CAAgB,CAAC,IAAjB,CAAsB,KAAtB,CADA,CADF;eAAA,MAAA;AAIE,gBAAA,CAAC,CAAC,GAAF,CAAM,SAAN,CAAgB,CAAC,QAAjB,CAA0B,UAA1B,CAAqC,CAAC,IAAtC,CAA2C,IAA3C,CAAA,CAJF;eATJ;AAAA,WAFA;AAAA,UAiBA,CAAC,CAAC,KAAF,CAAQ,EAAR,CAAW,CAAC,MAAZ,CAAmB,MAAnB,CAjBA,CAAA;AAkBA,UAAA,IAAG,EAAE,CAAC,MAAH,CAAA,CAAH;AACE,YAAA,CAAC,CAAC,QAAF,CAAW,EAAE,CAAC,MAAH,CAAA,CAAX,CAAA,CADF;WAlBA;iBAoBA,CAAC,CAAC,MAAF,CAAA,EArBF;SADuB;MAAA,CAAzB,CAPA,CAAA;AA+BA;AAAA;;;;;SA/BA;AAAA,MAqCA,KAAK,CAAC,QAAN,CAAe,cAAf,EAA+B,SAAC,GAAD,GAAA;AAC7B,YAAA,YAAA;AAAA,QAAA,IAAG,GAAA,KAAS,MAAZ;AACE,UAAA,CAAA,GAAI,EAAE,CAAC,MAAH,CAAA,CAAJ,CAAA;AAAA,UACA,CAAC,CAAC,UAAF,CAAa,IAAb,CADA,CAAA;AAEA,kBAAO,GAAP;AAAA,iBACO,OADP;AAEI,cAAA,CAAC,CAAC,IAAF,CAAO,KAAP,CAAA,CAFJ;AACO;AADP,iBAGO,UAHP;AAAA,iBAGmB,WAHnB;AAAA,iBAGgC,aAHhC;AAAA,iBAG+C,cAH/C;AAII,cAAA,CAAC,CAAC,QAAF,CAAW,GAAX,CAAe,CAAC,GAAhB,CAAoB,MAApB,CAA8B,CAAC,IAA/B,CAAoC,IAApC,CAAA,CAJJ;AAG+C;AAH/C,iBAKO,MALP;AAAA,iBAKe,EALf;AAMI,cAAA,CAAC,CAAC,QAAF,CAAW,WAAX,CAAuB,CAAC,IAAxB,CAA6B,IAA7B,CAAkC,CAAC,GAAnC,CAAuC,MAAvC,CAAA,CANJ;AAKe;AALf;AAQI,cAAA,SAAA,GAAY,EAAE,CAAC,MAAH,CAAU,GAAV,CAAZ,CAAA;AACA,cAAA,IAAG,SAAS,CAAC,KAAV,CAAA,CAAH;AACE,gBAAA,IAAI,CAAC,IAAL,CAAU,kCAAV,EAA8C,GAA9C,CAAA,CAAA;AAAA,gBACA,CAAC,CAAC,GAAF,CAAM,MAAN,CAAgB,CAAC,IAAjB,CAAsB,KAAtB,CADA,CADF;eAAA,MAAA;AAIE,gBAAA,CAAC,CAAC,GAAF,CAAM,SAAN,CAAgB,CAAC,QAAjB,CAA0B,UAA1B,CAAqC,CAAC,IAAtC,CAA2C,IAA3C,CAAA,CAJF;eATJ;AAAA,WAFA;AAAA,UAiBA,CAAC,CAAC,KAAF,CAAQ,EAAR,CAAW,CAAC,MAAZ,CAAmB,MAAnB,CAjBA,CAAA;AAkBA,UAAA,IAAG,EAAE,CAAC,MAAH,CAAA,CAAH;AACE,YAAA,CAAC,CAAC,QAAF,CAAW,EAAE,CAAC,MAAH,CAAA,CAAX,CAAA,CADF;WAlBA;iBAoBA,CAAC,CAAC,MAAF,CAAA,EArBF;SAD6B;MAAA,CAA/B,CArCA,CAAA;AA6DA;AAAA;;;;;SA7DA;AAAA,MAmEA,KAAK,CAAC,QAAN,CAAe,aAAf,EAA8B,SAAC,GAAD,GAAA;AAC5B,QAAA,IAAG,GAAA,KAAS,MAAZ;iBACE,EAAE,CAAC,MAAH,CAAA,CAAW,CAAC,KAAZ,CAAkB,GAAlB,CAAsB,CAAC,MAAvB,CAAA,EADF;SAD4B;MAAA,CAA9B,CAnEA,CAAA;AAuEA;AAAA;;;;;SAvEA;aA6EA,KAAK,CAAC,QAAN,CAAe,aAAf,EAA8B,SAAC,GAAD,GAAA;AAC5B,QAAA,IAAG,GAAA,KAAS,MAAZ;iBACE,EAAE,CAAC,MAAH,CAAA,CAAW,CAAC,WAAZ,CAAwB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAxB,CAAyC,CAAC,MAA1C,CAAA,EADF;SAD4B;MAAA,CAA9B,EA/EuB;IAAA,CAvTlB;GAAP,CAR+C;AAAA,CAAjD,CAAA,CAAA;;ACAA;AAAA;;;;;;;;GAAA;AAAA,OAYO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,OAArC,EAA8C,SAAC,IAAD,EAAO,KAAP,EAAc,QAAd,EAAwB,UAAxB,GAAA;AAC5C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,CAAC,OAAD,EAAS,QAAT,EAAmB,UAAnB,CAFJ;AAAA,IAGL,UAAA,EAAY,SAAC,QAAD,GAAA;aACV,IAAI,CAAC,EAAL,GAAU,KAAA,CAAA,EADA;IAAA,CAHP;AAAA,IAOL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,WAAxB,GAAA;AACJ,UAAA,6BAAA;AAAA,MAAA,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,KAAK,CAAC,GAA9B,CAAA,CAAA;AAAA,MACA,EAAA,GAAK,WAAY,CAAA,CAAA,CAAE,CAAC,EADpB,CAAA;AAAA,MAEA,KAAA,GAAQ,WAAY,CAAA,CAAA,CAAE,CAAC,EAFvB,CAAA;AAAA,MAGA,MAAA,yCAAuB,CAAE,WAHzB,CAAA;AAKA,MAAA,IAAG,CAAA,CAAK,KAAA,IAAS,MAAV,CAAP;AACE,QAAA,IAAI,CAAC,KAAL,CAAW,6DAAX,CAAA,CAAA;AACA,cAAA,CAFF;OALA;AAAA,MASA,IAAA,GAAO,OATP,CAAA;AAAA,MAUA,EAAE,CAAC,IAAH,CAAQ,IAAR,CAVA,CAAA;AAAA,MAWA,EAAE,CAAC,MAAH,CAAU,MAAA,IAAU,KAApB,CAXA,CAAA;AAAA,MAYA,EAAE,CAAC,KAAH,CAAS,KAAT,CAZA,CAAA;AAAA,MAaA,EAAE,CAAC,SAAH,CAAa,SAAb,CAbA,CAAA;AAAA,MAcA,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,KAAX,CAAiB,QAAjB,CAdA,CAAA;AAAA,MAeA,OAAO,CAAC,QAAR,CAAiB,EAAE,CAAC,EAAH,CAAA,CAAjB,CAfA,CAAA;AAAA,MAiBA,KAAK,CAAC,QAAN,CAAe,EAAf,EAAmB,MAAnB,CAjBA,CAAA;AAAA,MAkBA,EAAE,CAAC,QAAH,CAAA,CAlBA,CAAA;AAAA,MAwBA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,CAxBA,CAAA;aAyBA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,EAA8C,MAA9C,EAAsD,KAAtD,EA1BI;IAAA,CAPD;GAAP,CAF4C;AAAA,CAA9C,CAZA,CAAA;;ACAA;AAAA;;;;;;;;GAAA;AAAA,OAYO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,MAArC,EAA6C,SAAC,IAAD,EAAO,KAAP,EAAc,UAAd,GAAA;AAC3C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,CAAC,MAAD,EAAQ,QAAR,EAAkB,UAAlB,CAFJ;AAAA,IAGL,UAAA,EAAY,SAAC,QAAD,GAAA;aACV,IAAI,CAAC,EAAL,GAAU,KAAA,CAAA,EADA;IAAA,CAHP;AAAA,IAOL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,WAAxB,GAAA;AACJ,UAAA,6BAAA;AAAA,MAAA,IAAI,CAAC,GAAL,CAAS,YAAT,EAAuB,KAAK,CAAC,GAA7B,CAAA,CAAA;AAAA,MACA,EAAA,GAAK,WAAY,CAAA,CAAA,CAAE,CAAC,EADpB,CAAA;AAAA,MAEA,KAAA,GAAQ,WAAY,CAAA,CAAA,CAAE,CAAC,EAFvB,CAAA;AAAA,MAGA,MAAA,yCAAuB,CAAE,WAHzB,CAAA;AAKA,MAAA,IAAG,CAAA,CAAK,KAAA,IAAS,MAAV,CAAP;AACE,QAAA,IAAI,CAAC,KAAL,CAAW,6DAAX,CAAA,CAAA;AACA,cAAA,CAFF;OALA;AAAA,MASA,IAAA,GAAO,MATP,CAAA;AAAA,MAUA,EAAE,CAAC,IAAH,CAAQ,IAAR,CAVA,CAAA;AAAA,MAWA,EAAE,CAAC,MAAH,CAAU,MAAA,IAAU,KAApB,CAXA,CAAA;AAAA,MAYA,EAAE,CAAC,KAAH,CAAS,KAAT,CAZA,CAAA;AAAA,MAaA,EAAE,CAAC,SAAH,CAAa,QAAb,CAbA,CAAA;AAAA,MAcA,EAAE,CAAC,cAAH,CAAkB,IAAlB,CAdA,CAAA;AAAA,MAeA,OAAO,CAAC,QAAR,CAAiB,EAAE,CAAC,EAAH,CAAA,CAAjB,CAfA,CAAA;AAAA,MAiBA,KAAK,CAAC,QAAN,CAAe,EAAf,EAAmB,MAAnB,CAjBA,CAAA;AAAA,MAkBA,EAAE,CAAC,QAAH,CAAA,CAlBA,CAAA;AAAA,MAwBA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,CAxBA,CAAA;aAyBA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,EAA8C,MAA9C,EAAsD,KAAtD,EA1BI;IAAA,CAPD;GAAP,CAF2C;AAAA,CAA7C,CAZA,CAAA;;ACAA;AAAA;;;;;;;;;;;GAAA;AAAA,OAaO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,GAArC,EAA0C,SAAC,IAAD,EAAO,KAAP,EAAc,UAAd,GAAA;AACxC,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,CAAC,GAAD,EAAK,QAAL,EAAe,UAAf,CAFJ;AAAA,IAGL,UAAA,EAAY,SAAC,QAAD,GAAA;aAEV,IAAI,CAAC,EAAL,GAAU,KAAA,CAAA,EAFA;IAAA,CAHP;AAAA,IAOL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,WAAxB,GAAA;AACJ,UAAA,6BAAA;AAAA,MAAA,IAAI,CAAC,GAAL,CAAS,SAAT,EAAoB,KAAK,CAAC,GAA1B,CAAA,CAAA;AAAA,MACA,EAAA,GAAK,WAAY,CAAA,CAAA,CAAE,CAAC,EADpB,CAAA;AAAA,MAEA,KAAA,GAAQ,WAAY,CAAA,CAAA,CAAE,CAAC,EAFvB,CAAA;AAAA,MAGA,MAAA,yCAAuB,CAAE,WAHzB,CAAA;AAKA,MAAA,IAAG,CAAA,CAAK,KAAA,IAAS,MAAV,CAAP;AACE,QAAA,IAAI,CAAC,KAAL,CAAW,6DAAX,CAAA,CAAA;AACA,cAAA,CAFF;OALA;AASA,MAAA,IAAG,KAAK,CAAC,cAAN,CAAqB,KAArB,CAAH;AACE,QAAA,EAAE,CAAC,WAAH,CAAe,KAAf,CAAA,CADF;OAAA,MAAA;AAGE,QAAA,EAAE,CAAC,WAAH,CAAe,QAAf,CAAA,CAHF;OATA;AAAA,MAcA,IAAA,GAAO,GAdP,CAAA;AAAA,MAeA,EAAE,CAAC,IAAH,CAAQ,IAAR,CAfA,CAAA;AAAA,MAgBA,EAAE,CAAC,MAAH,CAAU,MAAA,IAAU,KAApB,CAhBA,CAAA;AAAA,MAiBA,EAAE,CAAC,KAAH,CAAS,KAAT,CAjBA,CAAA;AAAA,MAkBA,EAAE,CAAC,SAAH,CAAa,QAAb,CAlBA,CAAA;AAAA,MAmBA,EAAE,CAAC,cAAH,CAAkB,IAAlB,CAnBA,CAAA;AAAA,MAoBA,EAAE,CAAC,YAAH,CAAgB,IAAhB,CApBA,CAAA;AAAA,MAqBA,EAAE,CAAC,QAAH,CAAA,CArBA,CAAA;AAAA,MAsBA,OAAO,CAAC,QAAR,CAAiB,EAAE,CAAC,EAAH,CAAA,CAAjB,CAtBA,CAAA;AAAA,MAuBA,KAAK,CAAC,QAAN,CAAe,EAAf,EAAmB,MAAnB,CAvBA,CAAA;AAAA,MA6BA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,CA7BA,CAAA;AAAA,MA8BA,UAAU,CAAC,qBAAX,CAAiC,KAAjC,EAAwC,EAAxC,EAA4C,KAA5C,CA9BA,CAAA;aA+BA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,EAA8C,MAA9C,EAhCI;IAAA,CAPD;GAAP,CAFwC;AAAA,CAA1C,CAbA,CAAA;;ACAA;AAAA;;;;;;;;GAAA;AAAA,OAWO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,QAArC,EAA+C,SAAC,IAAD,EAAO,KAAP,EAAc,UAAd,GAAA;AAC7C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,CAAC,QAAD,EAAU,QAAV,EAAoB,UAApB,CAFJ;AAAA,IAGL,UAAA,EAAY,SAAC,QAAD,GAAA;aAEV,IAAI,CAAC,EAAL,GAAU,KAAA,CAAA,EAFA;IAAA,CAHP;AAAA,IAOL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,WAAxB,GAAA;AACJ,UAAA,6BAAA;AAAA,MAAA,EAAA,GAAK,WAAY,CAAA,CAAA,CAAE,CAAC,EAApB,CAAA;AAAA,MACA,KAAA,GAAQ,WAAY,CAAA,CAAA,CAAE,CAAC,EADvB,CAAA;AAAA,MAEA,MAAA,yCAAuB,CAAE,WAFzB,CAAA;AAIA,MAAA,IAAG,CAAA,CAAK,KAAA,IAAS,MAAV,CAAP;AACE,QAAA,IAAI,CAAC,KAAL,CAAW,6DAAX,CAAA,CAAA;AACA,cAAA,CAFF;OAJA;AAAA,MAQA,IAAA,GAAO,QARP,CAAA;AAAA,MASA,EAAE,CAAC,IAAH,CAAQ,IAAR,CATA,CAAA;AAAA,MAUA,EAAE,CAAC,MAAH,CAAU,MAAA,IAAU,KAApB,CAVA,CAAA;AAAA,MAWA,EAAE,CAAC,KAAH,CAAS,KAAT,CAXA,CAAA;AAAA,MAYA,EAAE,CAAC,SAAH,CAAa,QAAb,CAZA,CAAA;AAAA,MAaA,EAAE,CAAC,cAAH,CAAkB,IAAlB,CAbA,CAAA;AAAA,MAcA,EAAE,CAAC,YAAH,CAAgB,IAAhB,CAdA,CAAA;AAAA,MAeA,EAAE,CAAC,QAAH,CAAA,CAfA,CAAA;AAAA,MAgBA,OAAO,CAAC,QAAR,CAAiB,EAAE,CAAC,EAAH,CAAA,CAAjB,CAhBA,CAAA;AAAA,MAkBA,KAAK,CAAC,QAAN,CAAe,EAAf,EAAmB,MAAnB,CAlBA,CAAA;AAAA,MAwBA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,CAxBA,CAAA;AAAA,MA0BA,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,SAAC,GAAD,GAAA;AACrB,QAAA,IAAG,GAAA,KAAS,MAAZ;AACE,UAAA,IAAG,GAAA,KAAS,OAAZ;AACE,YAAA,IAAG,GAAA,KAAQ,KAAR,IAAA,GAAA,KAAe,QAAlB;AACE,cAAA,EAAE,CAAC,UAAH,CAAc,GAAd,CAAkB,CAAC,QAAnB,CAA4B,IAA5B,CAAA,CADF;aAAA,MAAA;AAGE,cAAA,EAAE,CAAC,UAAH,CAAc,QAAd,CAAuB,CAAC,QAAxB,CAAiC,IAAjC,CAAA,CAHF;aADF;WAAA,MAAA;AAME,YAAA,EAAE,CAAC,QAAH,CAAY,KAAZ,CAAkB,CAAC,UAAnB,CAA8B,MAA9B,CAAA,CANF;WAAA;iBAOA,EAAE,CAAC,MAAH,CAAU,IAAV,EARF;SADqB;MAAA,CAAvB,CA1BA,CAAA;AAAA,MAqCA,UAAU,CAAC,qBAAX,CAAiC,KAAjC,EAAwC,EAAxC,EAA4C,KAA5C,CArCA,CAAA;AAAA,MAsCA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,EAA8C,MAA9C,CAtCA,CAAA;AAAA,MAuCA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAAyC,EAAzC,CAvCA,CAAA;aAyCA,KAAK,CAAC,QAAN,CAAe,kBAAf,EAAmC,SAAC,GAAD,GAAA;AACjC,QAAA,IAAG,GAAA,IAAQ,CAAC,CAAC,QAAF,CAAW,CAAA,GAAX,CAAX;AACE,UAAA,EAAE,CAAC,gBAAH,CAAoB,CAAA,GAApB,CAAA,CADF;SAAA,MAAA;AAGE,UAAA,EAAE,CAAC,gBAAH,CAAoB,MAApB,CAAA,CAHF;SAAA;eAIA,EAAE,CAAC,MAAH,CAAU,IAAV,EALiC;MAAA,CAAnC,EA1CI;IAAA,CAPD;GAAP,CAF6C;AAAA,CAA/C,CAXA,CAAA;;ACAA;AAAA;;;;;;;;;;;GAAA;AAAA,OAaO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,GAArC,EAA0C,SAAC,IAAD,EAAO,KAAP,EAAc,MAAd,EAAsB,UAAtB,GAAA;AACxC,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,CAAC,GAAD,EAAK,QAAL,EAAe,UAAf,CAFJ;AAAA,IAGL,UAAA,EAAY,SAAC,QAAD,GAAA;aACV,IAAI,CAAC,EAAL,GAAU,KAAA,CAAA,EADA;IAAA,CAHP;AAAA,IAOL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,WAAxB,GAAA;AACJ,UAAA,6BAAA;AAAA,MAAA,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,KAAK,CAAC,GAA9B,CAAA,CAAA;AAAA,MACA,EAAA,GAAK,WAAY,CAAA,CAAA,CAAE,CAAC,EADpB,CAAA;AAAA,MAEA,KAAA,GAAQ,WAAY,CAAA,CAAA,CAAE,CAAC,EAFvB,CAAA;AAAA,MAGA,MAAA,yCAAuB,CAAE,WAHzB,CAAA;AAKA,MAAA,IAAG,CAAA,CAAK,KAAA,IAAS,MAAV,CAAP;AACE,QAAA,IAAI,CAAC,KAAL,CAAW,6DAAX,CAAA,CAAA;AACA,cAAA,CAFF;OALA;AASA,MAAA,IAAG,KAAK,CAAC,cAAN,CAAqB,OAArB,CAAH;AACE,QAAA,EAAE,CAAC,WAAH,CAAe,OAAf,CAAA,CADF;OAAA,MAAA;AAGE,QAAA,EAAE,CAAC,WAAH,CAAe,MAAf,CAAA,CAHF;OATA;AAAA,MAcA,IAAA,GAAO,GAdP,CAAA;AAAA,MAeA,EAAE,CAAC,IAAH,CAAQ,IAAR,CAfA,CAAA;AAAA,MAgBA,EAAE,CAAC,MAAH,CAAU,MAAA,IAAU,KAApB,CAhBA,CAAA;AAAA,MAiBA,EAAE,CAAC,KAAH,CAAS,KAAT,CAjBA,CAAA;AAAA,MAkBA,EAAE,CAAC,SAAH,CAAa,QAAb,CAlBA,CAAA;AAAA,MAmBA,EAAE,CAAC,UAAH,CAAc,IAAd,CAnBA,CAAA;AAAA,MAoBA,EAAE,CAAC,cAAH,CAAkB,IAAlB,CApBA,CAAA;AAAA,MAqBA,OAAO,CAAC,QAAR,CAAiB,EAAE,CAAC,EAAH,CAAA,CAAjB,CArBA,CAAA;AAAA,MAuBA,KAAK,CAAC,QAAN,CAAe,EAAf,EAAmB,MAAnB,CAvBA,CAAA;AAAA,MAwBA,EAAE,CAAC,QAAH,CAAA,CAxBA,CAAA;AAAA,MA6BA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,CA7BA,CAAA;AAAA,MA8BA,UAAU,CAAC,qBAAX,CAAiC,KAAjC,EAAwC,EAAxC,EAA4C,KAA5C,CA9BA,CAAA;aA+BA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,EAA8C,MAA9C,EAhCI;IAAA,CAPD;GAAP,CAFwC;AAAA,CAA1C,CAbA,CAAA;;ACAA;AAAA;;;;;;;;GAAA;AAAA,OAWO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,QAArC,EAA+C,SAAC,IAAD,EAAO,KAAP,EAAc,MAAd,EAAsB,UAAtB,GAAA;AAC7C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,CAAC,QAAD,EAAU,QAAV,EAAoB,UAApB,CAFJ;AAAA,IAGL,UAAA,EAAY,SAAC,QAAD,GAAA;aACV,IAAI,CAAC,EAAL,GAAU,KAAA,CAAA,EADA;IAAA,CAHP;AAAA,IAOL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,WAAxB,GAAA;AACJ,UAAA,6BAAA;AAAA,MAAA,EAAA,GAAK,WAAY,CAAA,CAAA,CAAE,CAAC,EAApB,CAAA;AAAA,MACA,KAAA,GAAQ,WAAY,CAAA,CAAA,CAAE,CAAC,EADvB,CAAA;AAAA,MAEA,MAAA,yCAAuB,CAAE,WAFzB,CAAA;AAIA,MAAA,IAAG,CAAA,CAAK,KAAA,IAAS,MAAV,CAAP;AACE,QAAA,IAAI,CAAC,KAAL,CAAW,6DAAX,CAAA,CAAA;AACA,cAAA,CAFF;OAJA;AAAA,MAQA,IAAA,GAAO,QARP,CAAA;AAAA,MASA,EAAE,CAAC,IAAH,CAAQ,IAAR,CATA,CAAA;AAAA,MAUA,EAAE,CAAC,MAAH,CAAU,MAAA,IAAU,KAApB,CAVA,CAAA;AAAA,MAWA,EAAE,CAAC,KAAH,CAAS,KAAT,CAXA,CAAA;AAAA,MAYA,EAAE,CAAC,SAAH,CAAa,QAAb,CAZA,CAAA;AAAA,MAaA,EAAE,CAAC,UAAH,CAAc,IAAd,CAbA,CAAA;AAAA,MAcA,EAAE,CAAC,cAAH,CAAkB,IAAlB,CAdA,CAAA;AAAA,MAeA,OAAO,CAAC,QAAR,CAAiB,EAAE,CAAC,EAAH,CAAA,CAAjB,CAfA,CAAA;AAAA,MAiBA,KAAK,CAAC,QAAN,CAAe,EAAf,EAAmB,MAAnB,CAjBA,CAAA;AAAA,MAkBA,EAAE,CAAC,QAAH,CAAA,CAlBA,CAAA;AAAA,MAuBA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,CAvBA,CAAA;AAAA,MAyBA,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,SAAC,GAAD,GAAA;AACrB,QAAA,IAAG,GAAA,KAAS,MAAZ;AACE,UAAA,IAAG,GAAA,KAAS,OAAZ;AACE,YAAA,IAAG,GAAA,KAAQ,MAAR,IAAA,GAAA,KAAgB,OAAnB;AACE,cAAA,EAAE,CAAC,UAAH,CAAc,GAAd,CAAkB,CAAC,QAAnB,CAA4B,IAA5B,CAAA,CADF;aAAA,MAAA;AAGE,cAAA,EAAE,CAAC,UAAH,CAAc,MAAd,CAAqB,CAAC,QAAtB,CAA+B,IAA/B,CAAA,CAHF;aADF;WAAA,MAAA;AAME,YAAA,EAAE,CAAC,QAAH,CAAY,KAAZ,CAAkB,CAAC,UAAnB,CAA8B,MAA9B,CAAA,CANF;WAAA;iBAOA,EAAE,CAAC,MAAH,CAAU,IAAV,EARF;SADqB;MAAA,CAAvB,CAzBA,CAAA;AAAA,MAoCA,UAAU,CAAC,qBAAX,CAAiC,KAAjC,EAAwC,EAAxC,EAA4C,KAA5C,CApCA,CAAA;AAAA,MAqCA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAA0C,EAA1C,EAA8C,MAA9C,CArCA,CAAA;aAsCA,UAAU,CAAC,uBAAX,CAAmC,KAAnC,EAAyC,EAAzC,EAvCI;IAAA,CAPD;GAAP,CAF6C;AAAA,CAA/C,CAXA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,eAAnC,EAAoD,SAAC,IAAD,EAAO,OAAP,EAAgB,gBAAhB,EAAkC,MAAlC,GAAA;AAElD,MAAA,aAAA;AAAA,EAAA,aAAA,GAAgB,SAAA,GAAA;AAEd,QAAA,khBAAA;AAAA,IAAA,EAAA,GAAK,SAAA,GAAA,CAAL,CAAA;AAAA,IAEA,OAAA,GAAU,KAFV,CAAA;AAAA,IAGA,QAAA,GAAW,MAHX,CAAA;AAAA,IAIA,OAAA,GAAU,MAJV,CAAA;AAAA,IAKA,SAAA,GAAY,MALZ,CAAA;AAAA,IAMA,aAAA,GAAgB,MANhB,CAAA;AAAA,IAOA,SAAA,GAAY,MAPZ,CAAA;AAAA,IAQA,MAAA,GAAS,MART,CAAA;AAAA,IASA,KAAA,GAAQ,MATR,CAAA;AAAA,IAUA,UAAA,GAAa,MAVb,CAAA;AAAA,IAWA,QAAA,GAAW,MAXX,CAAA;AAAA,IAYA,cAAA,GAAiB,MAZjB,CAAA;AAAA,IAaA,UAAA,GAAa,MAbb,CAAA;AAAA,IAcA,YAAA,GAAgB,MAdhB,CAAA;AAAA,IAeA,WAAA,GAAc,MAfd,CAAA;AAAA,IAgBA,EAAA,GAAK,MAhBL,CAAA;AAAA,IAiBA,EAAA,GAAK,MAjBL,CAAA;AAAA,IAkBA,QAAA,GAAW,MAlBX,CAAA;AAAA,IAmBA,QAAA,GAAW,KAnBX,CAAA;AAAA,IAoBA,OAAA,GAAU,KApBV,CAAA;AAAA,IAqBA,OAAA,GAAU,KArBV,CAAA;AAAA,IAsBA,UAAA,GAAa,MAtBb,CAAA;AAAA,IAuBA,aAAA,GAAgB,MAvBhB,CAAA;AAAA,IAwBA,aAAA,GAAgB,EAxBhB,CAAA;AAAA,IAyBA,YAAA,GAAe,aAAA,GAAgB,cAAA,GAAiB,WAAA,GAAc,MAzB9D,CAAA;AAAA,IA0BA,YAAA,GAAe,EAAE,CAAC,QAAH,CAAY,YAAZ,EAA0B,OAA1B,EAAmC,UAAnC,CA1Bf,CAAA;AAAA,IA4BA,IAAA,GAAO,GAAA,GAAM,KAAA,GAAQ,MAAA,GAAS,QAAA,GAAW,SAAA,GAAY,UAAA,GAAa,WAAA,GAAc,MA5BhF,CAAA;AAAA,IAgCA,qBAAA,GAAwB,SAAC,IAAD,EAAO,KAAP,EAAc,GAAd,EAAmB,MAAnB,GAAA;AACtB,UAAA,aAAA;AAAA,MAAA,KAAA,GAAQ,KAAA,GAAQ,IAAhB,CAAA;AAAA,MACA,MAAA,GAAS,MAAA,GAAS,GADlB,CAAA;AAIA,MAAA,IAAG,QAAH;AACE,QAAA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,IAAlC,CAAuC,WAAvC,EAAqD,YAAA,GAAY,IAAZ,GAAiB,GAAjB,GAAoB,GAApB,GAAwB,GAA7E,CAAgF,CAAC,MAAjF,CAAwF,MAAxF,CAA+F,CAAC,IAAhG,CAAqG,OAArG,EAA8G,KAA9G,CAAA,CAAA;AAAA,QACA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,IAAlC,CAAuC,WAAvC,EAAqD,YAAA,GAAY,IAAZ,GAAiB,GAAjB,GAAoB,MAApB,GAA2B,GAAhF,CAAmF,CAAC,MAApF,CAA2F,MAA3F,CAAkG,CAAC,IAAnG,CAAwG,OAAxG,EAAiH,KAAjH,CADA,CAAA;AAAA,QAEA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,IAAlC,CAAuC,WAAvC,EAAqD,YAAA,GAAY,IAAZ,GAAiB,GAAjB,GAAoB,GAApB,GAAwB,GAA7E,CAAgF,CAAC,MAAjF,CAAwF,MAAxF,CAA+F,CAAC,IAAhG,CAAqG,QAArG,EAA+G,MAA/G,CAFA,CAAA;AAAA,QAGA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,IAAlC,CAAuC,WAAvC,EAAqD,YAAA,GAAY,KAAZ,GAAkB,GAAlB,GAAqB,GAArB,GAAyB,GAA9E,CAAiF,CAAC,MAAlF,CAAyF,MAAzF,CAAgG,CAAC,IAAjG,CAAsG,QAAtG,EAAgH,MAAhH,CAHA,CAAA;AAAA,QAIA,QAAQ,CAAC,SAAT,CAAmB,cAAnB,CAAkC,CAAC,IAAnC,CAAwC,WAAxC,EAAsD,YAAA,GAAY,KAAZ,GAAkB,GAAlB,GAAqB,GAArB,GAAyB,GAA/E,CAJA,CAAA;AAAA,QAKA,QAAQ,CAAC,SAAT,CAAmB,cAAnB,CAAkC,CAAC,IAAnC,CAAwC,WAAxC,EAAsD,YAAA,GAAY,IAAZ,GAAiB,GAAjB,GAAoB,GAApB,GAAwB,GAA9E,CALA,CAAA;AAAA,QAMA,QAAQ,CAAC,SAAT,CAAmB,cAAnB,CAAkC,CAAC,IAAnC,CAAwC,WAAxC,EAAsD,YAAA,GAAY,KAAZ,GAAkB,GAAlB,GAAqB,MAArB,GAA4B,GAAlF,CANA,CAAA;AAAA,QAOA,QAAQ,CAAC,SAAT,CAAmB,cAAnB,CAAkC,CAAC,IAAnC,CAAwC,WAAxC,EAAsD,YAAA,GAAY,IAAZ,GAAiB,GAAjB,GAAoB,MAApB,GAA2B,GAAjF,CAPA,CAAA;AAAA,QAQA,OAAO,CAAC,IAAR,CAAa,OAAb,EAAsB,KAAtB,CAA4B,CAAC,IAA7B,CAAkC,QAAlC,EAA4C,MAA5C,CAAmD,CAAC,IAApD,CAAyD,GAAzD,EAA8D,IAA9D,CAAmE,CAAC,IAApE,CAAyE,GAAzE,EAA8E,GAA9E,CARA,CADF;OAJA;AAcA,MAAA,IAAG,OAAH;AACE,QAAA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,IAAlC,CAAuC,WAAvC,EAAqD,YAAA,GAAY,IAAZ,GAAiB,KAAtE,CAA2E,CAAC,MAA5E,CAAmF,MAAnF,CAA0F,CAAC,IAA3F,CAAgG,QAAhG,EAA0G,MAA1G,CAAA,CAAA;AAAA,QACA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,IAAlC,CAAuC,WAAvC,EAAqD,YAAA,GAAY,KAAZ,GAAkB,KAAvE,CAA4E,CAAC,MAA7E,CAAoF,MAApF,CAA2F,CAAC,IAA5F,CAAiG,QAAjG,EAA2G,MAA3G,CADA,CAAA;AAAA,QAEA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,MAAlC,CAAyC,MAAzC,CAAgD,CAAC,IAAjD,CAAsD,QAAtD,EAAgE,QAAQ,CAAC,MAAzE,CAFA,CAAA;AAAA,QAGA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,MAAlC,CAAyC,MAAzC,CAAgD,CAAC,IAAjD,CAAsD,QAAtD,EAAgE,QAAQ,CAAC,MAAzE,CAHA,CAAA;AAAA,QAIA,OAAO,CAAC,IAAR,CAAa,OAAb,EAAsB,KAAtB,CAA4B,CAAC,IAA7B,CAAkC,QAAlC,EAA4C,QAAQ,CAAC,MAArD,CAA4D,CAAC,IAA7D,CAAkE,GAAlE,EAAuE,IAAvE,CAA4E,CAAC,IAA7E,CAAkF,GAAlF,EAAuF,CAAvF,CAJA,CADF;OAdA;AAoBA,MAAA,IAAG,OAAH;AACE,QAAA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,IAAlC,CAAuC,WAAvC,EAAqD,cAAA,GAAc,GAAd,GAAkB,GAAvE,CAA0E,CAAC,MAA3E,CAAkF,MAAlF,CAAyF,CAAC,IAA1F,CAA+F,OAA/F,EAAwG,KAAxG,CAAA,CAAA;AAAA,QACA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,IAAlC,CAAuC,WAAvC,EAAqD,cAAA,GAAc,MAAd,GAAqB,GAA1E,CAA6E,CAAC,MAA9E,CAAqF,MAArF,CAA4F,CAAC,IAA7F,CAAkG,OAAlG,EAA2G,KAA3G,CADA,CAAA;AAAA,QAEA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,MAAlC,CAAyC,MAAzC,CAAgD,CAAC,IAAjD,CAAsD,OAAtD,EAA+D,QAAQ,CAAC,KAAxE,CAFA,CAAA;AAAA,QAGA,QAAQ,CAAC,SAAT,CAAmB,aAAnB,CAAiC,CAAC,MAAlC,CAAyC,MAAzC,CAAgD,CAAC,IAAjD,CAAsD,OAAtD,EAA+D,QAAQ,CAAC,KAAxE,CAHA,CAAA;eAIA,OAAO,CAAC,IAAR,CAAa,OAAb,EAAsB,QAAQ,CAAC,KAA/B,CAAqC,CAAC,IAAtC,CAA2C,QAA3C,EAAqD,MAArD,CAA4D,CAAC,IAA7D,CAAkE,GAAlE,EAAuE,CAAvE,CAAyE,CAAC,IAA1E,CAA+E,GAA/E,EAAoF,GAApF,EALF;OArBsB;IAAA,CAhCxB,CAAA;AAAA,IA4DA,iBAAA,GAAoB,SAAA,GAAA;AAClB,MAAA,EAAE,CAAC,MAAH,CAAU,SAAV,CAAoB,CAAC,SAArB,CAA+B,kBAA/B,CAAkD,CAAC,KAAnD,CAAyD,SAAzD,EAAoE,MAApE,CAAA,CAAA;aACA,OAAO,CAAC,IAAR,CAAa,OAAb,EAAqB,CAArB,CAAuB,CAAC,IAAxB,CAA6B,QAA7B,EAAuC,CAAvC,CAAyC,CAAC,IAA1C,CAA+C,GAA/C,EAAoD,CAApD,CAAsD,CAAC,IAAvD,CAA4D,GAA5D,EAAiE,CAAjE,CAAmE,CAAC,KAApE,CAA0E,SAA1E,EAAqF,MAArF,EAFkB;IAAA,CA5DpB,CAAA;AAAA,IAkEA,kBAAA,GAAqB,SAAA,GAAA;AACnB,UAAA,eAAA;AAAA,MAAA,EAAA,GAAK,OAAO,CAAC,IAAR,CAAA,CAAc,CAAC,qBAAf,CAAA,CAAL,CAAA;AAAA,MACA,YAAY,CAAC,IAAb,CAAkB,SAAC,CAAD,GAAA;AACd,YAAA,cAAA;AAAA,QAAA,EAAA,GAAK,IAAI,CAAC,qBAAL,CAAA,CAAL,CAAA;AAAA,QACA,IAAA,GAAO,EAAE,CAAC,IAAH,GAAU,EAAE,CAAC,KAAH,GAAW,EAAE,CAAC,KAAH,GAAW,CAAhC,IAAsC,EAAE,CAAC,IAAH,GAAU,EAAE,CAAC,KAAH,GAAW,CAArB,GAAyB,EAAE,CAAC,KADzE,CAAA;AAAA,QAEA,IAAA,GAAO,EAAE,CAAC,GAAH,GAAS,EAAE,CAAC,MAAH,GAAY,EAAE,CAAC,MAAH,GAAY,CAAjC,IAAuC,EAAE,CAAC,GAAH,GAAS,EAAE,CAAC,MAAH,GAAY,CAArB,GAAyB,EAAE,CAAC,MAF1E,CAAA;eAGA,EAAE,CAAC,MAAH,CAAU,IAAV,CAAe,CAAC,OAAhB,CAAwB,mBAAxB,EAA6C,IAAA,IAAS,IAAtD,EAJc;MAAA,CAAlB,CADA,CAAA;AAAA,MAOA,WAAA,GAAc,UAAU,CAAC,SAAX,CAAqB,oBAArB,CAA0C,CAAC,IAA3C,CAAA,CAPd,CAAA;AAAA,MAQA,UAAU,CAAC,OAAX,CAAmB,6BAAnB,EAAkD,WAAW,CAAC,MAAZ,GAAqB,CAAvE,CARA,CAAA;AASA,aAAO,WAAP,CAVmB;IAAA,CAlErB,CAAA;AAAA,IAgFA,YAAA,GAAe,SAAC,IAAD,EAAO,KAAP,EAAc,GAAd,EAAmB,MAAnB,GAAA;AACb,UAAA,oFAAA;AAAA,MAAA,IAAG,OAAH;AACE,QAAA,IAAG,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,OAAP,CAAA,CAAH;AACE,UAAA,CAAA,GAAI,IAAJ,CAAA;AAAA,UACA,IAAA,GAAO,KADP,CAAA;AAAA,UAEA,KAAA,GAAQ,CAFR,CADF;SAAA;AAAA,QAKA,QAAA,GAAW,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,MAAP,CAAc,IAAd,CALX,CAAA;AAAA,QAMA,SAAA,GAAY,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,MAAP,CAAc,KAAd,CANZ,CAAA;AAOA,QAAA,IAAG,YAAA,KAAkB,QAAlB,IAA8B,aAAA,KAAmB,SAApD;AACE,UAAA,aAAA,GAAgB,SAAhB,CAAA;AAAA,UACA,YAAA,GAAe,QADf,CAAA;AAAA,UAEA,KAAA,GAAQ,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,SAAP,CAAiB,QAAjB,CAFR,CAAA;AAAA,UAGA,MAAA,GAAS,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,SAAP,CAAiB,SAAjB,CAHT,CAAA;AAAA,UAIA,UAAA,GAAa,CAAC,KAAD,EAAQ,MAAR,CAJb,CAAA;AAMA,UAAA,IAAG,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,SAAP,CAAA,CAAH;AACE,YAAA,aAAA,GAAgB,KAAK,CAAC,GAAN,CAAU,SAAC,CAAD,GAAA;qBAAO,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,KAAP,CAAa,CAAb,EAAP;YAAA,CAAV,CAAiC,CAAC,KAAlC,CAAwC,KAAxC,EAA+C,MAAA,GAAS,CAAxD,CAAhB,CADF;WAAA,MAAA;AAGE,YAAA,aAAA,GAAgB,CAAC,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,KAAP,CAAa,KAAM,CAAA,UAAW,CAAA,CAAA,CAAX,CAAnB,CAAD,EAAqC,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,KAAP,CAAa,KAAM,CAAA,MAAA,CAAnB,CAArC,CAAhB,CAHF;WANA;AAAA,UAUA,aAAA,GAAgB,KAAK,CAAC,KAAN,CAAY,KAAZ,EAAmB,MAAA,GAAQ,CAA3B,CAVhB,CAAA;AAAA,UAWA,YAAY,CAAC,KAAb,CAAmB,UAAnB,EAA+B,aAA/B,EAA8C,aAA9C,CAXA,CAAA;AAAA,UAYA,gBAAgB,CAAC,YAAjB,CAA8B,aAA9B,EAA6C,UAA7C,EAAyD,WAAzD,CAZA,CADF;SARF;OAAA;AAsBA,MAAA,IAAG,OAAH;AAEE,QAAA,IAAG,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,OAAP,CAAA,CAAH;AACE,UAAA,CAAA,GAAI,GAAJ,CAAA;AAAA,UACA,GAAA,GAAM,MADN,CAAA;AAAA,UAEA,MAAA,GAAS,CAFT,CADF;SAAA;AAAA,QAIA,UAAA,GAAa,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,MAAP,CAAc,MAAd,CAJb,CAAA;AAAA,QAKA,OAAA,GAAU,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,MAAP,CAAc,GAAd,CALV,CAAA;AAMA,QAAA,IAAG,cAAA,KAAoB,UAApB,IAAkC,WAAA,KAAiB,OAAtD;AACE,UAAA,cAAA,GAAiB,UAAjB,CAAA;AAAA,UACA,WAAA,GAAc,OADd,CAAA;AAAA,UAEA,OAAA,GAAU,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,SAAP,CAAiB,UAAjB,CAFV,CAAA;AAAA,UAGA,IAAA,GAAO,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,SAAP,CAAiB,OAAjB,CAHP,CAAA;AAAA,UAIA,UAAA,GAAa,CAAC,OAAD,EAAU,IAAV,CAJb,CAAA;AAKA,UAAA,IAAG,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,SAAP,CAAA,CAAH;AACE,YAAA,aAAA,GAAgB,KAAK,CAAC,GAAN,CAAU,SAAC,CAAD,GAAA;qBAAO,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,KAAP,CAAa,CAAb,EAAP;YAAA,CAAV,CAAiC,CAAC,KAAlC,CAAwC,OAAxC,EAAiD,IAAA,GAAO,CAAxD,CAAhB,CADF;WAAA,MAAA;AAGE,YAAA,aAAA,GAAgB,CAAC,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,KAAP,CAAa,KAAM,CAAA,OAAA,CAAnB,CAAD,EAA+B,EAAE,CAAC,CAAH,CAAA,CAAM,CAAC,KAAP,CAAa,KAAM,CAAA,IAAA,CAAnB,CAA/B,CAAhB,CAHF;WALA;AAAA,UASA,aAAA,GAAgB,KAAK,CAAC,KAAN,CAAY,OAAZ,EAAqB,IAAA,GAAO,CAA5B,CAThB,CAAA;AAAA,UAUA,YAAY,CAAC,KAAb,CAAmB,UAAnB,EAA+B,aAA/B,EAA8C,aAA9C,CAVA,CAAA;AAAA,UAWA,gBAAgB,CAAC,YAAjB,CAA8B,aAA9B,EAA6C,UAA7C,EAAyD,WAAzD,CAXA,CADF;SARF;OAtBA;AA2CA,MAAA,IAAG,QAAH;AACE,QAAA,SAAA,GAAY,kBAAA,CAAA,CAAZ,CAAA;AACA,QAAA,IAAG,CAAC,CAAC,GAAF,CAAM,aAAN,EAAqB,SAArB,CAA+B,CAAC,MAAhC,GAAyC,CAA5C;AACE,UAAA,UAAA,GAAa,EAAb,CAAA;AAAA,UACA,aAAA,GAAgB,EADhB,CAAA;AAAA,UAEA,aAAA,GAAgB,SAFhB,CAAA;AAAA,UAGA,YAAY,CAAC,KAAb,CAAmB,UAAnB,EAA+B,aAA/B,EAA8C,aAA9C,CAHA,CAAA;iBAIA,gBAAgB,CAAC,YAAjB,CAA8B,aAA9B,EAA6C,UAA7C,EAAyD,WAAzD,EALF;SAFF;OA5Ca;IAAA,CAhFf,CAAA;AAAA,IAqIA,cAAA,GAAiB,SAAA,GAAA;AACf,MAAA,UAAA,GAAa,EAAb,CAAA;AAAA,MACA,aAAA,GAAgB,EADhB,CAAA;AAAA,MAEA,aAAA,GAAgB,EAFhB,CAAA;AAAA,MAGA,YAAY,CAAC,OAAb,CAAqB,mBAArB,EAA0C,KAA1C,CAHA,CAAA;AAAA,MAIA,UAAU,CAAC,OAAX,CAAmB,6BAAnB,EAAkD,KAAlD,CAJA,CAAA;AAAA,MAKA,gBAAgB,CAAC,YAAjB,CAA8B,aAA9B,EAA6C,UAA7C,EAAyD,WAAzD,CALA,CAAA;aAMA,CAAC,CAAC,KAAF,CACI,SAAA,GAAA;AACE,QAAA,YAAY,CAAC,KAAb,CAAmB,UAAnB,EAA+B,aAA/B,EAA8C,aAA9C,CAAA,CAAA;eACA,YAAY,CAAC,QAAb,CAAsB,UAAtB,EAAkC,aAAlC,EAAiD,aAAjD,EAFF;MAAA,CADJ,EAII,EAJJ,EAPe;IAAA,CArIjB,CAAA;AAAA,IAyJA,UAAA,GAAa,SAAA,GAAA;AAEX,UAAA,YAAA;AAAA,MAAA,EAAE,CAAC,KAAK,CAAC,cAAT,CAAA,CAAA,CAAA;AAAA,MACA,YAAA,GAAe,EAAE,CAAC,MAAH,CAAU,EAAE,CAAC,KAAK,CAAC,MAAnB,CADf,CAAA;AAAA,MAEA,aAAA,GAAgB,YAAY,CAAC,KAAb,CAAA,CAFhB,CAAA;AAGA,MAAA,IAAG,YAAY,CAAC,OAAb,CAAqB,qBAArB,CAAH;AACE,QAAA,aAAA,GAAgB;AAAA,UAAC,IAAA,EAAK,WAAN;SAAhB,CADF;OAHA;AAAA,MAKA,QAAA,GAAW,SAAS,CAAC,OAAV,CAAA,CALX,CAAA;AAAA,MAMA,SAAA,GAAY,EAAE,CAAC,KAAH,CAAS,SAAT,CANZ,CAAA;AAAA,MAOA,QAAA,GAAW,GAPX,CAAA;AAAA,MAQA,SAAA,GAAY,IARZ,CAAA;AAAA,MASA,UAAA,GAAa,KATb,CAAA;AAAA,MAUA,WAAA,GAAc,MAVd,CAAA;AAAA,MAWA,EAAE,CAAC,MAAH,CAAU,SAAV,CAAoB,CAAC,SAArB,CAA+B,kBAA/B,CAAkD,CAAC,KAAnD,CAAyD,SAAzD,EAAoE,IAApE,CAXA,CAAA;AAAA,MAYA,EAAE,CAAC,MAAH,CAAU,SAAV,CAAoB,CAAC,MAArB,CAA4B,sBAA5B,CAAmD,CAAC,KAApD,CAA0D,gBAA1D,EAA2E,MAA3E,CAZA,CAAA;AAAA,MAaA,OAAO,CAAC,KAAR,CAAc,SAAd,EAAwB,IAAxB,CAbA,CAAA;AAAA,MAcA,EAAE,CAAC,MAAH,CAAU,MAAV,CAAiB,CAAC,KAAlB,CAAwB,QAAxB,EAAkC,EAAE,CAAC,MAAH,CAAU,EAAE,CAAC,KAAK,CAAC,MAAnB,CAA0B,CAAC,KAA3B,CAAiC,QAAjC,CAAlC,CAdA,CAAA;AAAA,MAgBA,EAAE,CAAC,MAAH,CAAU,OAAV,CAAkB,CAAC,EAAnB,CAAsB,iBAAtB,EAAyC,SAAzC,CAAmD,CAAC,EAApD,CAAuD,eAAvD,EAAwE,QAAxE,CAhBA,CAAA;AAAA,MAkBA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAlBA,CAAA;AAAA,MAmBA,UAAA,GAAa,CAAC,MAAD,EAAY,MAAZ,CAnBb,CAAA;AAAA,MAoBA,aAAA,GAAgB,CAAC,MAAD,CApBhB,CAAA;AAAA,MAqBA,YAAA,GAAe,UAAU,CAAC,SAAX,CAAqB,sBAArB,CArBf,CAAA;AAAA,MAsBA,YAAY,CAAC,UAAb,CAAA,CAtBA,CAAA;AAAA,MAuBA,MAAM,CAAC,KAAP,CAAA,CAvBA,CAAA;aAwBA,MAAM,CAAC,IAAP,CAAA,EA1BW;IAAA,CAzJb,CAAA;AAAA,IAuLA,QAAA,GAAW,SAAA,GAAA;AAGT,MAAA,EAAE,CAAC,MAAH,CAAU,OAAV,CAAkB,CAAC,EAAnB,CAAsB,iBAAtB,EAAyC,IAAzC,CAAA,CAAA;AAAA,MACA,EAAE,CAAC,MAAH,CAAU,OAAV,CAAkB,CAAC,EAAnB,CAAsB,eAAtB,EAAuC,IAAvC,CADA,CAAA;AAAA,MAEA,EAAE,CAAC,MAAH,CAAU,SAAV,CAAoB,CAAC,KAArB,CAA2B,gBAA3B,EAA4C,KAA5C,CAAkD,CAAC,SAAnD,CAA6D,kBAA7D,CAAgF,CAAC,KAAjF,CAAuF,SAAvF,EAAkG,IAAlG,CAFA,CAAA;AAAA,MAGA,EAAE,CAAC,MAAH,CAAU,SAAV,CAAoB,CAAC,MAArB,CAA4B,sBAA5B,CAAmD,CAAC,KAApD,CAA0D,gBAA1D,EAA2E,IAA3E,CAHA,CAAA;AAAA,MAIA,EAAE,CAAC,MAAH,CAAU,MAAV,CAAiB,CAAC,KAAlB,CAAwB,QAAxB,EAAkC,IAAlC,CAJA,CAAA;AAAA,MAKA,QAAQ,CAAC,IAAT,CAAc,KAAd,CALA,CAAA;aAMA,YAAY,CAAC,QAAb,CAAsB,UAAtB,EAAkC,aAAlC,EAAiD,aAAjD,EATS;IAAA,CAvLX,CAAA;AAAA,IAqMA,SAAA,GAAY,SAAA,GAAA;AAEV,UAAA,oEAAA;AAAA,MAAA,GAAA,GAAM,EAAE,CAAC,KAAH,CAAS,SAAT,CAAN,CAAA;AAAA,MACA,MAAA,GAAS,GAAI,CAAA,CAAA,CAAJ,GAAS,SAAU,CAAA,CAAA,CAD5B,CAAA;AAAA,MAEA,MAAA,GAAS,GAAI,CAAA,CAAA,CAAJ,GAAS,SAAU,CAAA,CAAA,CAF5B,CAAA;AAAA,MAOA,MAAA,GAAS,SAAC,KAAD,GAAA;AACP,QAAA,GAAA,GAAM,SAAA,GAAY,KAAlB,CAAA;AAAA,QACA,IAAA,GAAU,GAAA,IAAO,CAAV,GAAiB,CAAI,GAAA,GAAM,UAAT,GAAyB,GAAzB,GAAkC,UAAnC,CAAjB,GAAqE,CAD5E,CAAA;eAEA,KAAA,GAAW,GAAA,IAAO,QAAQ,CAAC,KAAnB,GAA8B,CAAI,GAAA,GAAM,UAAT,GAAyB,UAAzB,GAAyC,GAA1C,CAA9B,GAAkF,QAAQ,CAAC,MAH5F;MAAA,CAPT,CAAA;AAAA,MAYA,OAAA,GAAU,SAAC,KAAD,GAAA;AACR,QAAA,GAAA,GAAM,UAAA,GAAa,KAAnB,CAAA;AAAA,QACA,IAAA,GAAU,GAAA,IAAO,CAAV,GAAiB,CAAI,GAAA,GAAM,SAAT,GAAwB,GAAxB,GAAiC,SAAlC,CAAjB,GAAmE,CAD1E,CAAA;eAEA,KAAA,GAAW,GAAA,IAAO,QAAQ,CAAC,KAAnB,GAA8B,CAAI,GAAA,GAAM,SAAT,GAAwB,SAAxB,GAAuC,GAAxC,CAA9B,GAAgF,QAAQ,CAAC,MAHzF;MAAA,CAZV,CAAA;AAAA,MAiBA,KAAA,GAAQ,SAAC,KAAD,GAAA;AACN,QAAA,GAAA,GAAM,QAAA,GAAW,KAAjB,CAAA;AAAA,QACA,GAAA,GAAS,GAAA,IAAO,CAAV,GAAiB,CAAI,GAAA,GAAM,WAAT,GAA0B,GAA1B,GAAmC,WAApC,CAAjB,GAAuE,CAD7E,CAAA;eAEA,MAAA,GAAY,GAAA,IAAO,QAAQ,CAAC,MAAnB,GAA+B,CAAI,GAAA,GAAM,WAAT,GAA0B,GAA1B,GAAmC,WAApC,CAA/B,GAAsF,QAAQ,CAAC,OAHlG;MAAA,CAjBR,CAAA;AAAA,MAsBA,QAAA,GAAW,SAAC,KAAD,GAAA;AACT,QAAA,GAAA,GAAM,WAAA,GAAc,KAApB,CAAA;AAAA,QACA,GAAA,GAAS,GAAA,IAAO,CAAV,GAAiB,CAAI,GAAA,GAAM,QAAT,GAAuB,GAAvB,GAAgC,QAAjC,CAAjB,GAAiE,CADvE,CAAA;eAEA,MAAA,GAAY,GAAA,IAAO,QAAQ,CAAC,MAAnB,GAA+B,CAAI,GAAA,GAAM,QAAT,GAAuB,GAAvB,GAAgC,QAAjC,CAA/B,GAAgF,QAAQ,CAAC,OAHzF;MAAA,CAtBX,CAAA;AAAA,MA2BA,KAAA,GAAQ,SAAC,KAAD,GAAA;AACN,QAAA,IAAG,SAAA,GAAY,KAAZ,IAAqB,CAAxB;AACE,UAAA,IAAG,UAAA,GAAa,KAAb,IAAsB,QAAQ,CAAC,KAAlC;AACE,YAAA,IAAA,GAAO,SAAA,GAAY,KAAnB,CAAA;mBACA,KAAA,GAAQ,UAAA,GAAa,MAFvB;WAAA,MAAA;AAIE,YAAA,KAAA,GAAQ,QAAQ,CAAC,KAAjB,CAAA;mBACA,IAAA,GAAO,QAAQ,CAAC,KAAT,GAAiB,CAAC,UAAA,GAAa,SAAd,EAL1B;WADF;SAAA,MAAA;AAQE,UAAA,IAAA,GAAO,CAAP,CAAA;iBACA,KAAA,GAAQ,UAAA,GAAa,UATvB;SADM;MAAA,CA3BR,CAAA;AAAA,MAuCA,MAAA,GAAS,SAAC,KAAD,GAAA;AACP,QAAA,IAAG,QAAA,GAAW,KAAX,IAAoB,CAAvB;AACE,UAAA,IAAG,WAAA,GAAc,KAAd,IAAuB,QAAQ,CAAC,MAAnC;AACE,YAAA,GAAA,GAAM,QAAA,GAAW,KAAjB,CAAA;mBACA,MAAA,GAAS,WAAA,GAAc,MAFzB;WAAA,MAAA;AAIE,YAAA,MAAA,GAAS,QAAQ,CAAC,MAAlB,CAAA;mBACA,GAAA,GAAM,QAAQ,CAAC,MAAT,GAAkB,CAAC,WAAA,GAAc,QAAf,EAL1B;WADF;SAAA,MAAA;AAQE,UAAA,GAAA,GAAM,CAAN,CAAA;iBACA,MAAA,GAAS,WAAA,GAAc,SATzB;SADO;MAAA,CAvCT,CAAA;AAmDA,cAAO,aAAa,CAAC,IAArB;AAAA,aACO,YADP;AAAA,aACqB,WADrB;AAEI,UAAA,IAAG,MAAA,GAAS,SAAU,CAAA,CAAA,CAAnB,GAAwB,CAA3B;AACE,YAAA,IAAA,GAAU,MAAA,GAAS,CAAZ,GAAmB,SAAU,CAAA,CAAA,CAAV,GAAe,MAAlC,GAA8C,SAAU,CAAA,CAAA,CAA/D,CAAA;AACA,YAAA,IAAG,IAAA,GAAO,IAAI,CAAC,GAAL,CAAS,MAAT,CAAP,GAA0B,QAAQ,CAAC,KAAtC;AACE,cAAA,KAAA,GAAQ,IAAA,GAAO,IAAI,CAAC,GAAL,CAAS,MAAT,CAAf,CADF;aAAA,MAAA;AAGE,cAAA,KAAA,GAAQ,QAAQ,CAAC,KAAjB,CAHF;aAFF;WAAA,MAAA;AAOE,YAAA,IAAA,GAAO,CAAP,CAPF;WAAA;AASA,UAAA,IAAG,MAAA,GAAS,SAAU,CAAA,CAAA,CAAnB,GAAwB,CAA3B;AACE,YAAA,GAAA,GAAS,MAAA,GAAS,CAAZ,GAAmB,SAAU,CAAA,CAAA,CAAV,GAAe,MAAlC,GAA8C,SAAU,CAAA,CAAA,CAA9D,CAAA;AACA,YAAA,IAAG,GAAA,GAAM,IAAI,CAAC,GAAL,CAAS,MAAT,CAAN,GAAyB,QAAQ,CAAC,MAArC;AACE,cAAA,MAAA,GAAS,GAAA,GAAM,IAAI,CAAC,GAAL,CAAS,MAAT,CAAf,CADF;aAAA,MAAA;AAGE,cAAA,MAAA,GAAS,QAAQ,CAAC,MAAlB,CAHF;aAFF;WAAA,MAAA;AAOE,YAAA,GAAA,GAAM,CAAN,CAPF;WAXJ;AACqB;AADrB,aAmBO,QAnBP;AAoBI,UAAA,MAAA,CAAO,MAAP,CAAA,CAAA;AAAA,UAAgB,KAAA,CAAM,MAAN,CAAhB,CApBJ;AAmBO;AAnBP,aAqBO,GArBP;AAsBI,UAAA,KAAA,CAAM,MAAN,CAAA,CAtBJ;AAqBO;AArBP,aAuBO,GAvBP;AAwBI,UAAA,QAAA,CAAS,MAAT,CAAA,CAxBJ;AAuBO;AAvBP,aAyBO,GAzBP;AA0BI,UAAA,MAAA,CAAO,MAAP,CAAA,CA1BJ;AAyBO;AAzBP,aA2BO,GA3BP;AA4BI,UAAA,OAAA,CAAQ,MAAR,CAAA,CA5BJ;AA2BO;AA3BP,aA6BO,IA7BP;AA8BI,UAAA,KAAA,CAAM,MAAN,CAAA,CAAA;AAAA,UAAe,MAAA,CAAO,MAAP,CAAf,CA9BJ;AA6BO;AA7BP,aA+BO,IA/BP;AAgCI,UAAA,KAAA,CAAM,MAAN,CAAA,CAAA;AAAA,UAAe,OAAA,CAAQ,MAAR,CAAf,CAhCJ;AA+BO;AA/BP,aAiCO,IAjCP;AAkCI,UAAA,QAAA,CAAS,MAAT,CAAA,CAAA;AAAA,UAAkB,MAAA,CAAO,MAAP,CAAlB,CAlCJ;AAiCO;AAjCP,aAmCO,IAnCP;AAoCI,UAAA,QAAA,CAAS,MAAT,CAAA,CAAA;AAAA,UAAkB,OAAA,CAAQ,MAAR,CAAlB,CApCJ;AAAA,OAnDA;AAAA,MAyFA,qBAAA,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC,GAAnC,EAAwC,MAAxC,CAzFA,CAAA;aA0FA,YAAA,CAAa,IAAb,EAAmB,KAAnB,EAA0B,GAA1B,EAA+B,MAA/B,EA5FU;IAAA,CArMZ,CAAA;AAAA,IAqSA,EAAE,CAAC,KAAH,GAAW,SAAC,CAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,QAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,IAAG,CAAA,OAAH;AAAoB,gBAAA,CAApB;SAAA;AAAA,QACA,QAAA,GAAW,CADX,CAAA;AAAA,QAEA,QAAA,GAAW,EAAE,CAAC,CAAH,CAAA,CAAA,IAAW,EAAE,CAAC,CAAH,CAAA,CAFtB,CAAA;AAAA,QAGA,OAAA,GAAU,EAAE,CAAC,CAAH,CAAA,CAAA,IAAW,CAAA,EAAM,CAAC,CAAH,CAAA,CAHzB,CAAA;AAAA,QAIA,OAAA,GAAU,EAAE,CAAC,CAAH,CAAA,CAAA,IAAW,CAAA,EAAM,CAAC,CAAH,CAAA,CAJzB,CAAA;AAAA,QAMA,CAAC,CAAC,KAAF,CAAQ;AAAA,UAAC,gBAAA,EAAkB,KAAnB;AAAA,UAA0B,MAAA,EAAQ,WAAlC;SAAR,CANA,CAAA;AAAA,QAOA,OAAA,GAAU,CAAC,CAAC,MAAF,CAAS,MAAT,CAAgB,CAAC,IAAjB,CAAsB;AAAA,UAAC,OAAA,EAAM,iBAAP;AAAA,UAA0B,CAAA,EAAE,CAA5B;AAAA,UAA+B,CAAA,EAAE,CAAjC;AAAA,UAAoC,KAAA,EAAM,CAA1C;AAAA,UAA6C,MAAA,EAAO,CAApD;SAAtB,CAA6E,CAAC,KAA9E,CAAoF;AAAA,UAAC,QAAA,EAAS,MAAV;SAApF,CAAsG,CAAC,KAAvG,CAA6G;AAAA,UAAC,IAAA,EAAK,QAAN;SAA7G,CAPV,CAAA;AASA,QAAA,IAAG,OAAA,IAAW,QAAd;AACE,UAAA,CAAC,CAAC,MAAF,CAAS,GAAT,CAAa,CAAC,IAAd,CAAmB,OAAnB,EAA4B,4BAA5B,CAAyD,CAAC,KAA1D,CAAgE;AAAA,YAAC,MAAA,EAAO,WAAR;AAAA,YAAqB,OAAA,EAAQ,MAA7B;WAAhE,CACE,CAAC,MADH,CACU,MADV,CACiB,CAAC,IADlB,CACuB;AAAA,YAAC,CAAA,EAAE,CAAH;AAAA,YAAM,CAAA,EAAG,CAAA,CAAT;AAAA,YAAa,KAAA,EAAM,CAAnB;AAAA,YAAsB,MAAA,EAAO,CAA7B;WADvB,CACuD,CAAC,KADxD,CAC8D;AAAA,YAAC,IAAA,EAAK,GAAN;WAD9D,CAAA,CAAA;AAAA,UAEA,CAAC,CAAC,MAAF,CAAS,GAAT,CAAa,CAAC,IAAd,CAAmB,OAAnB,EAA4B,4BAA5B,CAAyD,CAAC,KAA1D,CAAgE;AAAA,YAAC,MAAA,EAAO,WAAR;AAAA,YAAqB,OAAA,EAAQ,MAA7B;WAAhE,CACE,CAAC,MADH,CACU,MADV,CACiB,CAAC,IADlB,CACuB;AAAA,YAAC,CAAA,EAAE,CAAH;AAAA,YAAM,CAAA,EAAG,CAAA,CAAT;AAAA,YAAa,KAAA,EAAM,CAAnB;AAAA,YAAsB,MAAA,EAAO,CAA7B;WADvB,CACuD,CAAC,KADxD,CAC8D;AAAA,YAAC,IAAA,EAAK,GAAN;WAD9D,CAFA,CADF;SATA;AAcA,QAAA,IAAG,OAAA,IAAW,QAAd;AACE,UAAA,CAAC,CAAC,MAAF,CAAS,GAAT,CAAa,CAAC,IAAd,CAAmB,OAAnB,EAA4B,4BAA5B,CAAyD,CAAC,KAA1D,CAAgE;AAAA,YAAC,MAAA,EAAO,WAAR;AAAA,YAAqB,OAAA,EAAQ,MAA7B;WAAhE,CACE,CAAC,MADH,CACU,MADV,CACiB,CAAC,IADlB,CACuB;AAAA,YAAC,CAAA,EAAE,CAAH;AAAA,YAAM,CAAA,EAAG,CAAA,CAAT;AAAA,YAAa,KAAA,EAAM,CAAnB;AAAA,YAAsB,MAAA,EAAO,CAA7B;WADvB,CACuD,CAAC,KADxD,CAC8D;AAAA,YAAC,IAAA,EAAK,GAAN;WAD9D,CAAA,CAAA;AAAA,UAEA,CAAC,CAAC,MAAF,CAAS,GAAT,CAAa,CAAC,IAAd,CAAmB,OAAnB,EAA4B,4BAA5B,CAAyD,CAAC,KAA1D,CAAgE;AAAA,YAAC,MAAA,EAAO,WAAR;AAAA,YAAqB,OAAA,EAAQ,MAA7B;WAAhE,CACE,CAAC,MADH,CACU,MADV,CACiB,CAAC,IADlB,CACuB;AAAA,YAAC,CAAA,EAAE,CAAH;AAAA,YAAM,CAAA,EAAG,CAAA,CAAT;AAAA,YAAa,KAAA,EAAM,CAAnB;AAAA,YAAsB,MAAA,EAAO,CAA7B;WADvB,CACuD,CAAC,KADxD,CAC8D;AAAA,YAAC,IAAA,EAAK,GAAN;WAD9D,CAFA,CADF;SAdA;AAoBA,QAAA,IAAG,QAAH;AACE,UAAA,CAAC,CAAC,MAAF,CAAS,GAAT,CAAa,CAAC,IAAd,CAAmB,OAAnB,EAA4B,6BAA5B,CAA0D,CAAC,KAA3D,CAAiE;AAAA,YAAC,MAAA,EAAO,aAAR;AAAA,YAAuB,OAAA,EAAQ,MAA/B;WAAjE,CACA,CAAC,MADD,CACQ,MADR,CACe,CAAC,IADhB,CACqB;AAAA,YAAC,CAAA,EAAG,CAAA,CAAJ;AAAA,YAAQ,CAAA,EAAG,CAAA,CAAX;AAAA,YAAe,KAAA,EAAM,CAArB;AAAA,YAAwB,MAAA,EAAO,CAA/B;WADrB,CACuD,CAAC,KADxD,CAC8D;AAAA,YAAC,IAAA,EAAK,IAAN;WAD9D,CAAA,CAAA;AAAA,UAEA,CAAC,CAAC,MAAF,CAAS,GAAT,CAAa,CAAC,IAAd,CAAmB,OAAnB,EAA4B,6BAA5B,CAA0D,CAAC,KAA3D,CAAiE;AAAA,YAAC,MAAA,EAAO,aAAR;AAAA,YAAuB,OAAA,EAAQ,MAA/B;WAAjE,CACA,CAAC,MADD,CACQ,MADR,CACe,CAAC,IADhB,CACqB;AAAA,YAAC,CAAA,EAAG,CAAA,CAAJ;AAAA,YAAQ,CAAA,EAAG,CAAA,CAAX;AAAA,YAAe,KAAA,EAAM,CAArB;AAAA,YAAwB,MAAA,EAAO,CAA/B;WADrB,CACuD,CAAC,KADxD,CAC8D;AAAA,YAAC,IAAA,EAAK,IAAN;WAD9D,CAFA,CAAA;AAAA,UAIA,CAAC,CAAC,MAAF,CAAS,GAAT,CAAa,CAAC,IAAd,CAAmB,OAAnB,EAA4B,6BAA5B,CAA0D,CAAC,KAA3D,CAAiE;AAAA,YAAC,MAAA,EAAO,aAAR;AAAA,YAAuB,OAAA,EAAQ,MAA/B;WAAjE,CACA,CAAC,MADD,CACQ,MADR,CACe,CAAC,IADhB,CACqB;AAAA,YAAC,CAAA,EAAG,CAAA,CAAJ;AAAA,YAAQ,CAAA,EAAG,CAAA,CAAX;AAAA,YAAe,KAAA,EAAM,CAArB;AAAA,YAAwB,MAAA,EAAO,CAA/B;WADrB,CACuD,CAAC,KADxD,CAC8D;AAAA,YAAC,IAAA,EAAK,IAAN;WAD9D,CAJA,CAAA;AAAA,UAMA,CAAC,CAAC,MAAF,CAAS,GAAT,CAAa,CAAC,IAAd,CAAmB,OAAnB,EAA4B,6BAA5B,CAA0D,CAAC,KAA3D,CAAiE;AAAA,YAAC,MAAA,EAAO,aAAR;AAAA,YAAuB,OAAA,EAAQ,MAA/B;WAAjE,CACA,CAAC,MADD,CACQ,MADR,CACe,CAAC,IADhB,CACqB;AAAA,YAAC,CAAA,EAAG,CAAA,CAAJ;AAAA,YAAQ,CAAA,EAAG,CAAA,CAAX;AAAA,YAAe,KAAA,EAAM,CAArB;AAAA,YAAwB,MAAA,EAAO,CAA/B;WADrB,CACuD,CAAC,KADxD,CAC8D;AAAA,YAAC,IAAA,EAAK,IAAN;WAD9D,CANA,CADF;SApBA;AAAA,QA8BA,CAAC,CAAC,EAAF,CAAK,iBAAL,EAAwB,UAAxB,CA9BA,CAAA;AAgCA,eAAO,EAAP,CAlCF;OADS;IAAA,CArSX,CAAA;AAAA,IA4UA,YAAA,GAAe,SAAA,GAAA;AACb,UAAA,sCAAA;AAAA,MAAA,IAAG,QAAH;AAEE,QAAA,MAAA,GAAS,SAAS,CAAC,OAAV,CAAA,CAAT,CAAA;AAAA,QACA,eAAA,GAAkB,QAAQ,CAAC,KAAT,GAAiB,MAAM,CAAC,KAD1C,CAAA;AAAA,QAEA,aAAA,GAAgB,QAAQ,CAAC,MAAT,GAAkB,MAAM,CAAC,MAFzC,CAAA;AAAA,QAGA,GAAA,GAAM,GAAA,GAAM,aAHZ,CAAA;AAAA,QAIA,QAAA,GAAW,QAAA,GAAW,aAJtB,CAAA;AAAA,QAKA,MAAA,GAAS,MAAA,GAAS,aALlB,CAAA;AAAA,QAMA,WAAA,GAAc,WAAA,GAAc,aAN5B,CAAA;AAAA,QAOA,IAAA,GAAO,IAAA,GAAO,eAPd,CAAA;AAAA,QAQA,SAAA,GAAY,SAAA,GAAY,eARxB,CAAA;AAAA,QASA,KAAA,GAAQ,KAAA,GAAQ,eAThB,CAAA;AAAA,QAUA,UAAA,GAAa,UAAA,GAAa,eAV1B,CAAA;AAAA,QAWA,SAAU,CAAA,CAAA,CAAV,GAAe,SAAU,CAAA,CAAA,CAAV,GAAe,eAX9B,CAAA;AAAA,QAYA,SAAU,CAAA,CAAA,CAAV,GAAe,SAAU,CAAA,CAAA,CAAV,GAAe,aAZ9B,CAAA;AAAA,QAaA,QAAA,GAAW,MAbX,CAAA;eAcA,qBAAA,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC,GAAnC,EAAwC,MAAxC,EAhBF;OADa;IAAA,CA5Uf,CAAA;AAAA,IAiWA,EAAE,CAAC,KAAH,GAAW,SAAC,GAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,GAAT,CAAA;AAAA,QACA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,cAAtB,EAAsC,YAAtC,CADA,CAAA;AAEA,eAAO,EAAP,CAJF;OADS;IAAA,CAjWX,CAAA;AAAA,IAwWA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,OAAA,GAAU,GAAV,CAAA;AACA,eAAO,EAAP,CAHF;OADU;IAAA,CAxWZ,CAAA;AAAA,IA8WA,EAAE,CAAC,CAAH,GAAO,SAAC,GAAD,GAAA;AACL,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,EAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,EAAA,GAAK,GAAL,CAAA;AACA,eAAO,EAAP,CAHF;OADK;IAAA,CA9WP,CAAA;AAAA,IAoXA,EAAE,CAAC,CAAH,GAAO,SAAC,GAAD,GAAA;AACL,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,EAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,EAAA,GAAK,GAAL,CAAA;AACA,eAAO,EAAP,CAHF;OADK;IAAA,CApXP,CAAA;AAAA,IA0XA,EAAE,CAAC,IAAH,GAAU,SAAC,GAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,IAAG,GAAA,KAAO,MAAV;AACE,UAAA,SAAA,GAAY,MAAZ,CAAA;AAAA,UACA,UAAA,GAAa,MADb,CADF;SAAA,MAGK,IAAG,CAAA,UAAH;AACH,UAAA,UAAA,GAAa,GAAb,CAAA;AAAA,UACA,SAAA,GAAY,UAAU,CAAC,IAAX,CAAA,CADZ,CAAA;AAAA,UAGA,EAAE,CAAC,KAAH,CAAS,UAAT,CAHA,CAAA;AAAA,UAIA,YAAA,GAAe,UAAU,CAAC,SAAX,CAAqB,sBAArB,CAJf,CADG;SAHL;AAUA,eAAO,EAAP,CAZF;OADQ;IAAA,CA1XV,CAAA;AAAA,IAyYA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,UAAA,GAAa,GAAb,CAAA;AAEA,eAAO,EAAP,CAJF;OADa;IAAA,CAzYf,CAAA;AAAA,IAgZA,EAAE,CAAC,IAAH,GAAU,SAAC,GAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,KAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,KAAA,GAAQ,GAAR,CAAA;AACA,eAAO,EAAP,CAHF;OADQ;IAAA,CAhZV,CAAA;AAAA,IAsZA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,WAAA,GAAc,GAAd,CAAA;AAAA,QACA,gBAAgB,CAAC,WAAjB,CAA6B,WAA7B,CADA,CAAA;AAEA,eAAO,EAAP,CAJF;OADc;IAAA,CAtZhB,CAAA;AAAA,IA6ZA,EAAE,CAAC,OAAH,GAAa,SAAC,GAAD,GAAA;AACX,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,QAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,QAAA,GAAW,GAAX,CAAA;AACA,eAAO,EAAP,CAHF;OADW;IAAA,CA7Zb,CAAA;AAAA,IAmaA,EAAE,CAAC,EAAH,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;aACN,YAAY,CAAC,EAAb,CAAgB,IAAhB,EAAsB,QAAtB,EADM;IAAA,CAnaR,CAAA;AAAA,IAsaA,EAAE,CAAC,MAAH,GAAY,SAAA,GAAA;AACV,aAAO,UAAP,CADU;IAAA,CAtaZ,CAAA;AAAA,IAyaA,EAAE,CAAC,MAAH,GAAY,SAAA,GAAA;AACV,aAAO,YAAP,CADU;IAAA,CAzaZ,CAAA;AAAA,IA4aA,EAAE,CAAC,KAAH,GAAW,SAAA,GAAA;AACT,aAAO,aAAa,CAAC,MAAd,KAAwB,CAA/B,CADS;IAAA,CA5aX,CAAA;AAAA,IA+aA,EAAE,CAAC,UAAH,GAAgB,SAAA,GAAA;AACd,MAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,CAAA,CAAA;AAAA,MACA,iBAAA,CAAA,CADA,CAAA;aAEA,cAAA,CAAA,EAHc;IAAA,CA/ahB,CAAA;AAqbA,WAAO,EAAP,CAvbc;EAAA,CAAhB,CAAA;AAwbA,SAAO,aAAP,CA1bkD;AAAA,CAApD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,UAAnC,EAA+C,SAAC,IAAD,EAAO,OAAP,EAAgB,eAAhB,EAAiC,aAAjC,EAAgD,cAAhD,GAAA;AAE7C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,SAAA,GAAA;AAET,QAAA,yDAAA;AAAA,IAAA,QAAA,GAAW,eAAA,CAAA,CAAX,CAAA;AAAA,IACA,MAAA,GAAS,aAAA,CAAA,CADT,CAAA;AAAA,IAEA,UAAA,GAAa,cAAA,CAAA,CAFb,CAAA;AAAA,IAGA,MAAM,CAAC,OAAP,CAAe,QAAf,CAHA,CAAA;AAAA,IAKA,SAAA,GAAY,SAAC,SAAD,GAAA;AACV,MAAA,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAA,CAAA;AAAA,MACA,QAAQ,CAAC,IAAT,CAAc,SAAd,CADA,CAAA;aAEA,UAAU,CAAC,IAAX,CAAgB,SAAhB,EAHU;IAAA,CALZ,CAAA;AAAA,IAUA,SAAA,GAAY,SAAC,SAAD,GAAA;AACV,MAAA,MAAM,CAAC,SAAP,CAAiB,SAAjB,CAAA,CAAA;aAEA,QAAQ,CAAC,SAAT,CAAmB,SAAnB,EAHU;IAAA,CAVZ,CAAA;AAAA,IAeA,KAAA,GAAQ,SAAC,KAAD,GAAA;AACN,MAAA,MAAM,CAAC,KAAP,CAAa,KAAb,CAAA,CAAA;aACA,QAAQ,CAAC,KAAT,CAAe,KAAf,EAFM;IAAA,CAfR,CAAA;AAmBA,WAAO;AAAA,MAAC,OAAA,EAAQ,QAAT;AAAA,MAAmB,KAAA,EAAM,MAAzB;AAAA,MAAiC,QAAA,EAAS,UAA1C;AAAA,MAAsD,SAAA,EAAU,SAAhE;AAAA,MAA2E,SAAA,EAAU,SAArF;AAAA,MAAgG,KAAA,EAAM,KAAtG;KAAP,CArBS;EAAA,CAAX,CAAA;AAsBA,SAAO,QAAP,CAxB6C;AAAA,CAA/C,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,gBAAnC,EAAqD,SAAC,IAAD,GAAA;AACnD,MAAA,gBAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AAAA,EAEA,MAAA,GAAS,SAAA,GAAA;AAEP,QAAA,gEAAA;AAAA,IAAA,GAAA,GAAO,QAAA,GAAO,CAAC,QAAA,EAAD,CAAd,CAAA;AAAA,IACA,UAAA,GAAa,MADb,CAAA;AAAA,IAEA,OAAA,GAAU,MAFV,CAAA;AAAA,IAGA,OAAA,GAAU,KAHV,CAAA;AAAA,IAIA,gBAAA,GAAmB,EAAE,CAAC,QAAH,CAAY,UAAZ,CAJnB,CAAA;AAAA,IAMA,OAAA,GAAU,SAAA,GAAA;AACR,UAAA,qDAAA;AAAA,MAAA,IAAG,CAAA,OAAH;AAAoB,cAAA,CAApB;OAAA;AAAA,MACA,GAAA,GAAM,EAAE,CAAC,MAAH,CAAU,IAAV,CADN,CAAA;AAEA,MAAA,IAAG,CAAA,OAAH;AAAoB,cAAA,CAApB;OAFA;AAGA,MAAA,IAAG,GAAG,CAAC,OAAJ,CAAY,qBAAZ,CAAH;AACE,QAAA,UAAA,GAAa,GAAG,CAAC,OAAJ,CAAY,mBAAZ,CAAb,CAAA;AAAA,QACA,GAAG,CAAC,OAAJ,CAAY,mBAAZ,EAAiC,CAAA,UAAjC,CADA,CAAA;AAAA,QAEA,eAAA,GAAkB,UAAU,CAAC,SAAX,CAAqB,oBAArB,CAFlB,CAAA;AAAA,QAGA,mBAAA,GAAsB,eAAe,CAAC,IAAhB,CAAA,CAAsB,CAAC,GAAvB,CAA2B,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,IAAL;mBAAe,CAAC,CAAC,KAAjB;WAAA,MAAA;mBAA2B,EAA3B;WAAP;QAAA,CAA3B,CAHtB,CAAA;AAAA,QAIA,UAAU,CAAC,OAAX,CAAmB,6BAAnB,EAAkD,mBAAmB,CAAC,MAApB,GAA6B,CAA/E,CAJA,CAAA;AAAA,QAOA,OAAO,CAAC,SAAR,CAAA,CAAmB,CAAC,eAApB,CAAoC,eAApC,CAPA,CAAA;eAQA,gBAAgB,CAAC,QAAjB,CAA0B,mBAA1B,EATF;OAJQ;IAAA,CANV,CAAA;AAAA,IAqBA,EAAA,GAAK,SAAC,GAAD,GAAA;AACH,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,EAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,GAEE,CAAC,EAFH,CAEM,OAFN,EAEe,OAFf,CAAA,CAAA;AAGA,eAAO,EAAP,CALF;OADG;IAAA,CArBL,CAAA;AAAA,IA6BA,EAAE,CAAC,EAAH,GAAQ,SAAA,GAAA;AACN,aAAO,GAAP,CADM;IAAA,CA7BR,CAAA;AAAA,IAgCA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,OAAA,GAAU,GAAV,CAAA;AACA,eAAO,EAAP,CAHF;OADU;IAAA,CAhCZ,CAAA;AAAA,IAsCA,EAAE,CAAC,cAAH,GAAoB,SAAA,GAAA;AAClB,MAAA,IAAI,CAAC,GAAL,CAAS,mBAAT,CAAA,CAAA;AACA,MAAA,IAAG,UAAH;AACE,QAAA,UAAU,CAAC,SAAX,CAAqB,oBAArB,CAA0C,CAAC,OAA3C,CAAmD,mBAAnD,EAAwE,KAAxE,CAAA,CAAA;AAAA,QACA,UAAU,CAAC,OAAX,CAAmB,6BAAnB,EAAkD,KAAlD,CADA,CAAA;eAEA,OAAO,CAAC,SAAR,CAAA,CAAmB,CAAC,eAApB,CAAoC,UAAU,CAAC,SAAX,CAAqB,oBAArB,CAApC,EAHF;OAFkB;IAAA,CAtCpB,CAAA;AAAA,IA6CA,EAAE,CAAC,IAAH,GAAU,SAAC,GAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,UAAA,GAAa,GAAb,CAAA;AACA,eAAO,EAAP,CAHF;OADQ;IAAA,CA7CV,CAAA;AAAA,IAmDA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,OAAA,GAAU,GAAV,CAAA;AACA,eAAO,EAAP,CAHF;OADU;IAAA,CAnDZ,CAAA;AAAA,IAyDA,EAAE,CAAC,MAAH,GAAY,SAAA,GAAA;AACV,aAAO,gBAAP,CADU;IAAA,CAzDZ,CAAA;AAAA,IA4DA,EAAE,CAAC,EAAH,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,MAAA,gBAAgB,CAAC,EAAjB,CAAoB,IAApB,EAA0B,QAA1B,CAAA,CAAA;AACA,aAAO,EAAP,CAFM;IAAA,CA5DR,CAAA;AAgEA,WAAO,EAAP,CAlEO;EAAA,CAFT,CAAA;AAsEA,SAAO,MAAP,CAvEmD;AAAA,CAArD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,iBAAnC,EAAsD,SAAC,IAAD,EAAO,SAAP,EAAkB,UAAlB,EAA8B,QAA9B,EAAwC,cAAxC,EAAwD,gBAAxD,GAAA;AAEpD,MAAA,eAAA;AAAA,EAAA,eAAA,GAAkB,SAAA,GAAA;AAEhB,QAAA,mWAAA;AAAA,IAAA,OAAA,GAAU,KAAV,CAAA;AAAA,IACA,KAAA,GAAQ,EADR,CAAA;AAAA,IAEA,KAAA,GAAQ,KAFR,CAAA;AAAA,IAGA,eAAA,GAAkB,MAHlB,CAAA;AAAA,IAIA,QAAA,GAAW,MAJX,CAAA;AAAA,IAKA,WAAA,GAAc,MALd,CAAA;AAAA,IAMA,KAAA,GAAQ,MANR,CAAA;AAAA,IAOA,MAAA,GAAS,MAPT,CAAA;AAAA,IAQA,SAAA,GAAW,MARX,CAAA;AAAA,IASA,UAAA,GAAa,MATb,CAAA;AAAA,IAUA,OAAA,GAAU,MAVV,CAAA;AAAA,IAWA,YAAA,GAAe,MAXf,CAAA;AAAA,IAYA,KAAA,GAAQ,MAZR,CAAA;AAAA,IAaA,UAAA,GAAa,KAbb,CAAA;AAAA,IAcA,gBAAA,GAAmB,EAAE,CAAC,QAAH,CAAY,OAAZ,EAAqB,UAArB,EAAiC,YAAjC,EAA+C,OAA/C,CAdnB,CAAA;AAAA,IAgBA,MAAA,GAAS,gBAAgB,CAAC,eAAjB,CAAA,CAhBT,CAAA;AAAA,IAiBA,WAAA,GAAc,MAjBd,CAAA;AAAA,IAkBA,cAAA,GAAiB,MAlBjB,CAAA;AAAA,IAmBA,IAAA,GAAO,SAAS,CAAC,IAAV,CAAe,MAAf,CAnBP,CAAA;AAAA,IAqBA,QAAA,GAAW,IAAK,CAAA,CAAA,CAAE,CAAC,qBAAR,CAAA,CArBX,CAAA;AAAA,IAuBA,EAAA,GAAK,SAAA,GAAA,CAvBL,CAAA;AAAA,IA2BA,WAAA,GAAc,SAAA,GAAA;AACZ,UAAA,sBAAA;AAAA,MAAA,IAAA,GAAO,cAAe,CAAA,CAAA,CAAE,CAAC,qBAAlB,CAAA,CAAP,CAAA;AAAA,MACA,OAAA,GAAa,QAAQ,CAAC,KAAT,GAAiB,EAAjB,GAAsB,EAAE,CAAC,KAAK,CAAC,OAAT,GAAmB,IAAI,CAAC,KAAxB,GAAgC,EAAzD,GAAiE,EAAE,CAAC,KAAK,CAAC,OAAT,GAAmB,EAApF,GAA4F,EAAE,CAAC,KAAK,CAAC,OAAT,GAAmB,IAAI,CAAC,KAAxB,GAAgC,EADtI,CAAA;AAAA,MAEA,OAAA,GAAa,QAAQ,CAAC,MAAT,GAAkB,EAAlB,GAAuB,EAAE,CAAC,KAAK,CAAC,OAAT,GAAmB,IAAI,CAAC,MAAxB,GAAiC,EAA3D,GAAmE,EAAE,CAAC,KAAK,CAAC,OAAT,GAAmB,EAAtF,GAA8F,EAAE,CAAC,KAAK,CAAC,OAAT,GAAmB,IAAI,CAAC,MAAxB,GAAiC,EAFzI,CAAA;AAAA,MAGA,CAAC,CAAC,MAAF,CAAS,WAAW,CAAC,YAArB,EAAmC;AAAA,QACjC,QAAA,EAAU,UADuB;AAAA,QAEjC,IAAA,EAAM,OAAA,GAAU,IAFiB;AAAA,QAGjC,GAAA,EAAK,OAAA,GAAU,IAHkB;AAAA,QAIjC,SAAA,EAAW,IAJsB;AAAA,QAKjC,OAAA,EAAS,CALwB;OAAnC,CAHA,CAAA;aAUA,WAAW,CAAC,MAAZ,CAAA,EAXY;IAAA,CA3Bd,CAAA;AAAA,IAwCA,eAAA,GAAkB,SAAA,GAAA;AAChB,MAAA,CAAC,CAAC,MAAF,CAAS,WAAW,CAAC,YAArB,EAAmC;AAAA,QACjC,QAAA,EAAU,UADuB;AAAA,QAEjC,IAAA,EAAM,KAF2B;AAAA,QAGjC,GAAA,EAAK,KAH4B;AAAA,QAIjC,SAAA,EAAW,IAJsB;AAAA,QAKjC,OAAA,EAAS,CALwB;OAAnC,CAAA,CAAA;aAOA,WAAW,CAAC,MAAZ,CAAA,EARgB;IAAA,CAxClB,CAAA;AAAA,IAoDA,YAAA,GAAe,SAAA,GAAA;AACb,UAAA,gDAAA;AAAA,MAAA,IAAG,CAAA,OAAA,IAAe,KAAlB;AAA6B,cAAA,CAA7B;OAAA;AAAA,MAGA,WAAW,CAAC,MAAZ,GAAqB,EAHrB,CAAA;AAMA,MAAA,IAAG,eAAH;AACE,QAAA,IAAA,GAAO,EAAE,CAAC,KAAH,CAAS,IAAT,CAAP,CAAA;AAAA,QACA,QAAA,GAAW,YAAY,CAAC,MAAb,CAAuB,YAAY,CAAC,YAAb,CAAA,CAAH,GAAoC,IAAK,CAAA,CAAA,CAAzC,GAAiD,IAAK,CAAA,CAAA,CAA1E,CADX,CAAA;AAAA,QAEA,OAAA,GAAU,YAAY,CAAC,IAAb,CAAkB,QAAlB,CAFV,CAAA;AAAA,QAGA,WAAW,CAAC,MAAZ,GAAqB,OAHrB,CADF;OAAA,MAAA;AAME,QAAA,KAAA,GAAQ,EAAE,CAAC,MAAH,CAAU,IAAV,CAAe,CAAC,KAAhB,CAAA,CAAR,CAAA;AAAA,QACA,OAAA,GAAU,WAAW,CAAC,MAAZ,GAAwB,KAAK,CAAC,IAAT,GAAmB,KAAK,CAAC,IAAzB,GAAmC,KADlE,CANF;OANA;AAAA,MAcA,gBAAgB,CAAC,KAAK,CAAC,KAAvB,CAA6B,WAA7B,EAA0C,CAAC,OAAD,EAAU,OAAV,CAA1C,CAdA,CAAA;AAAA,MAiBA,MAAA,GAAS,EAAE,CAAC,MAAH,CAAU,mBAAV,CAjBT,CAAA;AAkBA,MAAA,IAAG,MAAM,CAAC,KAAP,CAAA,CAAH;AACE,QAAA,IAAI,CAAC,MAAL,CAAY,cAAZ,CAAA,CAAA;AAAA,QACA,WAAW,CAAC,YAAZ,GAA2B,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,YAAX,CAAA,CAD3B,CAAA;AAAA,QAEA,eAAA,CAAA,CAFA,CADF;OAlBA;AAyBA,MAAA,IAAG,eAAH;AACE,QAAA,QAAA,GAAW,UAAU,CAAC,MAAX,CAAkB,0BAAlB,CAAX,CAAA;AACA,QAAA,IAAG,QAAQ,CAAC,KAAT,CAAA,CAAH;AACE,UAAA,QAAA,GAAW,KAAK,CAAC,MAAN,CAAa,sBAAb,CAAoC,CAAC,IAArC,CAAA,CAA2C,CAAC,OAA5C,CAAA,CAAX,CAAA;AAAA,UACA,QAAA,GAAW,UAAU,CAAC,MAAX,CAAkB,GAAlB,CACT,CAAC,IADQ,CACH,OADG,EACM,yBADN,CADX,CAAA;AAAA,UAGA,WAAA,GAAc,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CAHd,CAAA;AAIA,UAAA,IAAG,YAAY,CAAC,YAAb,CAAA,CAAH;AACE,YAAA,WAAW,CAAC,IAAZ,CAAiB;AAAA,cAAC,OAAA,EAAM,sBAAP;AAAA,cAA+B,EAAA,EAAG,CAAlC;AAAA,cAAqC,EAAA,EAAG,CAAxC;AAAA,cAA2C,EAAA,EAAG,CAA9C;AAAA,cAAgD,EAAA,EAAG,QAAQ,CAAC,MAA5D;aAAjB,CAAA,CADF;WAAA,MAAA;AAGE,YAAA,WAAW,CAAC,IAAZ,CAAiB;AAAA,cAAC,OAAA,EAAM,sBAAP;AAAA,cAA+B,EAAA,EAAG,CAAlC;AAAA,cAAqC,EAAA,EAAG,QAAQ,CAAC,KAAjD;AAAA,cAAwD,EAAA,EAAG,CAA3D;AAAA,cAA6D,EAAA,EAAG,CAAhE;aAAjB,CAAA,CAHF;WAJA;AAAA,UASA,WAAW,CAAC,KAAZ,CAAkB;AAAA,YAAC,MAAA,EAAQ,UAAT;AAAA,YAAqB,gBAAA,EAAkB,MAAvC;WAAlB,CATA,CADF;SADA;eAaA,gBAAgB,CAAC,UAAU,CAAC,KAA5B,CAAkC,QAAlC,EAA4C,CAAC,QAAD,EAAW,OAAX,CAA5C,EAdF;OA1Ba;IAAA,CApDf,CAAA;AAAA,IAgGA,WAAA,GAAc,SAAA,GAAA;AACZ,UAAA,uBAAA;AAAA,MAAA,IAAG,CAAA,OAAA,IAAe,KAAlB;AAA6B,cAAA,CAA7B;OAAA;AAAA,MACA,IAAA,GAAO,EAAE,CAAC,KAAH,CAAS,SAAT,CADP,CAAA;AAGA,MAAA,IAAG,eAAH;AACE,QAAA,IAAG,CAAA,QAAH;AAEE,UAAA,YAAY,CAAC,KAAb,CAAmB,IAAnB,EAAwB,SAAxB,CAAA,CAAA;AACA,gBAAA,CAHF;SAAA;AAAA,QAIA,QAAA,GAAW,YAAY,CAAC,MAAb,CAAuB,YAAY,CAAC,YAAb,CAAA,CAAH,GAAoC,IAAK,CAAA,CAAA,CAAzC,GAAiD,IAAK,CAAA,CAAA,CAA1E,CAJX,CAAA;AAAA,QAKA,OAAA,GAAU,YAAY,CAAC,IAAb,CAAkB,QAAlB,CALV,CAAA;AAAA,QAMA,gBAAgB,CAAC,UAAU,CAAC,KAA5B,CAAkC,QAAlC,EAA4C,CAAC,QAAD,EAAW,OAAX,CAA5C,CANA,CAAA;AAAA,QAOA,WAAW,CAAC,MAAZ,GAAqB,OAPrB,CAAA;AAAA,QAQA,gBAAgB,CAAC,QAAQ,CAAC,KAA1B,CAAgC,WAAhC,EAA6C,CAAC,QAAD,EAAW,OAAX,CAA7C,CARA,CADF;OAHA;aAcA,WAAA,CAAA,EAfY;IAAA,CAhGd,CAAA;AAAA,IAmHA,YAAA,GAAe,SAAA,GAAA;AACb,MAAA,IAAG,QAAH;AACE,QAAA,QAAQ,CAAC,MAAT,CAAA,CAAA,CADF;OAAA;AAAA,MAEA,QAAA,GAAW,MAFX,CAAA;aAGA,cAAc,CAAC,MAAf,CAAA,EAJa;IAAA,CAnHf,CAAA;AAAA,IA2HA,cAAA,GAAiB,SAAC,CAAD,GAAA;AAGf,UAAA,0BAAA;AAAA,MAAA,SAAA,GAAY,SAAZ,CAAA;AACA,MAAA,IAAG,EAAE,CAAC,KAAK,CAAC,MAAT,KAAqB,SAAxB;AACE,QAAA,eAAA,GAAsB,IAAA,KAAA,CAAM,WAAN,CAAtB,CAAA;AAAA,QACA,eAAe,CAAC,KAAhB,GAAwB,EAAE,CAAC,KAAK,CAAC,KADjC,CAAA;AAAA,QAEA,eAAe,CAAC,OAAhB,GAA0B,EAAE,CAAC,KAAK,CAAC,OAFnC,CAAA;AAAA,QAGA,eAAe,CAAC,KAAhB,GAAwB,EAAE,CAAC,KAAK,CAAC,KAHjC,CAAA;AAAA,QAIA,eAAe,CAAC,OAAhB,GAA0B,EAAE,CAAC,KAAK,CAAC,OAJnC,CAAA;eAKA,SAAS,CAAC,aAAV,CAAwB,eAAxB,EANF;OAJe;IAAA,CA3HjB,CAAA;AAAA,IAuIA,kBAAA,GAAqB,SAAC,CAAD,GAAA;aAEnB,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,EAAE,CAAC,KAAjB,EAFmB;IAAA,CAvIrB,CAAA;AAAA,IA4IA,EAAE,CAAC,IAAH,GAAU,SAAC,GAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,KAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,KAAA,GAAQ,GAAR,CAAA;AACA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,KAAT,CAAe,YAAf,EAAgC,KAAH,GAAc,QAAd,GAA4B,SAAzD,CAAA,CADF;SADA;AAAA,QAGA,WAAW,CAAC,MAAZ,GAAqB,KAHrB,CAAA;AAAA,QAIA,WAAW,CAAC,MAAZ,CAAA,CAJA,CAAA;AAKA,eAAO,EAAP,CAPF;OADQ;IAAA,CA5IV,CAAA;AAAA,IAyJA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,KAAT,CAAA;AAAA,QACA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,iBAAtB,EAAyC,SAAA,GAAA;AACvC,UAAA,IAAG,WAAH;AACE,YAAA,IAAI,CAAC,GAAL,CAAS,0BAAT,EAAqC,WAAW,CAAC,GAAjD,EAAsD,MAAM,CAAC,EAAP,CAAA,CAAtD,CAAA,CAAA;AAAA,YACA,WAAW,CAAC,GAAZ,GAAkB,MADlB,CAAA;AAAA,YAEA,WAAW,CAAC,KAAZ,GAAoB,MAFpB,CAAA;AAAA,YAGA,WAAW,CAAC,UAAZ,GAAyB,MAHzB,CAAA;AAAA,YAIA,WAAW,CAAC,KAAZ,GAAoB,MAJpB,CAAA;AAAA,YAKA,WAAW,CAAC,KAAZ,GAAoB,MALpB,CAAA;AAAA,YAMA,WAAW,CAAC,QAAZ,CAAA,CANA,CADF;WAAA;AAAA,UAQA,cAAA,GAAiB,MARjB,CAAA;iBASA,SAAA,GAAY,OAV2B;QAAA,CAAzC,CADA,CAAA;AAYA,eAAO,EAAP,CAdF;OADS;IAAA,CAzJX,CAAA;AAAA,IA0KA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,OAAA,GAAU,GAAV,CAAA;AACA,eAAO,EAAP,CAHF;OADU;IAAA,CA1KZ,CAAA;AAAA,IAgLA,EAAE,CAAC,QAAH,GAAc,SAAC,IAAD,GAAA;AACZ,UAAA,YAAA;AAAA,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,KAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,KAAA,GAAQ,IAAR,CAAA;AACA,QAAA,IAAG,KAAK,CAAC,MAAN,GAAe,CAAlB;AACE,UAAA,YAAA,GAAe,cAAc,CAAC,GAAf,CAAmB,KAAnB,CAAf,CAAA;AAAA,UAEA,MAAA,GAAU,+EAAA,GAA+E,YAA/E,GAA4F,QAFtG,CADF;SADA;AAMA,eAAO,EAAP,CARF;OADY;IAAA,CAhLd,CAAA;AAAA,IA2LA,EAAE,CAAC,IAAH,GAAU,SAAC,GAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,KAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,IAAG,GAAA,KAAO,MAAV;AACE,UAAA,KAAA,GAAQ,GAAR,CAAA;AAAA,UACA,SAAA,GAAY,GADZ,CADF;SAAA,MAAA;AAIE,UAAA,KAAA,GAAQ,GAAR,CAAA;AAAA,UACA,SAAA,GAAY,KAAK,CAAC,IAAN,CAAA,CADZ,CAAA;AAEA,UAAA,IAAG,eAAH;AACE,YAAA,EAAE,CAAC,OAAH,CAAW,KAAX,CAAA,CADF;WANF;SAAA;AAQA,eAAO,EAAP,CAVF;OADQ;IAAA,CA3LV,CAAA;AAAA,IAwMA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,UAAA,GAAa,GAAb,CAAA;AACA,eAAO,EAAP,CAHF;OADa;IAAA,CAxMf,CAAA;AAAA,IA8MA,EAAE,CAAC,WAAH,GAAiB,SAAC,GAAD,GAAA;AACf,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,YAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,IAAG,GAAH;AACE,UAAA,eAAA,GAAkB,IAAlB,CAAA;AAAA,UACA,YAAA,GAAe,GADf,CADF;SAAA,MAAA;AAIE,UAAA,eAAA,GAAkB,KAAlB,CAJF;SAAA;AAKA,eAAO,EAAP,CAPF;OADe;IAAA,CA9MjB,CAAA;AAAA,IAwNA,EAAE,CAAC,IAAH,GAAU,SAAC,GAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,KAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,KAAA,GAAQ,GAAR,CAAA;AACA,eAAO,EAAP,CAHF;OADQ;IAAA,CAxNV,CAAA;AAAA,IA8NA,EAAE,CAAC,EAAH,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;aACN,gBAAgB,CAAC,EAAjB,CAAoB,IAApB,EAA0B,QAA1B,EADM;IAAA,CA9NR,CAAA;AAAA,IAmOA,aAAA,GAAgB,SAAC,OAAD,GAAA;AACd,aAAO,SAAA,GAAA;AACL,QAAA,IAAG,WAAW,CAAC,MAAf;iBAA2B,OAAA,CAAQ,WAAW,CAAC,MAApB,EAA3B;SADK;MAAA,CAAP,CADc;IAAA,CAnOhB,CAAA;AAAA,IAuOA,eAAA,GAAkB,SAAC,QAAD,GAAA;AAChB,UAAA,iBAAA;AAAA,MAAA,IAAG,CAAA,WAAH;AAEE,QAAA,WAAA,GAAc,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,IAAf,CAAoB,IAApB,CAAd,CAAA;AAAA,QACA,IAAI,CAAC,GAAL,CAAS,wBAAT,EAAmC,WAAW,CAAC,GAA/C,EAAoD,MAAM,CAAC,EAAP,CAAA,CAApD,CADA,CAAA;AAAA,QAGA,WAAW,CAAC,UAAZ,GAAyB,EAHzB,CAAA;AAAA,QAIA,WAAW,CAAC,GAAZ,GAAkB,EAJlB,CAAA;AAAA,QAKA,WAAW,CAAC,KAAZ,GAAoB,EALpB,CAAA;AAAA,QAMA,WAAW,CAAC,KAAZ,GAAoB,EANpB,CAAA;AAAA,QAOA,WAAW,CAAC,KAAZ,GAAoB,EAPpB,CAAA;AAAA,QAQA,WAAW,CAAC,MAAZ,GAAqB,KARrB,CAAA;AASA;AAAA,aAAA,YAAA;6BAAA;AACE,UAAA,WAAW,CAAC,GAAI,CAAA,IAAA,CAAhB,GAAwB,aAAA,CAAc,KAAK,CAAC,GAApB,CAAxB,CAAA;AAAA,UACA,WAAW,CAAC,KAAM,CAAA,IAAA,CAAlB,GAA0B,KAAK,CAAC,KAAN,CAAA,CAD1B,CAAA;AAAA,UAEA,WAAW,CAAC,UAAW,CAAA,IAAA,CAAvB,GAA+B,aAAA,CAAc,KAAK,CAAC,SAApB,CAF/B,CAAA;AAAA,UAGA,WAAW,CAAC,KAAM,CAAA,IAAA,CAAlB,GAA0B,KAAK,CAAC,SAAN,CAAA,CAH1B,CAAA;AAAA,UAIA,WAAW,CAAC,KAAM,CAAA,IAAA,CAAlB,GAA0B,aAAA,CAAc,KAAK,CAAC,KAApB,CAJ1B,CAAA;AAAA,UAKA,IALA,CADF;AAAA,SAXF;OAAA;AAmBA,MAAA,IAAG,CAAA,cAAH;eACE,cAAA,GAAiB,QAAA,CAAS,MAAT,CAAA,CAAiB,WAAjB,EADnB;OApBgB;IAAA,CAvOlB,CAAA;AAAA,IAgQA,EAAE,CAAC,OAAH,GAAa,SAAC,CAAD,GAAA;AACX,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,EAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,eAAA,CAAgB,MAAhB,CAAA,CAAA;AAGA,QAAA,IAAG,CAAA,eAAA,IAAuB,CAAC,CAAC,OAAF,CAAU,eAAV,CAA1B;iBACE,CAAC,CAAC,EAAF,CAAK,oBAAL,EAA2B,YAA3B,CACE,CAAC,EADH,CACM,mBADN,EAC2B,WAD3B,CAEE,CAAC,EAFH,CAEM,oBAFN,EAE4B,YAF5B,EADF;SALF;OADW;IAAA,CAhQb,CAAA;AA8QA,WAAO,EAAP,CAhRgB;EAAA,CAAlB,CAAA;AAkRA,SAAO,eAAP,CApRoD;AAAA,CAAtD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,OAAnC,EAA4C,SAAC,IAAD,EAAO,SAAP,EAAkB,SAAlB,EAA6B,QAA7B,EAAuC,WAAvC,GAAA;AAE1C,MAAA,gBAAA;AAAA,EAAA,SAAA,GAAY,CAAZ,CAAA;AAAA,EAEA,KAAA,GAAQ,SAAA,GAAA;AAEN,QAAA,+QAAA;AAAA,IAAA,GAAA,GAAO,OAAA,GAAM,CAAC,SAAA,EAAD,CAAb,CAAA;AAAA,IAEA,EAAA,GAAK,SAAA,GAAA,CAFL,CAAA;AAAA,IAMA,QAAA,GAAW,EANX,CAAA;AAAA,IAOA,UAAA,GAAa,MAPb,CAAA;AAAA,IAQA,UAAA,GAAa,MARb,CAAA;AAAA,IASA,YAAA,GAAe,MATf,CAAA;AAAA,IAUA,KAAA,GAAQ,MAVR,CAAA;AAAA,IAWA,YAAA,GAAe,KAXf,CAAA;AAAA,IAYA,MAAA,GAAS,MAZT,CAAA;AAAA,IAaA,gBAAA,GAAmB,EAbnB,CAAA;AAAA,IAcA,MAAA,GAAS,MAdT,CAAA;AAAA,IAeA,SAAA,GAAY,MAfZ,CAAA;AAAA,IAgBA,SAAA,GAAY,KAhBZ,CAAA;AAAA,IAiBA,SAAA,GAAY,QAAA,CAAA,CAjBZ,CAAA;AAAA,IAkBA,kBAAA,GAAqB,WAAW,CAAC,QAlBjC,CAAA;AAAA,IAsBA,UAAA,GAAa,EAAE,CAAC,QAAH,CAAY,WAAZ,EAAyB,QAAzB,EAAmC,aAAnC,EAAkD,cAAlD,EAAkE,gBAAlE,EAAoF,eAApF,EAAqG,UAArG,EAAiH,WAAjH,EAA8H,SAA9H,EAAyI,QAAzI,EAAmJ,aAAnJ,EAAkK,YAAlK,EAAgL,SAAhL,EAA2L,qBAA3L,EAAkN,mBAAlN,EAAuO,cAAvO,CAtBb,CAAA;AAAA,IAuBA,MAAA,GAAS,EAAE,CAAC,QAAH,CAAY,MAAZ,EAAoB,QAApB,CAvBT,CAAA;AAAA,IA2BA,EAAE,CAAC,EAAH,GAAQ,SAAC,EAAD,GAAA;AACN,aAAO,GAAP,CADM;IAAA,CA3BR,CAAA;AAAA,IA8BA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,KAAT,CAAA;AACA,eAAO,EAAP,CAHF;OADS;IAAA,CA9BX,CAAA;AAAA,IAoCA,EAAE,CAAC,WAAH,GAAiB,SAAC,SAAD,GAAA;AACf,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,YAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,YAAA,GAAe,SAAf,CAAA;AAAA,QACA,SAAS,CAAC,OAAO,CAAC,MAAlB,CAAyB,YAAzB,CADA,CAAA;AAEA,eAAO,EAAP,CAJF;OADe;IAAA,CApCjB,CAAA;AAAA,IA2CA,EAAE,CAAC,eAAH,GAAqB,SAAC,IAAD,GAAA;AACnB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,gBAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,gBAAA,GAAmB,IAAnB,CAAA;AAAA,QACA,SAAS,CAAC,OAAO,CAAC,QAAlB,CAA2B,IAA3B,CADA,CAAA;AAEA,eAAO,EAAP,CAJF;OADmB;IAAA,CA3CrB,CAAA;AAAA,IAkDA,aAAA,GAAgB,EAlDhB,CAAA;AAAA,IAmDA,EAAE,CAAC,YAAH,GAAkB,SAAC,GAAD,GAAA;AAChB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,aAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;AACE,QAAA,CAAC,CAAC,MAAF,CAAS,aAAT,EAAwB,GAAxB,CAAA,CADF;OADA;AAGA,aAAO,EAAP,CAJgB;IAAA,CAnDlB,CAAA;AAAA,IAyDA,EAAE,CAAC,KAAH,GAAW,SAAC,GAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,GAAT,CAAA;AACA,eAAO,EAAP,CAHF;OADS;IAAA,CAzDX,CAAA;AAAA,IA+DA,WAAA,GAAc;AAAA,MAAC,WAAA,EAAa,OAAd;KA/Dd,CAAA;AAAA,IAgEA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;AACE,QAAA,CAAC,CAAC,MAAF,CAAS,WAAT,EAAsB,GAAtB,CAAA,CADF;OADA;AAGA,aAAO,EAAP,CAJc;IAAA,CAhEhB,CAAA;AAAA,IAsEA,EAAE,CAAC,QAAH,GAAc,SAAC,GAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,SAAA,GAAY,GAAZ,CAAA;AACA,eAAO,EAAP,CAHF;OADY;IAAA,CAtEd,CAAA;AAAA,IA4EA,cAAA,GAAiB;AAAA,MAAC,WAAA,EAAa,OAAd;KA5EjB,CAAA;AAAA,IA6EA,EAAE,CAAC,aAAH,GAAmB,SAAC,GAAD,GAAA;AACjB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,cAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;AACE,QAAA,CAAC,CAAC,MAAF,CAAS,cAAT,EAAyB,GAAzB,CAAA,CADF;OADA;AAGA,aAAO,EAAP,CAJiB;IAAA,CA7EnB,CAAA;AAAA,IAmFA,gBAAA,GAAmB;AAAA,MAAC,QAAA,EAAS,UAAV;KAnFnB,CAAA;AAAA,IAoFA,EAAE,CAAC,eAAH,GAAqB,SAAC,GAAD,GAAA;AACnB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,gBAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;AACE,QAAA,CAAC,CAAC,MAAF,CAAS,gBAAT,EAA2B,GAA3B,CAAA,CAAA;AAAA,QACA,gBAAgB,CAAC,QAAjB,GAA4B,UAD5B,CADF;OADA;AAIA,aAAO,EAAP,CALmB;IAAA,CApFrB,CAAA;AAAA,IA2FA,EAAE,CAAC,SAAH,GAAe,SAAC,MAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,QAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAA,CAAA;AACA,eAAO,EAAP,CAHF;OADa;IAAA,CA3Ff,CAAA;AAAA,IAiGA,EAAE,CAAC,QAAH,GAAc,SAAC,KAAD,EAAQ,MAAR,GAAA;AACZ,MAAA,UAAU,CAAC,GAAX,CAAe,KAAf,CAAA,CAAA;AACA,MAAA,IAAG,MAAH;AACE,QAAA,MAAM,CAAC,MAAP,CAAA,CAAe,CAAC,GAAhB,CAAoB,KAApB,CAAA,CADF;OAAA,MAAA;AAGE,QAAA,YAAY,CAAC,GAAb,CAAiB,KAAjB,CAAA,CAHF;OADA;AAKA,aAAO,EAAP,CANY;IAAA,CAjGd,CAAA;AAAA,IAyGA,EAAE,CAAC,qBAAH,GAA2B,SAAA,GAAA;AACzB,UAAA,yBAAA;AAAA;AAAA;WAAA,UAAA;qBAAA;AACE,QAAA,IAAG,CAAA,YAAgB,CAAC,QAAb,CAAsB,CAAtB,CAAJ,IAAiC,CAAA,EAAA,GAAK,YAAY,CAAC,OAAb,CAAqB,CAAC,CAAC,IAAF,CAAA,CAArB,EAA+B,CAAC,CAAC,WAAF,CAAA,CAA/B,CAAL,CAApC;AACE,UAAA,CAAC,CAAC,WAAF,CAAc,EAAd,CAAA,CAAA;AAAA,UACA,EAAE,CAAC,YAAH,CAAgB,CAAC,CAAC,YAAF,CAAA,CAAhB,CADA,CAAA;AAEA,UAAA,IAAG,CAAC,CAAC,OAAF,CAAA,CAAH;0BACE,EAAE,CAAC,OAAH,CAAW,IAAX,GADF;WAAA,MAAA;AAGE,YAAA,IAAG,EAAE,CAAC,OAAH,CAAA,CAAH;4BACE,CAAC,CAAC,OAAF,CAAU,IAAV,GADF;aAAA,MAAA;oCAAA;aAHF;WAHF;SAAA,MAAA;gCAAA;SADF;AAAA;sBADyB;IAAA,CAzG3B,CAAA;AAAA,IAoHA,EAAE,CAAC,iBAAH,GAAuB,SAAC,GAAD,GAAA;AACrB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,kBAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,kBAAA,GAAqB,GAArB,CAAA;AACA,eAAO,EAAP,CAHF;OADqB;IAAA,CApHvB,CAAA;AAAA,IA4HA,EAAE,CAAC,QAAH,GAAc,SAAC,GAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA;AACA,MAAA,IAAG,GAAA,KAAS,SAAZ;AACE,QAAA,SAAA,GAAY,GAAZ,CAAA;AACA,QAAA,IAAG,SAAH;AACE,UAAA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,iBAAf,CAAA,CAAA,CADF;SAAA,MAAA;AAGE,UAAA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,mBAAf,CAAA,CAAA,CAHF;SAFF;OADA;AAOA,aAAO,EAAP,CARY;IAAA,CA5Hd,CAAA;AAAA,IAwIA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,aAAO,UAAP,CADa;IAAA,CAxIf,CAAA;AAAA,IA2IA,EAAE,CAAC,OAAH,GAAa,SAAA,GAAA;AACX,aAAO,QAAP,CADW;IAAA,CA3Ib,CAAA;AAAA,IA8IA,EAAE,CAAC,MAAH,GAAY,SAAA,GAAA;AACV,aAAO,YAAP,CADU;IAAA,CA9IZ,CAAA;AAAA,IAiJA,EAAE,CAAC,SAAH,GAAe,SAAA,GAAA;AACb,aAAO,UAAP,CADa;IAAA,CAjJf,CAAA;AAAA,IAoJA,EAAE,CAAC,QAAH,GAAc,SAAC,KAAD,GAAA;AACZ,aAAO,CAAA,CAAC,UAAW,CAAC,GAAX,CAAe,KAAf,CAAT,CADY;IAAA,CApJd,CAAA;AAAA,IAuJA,EAAE,CAAC,SAAH,GAAe,SAAA,GAAA;AACb,aAAO,UAAP,CADa;IAAA,CAvJf,CAAA;AAAA,IA0JA,EAAE,CAAC,KAAH,GAAW,SAAA,GAAA;AACT,aAAO,MAAP,CADS;IAAA,CA1JX,CAAA;AAAA,IA6JA,EAAE,CAAC,OAAH,GAAa,SAAA,GAAA;AACX,aAAO,KAAP,CADW;IAAA,CA7Jb,CAAA;AAAA,IAgKA,EAAE,CAAC,QAAH,GAAc,SAAA,GAAA;AACZ,aAAO,SAAP,CADY;IAAA,CAhKd,CAAA;AAAA,IAqKA,aAAA,GAAgB,SAAC,IAAD,EAAM,WAAN,GAAA;AACd,MAAA,IAAG,IAAH;AACE,QAAA,IAAI,CAAC,GAAL,CAAS,2BAAT,CAAA,CAAA;AAAA,QACA,KAAA,GAAQ,IADR,CAAA;AAAA,QAEA,MAAM,CAAC,YAAP,GAAsB,IAFtB,CAAA;AAAA,QAGA,MAAM,CAAC,MAAP,GAAgB,UAHhB,CAAA;AAAA,QAIA,EAAE,CAAC,qBAAH,CAAA,CAJA,CAAA;AAAA,QAKA,UAAU,CAAC,WAAX,CAAuB,IAAvB,EAA6B,WAA7B,CALA,CAAA;AAAA,QAMA,UAAU,CAAC,mBAAX,CAA+B,IAA/B,CANA,CAAA;AAAA,QAOA,UAAU,CAAC,YAAX,CAAwB,IAAxB,EAA8B,WAA9B,CAPA,CAAA;AAAA,QAQA,UAAU,CAAC,aAAX,CAAyB,IAAzB,EAA+B,WAA/B,CARA,CAAA;AAAA,QASA,UAAU,CAAC,QAAX,CAAoB,WAApB,CATA,CAAA;AAAA,QAUA,UAAU,CAAC,iBAAX,CAA6B,IAA7B,CAVA,CAAA;AAAA,QAWA,UAAU,CAAC,SAAX,CAAqB,IAArB,EAA2B,WAA3B,CAXA,CAAA;AAAA,QAYA,UAAU,CAAC,UAAX,CAAA,CAZA,CAAA;eAaA,UAAU,CAAC,iBAAX,CAAA,EAdF;OADc;IAAA,CArKhB,CAAA;AAAA,IAsLA,SAAA,GAAY,CAAC,CAAC,QAAF,CAAW,aAAX,EAA0B,GAA1B,CAtLZ,CAAA;AAAA,IAwLA,EAAE,CAAC,iBAAH,GAAuB,aAxLvB,CAAA;AAAA,IA0LA,EAAE,CAAC,eAAH,GAAqB,SAAC,WAAD,GAAA;AACnB,MAAA,IAAG,KAAH;AACE,QAAA,IAAI,CAAC,GAAL,CAAS,6BAAT,CAAA,CAAA;AAAA,QACA,UAAU,CAAC,aAAX,CAAyB,KAAzB,EAAgC,WAAhC,CADA,CAAA;AAAA,QAEA,UAAU,CAAC,QAAX,CAAoB,WAApB,CAFA,CAAA;AAAA,QAGA,UAAU,CAAC,SAAX,CAAqB,KAArB,EAA4B,WAA5B,CAHA,CAAA;eAIA,UAAU,CAAC,UAAX,CAAA,EALF;OADmB;IAAA,CA1LrB,CAAA;AAAA,IAkMA,EAAE,CAAC,gBAAH,GAAsB,SAAC,IAAD,EAAO,WAAP,GAAA;AACpB,MAAA,IAAG,IAAH;AACE,QAAA,IAAI,CAAC,GAAL,CAAS,+BAAT,CAAA,CAAA;AAAA,QACA,KAAA,GAAQ,IADR,CAAA;AAAA,QAEA,MAAM,CAAC,YAAP,GAAsB,IAFtB,CAAA;AAAA,QAGA,UAAU,CAAC,WAAX,CAAuB,IAAvB,EAA6B,WAA7B,CAHA,CAAA;AAAA,QAIA,UAAU,CAAC,YAAX,CAAwB,IAAxB,EAA8B,WAA9B,CAJA,CAAA;AAAA,QAKA,UAAU,CAAC,QAAX,CAAoB,WAApB,CALA,CAAA;eAMA,UAAU,CAAC,SAAX,CAAqB,IAArB,EAA2B,WAA3B,EAPF;OADoB;IAAA,CAlMtB,CAAA;AAAA,IA4MA,EAAE,CAAC,eAAH,GAAqB,SAAC,WAAD,GAAA;AACnB,MAAA,IAAG,KAAH;AACE,QAAA,IAAI,CAAC,GAAL,CAAS,uCAAT,CAAA,CAAA;AAAA,QACA,UAAU,CAAC,aAAX,CAAyB,KAAzB,EAAgC,WAAhC,CADA,CAAA;AAAA,QAEA,UAAU,CAAC,QAAX,CAAoB,WAApB,CAFA,CAAA;eAGA,UAAU,CAAC,SAAX,CAAqB,KAArB,EAA4B,WAA5B,EAJF;OADmB;IAAA,CA5MrB,CAAA;AAAA,IAmNA,EAAE,CAAC,kBAAH,GAAwB,SAAA,GAAA;AACtB,MAAA,IAAG,KAAH;AACE,QAAA,UAAU,CAAC,QAAX,CAAoB,IAApB,CAAA,CAAA;eACA,UAAU,CAAC,SAAX,CAAqB,KAArB,EAA4B,IAA5B,EAFF;OADsB;IAAA,CAnNxB,CAAA;AAAA,IAwNA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,EAAf,CAAkB,eAAlB,EAAmC,CAAC,CAAC,QAAF,CAAW,aAAX,EAA0B,EAA1B,CAAnC,CAxNA,CAAA;AAAA,IAyNA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,EAAf,CAAkB,cAAlB,EAAkC,EAAE,CAAC,eAArC,CAzNA,CAAA;AAAA,IA0NA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,EAAf,CAAkB,cAAlB,EAAkC,SAAC,WAAD,GAAA;aAAiB,EAAE,CAAC,iBAAH,CAAqB,KAArB,EAA4B,WAA5B,EAAjB;IAAA,CAAlC,CA1NA,CAAA;AAAA,IA2NA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,EAAf,CAAkB,aAAlB,EAAiC,EAAE,CAAC,eAApC,CA3NA,CAAA;AAAA,IA4NA,EAAE,CAAC,SAAH,CAAA,CAAc,CAAC,EAAf,CAAkB,gBAAlB,EAAoC,UAAU,CAAC,YAAX,CAAwB,KAAxB,EAA+B,IAA/B,CAApC,CA5NA,CAAA;AAAA,IAgOA,SAAS,CAAC,KAAV,CAAgB,EAAhB,CAhOA,CAAA;AAAA,IAiOA,UAAA,GAAa,SAAA,CAAA,CAAW,CAAC,KAAZ,CAAkB,EAAlB,CAjOb,CAAA;AAAA,IAkOA,UAAA,GAAa,SAAA,CAAA,CAlOb,CAAA;AAAA,IAmOA,YAAA,GAAe,SAAA,CAAA,CAnOf,CAAA;AAqOA,WAAO,EAAP,CAvOM;EAAA,CAFR,CAAA;AA2OA,SAAO,KAAP,CA7O0C;AAAA,CAA5C,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,WAAnC,EAAgD,SAAC,IAAD,EAAO,OAAP,EAAgB,cAAhB,EAAgC,gBAAhC,EAAkD,cAAlD,GAAA;AAE9C,MAAA,uBAAA;AAAA,EAAA,YAAA,GAAe,CAAf,CAAA;AAAA,EAEA,SAAA,GAAY,SAAA,GAAA;AAEV,QAAA,yZAAA;AAAA,IAAA,EAAA,GAAK,SAAA,GAAA,CAAL,CAAA;AAAA,IAIA,YAAA,GAAe,OAAA,GAAU,YAAA,EAJzB,CAAA;AAAA,IAKA,MAAA,GAAS,MALT,CAAA;AAAA,IAMA,QAAA,GAAW,MANX,CAAA;AAAA,IAOA,iBAAA,GAAoB,MAPpB,CAAA;AAAA,IAQA,aAAA,GAAgB,MARhB,CAAA;AAAA,IASA,QAAA,GAAW,EATX,CAAA;AAAA,IAUA,QAAA,GAAW,EAVX,CAAA;AAAA,IAWA,IAAA,GAAO,MAXP,CAAA;AAAA,IAYA,UAAA,GAAa,MAZb,CAAA;AAAA,IAaA,gBAAA,GAAmB,MAbnB,CAAA;AAAA,IAcA,UAAA,GAAa,MAdb,CAAA;AAAA,IAeA,SAAA,GAAY,MAfZ,CAAA;AAAA,IAgBA,OAAA,GAAU,OAAO,CAAC,IAAR,CAAa,cAAc,CAAC,SAAD,CAA3B,CAhBV,CAAA;AAAA,IAiBA,WAAA,GAAc,CAjBd,CAAA;AAAA,IAkBA,YAAA,GAAe,CAlBf,CAAA;AAAA,IAmBA,YAAA,GAAe,CAnBf,CAAA;AAAA,IAoBA,KAAA,GAAQ,MApBR,CAAA;AAAA,IAqBA,QAAA,GAAW,MArBX,CAAA;AAAA,IAsBA,SAAA,GAAY,MAtBZ,CAAA;AAAA,IAuBA,SAAA,GAAY,CAvBZ,CAAA;AAAA,IAwBA,WAAA,GAAc,CAxBd,CAAA;AAAA,IA4BA,EAAE,CAAC,EAAH,GAAQ,SAAA,GAAA;AACN,aAAO,YAAP,CADM;IAAA,CA5BR,CAAA;AAAA,IA+BA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,KAAT,CAAA;AAAA,QAEA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,gBAAA,GAAe,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAAtC,EAAkD,EAAE,CAAC,cAArD,CAFA,CAAA;AAIA,eAAO,EAAP,CANF;OADS;IAAA,CA/BX,CAAA;AAAA,IAwCA,EAAE,CAAC,OAAH,GAAa,SAAC,IAAD,GAAA;AACX,UAAA,4BAAA;AAAA,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,QAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,cAAA,GAAiB,SAAA,GAAA;iBAAO,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,SAAX,CAAA,CAAsB,CAAC,MAAvB,CAA8B,IAA9B,EAAP;QAAA,CAAjB,CAAA;AAAA,QACA,QAAA,GAAW,IADX,CAAA;AAEA,QAAA,IAAG,QAAH;AACE,UAAA,iBAAA,GAAoB,EAAE,CAAC,MAAH,CAAU,QAAV,CAApB,CAAA;AACA,UAAA,IAAG,iBAAiB,CAAC,KAAlB,CAAA,CAAH;AACE,YAAA,IAAI,CAAC,KAAL,CAAY,iBAAA,GAAiB,QAAjB,GAA0B,iBAAtC,CAAA,CADF;WAAA,MAAA;AAGE,YAAA,cAAA,CAAA,CAAA,CAAA;AAAA,YAEA,YAAA,GAAe,iBAAiB,CAAC,MAAlB,CAAyB,WAAzB,CAAqC,CAAC,IAAtC,CAAA,CAFf,CAAA;AAAA,YAGI,IAAA,YAAA,CAAa,YAAb,EAA2B,cAA3B,CAHJ,CAHF;WAFF;SAFA;AAYA,eAAO,EAAP,CAdF;OADW;IAAA,CAxCb,CAAA;AAAA,IAyDA,EAAE,CAAC,SAAH,GAAe,SAAC,MAAD,GAAA;AACb,MAAA,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAA,CAAA;AACA,aAAO,EAAP,CAFa;IAAA,CAzDf,CAAA;AAAA,IA6DA,EAAE,CAAC,MAAH,GAAY,SAAA,GAAA;AACV,aAAO,YAAP,CADU;IAAA,CA7DZ,CAAA;AAAA,IAgEA,EAAE,CAAC,KAAH,GAAW,SAAA,GAAA;AACT,aAAO,WAAP,CADS;IAAA,CAhEX,CAAA;AAAA,IAmEA,EAAE,CAAC,OAAH,GAAa,SAAA,GAAA;AACX,aAAO,OAAP,CADW;IAAA,CAnEb,CAAA;AAAA,IAsEA,EAAE,CAAC,YAAH,GAAkB,SAAA,GAAA;AAChB,aAAO,UAAP,CADgB;IAAA,CAtElB,CAAA;AAAA,IAyEA,EAAE,CAAC,UAAH,GAAgB,SAAA,GAAA;AACd,aAAO,QAAP,CADc;IAAA,CAzEhB,CAAA;AAAA,IA4EA,EAAE,CAAC,YAAH,GAAkB,SAAA,GAAA;AAChB,aAAO,gBAAP,CADgB;IAAA,CA5ElB,CAAA;AAAA,IAiFA,EAAE,CAAC,iBAAH,GAAuB,SAAA,GAAA;AACrB,MAAA,IAAG,MAAM,CAAC,QAAP,CAAA,CAAH;AACE,QAAA,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,QAAX,CAAA,CAAqB,CAAC,OAAO,CAAC,MAA9B,CAAqC,KAArC,CAAA,CAAA;AAAA,QACA,UAAU,CAAC,SAAX,CAAqB,uBAArB,CAA6C,CAAC,IAA9C,CAAmD,SAAC,CAAD,GAAA;AAC/C,cAAA,UAAA;AAAA,UAAA,IAAA,GAAO,IAAI,CAAC,aAAa,CAAC,OAAnB,CAAA,CAAP,CAAA;iBACA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CACL,CAAC,IADI,CACC,IADD,EAFwC;QAAA,CAAnD,CADA,CAAA;AAAA,QAMA,iBAAiB,CAAC,SAAlB,CAA4B,gGAA5B,CACE,CAAC,KADH,CACS,gBADT,EAC2B,KAD3B,CANA,CAAA;eAQA,iBAAiB,CAAC,SAAlB,CAA4B,gLAA5B,CACE,CAAC,KADH,CACS,QADT,EACkB,SADlB,CAEE,CAAC,EAFH,CAEM,OAFN,EAEe,SAAC,CAAD,GAAA;AACX,UAAA,IAAI,CAAC,GAAL,CAAS,SAAT,EAAoB,EAAE,CAAC,MAAH,CAAU,IAAV,CAAe,CAAC,IAAhB,CAAqB,OAArB,CAApB,EAAmD,CAAnD,CAAA,CAAA;iBACA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,YAAnB,CAAgC,EAAE,CAAC,MAAH,CAAU,IAAV,CAAe,CAAC,IAAhB,CAAqB,OAArB,CAAhC,EAA+D,CAA/D,EAFW;QAAA,CAFf,EATF;OAAA,MAAA;eAgBE,UAAU,CAAC,SAAX,CAAqB,8EAArB,CACE,CAAC,KADH,CACS,gBADT,EAC2B,MAD3B,CAEE,CAAC,KAFH,CAES,QAFT,EAEmB,SAFnB,EAhBF;OADqB;IAAA,CAjFvB,CAAA;AAAA,IAwGA,mBAAA,GAAsB,SAAC,SAAD,EAAY,IAAZ,EAAkB,QAAlB,EAA4B,KAA5B,EAAmC,MAAnC,GAAA;AACpB,UAAA,IAAA;AAAA,MAAA,IAAA,GAAO,SAAS,CAAC,MAAV,CAAiB,GAAA,GAAM,QAAQ,CAAC,OAAT,CAAiB,GAAjB,EAAqB,GAArB,CAAvB,CAAP,CAAA;AACA,MAAA,IAAG,IAAI,CAAC,KAAL,CAAA,CAAH;AACE,QAAA,IAAA,GAAO,SAAS,CAAC,MAAV,CAAiB,MAAjB,CACL,CAAC,IADI,CACC;AAAA,UAAC,OAAA,EAAM,QAAP;AAAA,UAAiB,aAAA,EAAe,QAAhC;AAAA,UAA0C,CAAA,EAAK,MAAH,GAAe,MAAf,GAA2B,CAAvE;SADD,CAAP,CADF;OADA;AAAA,MAKA,IAAI,CAAC,IAAL,CAAU,IAAV,CAAe,CAAC,KAAhB,CAAsB,KAAtB,CALA,CAAA;AAOA,aAAO,IAAI,CAAC,IAAL,CAAA,CAAW,CAAC,OAAZ,CAAA,CAAqB,CAAC,MAA7B,CARoB;IAAA,CAxGtB,CAAA;AAAA,IAmHA,aAAA,GAAgB,SAAC,KAAD,EAAQ,QAAR,GAAA;AACd,UAAA,qBAAA;AAAA,MAAA,eAAA,GAAkB,CAAlB,CAAA;AAAA,MACA,IAAA,GAAO,UAAU,CAAC,MAAX,CAAkB,sBAAlB,CADP,CAAA;AAEA,MAAA,IAAG,IAAI,CAAC,KAAL,CAAA,CAAH;AACE,QAAA,IAAA,GAAO,UAAU,CAAC,MAAX,CAAkB,GAAlB,EAAuB,gBAAvB,CAAwC,CAAC,IAAzC,CAA8C,OAA9C,EAAsD,mCAAtD,CAAP,CADF;OAFA;AAIA,MAAA,IAAG,KAAH;AACE,QAAA,YAAA,GAAe,mBAAA,CAAoB,IAApB,EAA0B,KAA1B,EAAiC,oCAAjC,EAAuE,MAAM,CAAC,UAAP,CAAA,CAAvE,CAAf,CADF;OAJA;AAMA,MAAA,IAAG,QAAH;AACE,QAAA,mBAAA,CAAoB,IAApB,EAA0B,QAA1B,EAAoC,uCAApC,EAA6E,MAAM,CAAC,aAAP,CAAA,CAA7E,EAAqG,YAArG,CAAA,CADF;OANA;AASA,aAAO,IAAI,CAAC,IAAL,CAAA,CAAW,CAAC,OAAZ,CAAA,CAAqB,CAAC,MAA7B,CAVc;IAAA,CAnHhB,CAAA;AAAA,IA+HA,WAAA,GAAc,SAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,KAAnC,GAAA;AACZ,UAAA,qCAAA;AAAA,MAAA,gBAAA,GAAmB,SAAS,CAAC,MAAV,CAAiB,GAAjB,CAAnB,CAAA;AACA,WAAA,+CAAA;yBAAA;AACE,QAAA,gBAAgB,CAAC,MAAjB,CAAwB,MAAxB,CAA+B,CAAC,IAAhC,CAAqC;AAAA,UAAA,OAAA,EAAQ,WAAR;SAArC,CAAyD,CAAC,IAA1D,CAA+D,CAA/D,CAAiE,CAAC,KAAlE,CAAwE,KAAxE,CAAA,CADF;AAAA,OADA;AAAA,MAIA,MAAA,GAAS,gBAAgB,CAAC,IAAjB,CAAA,CAAuB,CAAC,OAAxB,CAAA,CAJT,CAAA;AAAA,MAKA,gBAAgB,CAAC,MAAjB,CAAA,CALA,CAAA;AAMA,aAAO,MAAP,CAPY;IAAA,CA/Hd,CAAA;AAAA,IAwIA,gBAAA,GAAmB,SAAC,GAAD,GAAA;AACjB,UAAA,QAAA;AAAA,MAAA,QAAA,GAAW,GAAG,CAAC,gBAAJ,CAAA,CAAX,CAAA;AACA,cAAO,GAAG,CAAC,UAAJ,CAAA,CAAP;AAAA,aACO,QADP;AAEI,UAAA,IAAG,QAAA,GAAW,CAAd;mBAAqB,MAArB;WAAA,MAAA;mBAAgC,QAAhC;WAFJ;AACO;AADP,aAGO,KAHP;AAII,UAAA,IAAG,QAAA,GAAW,CAAd;mBAAqB,MAArB;WAAA,MAAA;mBAAgC,QAAhC;WAJJ;AAGO;AAHP,aAKO,OALP;AAMI,UAAA,IAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAAA,IAAsB,EAAzB;mBAAiC,MAAjC;WAAA,MAAA;mBAA4C,QAA5C;WANJ;AAKO;AALP,aAOO,MAPP;AAQI,UAAA,IAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAAA,IAAsB,EAAzB;mBAAiC,MAAjC;WAAA,MAAA;mBAA4C,QAA5C;WARJ;AAAA,OAFiB;IAAA,CAxInB,CAAA;AAAA,IAoJA,eAAA,GAAkB,SAAC,GAAD,GAAA;AAChB,UAAA,QAAA;AAAA,MAAA,QAAA,GAAW,GAAG,CAAC,gBAAJ,CAAA,CAAX,CAAA;AACA,cAAO,GAAG,CAAC,UAAJ,CAAA,CAAP;AAAA,aACO,QADP;AAEI,iBAAQ,SAAA,GAAS,QAAT,GAAkB,UAA1B,CAFJ;AAAA,aAGO,KAHP;AAII,iBAAQ,SAAA,GAAS,QAAT,GAAkB,WAA1B,CAJJ;AAAA,aAKO,OALP;AAMI,iBAAQ,SAAA,GAAS,QAAT,GAAkB,UAA1B,CANJ;AAAA,aAOO,MAPP;AAQI,iBAAQ,SAAA,GAAS,QAAT,GAAkB,WAA1B,CARJ;AAAA,OAFgB;IAAA,CApJlB,CAAA;AAAA,IAgKA,WAAA,GAAc,SAAC,GAAD,GAAA;AACZ,UAAA,SAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,MAAX,CAAkB,GAAlB,CAAP,CAAA;AAAA,MACA,GAAG,CAAC,KAAJ,CAAU,CAAC,CAAD,EAAG,GAAH,CAAV,CADA,CAAA;AAAA,MAEA,IAAI,CAAC,IAAL,CAAU,GAAG,CAAC,IAAJ,CAAA,CAAV,CAFA,CAAA;AAIA,MAAA,IAAG,GAAG,CAAC,gBAAJ,CAAA,CAAH;AACE,QAAA,IAAI,CAAC,SAAL,CAAe,MAAf,CACA,CAAC,IADD,CACM;AAAA,UAAC,EAAA,EAAG,QAAJ;SADN,CAEA,CAAC,IAFD,CAEM,WAFN,EAEmB,eAAA,CAAgB,GAAhB,CAFnB,CAGA,CAAC,KAHD,CAGO,aAHP,EAGsB,gBAAA,CAAiB,GAAjB,CAHtB,CAAA,CADF;OAJA;AAAA,MASA,IAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,CAAC,KAAvB,CAA6B,GAAG,CAAC,cAAJ,CAAA,CAA7B,CATA,CAAA;AAAA,MAWA,GAAA,GAAM,IAAI,CAAC,IAAL,CAAA,CAAW,CAAC,OAAZ,CAAA,CAXN,CAAA;AAAA,MAYA,IAAI,CAAC,MAAL,CAAA,CAZA,CAAA;AAaA,aAAO,GAAP,CAdY;IAAA,CAhKd,CAAA;AAAA,IAgLA,QAAA,GAAW,SAAC,GAAD,GAAA;AACT,UAAA,IAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,MAAX,CAAmB,0BAAA,GAAyB,CAAC,GAAG,CAAC,UAAJ,CAAA,CAAD,CAA5C,CAAP,CAAA;AACA,MAAA,IAAG,IAAI,CAAC,KAAL,CAAA,CAAH;AACE,QAAA,IAAA,GAAO,UAAU,CAAC,MAAX,CAAkB,GAAlB,EAAsB,gBAAtB,CAAuC,CAAC,IAAxC,CAA6C,OAA7C,EAAsD,yBAAA,GAA4B,GAAG,CAAC,UAAJ,CAAA,CAAlF,CAAP,CAAA;AAAA,QACA,IAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,CAAC,IAApB,CAAyB,OAAzB,EAAkC,gCAAA,GAA+B,CAAC,GAAG,CAAC,UAAJ,CAAA,CAAD,CAAjE,CACE,CAAC,KADH,CACS;AAAA,UAAC,OAAA,EAAS,CAAV;AAAA,UAAa,gBAAA,EAAkB,MAA/B;SADT,CADA,CADF;OADA;AAAA,MAKA,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA2B,SAA3B,CAAqC,CAAC,IAAtC,CAA2C,GAAG,CAAC,IAAJ,CAAA,CAA3C,CALA,CAAA;AAOA,MAAA,IAAG,GAAG,CAAC,gBAAJ,CAAA,CAAH;eACE,IAAI,CAAC,SAAL,CAAgB,YAAA,GAAW,CAAC,GAAG,CAAC,UAAJ,CAAA,CAAD,CAAX,GAA6B,qBAA7C,CACE,CAAC,IADH,CACQ;AAAA,UAAC,EAAA,EAAG,QAAJ;SADR,CAEE,CAAC,IAFH,CAEQ,WAFR,EAEqB,SAAC,CAAD,GAAA;iBAAM,eAAA,CAAgB,GAAhB,EAAN;QAAA,CAFrB,CAGE,CAAC,KAHH,CAGS,aAHT,EAGwB,gBAAA,CAAiB,GAAjB,CAHxB,CAIE,CAAC,KAJH,CAIS,gBAJT,EAI2B,MAJ3B,CAKE,CAAC,KALH,CAKS,GAAG,CAAC,cAAJ,CAAA,CALT,EADF;OAAA,MAAA;eAQE,IAAI,CAAC,SAAL,CAAgB,YAAA,GAAW,CAAC,GAAG,CAAC,UAAJ,CAAA,CAAD,CAAX,GAA6B,qBAA7C,CACE,CAAC,IADH,CACQ,WADR,EACqB,IADrB,CAEE,CAAC,KAFH,CAES,gBAFT,EAE2B,MAF3B,CAGE,CAAC,KAHH,CAGS,GAAG,CAAC,cAAJ,CAAA,CAHT,EARF;OARS;IAAA,CAhLX,CAAA;AAAA,IAqMA,WAAA,GAAc,SAAC,MAAD,GAAA;aACZ,UAAU,CAAC,MAAX,CAAmB,0BAAA,GAA0B,MAA1B,GAAiC,mCAAjC,GAAoE,MAAvF,CAAgG,CAAC,MAAjG,CAAA,EADY;IAAA,CArMd,CAAA;AAAA,IAwMA,YAAA,GAAe,SAAC,MAAD,GAAA;aACb,UAAU,CAAC,MAAX,CAAmB,2BAAA,GAA2B,MAA9C,CAAuD,CAAC,MAAxD,CAAA,EADa;IAAA,CAxMf,CAAA;AAAA,IA2MA,QAAA,GAAW,SAAC,CAAD,EAAI,WAAJ,GAAA;AACT,UAAA,oDAAA;AAAA,MAAA,QAAA,GAAc,WAAH,GAAoB,CAApB,GAA2B,SAAtC,CAAA;AAAA,MACA,IAAA,GAAO,CAAC,CAAC,IAAF,CAAA,CADP,CAAA;AAAA,MAEA,UAAA,GAAa,CAAC,CAAC,IAAF,CAAA,CAAQ,CAAC,UAAT,CAAA,CAFb,CAAA;AAGA,MAAA,IAAG,CAAA,UAAH;AACE,QAAA,KAAA,GAAW,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,KAAV,CAAA,CAAtB,GAA6C,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,KAAV,CAAA,CAArD,CADF;OAAA,MAAA;AAGE,QAAA,KAAA,GAAQ,UAAR,CAHF;OAHA;AAAA,MAOA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAP9D,CAAA;AAAA,MAQA,SAAA,GAAY,SAAS,CAAC,SAAV,CAAqB,0BAAA,GAA0B,IAA/C,CAAsD,CAAC,IAAvD,CAA4D,KAA5D,EAAmE,SAAC,CAAD,GAAA;eAAO,EAAP;MAAA,CAAnE,CARZ,CAAA;AAAA,MASA,SAAS,CAAC,KAAV,CAAA,CAAiB,CAAC,MAAlB,CAAyB,MAAzB,CAAgC,CAAC,IAAjC,CAAsC,OAAtC,EAAgD,yBAAA,GAAyB,IAAzE,CACE,CAAC,KADH,CACS,gBADT,EAC2B,MAD3B,CAEE,CAAC,KAFH,CAES,SAFT,EAEmB,CAFnB,CATA,CAAA;AAAA,MAYA,SAAS,CAAC,KAAV,CAAgB,CAAC,CAAC,SAAF,CAAA,CAAhB,CAZA,CAAA;AAaA,MAAA,IAAG,IAAA,KAAQ,GAAX;AACE,QAAA,SAAS,CAAC,UAAV,CAAA,CAAsB,CAAC,QAAvB,CAAgC,QAAhC,CACE,CAAC,IADH,CACQ;AAAA,UACJ,EAAA,EAAI,WADA;AAAA,UAEJ,EAAA,EAAI,WAAA,GAAc,WAAA,GAAc,CAF5B;AAAA,UAGJ,EAAA,EAAG,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,CAAC,CAAC,SAAF,CAAA,CAAH;qBAAsB,CAAA,GAAI,OAA1B;aAAA,MAAA;qBAAsC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,EAAtC;aAAP;UAAA,CAHC;AAAA,UAIJ,EAAA,EAAG,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,CAAC,CAAC,SAAF,CAAA,CAAH;qBAAsB,CAAA,GAAI,OAA1B;aAAA,MAAA;qBAAsC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,EAAtC;aAAP;UAAA,CAJC;SADR,CAOE,CAAC,KAPH,CAOS,SAPT,EAOmB,CAPnB,CAAA,CADF;OAAA,MAAA;AAUE,QAAA,SAAS,CAAC,UAAV,CAAA,CAAsB,CAAC,QAAvB,CAAgC,QAAhC,CACE,CAAC,IADH,CACQ;AAAA,UACJ,EAAA,EAAI,WADA;AAAA,UAEJ,EAAA,EAAI,YAAA,GAAe,WAAA,GAAc,CAF7B;AAAA,UAGJ,EAAA,EAAG,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,CAAC,CAAC,SAAF,CAAA,CAAH;qBAAsB,CAAA,GAAI,OAA1B;aAAA,MAAA;qBAAsC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,EAAtC;aAAP;UAAA,CAHC;AAAA,UAIJ,EAAA,EAAG,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,CAAC,CAAC,SAAF,CAAA,CAAH;qBAAsB,CAAA,GAAI,OAA1B;aAAA,MAAA;qBAAsC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,EAAtC;aAAP;UAAA,CAJC;SADR,CAOA,CAAC,KAPD,CAOO,SAPP,EAOiB,CAPjB,CAAA,CAVF;OAbA;aA+BA,SAAS,CAAC,IAAV,CAAA,CAAgB,CAAC,UAAjB,CAAA,CAA6B,CAAC,QAA9B,CAAuC,QAAvC,CAAgD,CAAC,KAAjD,CAAuD,SAAvD,EAAiE,CAAjE,CAAmE,CAAC,MAApE,CAAA,EAhCS;IAAA,CA3MX,CAAA;AAAA,IAgPA,cAAA,GAAiB,SAAA,GAAA;AACf,UAAA,KAAA;AAAA,MAAA,aAAA,GAAgB,iBAAiB,CAAC,MAAlB,CAAyB,KAAzB,CAA+B,CAAC,IAAhC,CAAqC,OAArC,EAA8C,UAA9C,CAAhB,CAAA;AAAA,MACA,IAAA,GAAO,aAAa,CAAC,MAAd,CAAqB,KAArB,CAA2B,CAAC,IAA5B,CAAiC,OAAjC,EAA0C,UAA1C,CADP,CAAA;AAAA,MAEA,KAAA,GAAQ,IAAI,CAAC,MAAL,CAAY,MAAZ,CAFR,CAAA;AAAA,MAGA,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,SAAb,GAAyB,gBAAgB,CAAC,cAAjB,CAAA,CAHzB,CAAA;AAAA,MAIA,KAAK,CAAC,MAAN,CAAa,UAAb,CAAwB,CAAC,IAAzB,CAA8B,IAA9B,EAAqC,gBAAA,GAAgB,YAArD,CAAoE,CAAC,MAArE,CAA4E,MAA5E,CAJA,CAAA;AAAA,MAMA,UAAA,GAAY,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,CAAC,IAAjB,CAAsB,OAAtB,EAA8B,oBAA9B,CANZ,CAAA;AAAA,MASA,SAAA,GAAY,UAAU,CAAC,MAAX,CAAkB,GAAlB,CAAsB,CAAC,IAAvB,CAA4B,OAA5B,EAAqC,qBAArC,CATZ,CAAA;AAAA,MAUA,UAAA,GAAa,UAAU,CAAC,MAAX,CAAkB,GAAlB,CAAsB,CAAC,IAAvB,CAA4B,OAA5B,EAAqC,eAArC,CAVb,CAAA;AAAA,MAWA,UAAU,CAAC,MAAX,CAAkB,MAAlB,CAAyB,CAAC,KAA1B,CAAgC,YAAhC,EAA8C,QAA9C,CAAuD,CAAC,IAAxD,CAA6D,OAA7D,EAAsE,qBAAtE,CAA4F,CAAC,KAA7F,CAAmG;AAAA,QAAC,IAAA,EAAK,YAAN;OAAnG,CAXA,CAAA;aAaA,UAAU,CAAC,MAAX,CAAkB,GAAlB,CAAsB,CAAC,IAAvB,CAA4B,OAA5B,EAAoC,sBAApC,EAde;IAAA,CAhPjB,CAAA;AAAA,IAoQA,EAAE,CAAC,cAAH,GAAoB,SAAC,IAAD,EAAO,WAAP,GAAA;AAClB,UAAA,0OAAA;AAAA,MAAA,MAAA,GAAS,iBAAiB,CAAC,IAAlB,CAAA,CAAwB,CAAC,qBAAzB,CAAA,CAAT,CAAA;AAAA,MACA,SAAA,GAAe,WAAH,GAAoB,CAApB,GAA2B,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,iBAAX,CAAA,CADvC,CAAA;AAAA,MAEA,OAAA,GAAU,MAAM,CAAC,MAFjB,CAAA;AAAA,MAGA,MAAA,GAAS,MAAM,CAAC,KAHhB,CAAA;AAAA,MAIA,eAAA,GAAkB,aAAA,CAAc,MAAM,CAAC,KAAP,CAAA,CAAd,EAA8B,MAAM,CAAC,QAAP,CAAA,CAA9B,CAJlB,CAAA;AAAA,MAQA,QAAA,GAAW;AAAA,QAAC,GAAA,EAAI;AAAA,UAAC,MAAA,EAAO,CAAR;AAAA,UAAW,KAAA,EAAM,CAAjB;SAAL;AAAA,QAAyB,MAAA,EAAO;AAAA,UAAC,MAAA,EAAO,CAAR;AAAA,UAAW,KAAA,EAAM,CAAjB;SAAhC;AAAA,QAAoD,IAAA,EAAK;AAAA,UAAC,MAAA,EAAO,CAAR;AAAA,UAAW,KAAA,EAAM,CAAjB;SAAzD;AAAA,QAA6E,KAAA,EAAM;AAAA,UAAC,MAAA,EAAO,CAAR;AAAA,UAAW,KAAA,EAAM,CAAjB;SAAnF;OARX,CAAA;AAAA,MASA,WAAA,GAAc;AAAA,QAAC,GAAA,EAAI,CAAL;AAAA,QAAQ,MAAA,EAAO,CAAf;AAAA,QAAkB,IAAA,EAAK,CAAvB;AAAA,QAA0B,KAAA,EAAM,CAAhC;OATd,CAAA;AAAA,MAUA,aAAA,GAAgB;AAAA,QAAC,KAAA,EAAM,CAAP;AAAA,QAAU,MAAA,EAAO,CAAjB;OAVhB,CAAA;AAAA,MAWA,UAAA,GAAa,EAXb,CAAA;AAYA,WAAA,+CAAA;yBAAA;AACE,QAAA,IAAG,CAAC,CAAC,cAAF,CAAA,CAAH;AACE,UAAA,UAAW,CAAA,CAAC,CAAC,cAAF,CAAA,CAAA,CAAX,GAAiC,IAAjC,CADF;SADF;AAAA,OAZA;AAkBA;AAAA,WAAA,SAAA;oBAAA;AACE,QAAA,IAAG,CAAA,CAAK,CAAC,WAAF,CAAA,CAAP;AACE,UAAA,IAAG,CAAC,CAAC,QAAF,CAAA,CAAH;AACE,YAAA,CAAC,CAAC,IAAF,CAAA,CAAQ,CAAC,KAAT,CAAe,CAAC,CAAC,KAAF,CAAA,CAAf,CAAyB,CAAC,MAA1B,CAAiC,CAAC,CAAC,UAAF,CAAA,CAAjC,CAAA,CAAA;AAAA,YACA,IAAA,GAAO,UAAU,CAAC,MAAX,CAAmB,0BAAA,GAAyB,CAAC,CAAC,CAAC,UAAF,CAAA,CAAD,CAA5C,CADP,CAAA;AAAA,YAEA,QAAS,CAAA,CAAC,CAAC,UAAF,CAAA,CAAA,CAAT,GAA2B,WAAA,CAAY,CAAZ,CAF3B,CAAA;AAAA,YAIA,KAAA,GAAQ,UAAU,CAAC,MAAX,CAAmB,2BAAA,GAA0B,CAAC,CAAC,CAAC,UAAF,CAAA,CAAD,CAA7C,CAJR,CAAA;AAKA,YAAA,IAAG,CAAC,CAAC,SAAF,CAAA,CAAH;AACE,cAAA,IAAG,KAAK,CAAC,KAAN,CAAA,CAAH;AACE,gBAAA,KAAA,GAAQ,UAAU,CAAC,MAAX,CAAkB,GAAlB,EAAuB,gBAAvB,CAAwC,CAAC,IAAzC,CAA8C,OAA9C,EAAuD,0BAAA,GAA8B,CAAC,CAAC,UAAF,CAAA,CAArF,CAAR,CADF;eAAA;AAAA,cAEA,WAAY,CAAA,CAAC,CAAC,UAAF,CAAA,CAAA,CAAZ,GAA8B,mBAAA,CAAoB,KAApB,EAA2B,CAAC,CAAC,SAAF,CAAA,CAA3B,EAA0C,+BAAA,GAAkC,CAAC,CAAC,UAAF,CAAA,CAA5E,EAA4F,CAAC,CAAC,cAAF,CAAA,CAA5F,CAF9B,CADF;aAAA,MAAA;AAKE,cAAA,KAAK,CAAC,MAAN,CAAA,CAAA,CALF;aANF;WAAA;AAeA,UAAA,IAAG,UAAW,CAAA,CAAC,CAAC,IAAF,CAAA,CAAA,CAAd;AACE,YAAA,IAAG,CAAC,CAAC,YAAF,CAAA,CAAH;AACE,cAAA,cAAA,GAAiB,cAAc,CAAC,gBAAgB,CAAC,GAAhC,GAAsC,WAAA,CAAY,CAAC,CAAC,cAAF,CAAiB,IAAjB,CAAZ,EAAqC,UAArC,EAAiD,qBAAjD,EAAwE,CAAC,CAAC,cAAF,CAAA,CAAxE,CAA2F,CAAC,KAAnJ,CADF;aAAA,MAAA;AAGE,cAAA,eAAA,GAAkB,cAAc,CAAC,gBAAgB,CAAC,IAAhC,GAAuC,WAAA,CAAY,CAAC,CAAC,cAAF,CAAiB,IAAjB,CAAZ,EAAoC,UAApC,EAAgD,qBAAhD,EAAuE,CAAC,CAAC,cAAF,CAAA,CAAvE,CAA0F,CAAC,MAApJ,CAHF;aADF;WAhBF;SADF;AAAA,OAlBA;AAAA,MA0CA,YAAA,GAAe,eAAA,GAAkB,QAAQ,CAAC,GAAG,CAAC,MAA/B,GAAwC,WAAW,CAAC,GAApD,GAA0D,QAAQ,CAAC,MAAM,CAAC,MAA1E,GAAmF,WAAW,CAAC,MAA/F,GAAwG,OAAO,CAAC,GAAhH,GAAsH,OAAO,CAAC,MA1C7I,CAAA;AAAA,MA4CA,WAAA,GAAc,QAAQ,CAAC,KAAK,CAAC,KAAf,GAAuB,WAAW,CAAC,KAAnC,GAA2C,QAAQ,CAAC,IAAI,CAAC,KAAzD,GAAiE,WAAW,CAAC,IAA7E,GAAoF,OAAO,CAAC,IAA5F,GAAmG,OAAO,CAAC,KA5CzH,CAAA;AA8CA,MAAA,IAAG,YAAA,GAAe,OAAlB;AACE,QAAA,YAAA,GAAe,OAAA,GAAU,YAAzB,CADF;OAAA,MAAA;AAGE,QAAA,YAAA,GAAe,CAAf,CAHF;OA9CA;AAmDA,MAAA,IAAG,WAAA,GAAc,MAAjB;AACE,QAAA,WAAA,GAAc,MAAA,GAAS,WAAvB,CADF;OAAA,MAAA;AAGE,QAAA,WAAA,GAAc,CAAd,CAHF;OAnDA;AA2DA;AAAA,WAAA,UAAA;qBAAA;AACE,QAAA,IAAG,CAAA,CAAK,CAAC,WAAF,CAAA,CAAP;AACE,UAAA,IAAG,CAAC,CAAC,IAAF,CAAA,CAAA,KAAY,GAAf;AACE,YAAA,IAAG,UAAU,CAAC,CAAd;AACE,cAAA,CAAC,CAAC,KAAF,CAAW,CAAC,CAAC,OAAF,CAAA,CAAH,GAAqB,CAAC,WAAA,GAAc,WAAd,GAA4B,cAA7B,EAA6C,WAA7C,CAArB,GAAoF,CAAC,WAAD,EAAc,WAAA,GAAc,WAAd,GAA2B,cAAzC,CAA5F,CAAA,CADF;aAAA,MAAA;AAGE,cAAA,CAAC,CAAC,KAAF,CAAW,CAAC,CAAC,OAAF,CAAA,CAAH,GAAqB,CAAC,WAAA,GAAc,WAAf,EAA4B,WAA5B,CAArB,GAAmE,CAAC,WAAD,EAAc,WAAA,GAAc,WAA5B,CAA3E,CAAA,CAHF;aADF;WAAA,MAKK,IAAG,CAAC,CAAC,IAAF,CAAA,CAAA,KAAY,GAAf;AACH,YAAA,IAAG,UAAU,CAAC,CAAd;AACE,cAAA,CAAC,CAAC,KAAF,CAAW,CAAC,CAAC,OAAF,CAAA,CAAH,GAAqB,CAAC,eAAA,GAAkB,WAAnB,EAAgC,YAAA,GAAe,WAA/C,CAArB,GAAsF,CAAC,YAAA,GAAe,WAAhB,EAA6B,eAAA,GAAkB,WAA/C,CAA9F,CAAA,CADF;aAAA,MAAA;AAGE,cAAA,CAAC,CAAC,KAAF,CAAW,CAAC,CAAC,OAAF,CAAA,CAAH,GAAqB,CAAC,WAAD,EAAc,YAAA,GAAe,WAA7B,CAArB,GAAqE,CAAC,YAAA,GAAe,WAAhB,EAA6B,WAA7B,CAA7E,CAAA,CAHF;aADG;WALL;AAUA,UAAA,IAAG,CAAC,CAAC,QAAF,CAAA,CAAH;AACE,YAAA,QAAA,CAAS,CAAT,CAAA,CADF;WAXF;SADF;AAAA,OA3DA;AAAA,MA4EA,UAAA,GAAa,QAAQ,CAAC,IAAI,CAAC,KAAd,GAAsB,WAAW,CAAC,IAAlC,GAAyC,OAAO,CAAC,IA5E9D,CAAA;AAAA,MA6EA,SAAA,GAAY,eAAA,GAAkB,QAAQ,CAAC,GAAG,CAAC,MAA/B,GAAyC,WAAW,CAAC,GAArD,GAA2D,OAAO,CAAC,GA7E/E,CAAA;AAAA,MA+EA,gBAAA,GAAmB,UAAU,CAAC,IAAX,CAAgB,WAAhB,EAA8B,YAAA,GAAY,UAAZ,GAAuB,IAAvB,GAA2B,SAA3B,GAAqC,GAAnE,CA/EnB,CAAA;AAAA,MAgFA,IAAI,CAAC,MAAL,CAAa,iBAAA,GAAiB,YAAjB,GAA8B,OAA3C,CAAkD,CAAC,IAAnD,CAAwD,OAAxD,EAAiE,WAAjE,CAA6E,CAAC,IAA9E,CAAmF,QAAnF,EAA6F,YAA7F,CAhFA,CAAA;AAAA,MAiFA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAS,WAAT,EAAsB,YAAtB,CAjFV,CAAA;AAAA,MAkFA,IAAI,CAAC,SAAL,CAAe,gBAAf,CAAgC,CAAC,IAAjC,CAAsC;AAAA,QAAC,GAAA,EAAI,CAAA,OAAL;AAAA,QAAe,CAAA,EAAE,CAAA,OAAjB;AAAA,QAA2B,MAAA,EAAO,OAAA,GAAU,CAA5C;AAAA,QAA+C,KAAA,EAAO,OAAA,GAAU,CAAhE;OAAtC,CAlFA,CAAA;AAAA,MAmFA,gBAAgB,CAAC,MAAjB,CAAwB,qCAAxB,CAA8D,CAAC,IAA/D,CAAoE,OAApE,EAA6E,WAA7E,CAAyF,CAAC,IAA1F,CAA+F,QAA/F,EAAyG,YAAzG,CAnFA,CAAA;AAAA,MAoFA,gBAAgB,CAAC,MAAjB,CAAwB,gBAAxB,CAAyC,CAAC,KAA1C,CAAgD,WAAhD,EAA8D,qBAAA,GAAqB,YAArB,GAAkC,GAAhG,CApFA,CAAA;AAAA,MAsFA,UAAU,CAAC,SAAX,CAAqB,+BAArB,CAAqD,CAAC,IAAtD,CAA2D,WAA3D,EAAyE,YAAA,GAAY,WAAZ,GAAwB,MAAjG,CAtFA,CAAA;AAAA,MAuFA,UAAU,CAAC,SAAX,CAAqB,gCAArB,CAAsD,CAAC,IAAvD,CAA4D,WAA5D,EAA0E,eAAA,GAAe,YAAf,GAA4B,GAAtG,CAvFA,CAAA;AAAA,MAyFA,UAAU,CAAC,MAAX,CAAkB,+BAAlB,CAAkD,CAAC,IAAnD,CAAwD,WAAxD,EAAsE,YAAA,GAAW,CAAC,CAAA,QAAS,CAAC,IAAI,CAAC,KAAf,GAAqB,WAAW,CAAC,IAAZ,GAAmB,CAAzC,CAAX,GAAuD,IAAvD,GAA0D,CAAC,YAAA,GAAa,CAAd,CAA1D,GAA0E,eAAhJ,CAzFA,CAAA;AAAA,MA0FA,UAAU,CAAC,MAAX,CAAkB,gCAAlB,CAAmD,CAAC,IAApD,CAAyD,WAAzD,EAAuE,YAAA,GAAW,CAAC,WAAA,GAAY,QAAQ,CAAC,KAAK,CAAC,KAA3B,GAAmC,WAAW,CAAC,KAAZ,GAAoB,CAAxD,CAAX,GAAqE,IAArE,GAAwE,CAAC,YAAA,GAAa,CAAd,CAAxE,GAAwF,cAA/J,CA1FA,CAAA;AAAA,MA2FA,UAAU,CAAC,MAAX,CAAkB,8BAAlB,CAAiD,CAAC,IAAlD,CAAuD,WAAvD,EAAqE,YAAA,GAAW,CAAC,WAAA,GAAc,CAAf,CAAX,GAA4B,IAA5B,GAA+B,CAAC,CAAA,QAAS,CAAC,GAAG,CAAC,MAAd,GAAuB,WAAW,CAAC,GAAZ,GAAkB,CAA1C,CAA/B,GAA4E,GAAjJ,CA3FA,CAAA;AAAA,MA4FA,UAAU,CAAC,MAAX,CAAkB,iCAAlB,CAAoD,CAAC,IAArD,CAA0D,WAA1D,EAAwE,YAAA,GAAW,CAAC,WAAA,GAAc,CAAf,CAAX,GAA4B,IAA5B,GAA+B,CAAC,YAAA,GAAe,QAAQ,CAAC,MAAM,CAAC,MAA/B,GAAwC,WAAW,CAAC,MAArD,CAA/B,GAA4F,GAApK,CA5FA,CAAA;AAAA,MA8FA,UAAU,CAAC,SAAX,CAAqB,sBAArB,CAA4C,CAAC,IAA7C,CAAkD,WAAlD,EAAgE,YAAA,GAAW,CAAC,WAAA,GAAY,CAAb,CAAX,GAA0B,IAA1B,GAA6B,CAAC,CAAA,SAAA,GAAa,YAAd,CAA7B,GAAwD,GAAxH,CA9FA,CAAA;AAkGA;AAAA,WAAA,UAAA;qBAAA;AACE,QAAA,IAAG,CAAA,CAAK,CAAC,WAAF,CAAA,CAAP;AACE,UAAA,IAAG,CAAC,CAAC,QAAF,CAAA,CAAA,IAAiB,CAAC,CAAC,QAAF,CAAA,CAApB;AACE,YAAA,QAAA,CAAS,CAAT,CAAA,CADF;WADF;SADF;AAAA,OAlGA;AAAA,MAyGA,aAAa,CAAC,KAAd,CAAoB,MAAM,CAAC,eAAP,CAAA,CAApB,CAzGA,CAAA;AAAA,MA2GA,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,SAAlB,CAA4B,UAA5B,CA3GA,CAAA;AAAA,MA4GA,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,SAAlB,CAA4B,UAA5B,CA5GA,CAAA;aAgHA,OAAO,CAAC,OAAR,CAAgB,UAAU,CAAC,IAAX,CAAA,CAAhB,CAAkC,CAAC,EAAnC,CAAsC,UAAtC,EAAkD,SAAA,GAAA;AAChD,QAAA,IAAI,CAAC,GAAL,CAAS,+BAAT,EAA0C,UAAU,CAAC,IAAX,CAAgB,OAAhB,CAA1C,CAAA,CAAA;AAAA,QACA,UAAU,CAAC,EAAX,CAAc,UAAd,EAA0B,IAA1B,CADA,CAAA;AAAA,QAEA,UAAU,CAAC,EAAX,CAAc,QAAd,EAAwB,IAAxB,CAFA,CAAA;AAAA,QAGA,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,SAAlB,CAA4B,MAA5B,CAHA,CAAA;AAAA,QAIA,SAAA,GAAY,MAJZ,CAAA;AAAA,QAKA,QAAA,GAAW,MALX,CAAA;eAMA,aAAA,GAAgB,OAPgC;MAAA,CAAlD,EAjHkB;IAAA,CApQpB,CAAA;AAAA,IAiYA,EAAE,CAAC,cAAH,GAAoB,SAAC,KAAD,GAAA;AAClB,UAAA,CAAA;AAAA,MAAA,IAAG,KAAK,CAAC,QAAN,CAAA,CAAH;AACE,QAAA,CAAA,GAAI,gBAAgB,CAAC,MAAjB,CAAyB,0BAAA,GAAyB,CAAC,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,MAAb,CAAA,CAAD,CAAlD,CAAJ,CAAA;AAAA,QACA,CAAC,CAAC,IAAF,CAAO,KAAK,CAAC,IAAN,CAAA,CAAP,CADA,CAAA;AAGA,QAAA,IAAG,KAAK,CAAC,QAAN,CAAA,CAAH;AACE,UAAA,QAAA,CAAS,KAAT,EAAgB,IAAhB,CAAA,CADF;SAJF;OAAA;AAMA,aAAO,EAAP,CAPkB;IAAA,CAjYpB,CAAA;AA0YA,WAAO,EAAP,CA5YU;EAAA,CAFZ,CAAA;AAgZA,SAAO,SAAP,CAlZ8C;AAAA,CAAhD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,QAAnC,EAA6C,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,MAAzB,GAAA;AAE3C,MAAA,kBAAA;AAAA,EAAA,UAAA,GAAa,CAAb,CAAA;AAAA,EAEA,MAAA,GAAS,SAAA,GAAA;AACP,QAAA,sHAAA;AAAA,IAAA,GAAA,GAAO,QAAA,GAAO,CAAC,UAAA,EAAD,CAAd,CAAA;AAAA,IACA,UAAA,GAAa,MADb,CAAA;AAAA,IAEA,KAAA,GAAQ,MAFR,CAAA;AAAA,IAGA,MAAA,GAAS,MAHT,CAAA;AAAA,IAIA,UAAA,GAAa,SAAA,CAAA,CAJb,CAAA;AAAA,IAKA,WAAA,GAAc,KALd,CAAA;AAAA,IAMA,gBAAA,GAAmB,EAAE,CAAC,QAAH,CAAY,WAAZ,EAAyB,WAAzB,EAAsC,aAAtC,EAAqD,OAArD,EAA8D,QAA9D,EAAwE,UAAxE,EAAoF,QAApF,EAA8F,aAA9F,EAA6G,WAA7G,EAA0H,SAA1H,EAAqI,iBAArI,EAAwJ,qBAAxJ,EAA+K,mBAA/K,CANnB,CAAA;AAAA,IAQA,EAAA,GAAK,SAAA,GAAA,CARL,CAAA;AAAA,IAUA,EAAE,CAAC,EAAH,GAAQ,SAAC,EAAD,GAAA;AACN,aAAO,GAAP,CADM;IAAA,CAVR,CAAA;AAAA,IAaA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,KAAT,CAAA;AAAA,QACA,UAAU,CAAC,YAAX,CAAwB,KAAK,CAAC,MAAN,CAAA,CAAxB,CADA,CAAA;AAAA,QAEA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,YAAA,GAAW,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAAlC,EAA8C,SAAA,GAAA;iBAAM,gBAAgB,CAAC,SAAS,CAAC,KAA3B,CAAiC,EAAE,CAAC,MAAH,CAAA,CAAjC,EAAN;QAAA,CAA9C,CAFA,CAAA;AAAA,QAGA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,YAAA,GAAW,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAAlC,EAA8C,EAAE,CAAC,IAAjD,CAHA,CAAA;AAAA,QAIA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,cAAA,GAAa,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAApC,EAAgD,EAAE,CAAC,WAAnD,CAJA,CAAA;AAAA,QAMA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,uBAAA,GAAsB,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAA7C,EAAyD,EAAE,CAAC,mBAA5D,CANA,CAAA;AAAA,QAOA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,qBAAA,GAAoB,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAA3C,EAAuD,EAAE,CAAC,iBAA1D,CAPA,CAAA;AAAA,QAQA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,UAAA,GAAS,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAAhC,EAA4C,SAAA,GAAA;AAC1C,UAAA,gBAAgB,CAAC,OAAjB,CAAA,CAAA,CAAA;iBACA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,GAAA,GAAE,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAAzB,EAAqC,IAArC,EAF0C;QAAA,CAA5C,CARA,CAAA;AAWA,eAAO,EAAP,CAbF;OADS;IAAA,CAbX,CAAA;AAAA,IA6BA,EAAE,CAAC,MAAH,GAAY,SAAA,GAAA;AACV,aAAO,UAAP,CADU;IAAA,CA7BZ,CAAA;AAAA,IAgCA,EAAE,CAAC,eAAH,GAAqB,SAAA,GAAA;AACnB,aAAO,EAAE,CAAC,MAAH,CAAA,CAAW,CAAC,kBAAZ,CAAA,CAAP,CADmB;IAAA,CAhCrB,CAAA;AAAA,IAmCA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,UAAA,GAAa,GAAb,CAAA;AACA,eAAO,EAAP,CAHF;OADa;IAAA,CAnCf,CAAA;AAAA,IAyCA,EAAE,CAAC,cAAH,GAAoB,SAAC,SAAD,GAAA;AAClB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,WAAA,GAAc,SAAd,CAAA;AACA,eAAO,EAAP,CAHF;OADkB;IAAA,CAzCpB,CAAA;AAAA,IA+CA,eAAA,GAAkB;AAAA,MAAC,WAAA,EAAY,OAAb;KA/ClB,CAAA;AAAA,IAgDA,EAAE,CAAC,cAAH,GAAoB,SAAC,GAAD,GAAA;AAClB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,eAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;AACE,QAAA,CAAC,CAAC,MAAF,CAAS,eAAT,EAA0B,GAA1B,CAAA,CADF;OADA;AAGA,aAAO,EAAP,CAJkB;IAAA,CAhDpB,CAAA;AAAA,IAsDA,EAAE,CAAC,QAAH,GAAc,SAAA,GAAA;aACZ,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,QAAX,CAAA,EADY;IAAA,CAtDd,CAAA;AAAA,IAyDA,EAAE,CAAC,WAAH,GAAiB,SAAC,IAAD,GAAA;AACf,UAAA,0BAAA;AAAA,MAAA,IAAA,GAAO,EAAP,CAAA;AACA;AAAA,WAAA,2CAAA;wBAAA;AACE,QAAA,IAAI,CAAC,IAAL,CAAU,UAAU,CAAC,OAAX,CAAmB,IAAnB,CAAV,CAAA,CADF;AAAA,OADA;aAGA,gBAAgB,CAAC,WAAW,CAAC,KAA7B,CAAmC,IAAnC,EAAyC,IAAzC,EAJe;IAAA,CAzDjB,CAAA;AAAA,IA+DA,EAAE,CAAC,SAAH,GAAe,SAAA,GAAA;AACb,aAAO,gBAAP,CADa;IAAA,CA/Df,CAAA;AAAA,IAqEA,WAAA,GAAc,SAAA,GAAA;AACZ,UAAA,mBAAA;AAAA,MAAA,SAAA,GAAY,UAAU,CAAC,YAAX,CAAA,CAAZ,CAAA;AAAA,MACA,QAAA,GAAW,SAAS,CAAC,MAAV,CAAkB,GAAA,GAAE,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAApB,CADX,CAAA;AAEA,MAAA,IAAG,QAAQ,CAAC,KAAT,CAAA,CAAH;AACE,QAAA,QAAA,GAAW,SAAS,CAAC,MAAV,CAAiB,GAAjB,CAAqB,CAAC,IAAtB,CAA2B,OAA3B,EAAoC,SAAC,CAAD,GAAA;iBAAO,EAAE,CAAC,EAAH,CAAA,EAAP;QAAA,CAApC,CAAX,CADF;OAFA;AAIA,aAAO,QAAP,CALY;IAAA,CArEd,CAAA;AAAA,IA4EA,SAAA,GAAY,SAAC,IAAD,EAAO,WAAP,GAAA;AACV,UAAA,mCAAA;AAAA,MAAA,OAAA,GAAU;AAAA,QACR,MAAA,EAAO,UAAU,CAAC,MAAX,CAAA,CADC;AAAA,QAER,KAAA,EAAM,UAAU,CAAC,KAAX,CAAA,CAFE;AAAA,QAGR,OAAA,EAAQ,UAAU,CAAC,OAAX,CAAA,CAHA;AAAA,QAIR,QAAA,EAAa,WAAH,GAAoB,CAApB,GAA2B,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,iBAAX,CAAA,CAJ7B;OAAV,CAAA;AAAA,MAMA,IAAA,GAAO,CAAC,IAAD,EAAO,OAAP,CANP,CAAA;AAOA;AAAA,WAAA,2CAAA;wBAAA;AACE,QAAA,KAAA,GAAQ,UAAU,CAAC,OAAX,CAAmB,IAAnB,CAAR,CAAA;AAAA,QACA,IAAI,CAAC,IAAL,CAAU,KAAV,CADA,CADF;AAAA,OAPA;AAUA,aAAO,IAAP,CAXU;IAAA,CA5EZ,CAAA;AAAA,IA2FA,EAAE,CAAC,IAAH,GAAU,SAAC,IAAD,EAAO,WAAP,GAAA;AACR,MAAA,KAAA,GAAQ,IAAR,CAAA;AAAA,MAEA,gBAAgB,CAAC,SAAS,CAAC,KAA3B,CAAiC,WAAA,CAAA,CAAjC,EAAgD,SAAA,CAAU,IAAV,EAAgB,WAAhB,CAAhD,CAFA,CAAA;AAAA,MAIA,gBAAgB,CAAC,EAAjB,CAAqB,SAAA,GAAS,GAA9B,EAAqC,EAAE,CAAC,MAAxC,CAJA,CAAA;AAAA,MAKA,gBAAgB,CAAC,EAAjB,CAAqB,SAAA,GAAS,GAA9B,EAAqC,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,SAAX,CAAA,CAAsB,CAAC,MAA5D,CALA,CAAA;AAAA,MAMA,gBAAgB,CAAC,EAAjB,CAAqB,WAAA,GAAW,GAAhC,EAAuC,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,SAAX,CAAA,CAAsB,CAAC,QAA9D,CANA,CAAA;AAAA,MAOA,gBAAgB,CAAC,EAAjB,CAAqB,cAAA,GAAc,GAAnC,EAA0C,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,SAAX,CAAA,CAAsB,CAAC,WAAjE,CAPA,CAAA;AAAA,MASA,gBAAgB,CAAC,EAAjB,CAAqB,QAAA,GAAQ,GAA7B,EAAoC,SAAC,IAAD,EAAO,WAAP,EAAoB,QAApB,GAAA;AAChC,QAAA,UAAU,CAAC,cAAX,CAA0B,IAA1B,CAAA,CAAA;eACA,gBAAgB,CAAC,SAAS,CAAC,KAA3B,CAAiC,WAAA,CAAA,CAAjC,EAAgD,CAAC,IAAD,EAAO,QAAP,EAAiB,UAAU,CAAC,KAAX,CAAA,CAAjB,EAAqC,UAAU,CAAC,MAAX,CAAA,CAArC,CAAhD,EAFgC;MAAA,CAApC,CATA,CAAA;aAaA,gBAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;eACpC,gBAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,EADoC;MAAA,CAAtC,EAdQ;IAAA,CA3FV,CAAA;AAAA,IA4GA,EAAE,CAAC,mBAAH,GAAyB,SAAC,IAAD,GAAA;aACvB,gBAAgB,CAAC,mBAAmB,CAAC,KAArC,CAA2C,WAAA,CAAA,CAA3C,EAA0D,SAAA,CAAU,IAAV,EAAgB,IAAhB,CAA1D,EADuB;IAAA,CA5GzB,CAAA;AAAA,IA+GA,EAAE,CAAC,iBAAH,GAAuB,SAAC,IAAD,GAAA;aACrB,gBAAgB,CAAC,iBAAiB,CAAC,KAAnC,CAAyC,WAAA,CAAA,CAAzC,EAAwD,SAAA,CAAU,IAAV,EAAgB,KAAhB,CAAxD,EADqB;IAAA,CA/GvB,CAAA;AAkHA,WAAO,EAAP,CAnHO;EAAA,CAFT,CAAA;AAuHA,SAAO,MAAP,CAzH2C;AAAA,CAA7C,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,QAAnC,EAA6C,SAAC,IAAD,EAAO,QAAP,EAAiB,UAAjB,EAA6B,cAA7B,EAA6C,gBAA7C,GAAA;AAE3C,MAAA,+BAAA;AAAA,EAAA,SAAA,GAAY,CAAZ,CAAA;AAAA,EAEA,YAAA,GAAe,SAAC,GAAD,GAAA;AACb,QAAA,gBAAA;AAAA,IAAA,GAAA,GAAM,EAAN,CAAA;AACA,SAAA,0CAAA;kBAAA;AACE,MAAA,GAAI,CAAA,CAAA,CAAJ,GAAS,CAAT,CADF;AAAA,KADA;AAGA,WAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAP,CAJa;EAAA,CAFf,CAAA;AAAA,EAQA,MAAA,GAAS,SAAA,GAAA;AAEP,QAAA,kLAAA;AAAA,IAAA,GAAA,GAAO,SAAA,GAAQ,CAAC,SAAA,EAAD,CAAf,CAAA;AAAA,IACA,SAAA,GAAY,WADZ,CAAA;AAAA,IAEA,MAAA,GAAS,MAFT,CAAA;AAAA,IAGA,aAAA,GAAgB,MAHhB,CAAA;AAAA,IAIA,YAAA,GAAe,MAJf,CAAA;AAAA,IAKA,SAAA,GAAY,gBAAgB,CAAC,cAAjB,CAAA,CALZ,CAAA;AAAA,IAMA,eAAA,GAAkB,MANlB,CAAA;AAAA,IAOA,aAAA,GAAgB,MAPhB,CAAA;AAAA,IAQA,UAAA,GAAa,MARb,CAAA;AAAA,IASA,MAAA,GAAS,MATT,CAAA;AAAA,IAUA,OAAA,GAAU,MAVV,CAAA;AAAA,IAWA,KAAA,GAAQ,MAXR,CAAA;AAAA,IAYA,QAAA,GAAW,MAZX,CAAA;AAAA,IAaA,KAAA,GAAQ,KAbR,CAAA;AAAA,IAcA,WAAA,GAAc,KAdd,CAAA;AAAA,IAgBA,EAAA,GAAK,EAhBL,CAAA;AAAA,IAkBA,EAAE,CAAC,QAAH,GAAc,SAAC,GAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,SAAA,GAAY,GAAZ,CAAA;AACA,eAAO,EAAP,CAHF;OADY;IAAA,CAlBd,CAAA;AAAA,IAwBA,EAAE,CAAC,IAAH,GAAU,SAAC,GAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,KAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,IAAG,GAAA,KAAO,KAAV;AAAqB,iBAAO,EAAP,CAArB;SAAA;AAAA,QACA,KAAA,GAAQ,GADR,CAAA;AAEA,QAAA,IAAG,KAAH;AACE,UAAA,YAAA,GAAe,UAAU,CAAC,IAAX,CAAgB,IAAhB,CAAf,CAAA;AAAA,UACA,IAAI,CAAC,GAAL,CAAS,uBAAT,EAAkC,YAAY,CAAC,GAA/C,CADA,CAAA;AAAA,UAEA,eAAA,GAAkB,QAAA,CAAS,SAAT,CAAA,CAAoB,YAApB,CAFlB,CADF;SAAA,MAAA;AAKE,UAAA,IAAI,CAAC,GAAL,CAAS,yBAAT,EAAoC,YAAY,CAAC,GAAjD,CAAA,CALF;SAFA;AAQA,eAAO,EAAP,CAVF;OADQ;IAAA,CAxBV,CAAA;AAAA,IAqCA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,WAAA,GAAc,GAAd,CAAA;AACA,eAAO,EAAP,CAHF;OADc;IAAA,CArChB,CAAA;AAAA,IA2CA,EAAE,CAAC,GAAH,GAAS,SAAC,SAAD,GAAA;AACP,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,UAAA,GAAa,SAAb,CAAA;AACA,eAAO,EAAP,CAHF;OADO;IAAA,CA3CT,CAAA;AAAA,IAiDA,EAAE,CAAC,MAAH,GAAY,SAAC,MAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,OAAA,GAAU,MAAV,CAAA;AACA,eAAO,EAAP,CAHF;OADU;IAAA,CAjDZ,CAAA;AAAA,IAuDA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,KAAT,CAAA;AACA,eAAO,EAAP,CAHF;OADS;IAAA,CAvDX,CAAA;AAAA,IA6DA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,KAAT,CAAA;AACA,eAAO,EAAP,CAHF;OADS;IAAA,CA7DX,CAAA;AAAA,IAmEA,EAAE,CAAC,QAAH,GAAc,SAAC,IAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,aAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,aAAA,GAAgB,IAAhB,CAAA;AAAA,QACA,SAAA,GAAY,cAAc,CAAC,GAAf,CAAmB,aAAnB,CADZ,CAAA;AAGA,eAAO,EAAP,CALF;OADY;IAAA,CAnEd,CAAA;AAAA,IA2EA,YAAA,GAAe,EA3Ef,CAAA;AAAA,IA4EA,EAAE,CAAC,WAAH,GAAiB,SAAC,GAAD,GAAA;AACf,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,YAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;AACE,QAAA,CAAC,CAAC,MAAF,CAAS,YAAT,EAAuB,GAAvB,CAAA,CADF;OADA;AAGA,aAAO,EAAP,CAJe;IAAA,CA5EjB,CAAA;AAAA,IAkFA,EAAE,CAAC,IAAH,GAAU,SAAC,IAAD,EAAO,OAAP,GAAA;AACR,UAAA,6EAAA;AAAA,MAAA,KAAA,GAAQ,IAAR,CAAA;AAAA,MACA,QAAA,GAAW,OADX,CAAA;AAAA,MAGA,aAAA,GAAgB,UAAA,IAAc,EAAE,CAAC,MAAH,CAAU,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,MAAX,CAAA,CAAmB,CAAC,SAApB,CAAA,CAA+B,CAAC,OAAhC,CAAA,CAAV,CAAoD,CAAC,MAArD,CAA4D,WAA5D,CAH9B,CAAA;AAIA,MAAA,IAAG,EAAE,CAAC,IAAH,CAAA,CAAH;AACE,QAAA,IAAG,aAAa,CAAC,MAAd,CAAqB,kBAArB,CAAwC,CAAC,KAAzC,CAAA,CAAH;AACE,UAAA,OAAO,CAAC,OAAR,CAAgB,aAAa,CAAC,IAAd,CAAA,CAAhB,CAAqC,CAAC,MAAtC,CAA6C,eAA7C,CAAA,CADF;SAAA;AAGA,QAAA,IAAG,EAAE,CAAC,UAAH,CAAA,CAAH;AACE,UAAA,MAAA,GAAS,YAAA,CAAa,MAAM,CAAC,KAAP,CAAa,IAAb,CAAb,CAAT,CADF;SAAA,MAAA;AAGE,UAAA,MAAA,GAAS,MAAM,CAAC,SAAP,CAAiB,IAAjB,CAAT,CAHF;SAHA;AAAA,QAQA,CAAA,GAAI,MAAM,CAAC,KAAP,CAAA,CARJ,CAAA;AASA,QAAA,uCAAc,CAAE,MAAb,CAAA,CAAqB,CAAC,UAAtB,CAAA,UAAH;AACE,UAAA,CAAA,GAAI,EAAE,CAAC,MAAH,CAAA,CAAW,CAAC,MAAZ,CAAA,CAAoB,CAAC,UAArB,CAAA,CAAiC,CAAC,KAAlC,CAAA,CAAJ,CADF;SATA;AAAA,QAWA,UAAA,GAAa,MAAM,CAAC,MAAP,CAAA,CAAe,CAAC,MAAhB,CAAA,CAAwB,CAAC,OAAzB,CAAiC,OAAjC,CAAyC,CAAC,KAA1C,CAAA,CAXb,CAAA;AAYA,QAAA,IAAG,MAAM,CAAC,IAAP,CAAA,CAAA,KAAmB,OAAtB;AACE,UAAA,YAAY,CAAC,UAAb,GAA0B,MAAM,CAAC,GAAP,CAAW,SAAC,CAAD,GAAA;AACnC,gBAAA,WAAA;AAAA,YAAA,IAAA,GAAO,UAAA,CAAW,CAAX,CAAP,CAAA;AACA,YAAA,IAAG,MAAA,CAAA,IAAA,KAAe,QAAlB;AACI,cAAA,KAAA,GAAS;AAAA,gBAAC,IAAA,EAAK,IAAN;AAAA,gBAAY,MAAA,EAAO,IAAnB;eAAT,CADJ;aAAA,MAAA;AAGE,cAAA,KAAA,GAAQ,IAAR,CAAA;AAAA,cACA,KAAK,CAAC,IAAN,GAAa,IAAI,CAAC,KADlB,CAHF;aADA;mBAMA;AAAA,cAAC,KAAA,EAAM,CAAP;AAAA,cAAU,KAAA,EAAM,KAAhB;cAPmC;UAAA,CAAX,CAA1B,CADF;SAAA,MAAA;AAUE,UAAA,YAAY,CAAC,UAAb,GAA0B,MAAM,CAAC,GAAP,CAAW,SAAC,CAAD,GAAA;mBAAO;AAAA,cAAC,KAAA,EAAM,CAAP;AAAA,cAAU,IAAA,EAAK,EAAE,CAAC,GAAG,CAAC,MAAP,CAAA,CAAe,CAAC,IAAhB,CAAqB,CAAA,CAAE,CAAF,CAArB,CAA0B,CAAC,IAA3B,CAAgC,EAAhC,CAAA,CAAA,CAAf;cAAP;UAAA,CAAX,CAA1B,CAVF;SAZA;AAAA,QAuBA,YAAY,CAAC,UAAb,GAA0B,IAvB1B,CAAA;AAAA,QAwBA,YAAY,CAAC,WAAb,GAA2B,EAAE,CAAC,WAAH,CAAA,CAxB3B,CAAA;AAAA,QAyBA,YAAY,CAAC,WAAW,CAAC,QAAzB,GAAuC,UAAH,GAAmB,UAAnB,GAAmC,UAzBvE,CAAA;AA2BA,QAAA,IAAG,CAAA,UAAH;AACE,UAAA,aAAA,GAAgB,aAAa,CAAC,IAAd,CAAA,CAAoB,CAAC,qBAArB,CAAA,CAAhB,CAAA;AAAA,UACA,aAAA,GAAgB,aAAa,CAAC,MAAd,CAAqB,qCAArB,CAA2D,CAAC,IAA5D,CAAA,CAAkE,CAAC,qBAAnE,CAAA,CADhB,CAAA;AAEA;AAAA,eAAA,4CAAA;0BAAA;AACI,YAAA,YAAY,CAAC,WAAY,CAAA,CAAA,CAAzB,GAA8B,EAAA,GAAE,CAAC,IAAI,CAAC,GAAL,CAAS,aAAc,CAAA,CAAA,CAAd,GAAmB,aAAc,CAAA,CAAA,CAA1C,CAAD,CAAF,GAAiD,IAA/E,CADJ;AAAA,WAHF;SA3BA;AAAA,QAgCA,YAAY,CAAC,KAAb,GAAqB,MAhCrB,CADF;OAAA,MAAA;AAmCE,QAAA,eAAe,CAAC,MAAhB,CAAA,CAAA,CAnCF;OAJA;AAwCA,aAAO,EAAP,CAzCQ;IAAA,CAlFV,CAAA;AAAA,IA+HA,EAAE,CAAC,QAAH,GAAc,SAAC,MAAD,GAAA;AACZ,MAAA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,YAAA,GAAY,GAAnC,EAA0C,EAAE,CAAC,IAA7C,CAAA,CAAA;AAAA,MACA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,UAAA,GAAU,GAAjC,EAAwC,SAAA,GAAA;AACtC,QAAA,YAAY,CAAC,QAAb,CAAA,CAAA,CAAA;AAAA,QACA,eAAe,CAAC,MAAhB,CAAA,CADA,CAAA;AAAA,QAEA,eAAA,GAAkB,MAFlB,CAAA;AAAA,QAGA,aAAA,GAAgB,MAHhB,CAAA;AAAA,QAIA,UAAA,GAAa,MAJb,CAAA;eAKA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,GAAA,GAAG,GAA1B,EAAiC,IAAjC,EANsC;MAAA,CAAxC,CADA,CAAA;AAQA,aAAO,EAAP,CATY;IAAA,CA/Hd,CAAA;AAAA,IA0IA,EAAE,CAAC,MAAH,GAAY,SAAA,GAAA;AACV,MAAA,IAAG,KAAA,IAAU,QAAb;AACE,QAAA,EAAE,CAAC,IAAH,CAAQ,KAAR,EAAe,QAAf,CAAA,CADF;OAAA;AAEA,aAAO,EAAP,CAHU;IAAA,CA1IZ,CAAA;AA+IA,WAAO,EAAP,CAjJO;EAAA,CART,CAAA;AA2JA,SAAO,MAAP,CA7J2C;AAAA,CAA7C,CAAA,CAAA;;ACAA,IAAA,qJAAA;;AAAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,OAAnC,EAA4C,SAAC,IAAD,EAAO,MAAP,EAAe,cAAf,EAA+B,aAA/B,EAA8C,aAA9C,EAA6D,QAA7D,GAAA;AAE1C,MAAA,KAAA;AAAA,EAAA,KAAA,GAAQ,SAAA,GAAA;AACN,QAAA,2vBAAA;AAAA,IAAA,GAAA,GAAM,EAAN,CAAA;AAAA,IACA,YAAA,GAAe,MADf,CAAA;AAAA,IAEA,MAAA,GAAS,EAAE,CAAC,KAAK,CAAC,MAAT,CAAA,CAFT,CAAA;AAAA,IAGA,UAAA,GAAa,QAHb,CAAA;AAAA,IAIA,SAAA,GAAY,CAJZ,CAAA;AAAA,IAKA,UAAA,GAAa,KALb,CAAA;AAAA,IAMA,OAAA,GAAU,MANV,CAAA;AAAA,IAOA,WAAA,GAAc,MAPd,CAAA;AAAA,IAQA,iBAAA,GAAoB,MARpB,CAAA;AAAA,IASA,eAAA,GAAkB,KATlB,CAAA;AAAA,IAUA,SAAA,GAAY,EAAE,CAAC,GAAH,CAAA,CAVZ,CAAA;AAAA,IAWA,UAAA,GAAa,EAXb,CAAA;AAAA,IAYA,aAAA,GAAgB,EAZhB,CAAA;AAAA,IAaA,cAAA,GAAiB,EAbjB,CAAA;AAAA,IAcA,cAAA,GAAiB,EAdjB,CAAA;AAAA,IAeA,MAAA,GAAS,MAfT,CAAA;AAAA,IAgBA,aAAA,GAAgB,GAhBhB,CAAA;AAAA,IAiBA,kBAAA,GAAqB,GAjBrB,CAAA;AAAA,IAkBA,kBAAA,GAAqB,MAlBrB,CAAA;AAAA,IAmBA,cAAA,GAAiB,SAAC,IAAD,GAAA;AAAU,MAAA,IAAG,KAAA,CAAM,CAAA,IAAN,CAAA,IAAgB,CAAC,CAAC,MAAF,CAAS,IAAT,CAAnB;eAAuC,KAAvC;OAAA,MAAA;eAAiD,CAAA,KAAjD;OAAV;IAAA,CAnBjB,CAAA;AAAA,IAqBA,SAAA,GAAY,KArBZ,CAAA;AAAA,IAsBA,WAAA,GAAc,MAtBd,CAAA;AAAA,IAuBA,cAAA,GAAiB,MAvBjB,CAAA;AAAA,IAwBA,KAAA,GAAQ,MAxBR,CAAA;AAAA,IAyBA,MAAA,GAAS,MAzBT,CAAA;AAAA,IA0BA,WAAA,GAAc,MA1Bd,CAAA;AAAA,IA2BA,aAAA,GAAgB,MA3BhB,CAAA;AAAA,IA4BA,WAAA,GAAc,MA5Bd,CAAA;AAAA,IA6BA,iBAAA,GAAoB,MA7BpB,CAAA;AAAA,IA8BA,UAAA,GAAa,KA9Bb,CAAA;AAAA,IA+BA,UAAA,GAAa,MA/Bb,CAAA;AAAA,IAgCA,SAAA,GAAY,KAhCZ,CAAA;AAAA,IAiCA,QAAA,GAAW,KAjCX,CAAA;AAAA,IAkCA,aAAA,GAAgB,KAlChB,CAAA;AAAA,IAmCA,WAAA,GAAc,KAnCd,CAAA;AAAA,IAoCA,KAAA,GAAQ,MApCR,CAAA;AAAA,IAqCA,OAAA,GAAU,MArCV,CAAA;AAAA,IAsCA,YAAA,GAAe,MAtCf,CAAA;AAAA,IAuCA,MAAA,GAAS,MAvCT,CAAA;AAAA,IAwCA,OAAA,GAAU,MAxCV,CAAA;AAAA,IAyCA,OAAA,GAAU,MAAA,CAAA,CAzCV,CAAA;AAAA,IA0CA,mBAAA,GAAsB,MA1CtB,CAAA;AAAA,IA2CA,eAAA,GAAkB,MA3ClB,CAAA;AAAA,IA6CA,WAAA,GAAc,aAAa,CAAC,UAAU,CAAC,KAAzB,CAA+B;MAC3C;QAAC,KAAD,EAAQ,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,eAAF,CAAA,EAAR;QAAA,CAAR;OAD2C,EAE3C;QAAC,KAAD,EAAQ,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,UAAF,CAAA,EAAR;QAAA,CAAR;OAF2C,EAG3C;QAAC,OAAD,EAAU,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,UAAF,CAAA,EAAR;QAAA,CAAV;OAH2C,EAI3C;QAAC,OAAD,EAAU,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,QAAF,CAAA,EAAR;QAAA,CAAV;OAJ2C,EAK3C;QAAC,OAAD,EAAU,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,MAAF,CAAA,CAAA,IAAe,CAAC,CAAC,OAAF,CAAA,CAAA,KAAiB,EAAxC;QAAA,CAAV;OAL2C,EAM3C;QAAC,OAAD,EAAU,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,OAAF,CAAA,CAAA,KAAiB,EAAzB;QAAA,CAAV;OAN2C,EAO3C;QAAC,IAAD,EAAO,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,QAAF,CAAA,EAAR;QAAA,CAAP;OAP2C,EAQ3C;QAAC,IAAD,EAAO,SAAA,GAAA;iBAAO,KAAP;QAAA,CAAP;OAR2C;KAA/B,CA7Cd,CAAA;AAAA,IAwDA,EAAA,GAAK,SAAA,GAAA,CAxDL,CAAA;AAAA,IA4DA,IAAA,GAAO,SAAC,IAAD,GAAA;AAAU,MAAA,IAAG,CAAC,CAAC,OAAF,CAAU,IAAV,CAAH;eAAwB,CAAC,CAAC,MAAF,CAAS,CAAC,CAAC,IAAF,CAAO,IAAK,CAAA,CAAA,CAAZ,CAAT,EAA0B,SAAC,CAAD,GAAA;iBAAO,CAAA,KAAK,YAAZ;QAAA,CAA1B,EAAxB;OAAA,MAAA;eAAgF,CAAC,CAAC,MAAF,CAAS,CAAC,CAAC,IAAF,CAAO,IAAP,CAAT,EAAuB,SAAC,CAAD,GAAA;iBAAO,CAAA,KAAK,YAAZ;QAAA,CAAvB,EAAhF;OAAV;IAAA,CA5DP,CAAA;AAAA,IA8DA,UAAA,GAAa,SAAC,CAAD,EAAI,SAAJ,GAAA;aACX,SAAS,CAAC,MAAV,CACE,SAAC,IAAD,EAAO,IAAP,GAAA;eAAgB,CAAA,IAAA,GAAQ,CAAA,EAAG,CAAC,UAAH,CAAc,CAAd,EAAgB,IAAhB,EAAzB;MAAA,CADF,EAEE,CAFF,EADW;IAAA,CA9Db,CAAA;AAAA,IAmEA,QAAA,GAAW,SAAC,IAAD,EAAO,SAAP,GAAA;aACT,EAAE,CAAC,GAAH,CAAO,IAAP,EAAa,SAAC,CAAD,GAAA;eAAO,EAAE,CAAC,GAAH,CAAO,SAAP,EAAkB,SAAC,CAAD,GAAA;iBAAO,EAAE,CAAC,UAAH,CAAc,CAAd,EAAgB,CAAhB,EAAP;QAAA,CAAlB,EAAP;MAAA,CAAb,EADS;IAAA,CAnEX,CAAA;AAAA,IAsEA,QAAA,GAAW,SAAC,IAAD,EAAO,SAAP,GAAA;aACT,EAAE,CAAC,GAAH,CAAO,IAAP,EAAa,SAAC,CAAD,GAAA;eAAO,EAAE,CAAC,GAAH,CAAO,SAAP,EAAkB,SAAC,CAAD,GAAA;iBAAO,EAAE,CAAC,UAAH,CAAc,CAAd,EAAgB,CAAhB,EAAP;QAAA,CAAlB,EAAP;MAAA,CAAb,EADS;IAAA,CAtEX,CAAA;AAAA,IAyEA,WAAA,GAAc,SAAC,CAAD,GAAA;AACZ,MAAA,IAAG,cAAc,CAAC,KAAlB;eAA6B,cAAc,CAAC,KAAf,CAAqB,CAArB,EAA7B;OAAA,MAAA;eAA0D,cAAA,CAAe,CAAf,EAA1D;OADY;IAAA,CAzEd,CAAA;AAAA,IA4EA,UAAA,GAAa;AAAA,MACX,MAAA,EAAQ,SAAC,IAAD,GAAA;AACN,YAAA,SAAA;AAAA,QAAA,SAAA,GAAY,EAAE,CAAC,SAAH,CAAa,IAAb,CAAZ,CAAA;AACA,eAAO,CAAC,QAAA,CAAS,IAAT,EAAe,SAAf,CAAD,EAA4B,QAAA,CAAS,IAAT,EAAe,SAAf,CAA5B,CAAP,CAFM;MAAA,CADG;AAAA,MAIX,GAAA,EAAK,SAAC,IAAD,GAAA;AACH,YAAA,SAAA;AAAA,QAAA,SAAA,GAAY,EAAE,CAAC,SAAH,CAAa,IAAb,CAAZ,CAAA;AACA,eAAO,CAAC,CAAD,EAAI,QAAA,CAAS,IAAT,EAAe,SAAf,CAAJ,CAAP,CAFG;MAAA,CAJM;AAAA,MAOX,GAAA,EAAK,SAAC,IAAD,GAAA;AACH,YAAA,SAAA;AAAA,QAAA,SAAA,GAAY,EAAE,CAAC,SAAH,CAAa,IAAb,CAAZ,CAAA;AACA,eAAO,CAAC,CAAD,EAAI,QAAA,CAAS,IAAT,EAAe,SAAf,CAAJ,CAAP,CAFG;MAAA,CAPM;AAAA,MAUX,WAAA,EAAa,SAAC,IAAD,GAAA;AACX,YAAA,SAAA;AAAA,QAAA,IAAG,IAAK,CAAA,CAAA,CAAE,CAAC,cAAR,CAAuB,OAAvB,CAAH;AACE,iBAAO,EAAE,CAAC,MAAH,CAAU,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;mBACxB,CAAC,CAAC,MADsB;UAAA,CAAT,CAAV,CAAP,CADF;SAAA,MAAA;AAIE,UAAA,SAAA,GAAY,EAAE,CAAC,SAAH,CAAa,IAAb,CAAZ,CAAA;AACA,iBAAO,EAAE,CAAC,MAAH,CAAU,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;mBACxB,UAAA,CAAW,CAAX,EAAc,SAAd,EADwB;UAAA,CAAT,CAAV,CAAP,CALF;SADW;MAAA,CAVF;AAAA,MAkBX,KAAA,EAAO,SAAC,IAAD,GAAA;AACL,YAAA,SAAA;AAAA,QAAA,IAAG,IAAK,CAAA,CAAA,CAAE,CAAC,cAAR,CAAuB,OAAvB,CAAH;AACE,iBAAO;YAAC,CAAD,EAAI,EAAE,CAAC,GAAH,CAAO,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;qBACzB,CAAC,CAAC,MADuB;YAAA,CAAT,CAAP,CAAJ;WAAP,CADF;SAAA,MAAA;AAIE,UAAA,SAAA,GAAY,EAAE,CAAC,SAAH,CAAa,IAAb,CAAZ,CAAA;AACA,iBAAO;YAAC,CAAD,EAAI,EAAE,CAAC,GAAH,CAAO,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;qBACzB,UAAA,CAAW,CAAX,EAAc,SAAd,EADyB;YAAA,CAAT,CAAP,CAAJ;WAAP,CALF;SADK;MAAA,CAlBI;AAAA,MA0BX,WAAA,EAAa,SAAC,IAAD,GAAA;AACX,YAAA,WAAA;AAAA,QAAA,IAAG,EAAE,CAAC,aAAH,CAAA,CAAH;AACE,iBAAO,CAAC,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,UAAH,CAAc,IAAd,CAAP,CAAD,EAA8B,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,UAAH,CAAc,IAAd,CAAP,CAA9B,CAAP,CADF;SAAA,MAAA;AAGE,UAAA,IAAG,IAAI,CAAC,MAAL,GAAc,CAAjB;AACE,YAAA,KAAA,GAAQ,EAAE,CAAC,UAAH,CAAc,IAAK,CAAA,CAAA,CAAnB,CAAR,CAAA;AAAA,YACA,IAAA,GAAO,EAAE,CAAC,UAAH,CAAc,IAAK,CAAA,CAAA,CAAnB,CAAA,GAAyB,KADhC,CAAA;AAEA,mBAAO,CAAC,EAAE,CAAC,UAAH,CAAc,IAAK,CAAA,CAAA,CAAnB,CAAD,EAAyB,KAAA,GAAQ,IAAA,GAAQ,IAAI,CAAC,MAA9C,CAAP,CAHF;WAHF;SADW;MAAA,CA1BF;AAAA,MAkCX,QAAA,EAAU,SAAC,IAAD,GAAA;AACR,eAAO,CAAC,CAAD,EAAI,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,UAAH,CAAc,IAAd,CAAP,CAAJ,CAAP,CADQ;MAAA,CAlCC;AAAA,MAoCX,QAAA,EAAU,SAAC,IAAD,GAAA;AACR,YAAA,WAAA;AAAA,QAAA,IAAG,EAAE,CAAC,aAAH,CAAA,CAAH;AACE,iBAAO,CAAC,CAAD,EAAI,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,UAAH,CAAc,IAAd,CAAP,CAAJ,CAAP,CADF;SAAA,MAAA;AAGE,UAAA,KAAA,GAAQ,EAAE,CAAC,UAAH,CAAc,IAAK,CAAA,CAAA,CAAnB,CAAR,CAAA;AAAA,UACA,IAAA,GAAO,EAAE,CAAC,UAAH,CAAc,IAAK,CAAA,CAAA,CAAnB,CAAA,GAAyB,KADhC,CAAA;AAEA,iBAAO,CAAC,CAAD,EAAI,KAAA,GAAQ,IAAA,GAAQ,IAAI,CAAC,MAAzB,CAAP,CALF;SADQ;MAAA,CApCC;KA5Eb,CAAA;AAAA,IAyHA,0BAAA,GAA6B,SAAC,IAAD,EAAO,MAAP,GAAA;AAC3B,UAAA,wDAAA;AAAA,MAAA,OAAA,GAAU,CACR,IADQ,EAER,IAAA,GAAK,EAFG,EAGR,IAAA,GAAK,EAAL,GAAQ,EAHA,EAIR,IAAA,GAAK,EAAL,GAAQ,EAAR,GAAW,EAJH,EAKR,IAAA,GAAK,EAAL,GAAQ,EAAR,GAAW,EAAX,GAAc,CALN,EAMR,IAAA,GAAK,EAAL,GAAQ,EAAR,GAAW,EAAX,GAAc,EANN,EAOR,IAAA,GAAK,EAAL,GAAQ,EAAR,GAAW,EAAX,GAAc,GAPN,CAAV,CAAA;AAAA,MASA,QAAA,GAAW,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,MAAhC,EAAwC,OAAxC,EAAiD,QAAjD,EAA2D,OAA3D,CATX,CAAA;AAAA,MAUA,MAAA,GAAS,QAAQ,CAAC,OAAT,CAAiB,IAAjB,CAVT,CAAA;AAWA,MAAA,IAAG,MAAA,KAAU,CAAA,CAAb;AACE,QAAA,MAAA,GAAS,CAAT,CADF;OAXA;AAAA,MAaA,QAAA,GAAW,CAAA,EAAG,CAAC,SAAH,CAAA,CAAD,GAAkB,EAAE,CAAC,SAAH,CAAA,CAb7B,CAAA;AAcA,aAAA,IAAA,GAAA;AACE,QAAA,YAAA,GAAe,QAAA,GAAW,OAAQ,CAAA,MAAA,CAAlC,CAAA;AAAA,QACA,KAAA,GAAQ,YAAA,GAAe,MADvB,CAAA;AAGA,QAAA,IAAG,MAAA,IAAU,QAAQ,CAAC,MAAnB,IAA6B,KAAA,IAAS,QAAzC;AACE,gBADF;SAHA;AAAA,QAKA,MAAA,EALA,CADF;MAAA,CAdA;AAsBA,MAAA,IAAG,QAAS,CAAA,MAAA,CAAT,KAAsB,IAAzB;AACE,eAAO,EAAE,CAAC,IAAK,CAAA,QAAS,CAAA,MAAA,CAAT,CAAR,CAA0B,EAAE,CAAC,SAAH,CAAA,CAA1B,EAA0C,EAAE,CAAC,SAAH,CAAA,CAA1C,CAAP,CADF;OAAA,MAAA;AAGE,eAAO,EAAE,CAAC,IAAK,CAAA,QAAS,CAAA,MAAA,CAAT,CAAR,CAA0B,EAAE,CAAC,SAAH,CAAA,CAA1B,EAA0C,EAAE,CAAC,SAAH,CAAA,CAA1C,EAA0D,MAA1D,CAAP,CAHF;OAvB2B;IAAA,CAzH7B,CAAA;AAAA,IAqJA,kBAAA,GAAqB,SAAA,GAAA;AACnB,UAAA,sCAAA;AAAA,MAAA,IAAG,CAAA,UAAA,IAAmB,EAAE,CAAC,YAAH,CAAA,CAAtB;AACE,QAAA,IAAG,EAAE,CAAC,SAAH,CAAA,CAAA,KAAoB,MAApB,IAAkC,EAAE,CAAC,SAAH,CAAA,CAAA,KAAoB,MAAzD;AACE,UAAA,IAAG,UAAA,KAAc,MAAjB;AACE,YAAA,KAAA,GAAQ,EAAE,CAAC,YAAH,CAAA,CAAiB,CAAC,KAAlB,CAAwB,GAAxB,CAAR,CAAA;AACA,YAAA,IAAG,KAAK,CAAC,MAAN,KAAgB,CAAhB,IAAsB,EAAE,CAAC,IAAI,CAAC,cAAR,CAAuB,KAAM,CAAA,CAAA,CAA7B,CAAzB;AACE,cAAA,UAAA,GAAa,0BAAA,CAA2B,KAAM,CAAA,CAAA,CAAjC,EAAqC,KAAM,CAAA,CAAA,CAA3C,CAAb,CADF;aAAA,MAAA;AAGE,cAAA,UAAA,GAAa,MAAb,CAHF;aAFF;WAAA,MAAA;AAOE,YAAA,KAAA,GAAQ,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,KAAL,CAAW,CAAC,EAAE,CAAC,SAAH,CAAA,CAAA,GAAiB,EAAE,CAAC,SAAH,CAAA,CAAlB,CAAA,GAAmC,EAAE,CAAC,YAAH,CAAA,CAA9C,CAAT,CAAR,CAAA;AACA,YAAA,IAAG,KAAA,GAAQ,QAAX;AACE,cAAA,EAAE,CAAC,YAAH,CAAgB,IAAI,CAAC,KAAL,CAAW,EAAE,CAAC,SAAH,CAAA,CAAA,GAAiB,EAAE,CAAC,SAAH,CAAA,CAA5B,CAAA,GAA4C,QAA5D,CAAA,CADF;aADA;AAAA,YAGA,SAAA,GAAY,IAAI,CAAC,IAAL,CAAU,CAAA,GAAI,EAAE,CAAC,SAAH,CAAA,CAAA,GAAiB,EAAE,CAAC,YAAH,CAAA,CAA/B,CAAA,GAAoD,EAAE,CAAC,YAAH,CAAA,CAHhE,CAAA;AAAA,YAIA,UAAA,GAAa,EAJb,CAAA;AAAA,YAKA,CAAA,GAAI,CALJ,CAAA;AAMA,mBAAM,SAAA,GAAY,EAAE,CAAC,SAAH,CAAA,CAAlB,GAAA;AACE,cAAA,UAAW,CAAA,CAAA,CAAX,GAAgB,SAAhB,CAAA;AAAA,cACA,CAAA,EADA,CAAA;AAAA,cAEA,SAAA,IAAa,EAAE,CAAC,YAAH,CAAA,CAFb,CADF;YAAA,CAbF;WAAA;iBAiBA,EAAE,CAAC,UAAH,CAAc,UAAd,EAlBF;SADF;OADmB;IAAA,CArJrB,CAAA;AAAA,IA6KA,EAAE,CAAC,EAAH,GAAQ,SAAA,GAAA;AACN,aAAO,KAAA,GAAQ,GAAR,GAAc,YAAd,GAA6B,GAA7B,GAAmC,OAAO,CAAC,EAAR,CAAA,CAA1C,CADM;IAAA,CA7KR,CAAA;AAAA,IAgLA,EAAE,CAAC,WAAH,GAAiB,SAAC,GAAD,GAAA;AACf,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,YAAP,CAA9B;OAAA;AAAA,MACA,YAAA,GAAe,GADf,CAAA;AAEA,aAAO,EAAP,CAHe;IAAA,CAhLjB,CAAA;AAAA,IAqLA,EAAE,CAAC,IAAH,GAAU,SAAC,IAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,KAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,KAAA,GAAQ,IAAR,CAAA;AACA,eAAO,EAAP,CAHF;OADQ;IAAA,CArLV,CAAA;AAAA,IA2LA,EAAE,CAAC,MAAH,GAAY,SAAC,MAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,OAAA,GAAU,MAAV,CAAA;AACA,eAAO,EAAP,CAHF;OADU;IAAA,CA3LZ,CAAA;AAAA,IAiMA,EAAE,CAAC,KAAH,GAAW,SAAC,GAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,GAAT,CAAA;AACA,eAAO,EAAP,CAHF;OADS;IAAA,CAjMX,CAAA;AAAA,IAuMA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,OAAA,GAAU,GAAV,CAAA;AACA,eAAO,EAAP,CAHF;OADU;IAAA,CAvMZ,CAAA;AAAA,IA6MA,cAAA,GAAiB,KA7MjB,CAAA;AAAA,IA8MA,EAAE,CAAC,aAAH,GAAmB,SAAC,GAAD,GAAA;AACjB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,cAAP,CAA9B;OAAA;AAAA,MACA,cAAA,GAAiB,GADjB,CAAA;AAEA,aAAO,EAAP,CAHiB;IAAA,CA9MnB,CAAA;AAAA,IAmNA,EAAE,CAAC,WAAH,GAAiB,SAAC,GAAD,GAAA;AACf,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,YAAP,CAA9B;OAAA;AAAA,MACA,YAAA,GAAe,GADf,CAAA;AAAA,MAEA,YAAY,CAAC,aAAb,CAA2B,IAA3B,CAFA,CAAA;AAGA,aAAO,EAAP,CAJe;IAAA,CAnNjB,CAAA;AAAA,IA0NA,EAAE,CAAC,KAAH,GAAW,SAAA,GAAA;AACT,aAAO,MAAP,CADS;IAAA,CA1NX,CAAA;AAAA,IA6NA,EAAE,CAAC,MAAH,GAAY,SAAA,GAAA;AACV,aAAO,OAAP,CADU;IAAA,CA7NZ,CAAA;AAAA,IAgOA,EAAE,CAAC,SAAH,GAAe,SAAA,GAAA;aACb,WADa;IAAA,CAhOf,CAAA;AAAA,IAmOA,EAAE,CAAC,YAAH,GAAkB,SAAC,SAAD,GAAA;AAChB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,aAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,aAAA,GAAgB,SAAhB,CAAA;AACA,QAAA,IAAG,SAAH;AACE,UAAA,IAAG,CAAA,EAAM,CAAC,UAAH,CAAA,CAAP;AACE,YAAA,EAAE,CAAC,UAAH,CAAc,QAAd,CAAA,CADF;WAAA;AAAA,UAEA,WAAA,GAAc,KAFd,CADF;SADA;AAKA,eAAO,EAAP,CAPF;OADgB;IAAA,CAnOlB,CAAA;AAAA,IA6OA,EAAE,CAAC,UAAH,GAAgB,SAAC,SAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,WAAA,GAAc,SAAd,CAAA;AACA,QAAA,IAAG,SAAH;AACE,UAAA,IAAG,CAAA,EAAM,CAAC,UAAH,CAAA,CAAP;AACE,YAAA,EAAE,CAAC,UAAH,CAAc,MAAd,CAAA,CADF;WAAA;AAAA,UAEA,aAAA,GAAgB,KAFhB,CADF;SADA;AAKA,eAAO,EAAP,CAPF;OADc;IAAA,CA7OhB,CAAA;AAAA,IAyPA,EAAE,CAAC,SAAH,GAAe,SAAC,IAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,IAAG,EAAE,CAAC,KAAK,CAAC,cAAT,CAAwB,IAAxB,CAAH;AACE,UAAA,MAAA,GAAS,EAAE,CAAC,KAAM,CAAA,IAAA,CAAT,CAAA,CAAT,CAAA;AAAA,UACA,UAAA,GAAa,IADb,CAAA;AAAA,UAEA,EAAE,CAAC,MAAH,CAAU,cAAc,CAAC,MAAzB,CAFA,CADF;SAAA,MAIK,IAAG,IAAA,KAAQ,MAAX;AACH,UAAA,MAAA,GAAS,EAAE,CAAC,IAAI,CAAC,KAAR,CAAA,CAAT,CAAA;AAAA,UACA,UAAA,GAAa,MADb,CAAA;AAEA,UAAA,IAAG,kBAAH;AACE,YAAA,EAAE,CAAC,UAAH,CAAc,kBAAd,CAAA,CADF;WAFA;AAAA,UAIA,EAAE,CAAC,MAAH,CAAU,cAAc,CAAC,IAAzB,CAJA,CADG;SAAA,MAMA,IAAG,aAAa,CAAC,cAAd,CAA6B,IAA7B,CAAH;AACH,UAAA,UAAA,GAAa,IAAb,CAAA;AAAA,UACA,MAAA,GAAS,aAAc,CAAA,IAAA,CAAd,CAAA,CADT,CADG;SAAA,MAAA;AAIH,UAAA,IAAI,CAAC,KAAL,CAAW,4BAAX,EAAyC,IAAzC,CAAA,CAJG;SAVL;AAAA,QAgBA,UAAA,GAAa,CAAC,CAAC,GAAF,CAAM,MAAN,EAAa,WAAb,CAhBb,CAAA;AAiBA,QAAA,IAAG,MAAH;AACE,UAAA,EAAE,CAAC,KAAH,CAAS,MAAT,CAAA,CADF;SAjBA;AAoBA,QAAA,IAAG,SAAH;AACE,UAAA,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAA,CADF;SApBA;AAuBA,QAAA,IAAG,SAAA,IAAc,UAAA,KAAc,KAA/B;AACE,UAAA,MAAM,CAAC,QAAP,CAAgB,SAAhB,CAAA,CADF;SAvBA;AAyBA,eAAO,EAAP,CA3BF;OADa;IAAA,CAzPf,CAAA;AAAA,IAuRA,EAAE,CAAC,QAAH,GAAc,SAAC,KAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,SAAA,GAAY,KAAZ,CAAA;AACA,QAAA,IAAG,UAAA,KAAc,KAAjB;AACE,UAAA,MAAM,CAAC,QAAP,CAAgB,SAAhB,CAAA,CADF;SADA;AAGA,eAAO,EAAP,CALF;OADY;IAAA,CAvRd,CAAA;AAAA,IA+RA,EAAE,CAAC,UAAH,GAAgB,SAAC,EAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AACE,QAAA,IAAG,MAAM,CAAC,KAAV;AACE,iBAAO,MAAM,CAAC,KAAP,CAAA,CAAP,CADF;SAAA;AAEA,eAAO,MAAP,CAHF;OAAA,MAAA;AAKE,QAAA,IAAG,CAAC,CAAC,UAAF,CAAa,EAAb,CAAA,IAAqB,MAAM,CAAC,KAA/B;AACE,UAAA,MAAM,CAAC,KAAP,CAAa,EAAb,CAAA,CADF;SAAA;AAEA,eAAO,EAAP,CAPF;OADc;IAAA,CA/RhB,CAAA;AAAA,IA2SA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,OAAA,GAAU,GAAV,CAAA;AACA,QAAA,IAAG,CAAC,CAAC,OAAF,CAAU,OAAV,CAAH;AACE,UAAA,MAAM,CAAC,MAAP,CAAc,OAAd,CAAA,CADF;SADA;AAGA,eAAO,EAAP,CALF;OADU;IAAA,CA3SZ,CAAA;AAAA,IAmTA,EAAE,CAAC,UAAH,GAAgB,SAAC,IAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AACS,QAAA,IAAG,UAAH;iBAAmB,OAAnB;SAAA,MAAA;iBAAkC,YAAlC;SADT;OAAA,MAAA;AAGE,QAAA,IAAG,UAAU,CAAC,cAAX,CAA0B,IAA1B,CAAH;AACE,UAAA,WAAA,GAAc,IAAd,CADF;SAAA,MAAA;AAGE,UAAA,IAAI,CAAC,KAAL,CAAW,kCAAX,EAA+C,IAA/C,EAAqD,WAArD,EAAkE,CAAC,CAAC,IAAF,CAAO,UAAP,CAAlE,CAAA,CAHF;SAAA;AAIA,eAAO,EAAP,CAPF;OADc;IAAA,CAnThB,CAAA;AAAA,IA6TA,UAAA,GAAa,MA7Tb,CAAA;AAAA,IA8TA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAA,IAAc,iBAAkB,CAAA,CAAA,CAAvC,CAA9B;OAAA;AAAA,MACA,UAAA,GAAa,WAAA,CAAY,GAAZ,CADb,CAAA;AAEA,aAAO,EAAP,CAHa;IAAA,CA9Tf,CAAA;AAAA,IAmUA,UAAA,GAAa,MAnUb,CAAA;AAAA,IAoUA,UAAA,GAAa,MApUb,CAAA;AAAA,IAqUA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAA,IAAc,iBAAkB,CAAA,CAAA,CAAvC,CAA9B;OAAA;AAAA,MACA,UAAA,GAAa,WAAA,CAAY,GAAZ,CADb,CAAA;AAEA,aAAO,EAAP,CAHa;IAAA,CArUf,CAAA;AAAA,IA0UA,EAAE,CAAC,SAAH,GAAe,SAAC,IAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAM,CAAC,MAAP,CAAA,CAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,IAAG,CAAA,OAAA,IAAgB,EAAE,CAAC,UAAH,CAAA,CAAnB;AACE,UAAA,IAAG,UAAH;AACE,YAAA,iBAAkB,CAAA,CAAA,CAAlB,GAAuB,UAAvB,CADF;WAAA;AAEA,UAAA,IAAG,UAAH;AACE,YAAA,iBAAkB,CAAA,CAAA,CAAlB,GAAuB,UAAvB,CADF;WAFA;AAAA,UAIA,kBAAA,CAAA,CAJA,CAAA;AAKA,iBAAO,iBAAP,CANF;SAAA,MAAA;AAQE,UAAA,IAAG,OAAH;AACE,mBAAO,OAAP,CADF;WAAA,MAAA;AAGE,mBAAO,EAAE,CAAC,KAAH,CAAS,IAAT,CAAP,CAHF;WARF;SAFF;OADa;IAAA,CA1Uf,CAAA;AAAA,IA0VA,EAAE,CAAC,cAAH,GAAoB,SAAC,SAAD,GAAA;AAClB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,eAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,eAAA,GAAkB,SAAlB,CAAA;AACA,eAAO,EAAP,CAHF;OADkB;IAAA,CA1VpB,CAAA;AAAA,IAkWA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,UAAA,IAAA;AAAA,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAM,CAAC,KAAP,CAAA,CAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,KAAT,CAAA;AACA,QAAA,IAAG,UAAA,IAAe,SAAA,EAAE,CAAC,IAAH,CAAA,EAAA,KAAc,GAAd,IAAA,IAAA,KAAkB,GAAlB,CAAlB;AACI,UAAA,MAAM,CAAC,UAAP,CAAkB,KAAlB,EAAyB,aAAzB,EAAwC,kBAAxC,CAAA,CADJ;SAAA,MAEK,IAAG,CAAA,CAAK,UAAA,KAAe,YAAf,IAAA,UAAA,KAA6B,YAA7B,IAAA,UAAA,KAA2C,aAA3C,IAAA,UAAA,KAA0D,aAA3D,CAAP;AACH,UAAA,MAAM,CAAC,KAAP,CAAa,KAAb,CAAA,CADG;SAHL;AAKA,eAAO,EAAP,CAPF;OADS;IAAA,CAlWX,CAAA;AAAA,IA4WA,EAAE,CAAC,YAAH,GAAkB,SAAC,MAAD,GAAA;AAChB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO;AAAA,UAAC,OAAA,EAAQ,aAAT;AAAA,UAAwB,YAAA,EAAa,kBAArC;SAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,aAAA,GAAgB,MAAM,CAAC,OAAvB,CAAA;AAAA,QACA,kBAAA,GAAqB,MAAM,CAAC,YAD5B,CAAA;AAEA,eAAO,EAAP,CAJF;OADgB;IAAA,CA5WlB,CAAA;AAAA,IAqXA,EAAE,CAAC,QAAH,GAAc,SAAC,IAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAS,CAAC,MAAV,CAAA,CAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,IAAG,IAAH;AACE,UAAA,EAAE,CAAC,WAAH,CAAe,IAAf,CAAA,CADF;SAAA;AAEA,eAAO,EAAP,CAJF;OADY;IAAA,CArXd,CAAA;AAAA,IA4XA,EAAE,CAAC,WAAH,GAAiB,SAAC,IAAD,GAAA;AACf,UAAA,qBAAA;AAAA,MAAA,IAAG,CAAC,CAAC,OAAF,CAAU,IAAV,CAAH;AACE;aAAA,2CAAA;uBAAA;AACE,wBAAA,SAAS,CAAC,GAAV,CAAc,CAAd,EAAA,CADF;AAAA;wBADF;OAAA,MAAA;eAIE,SAAS,CAAC,GAAV,CAAc,IAAd,EAJF;OADe;IAAA,CA5XjB,CAAA;AAAA,IAmYA,EAAE,CAAC,aAAH,GAAmB,SAAC,IAAD,GAAA;AACjB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,UAAA,GAAa,IAAb,CAAA;AACA,eAAO,EAAP,CAHF;OADiB;IAAA,CAnYnB,CAAA;AAAA,IAyYA,EAAE,CAAC,YAAH,GAAkB,SAAC,IAAD,GAAA;AAChB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,aAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,aAAA,GAAgB,IAAhB,CAAA;AACA,eAAO,EAAP,CAHF;OADgB;IAAA,CAzYlB,CAAA;AAAA,IA+YA,EAAE,CAAC,SAAH,GAAe,SAAC,IAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,IAAV,CAAA,CAAA,GAAmB,CAAtB;AACI,eAAO,CAAC,CAAC,YAAF,CAAe,SAAS,CAAC,MAAV,CAAA,CAAf,EAAmC,IAAA,CAAK,IAAL,CAAnC,CAAP,CADJ;OAAA,MAAA;eAGE,CAAC,CAAC,MAAF,CAAS,IAAA,CAAK,IAAL,CAAT,EAAqB,SAAC,CAAD,GAAA;iBAAO,eAAK,aAAL,EAAA,CAAA,OAAP;QAAA,CAArB,EAHF;OADa;IAAA,CA/Yf,CAAA;AAAA,IAqZA,EAAE,CAAC,aAAH,GAAmB,SAAC,IAAD,GAAA;AACjB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,cAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,cAAA,GAAiB,IAAjB,CAAA;AACA,eAAO,EAAP,CAHF;OADiB;IAAA,CArZnB,CAAA;AAAA,IA2ZA,EAAE,CAAC,aAAH,GAAmB,SAAC,IAAD,GAAA;AACjB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,cAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,cAAA,GAAiB,IAAjB,CAAA;AACA,eAAO,EAAP,CAHF;OADiB;IAAA,CA3ZnB,CAAA;AAAA,IAmaA,EAAE,CAAC,UAAH,GAAgB,SAAC,MAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,kBAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,kBAAA,GAAqB,MAArB,CAAA;AACA,QAAA,IAAG,UAAA,KAAc,MAAjB;AACE,UAAA,cAAA,GAAiB,aAAa,CAAC,UAAd,CAAyB,MAAzB,CAAjB,CADF;SAAA,MAAA;AAGE,UAAA,cAAA,GAAiB,SAAC,CAAD,GAAA;mBAAO,EAAP;UAAA,CAAjB,CAHF;SADA;AAKA,eAAO,EAAP,CAPF;OADc;IAAA,CAnahB,CAAA;AAAA,IA+aA,EAAE,CAAC,KAAH,GAAW,SAAC,IAAD,GAAA;AACT,UAAA,QAAA;AAAA,MAAA,QAAA,GAAW,SAAS,CAAC,MAAV,CAAA,CAAmB,CAAA,CAAA,CAA9B,CAAA;AACA,MAAA,IAAG,CAAA,IAAH;AAAiB,eAAO,MAAP,CAAjB;OADA;AAEA,MAAA,IAAG,UAAH;AACE,QAAA,IAAG,CAAC,CAAC,OAAF,CAAU,IAAV,CAAH;iBAAwB,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;mBAAO,WAAA,CAAY,CAAE,CAAA,QAAA,CAAU,CAAA,UAAA,CAAxB,EAAP;UAAA,CAAT,EAAxB;SAAA,MAAA;iBAAmF,WAAA,CAAY,IAAK,CAAA,QAAA,CAAU,CAAA,UAAA,CAA3B,EAAnF;SADF;OAAA,MAAA;AAGE,QAAA,IAAG,CAAC,CAAC,OAAF,CAAU,IAAV,CAAH;iBAAwB,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;mBAAO,WAAA,CAAY,CAAE,CAAA,QAAA,CAAd,EAAP;UAAA,CAAT,EAAxB;SAAA,MAAA;iBAAuE,WAAA,CAAY,IAAK,CAAA,QAAA,CAAjB,EAAvE;SAHF;OAHS;IAAA,CA/aX,CAAA;AAAA,IAubA,EAAE,CAAC,UAAH,GAAgB,SAAC,IAAD,EAAO,QAAP,GAAA;AACd,MAAA,IAAG,CAAA,IAAH;AAAiB,eAAO,MAAP,CAAjB;OAAA;AACA,MAAA,IAAG,UAAH;eACE,WAAA,CAAY,IAAK,CAAA,QAAA,CAAU,CAAA,UAAA,CAA3B,EADF;OAAA,MAAA;eAGE,WAAA,CAAY,IAAK,CAAA,QAAA,CAAjB,EAHF;OAFc;IAAA,CAvbhB,CAAA;AAAA,IA8bA,EAAE,CAAC,cAAH,GAAoB,SAAC,IAAD,GAAA;AAClB,MAAA,IAAG,CAAC,CAAC,OAAF,CAAU,IAAV,CAAH;eAAwB,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;iBAAO,EAAE,CAAC,WAAH,CAAe,EAAE,CAAC,KAAH,CAAS,CAAT,CAAf,EAAP;QAAA,CAAT,EAAxB;OAAA,MAAA;eAA0E,EAAE,CAAC,WAAH,CAAe,EAAE,CAAC,KAAH,CAAS,IAAT,CAAf,EAA1E;OADkB;IAAA,CA9bpB,CAAA;AAAA,IAicA,EAAE,CAAC,mBAAH,GAAyB,SAAC,IAAD,EAAO,QAAP,GAAA;AACvB,MAAA,IAAG,CAAC,CAAC,OAAF,CAAU,IAAV,CAAH;eAAwB,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;iBAAO,EAAE,CAAC,WAAH,CAAe,EAAE,CAAC,UAAH,CAAc,CAAd,EAAiB,QAAjB,CAAf,EAAP;QAAA,CAAT,EAAxB;OAAA,MAAA;eAAyF,EAAE,CAAC,WAAH,CAAe,EAAE,CAAC,UAAH,CAAc,IAAd,EAAoB,QAApB,CAAf,EAAzF;OADuB;IAAA,CAjczB,CAAA;AAAA,IAqcA,EAAE,CAAC,WAAH,GAAiB,SAAC,GAAD,GAAA;AACf,MAAA,IAAG,mBAAA,IAAwB,GAAxB,IAAiC,CAAC,GAAG,CAAC,UAAJ,IAAkB,CAAA,KAAI,CAAM,GAAN,CAAvB,CAApC;eACE,eAAA,CAAgB,GAAhB,EADF;OAAA,MAAA;eAGE,IAHF;OADe;IAAA,CArcjB,CAAA;AAAA,IA2cA,EAAE,CAAC,GAAH,GAAS,SAAC,IAAD,EAAO,QAAP,GAAA;AACP,MAAA,IAAG,QAAH;AACE,QAAA,IAAG,KAAK,CAAC,OAAN,CAAc,IAAd,CAAH;iBAA4B,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;mBAAO,MAAA,CAAO,EAAE,CAAC,UAAH,CAAc,IAAd,EAAoB,QAApB,CAAP,EAAP;UAAA,CAAT,EAA5B;SAAA,MAAA;iBAAwF,MAAA,CAAO,EAAE,CAAC,UAAH,CAAc,IAAd,EAAoB,QAApB,CAAP,EAAxF;SADF;OAAA,MAAA;AAGE,QAAA,IAAG,KAAK,CAAC,OAAN,CAAc,IAAd,CAAH;iBAA4B,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;mBAAO,MAAA,CAAO,EAAE,CAAC,KAAH,CAAS,IAAT,CAAP,EAAP;UAAA,CAAT,EAA5B;SAAA,MAAA;iBAAyE,MAAA,CAAO,EAAE,CAAC,KAAH,CAAS,IAAT,CAAP,EAAzE;SAHF;OADO;IAAA,CA3cT,CAAA;AAAA,IAidA,EAAE,CAAC,MAAH,GAAY,SAAC,WAAD,GAAA;AAYV,UAAA,oCAAA;AAAA,MAAA,IAAG,CAAC,CAAC,GAAF,CAAM,EAAE,CAAC,KAAH,CAAA,CAAN,EAAiB,QAAjB,CAAH;AACE,QAAA,MAAA,GAAS,CAAC,MAAM,CAAC,KAAP,CAAA,CAAe,CAAA,CAAA,CAAf,GAAoB,MAAM,CAAC,KAAP,CAAA,CAAe,CAAA,CAAA,CAApC,CAAA,GAA0C,MAAM,CAAC,OAAP,CAAA,CAAgB,CAAC,MAApE,CAAA;AACA,eAAO,MAAM,CAAC,MAAP,CAAc,WAAA,GAAc,MAAA,GAAO,CAAnC,CAAP,CAFF;OAAA;AAKA,MAAA,IAAG,CAAC,CAAC,GAAF,CAAM,EAAE,CAAC,KAAH,CAAA,CAAN,EAAiB,cAAjB,CAAH;AACE,eAAO,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,YAAX,CAAwB,WAAxB,CAAP,CADF;OALA;AAUA,MAAA,IAAG,EAAE,CAAC,SAAH,CAAA,CAAA,IAAmB,EAAE,CAAC,cAAH,CAAA,CAAtB;AACE,QAAA,MAAA,GAAS,MAAM,CAAC,MAAP,CAAA,CAAT,CAAA;AAAA,QACA,KAAA,GAAQ,MAAM,CAAC,KAAP,CAAA,CADR,CAAA;AAEA,QAAA,IAAG,KAAM,CAAA,CAAA,CAAN,GAAW,KAAM,CAAA,CAAA,CAApB;AACE,UAAA,QAAA,GAAW,KAAM,CAAA,CAAA,CAAN,GAAW,KAAM,CAAA,CAAA,CAA5B,CAAA;AAAA,UACA,GAAA,GAAM,KAAK,CAAC,MAAN,GAAe,IAAI,CAAC,KAAL,CAAW,WAAA,GAAc,QAAzB,CAAf,GAAoD,CAD1D,CAAA;AAEA,UAAA,IAAG,GAAA,GAAM,CAAT;AAAgB,YAAA,GAAA,GAAM,CAAN,CAAhB;WAHF;SAAA,MAAA;AAKE,UAAA,QAAA,GAAW,KAAM,CAAA,CAAA,CAAN,GAAW,KAAM,CAAA,CAAA,CAA5B,CAAA;AAAA,UACA,GAAA,GAAM,IAAI,CAAC,KAAL,CAAW,WAAA,GAAc,QAAzB,CADN,CAAA;AAEA,UAAA,IAAG,GAAA,IAAO,KAAK,CAAC,MAAhB;AAA4B,YAAA,GAAA,GAAM,KAAK,CAAC,MAAN,GAAe,CAArB,CAA5B;WAPF;SAFA;AAUA,eAAO,MAAO,CAAA,GAAA,CAAd,CAXF;OAVA;AAwBA,aAAO,MAAP,CApCU;IAAA,CAjdZ,CAAA;AAAA,IAufA,EAAE,CAAC,SAAH,GAAe,SAAC,KAAD,GAAA;AAEb,UAAA,kBAAA;AAAA,MAAA,KAAA,GAAQ,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,OAAX,CAAA,CAAR,CAAA;AACA,MAAA,IAAG,UAAH;AACE,eAAO,CAAC,CAAC,SAAF,CAAY,KAAZ,EAAkB,SAAC,CAAD,GAAA;AAAO,iBAAO,KAAA,KAAS,EAAE,CAAC,KAAH,CAAS,CAAT,CAAhB,CAAP;QAAA,CAAlB,CAAP,CADF;OADA;AAGA,MAAA,IAAG,CAAC,CAAC,OAAF,CAAU,KAAV,CAAA,IAAqB,KAAK,CAAC,MAAN,KAAgB,CAAxC;AAGE,cAAA,CAHF;OAHA;AAAA,MASA,MAAA,GAAS,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,KAAf,CAAqB,CAAC,IAT/B,CAAA;AAAA,MAUA,GAAA,GAAM,MAAA,CAAO,KAAP,EAAc,KAAd,CAVN,CAAA;AAAA,MAWA,GAAA,GAAS,GAAA,GAAM,CAAT,GAAgB,CAAhB,GAA0B,GAAA,IAAO,KAAK,CAAC,MAAhB,GAA4B,KAAK,CAAC,MAAN,GAAe,CAA3C,GAAkD,GAX/E,CAAA;AAYA,aAAO,GAAP,CAda;IAAA,CAvff,CAAA;AAAA,IAugBA,EAAE,CAAC,IAAH,GAAU,SAAC,KAAD,GAAA;AACR,aAAQ,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,OAAX,CAAA,CAAqB,CAAA,EAAE,CAAC,SAAH,CAAa,KAAb,CAAA,CAA7B,CADQ;IAAA,CAvgBV,CAAA;AAAA,IA2gBA,EAAE,CAAC,QAAH,GAAc,SAAC,SAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,SAAA,GAAY,SAAZ,CAAA;AACA,QAAA,IAAG,SAAH;AACE,UAAA,KAAA,GAAQ,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CAAR,CAAA;AACA,UAAA,IAAG,EAAE,CAAC,SAAH,CAAA,CAAA,KAAkB,MAArB;AACE,YAAA,KAAK,CAAC,UAAN,CAAiB,WAAjB,CAAA,CADF;WAFF;SAAA,MAAA;AAKE,UAAA,KAAA,GAAQ,MAAR,CALF;SADA;AAOA,eAAO,EAAP,CATF;OADY;IAAA,CA3gBd,CAAA;AAAA,IAuhBA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,cAAA,GAAiB,WAAjB,CAAA;AAAA,QACA,WAAA,GAAc,GADd,CAAA;AAEA,eAAO,EAAP,CAJF;OADc;IAAA,CAvhBhB,CAAA;AAAA,IA8hBA,EAAE,CAAC,aAAH,GAAmB,SAAC,GAAD,GAAA;AACjB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,cAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,cAAA,GAAiB,GAAjB,CAAA;AACA,eAAO,EAAP,CAHF;OADiB;IAAA,CA9hBnB,CAAA;AAAA,IAoiBA,EAAE,CAAC,IAAH,GAAU,SAAA,GAAA;AACR,aAAO,KAAP,CADQ;IAAA,CApiBV,CAAA;AAAA,IAuiBA,EAAE,CAAC,KAAH,GAAW,SAAC,GAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,GAAT,CAAA;AACA,QAAA,IAAG,EAAE,CAAC,IAAH,CAAA,CAAH;AACE,UAAA,EAAE,CAAC,IAAH,CAAA,CAAS,CAAC,KAAV,CAAgB,MAAhB,CAAA,CADF;SADA;AAGA,eAAO,EAAP,CALF;OADS;IAAA,CAviBX,CAAA;AAAA,IA+iBA,EAAE,CAAC,YAAH,GAAkB,SAAC,GAAD,GAAA;AAChB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,aAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAA,UAAH;AACE,QAAA,IAAG,UAAA,KAAgB,MAAnB;AACE,UAAA,aAAA,GAAgB,WAAA,CAAY,GAAZ,CAAhB,CADF;SAAA,MAAA;AAGE,UAAA,IAAG,SAAS,CAAC,IAAV,CAAe,GAAf,CAAH;AACE,YAAA,aAAA,GAAgB,GAAhB,CADF;WAHF;SADF;OADA;AAOA,aAAO,EAAP,CARgB;IAAA,CA/iBlB,CAAA;AAAA,IAyjBA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,WAAA,GAAc,GAAd,CAAA;AACA,QAAA,IAAG,EAAE,CAAC,IAAH,CAAA,CAAH;AACE,UAAA,EAAE,CAAC,IAAH,CAAA,CAAS,CAAC,UAAV,CAAqB,GAArB,CAAA,CADF;SADA;AAGA,eAAO,EAAP,CALF;OADc;IAAA,CAzjBhB,CAAA;AAAA,IAikBA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,WAAA,GAAc,GAAd,CAAA;AACA,QAAA,IAAG,EAAE,CAAC,IAAH,CAAA,CAAH;AACE,UAAA,EAAE,CAAC,IAAH,CAAA,CAAS,CAAC,UAAV,CAAqB,GAArB,CAAA,CADF;SADA;AAGA,eAAO,EAAP,CALF;OADc;IAAA,CAjkBhB,CAAA;AAAA,IAykBA,eAAA,GAAkB;AAAA,MAAC,WAAA,EAAa,KAAd;KAzkBlB,CAAA;AAAA,IA0kBA,EAAE,CAAC,cAAH,GAAoB,SAAC,GAAD,GAAA;AAClB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,eAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;AACE,QAAA,CAAC,CAAC,MAAF,CAAS,eAAT,EAA0B,GAA1B,CAAA,CADF;OADA;AAGA,aAAO,EAAP,CAJkB;IAAA,CA1kBpB,CAAA;AAAA,IAglBA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,UAAA,GAAa,GAAb,CAAA;AACA,eAAO,EAAP,CAHF;OADa;IAAA,CAhlBf,CAAA;AAAA,IAslBA,EAAE,CAAC,SAAH,GAAe,SAAC,IAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AACS,QAAA,IAAG,UAAH;iBAAmB,WAAnB;SAAA,MAAA;iBAAmC,EAAE,CAAC,QAAH,CAAA,CAAc,CAAA,CAAA,EAAjD;SADT;OAAA,MAAA;AAGE,QAAA,UAAA,GAAa,IAAb,CAAA;AACA,eAAO,EAAP,CAJF;OADa;IAAA,CAtlBf,CAAA;AAAA,IA6lBA,eAAA,GAAkB;AAAA,MAAC,WAAA,EAAa,OAAd;KA7lBlB,CAAA;AAAA,IA8lBA,EAAE,CAAC,cAAH,GAAoB,SAAC,GAAD,GAAA;AAClB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,eAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;AACE,QAAA,CAAC,CAAC,MAAF,CAAS,eAAT,EAA0B,GAA1B,CAAA,CADF;OADA;AAGA,aAAO,EAAP,CAJkB;IAAA,CA9lBpB,CAAA;AAAA,IAomBA,EAAE,CAAC,gBAAH,GAAsB,SAAC,GAAD,GAAA;AACpB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,iBAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,iBAAA,GAAoB,GAApB,CAAA;AACA,eAAO,EAAP,CAHF;OADoB;IAAA,CApmBtB,CAAA;AAAA,IA0mBA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,mBAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,IAAG,GAAG,CAAC,MAAJ,GAAa,CAAhB;AACE,UAAA,mBAAA,GAAsB,GAAtB,CADF;SAAA,MAAA;AAGE,UAAA,mBAAA,GAAyB,EAAE,CAAC,SAAH,CAAA,CAAA,KAAkB,MAArB,GAAiC,cAAc,CAAC,IAAhD,GAA0D,cAAc,CAAC,MAA/F,CAHF;SAAA;AAAA,QAIA,eAAA,GAAqB,EAAE,CAAC,SAAH,CAAA,CAAA,KAAkB,MAArB,GAAiC,aAAa,CAAC,UAAd,CAAyB,mBAAzB,CAAjC,GAAoF,aAAa,CAAC,YAAd,CAA2B,mBAA3B,CAJtG,CAAA;AAKA,eAAO,EAAP,CAPF;OADU;IAAA,CA1mBZ,CAAA;AAAA,IAonBA,EAAE,CAAC,QAAH,GAAc,SAAC,SAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,SAAA,GAAY,SAAZ,CAAA;AACA,eAAO,EAAP,CAHF;OADY;IAAA,CApnBd,CAAA;AAAA,IA0nBA,UAAA,GAAa;AAAA,MAAC,MAAA,EAAO,WAAR;AAAA,MAAqB,cAAA,EAAgB,CAArC;KA1nBb,CAAA;AAAA,IA2nBA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;AACE,QAAA,CAAC,CAAC,MAAF,CAAS,UAAT,EAAqB,GAArB,CAAA,CADF;OADA;AAGA,aAAO,EAAP,CAJa;IAAA,CA3nBf,CAAA;AAAA,IAioBA,EAAE,CAAC,OAAH,GAAa,SAAC,SAAD,GAAA;AACX,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,QAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,QAAA,GAAW,SAAX,CAAA;AACA,eAAO,EAAP,CAHF;OADW;IAAA,CAjoBb,CAAA;AAAA,IAyoBA,EAAE,CAAC,QAAH,GAAc,SAAA,GAAA;AACZ,MAAA,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,SAAX,CAAA,CAAsB,CAAC,EAAvB,CAA2B,eAAA,GAAc,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAAzC,EAAqD,SAAC,IAAD,GAAA;AACnD,YAAA,MAAA;AAAA,QAAA,IAAG,EAAE,CAAC,WAAH,CAAA,CAAH;iBACE,MAAA,GAAS,EAAE,CAAC,WAAH,CAAA,CAAgB,CAAC,KAAjB,CAAA,EADX;SAAA,MAAA;AAGE,UAAA,IAAG,EAAE,CAAC,cAAH,CAAA,CAAH;AAEE,YAAA,MAAA,GAAS,EAAE,CAAC,SAAH,CAAa,IAAb,CAAT,CAAA;AACA,YAAA,IAAG,UAAA,KAAc,QAAd,IAA2B,CAAC,CAAC,IAAF,CAAO,MAAP,EAAe,KAAf,CAA9B;qBACE,IAAI,CAAC,KAAL,CAAY,QAAA,GAAO,CAAC,EAAE,CAAC,IAAH,CAAA,CAAD,CAAP,GAAkB,UAAlB,GAA4B,UAA5B,GAAuC,yCAAvC,GAAgF,SAAhF,GAA0F,wFAA1F,GAAkL,MAA9L,EADF;aAAA,MAAA;qBAGE,MAAM,CAAC,MAAP,CAAc,MAAd,EAHF;aAHF;WAHF;SADmD;MAAA,CAArD,CAAA,CAAA;AAAA,MAYA,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,SAAX,CAAA,CAAsB,CAAC,EAAvB,CAA2B,cAAA,GAAa,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAAxC,EAAoD,SAAC,IAAD,GAAA;AAElD;AAAA;;;;;;;WAAA;AAAA,YAAA,yDAAA;AASA;AAAA,aAAA,UAAA;uBAAA;AACE,UAAA,IAAG,CAAC,CAAC,WAAF,CAAA,CAAH;AACE,YAAA,CAAC,CAAC,WAAF,CAAA,CAAe,CAAC,WAAhB,CAA4B,CAAC,CAAC,QAAF,CAAA,CAA5B,CAAA,CADF;WADF;AAAA,SATA;AAAA,QAeA,OAAA,GAAU,EAAE,CAAC,GAAH,CAAA,CAfV,CAAA;AAgBA;AAAA,aAAA,WAAA;wBAAA;AACE,UAAA,IAAG,CAAA,KAAO,EAAP,IAAc,CAAC,CAAC,WAAF,CAAA,CAAA,KAAqB,EAAtC;AACE;AAAA,iBAAA,4CAAA;4BAAA;AACE,cAAA,OAAO,CAAC,GAAR,CAAY,CAAZ,CAAA,CADF;AAAA,aADF;WADF;AAAA,SAhBA;AAAA,QAoBA,EAAE,CAAC,YAAH,CAAgB,OAAO,CAAC,MAAR,CAAA,CAAhB,CApBA,CAAA;AAAA,QAsBA,QAAA,GAAY,EAAE,CAAC,UAAH,CAAA,CAtBZ,CAAA;AAuBA,QAAA,IAAG,QAAA,IAAa,UAAW,CAAA,QAAA,CAA3B;iBACE,iBAAA,GAAoB,UAAW,CAAA,QAAA,CAAX,CAAqB,IAArB,EADtB;SAzBkD;MAAA,CAApD,CAZA,CAAA;aAwCA,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,SAAX,CAAA,CAAsB,CAAC,EAAvB,CAA2B,UAAA,GAAS,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAApC,EAAgD,SAAA,GAAA;eAC9C,EAAE,CAAC,KAAH,CAAA,CAAU,CAAC,SAAX,CAAA,CAAsB,CAAC,EAAvB,CAA2B,GAAA,GAAE,CAAC,EAAE,CAAC,EAAH,CAAA,CAAD,CAA7B,EAAyC,IAAzC,EAD8C;MAAA,CAAhD,EAzCY;IAAA,CAzoBd,CAAA;AAAA,IAqrBA,EAAE,CAAC,MAAH,GAAY,SAAC,WAAD,GAAA;AACV,MAAA,EAAE,CAAC,MAAH,CAAA,CAAW,CAAC,SAAZ,CAAA,CAAuB,CAAC,MAAxB,CAA+B,WAA/B,CAAA,CAAA;AACA,aAAO,EAAP,CAFU;IAAA,CArrBZ,CAAA;AAAA,IAyrBA,EAAE,CAAC,WAAH,GAAiB,SAAA,GAAA;aACf,EAAE,CAAC,MAAH,CAAA,CAAW,CAAC,SAAZ,CAAA,CAAuB,CAAC,WAAxB,CAAA,EADe;IAAA,CAzrBjB,CAAA;AAAA,IA4rBA,EAAE,CAAC,QAAH,GAAc,SAAA,GAAA;AACZ,MAAA,EAAE,CAAC,MAAH,CAAA,CAAW,CAAC,SAAZ,CAAA,CAAuB,CAAC,QAAxB,CAAA,CAAA,CAAA;AACA,aAAO,EAAP,CAFY;IAAA,CA5rBd,CAAA;AAgsBA,WAAO,EAAP,CAjsBM;EAAA,CAAR,CAAA;AAmsBA,SAAO,KAAP,CArsB0C;AAAA,CAA5C,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,WAAnC,EAAgD,SAAC,IAAD,GAAA;AAC9C,MAAA,SAAA;AAAA,SAAO,SAAA,GAAY,SAAA,GAAA;AACjB,QAAA,uEAAA;AAAA,IAAA,KAAA,GAAQ,EAAR,CAAA;AAAA,IACA,SAAA,GAAY,EADZ,CAAA;AAAA,IAEA,WAAA,GAAc,EAFd,CAAA;AAAA,IAGA,MAAA,GAAS,MAHT,CAAA;AAAA,IAIA,eAAA,GAAkB,EAJlB,CAAA;AAAA,IAKA,WAAA,GAAc,MALd,CAAA;AAAA,IAOA,EAAA,GAAK,SAAA,GAAA,CAPL,CAAA;AAAA,IASA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,MAAA,GAAS,KAAT,CAAA;AACA,eAAO,EAAP,CAHF;OADS;IAAA,CATX,CAAA;AAAA,IAeA,EAAE,CAAC,GAAH,GAAS,SAAC,KAAD,GAAA;AACP,MAAA,IAAG,KAAM,CAAA,KAAK,CAAC,EAAN,CAAA,CAAA,CAAT;AACE,QAAA,IAAI,CAAC,KAAL,CAAY,uBAAA,GAAsB,CAAC,KAAK,CAAC,EAAN,CAAA,CAAD,CAAtB,GAAkC,mCAAlC,GAAoE,CAAC,MAAM,CAAC,EAAP,CAAA,CAAD,CAApE,GAAiF,oCAA7F,CAAA,CADF;OAAA;AAAA,MAEA,KAAM,CAAA,KAAK,CAAC,EAAN,CAAA,CAAA,CAAN,GAAoB,KAFpB,CAAA;AAAA,MAGA,SAAU,CAAA,KAAK,CAAC,IAAN,CAAA,CAAA,CAAV,GAA0B,KAH1B,CAAA;AAIA,aAAO,EAAP,CALO;IAAA,CAfT,CAAA;AAAA,IAsBA,EAAE,CAAC,QAAH,GAAc,SAAC,KAAD,GAAA;AACZ,aAAO,KAAK,CAAC,cAAN,CAAqB,KAAK,CAAC,EAAN,CAAA,CAArB,CAAP,CADY;IAAA,CAtBd,CAAA;AAAA,IAyBA,EAAE,CAAC,OAAH,GAAa,SAAC,IAAD,EAAO,WAAP,GAAA;AACX,UAAA,KAAA;AAAA,MAAA,IAAG,WAAH;AACE,aAAA,WAAA;wBAAA;AACE,UAAA,IAAG,CAAC,CAAC,IAAF,CAAA,CAAA,KAAY,IAAZ,IAAqB,CAAC,CAAC,WAAF,CAAA,CAAA,KAAmB,WAA3C;AACE,mBAAO,CAAP,CADF;WADF;AAAA,SAAA;AAGA,eAAO,MAAP,CAJF;OAAA;AAKA,MAAA,IAAG,SAAU,CAAA,IAAA,CAAb;eAAwB,SAAU,CAAA,IAAA,EAAlC;OAAA,MAA6C,IAAG,WAAW,CAAC,OAAf;eAA4B,WAAW,CAAC,OAAZ,CAAoB,IAApB,EAA5B;OAAA,MAAA;eAA2D,OAA3D;OANlC;IAAA,CAzBb,CAAA;AAAA,IAiCA,EAAE,CAAC,OAAH,GAAa,SAAC,IAAD,EAAO,WAAP,GAAA;AACX,UAAA,KAAA;AAAA,MAAA,IAAG,WAAH;AACE,aAAA,WAAA;wBAAA;AACE,UAAA,IAAG,CAAC,CAAC,IAAF,CAAA,CAAA,KAAY,IAAZ,IAAqB,CAAC,CAAC,WAAF,CAAA,CAAA,KAAmB,WAA3C;AACE,mBAAO,IAAP,CADF;WADF;AAAA,SAAA;AAGA,eAAO,KAAP,CAJF;OAAA;AAKA,aAAO,CAAA,CAAC,EAAG,CAAC,OAAH,CAAW,IAAX,CAAT,CANW;IAAA,CAjCb,CAAA;AAAA,IAyCA,EAAE,CAAC,MAAH,GAAY,SAAC,KAAD,GAAA;AACV,MAAA,IAAG,CAAA,KAAU,CAAA,KAAK,CAAC,EAAN,CAAA,CAAA,CAAb;AACE,QAAA,IAAI,CAAC,IAAL,CAAW,0BAAA,GAAyB,CAAC,KAAK,CAAC,EAAN,CAAA,CAAD,CAAzB,GAAqC,+BAArC,GAAmE,CAAC,MAAM,CAAC,EAAP,CAAA,CAAD,CAAnE,GAAgF,YAA3F,CAAA,CAAA;AACA,eAAO,EAAP,CAFF;OAAA;AAAA,MAGA,MAAA,CAAA,KAAa,CAAA,KAAK,CAAC,EAAN,CAAA,CAAA,CAHb,CAAA;AAAA,MAIA,MAAA,CAAA,EAAU,CAAA,KAAK,CAAC,EAAN,CAJV,CAAA;AAKA,aAAO,EAAP,CANU;IAAA,CAzCZ,CAAA;AAAA,IAiDA,EAAE,CAAC,YAAH,GAAkB,SAAC,SAAD,GAAA;AAChB,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,WAAA,GAAc,SAAd,CAAA;AACA,eAAO,EAAP,CAHF;OADgB;IAAA,CAjDlB,CAAA;AAAA,IAuDA,EAAE,CAAC,QAAH,GAAc,SAAA,GAAA;aACZ,MADY;IAAA,CAvDd,CAAA;AAAA,IA0DA,EAAE,CAAC,QAAH,GAAc,SAAA,GAAA;AACZ,UAAA,eAAA;AAAA,MAAA,GAAA,GAAM,EAAN,CAAA;AACA,MAAA,IAAG,WAAW,CAAC,QAAf;AACE;AAAA,aAAA,SAAA;sBAAA;AACE,UAAA,GAAI,CAAA,CAAA,CAAJ,GAAS,CAAT,CADF;AAAA,SADF;OADA;AAIA,WAAA,cAAA;yBAAA;AACE,QAAA,GAAI,CAAA,CAAA,CAAJ,GAAS,CAAT,CADF;AAAA,OAJA;AAMA,aAAO,GAAP,CAPY;IAAA,CA1Dd,CAAA;AAAA,IAmEA,EAAE,CAAC,cAAH,GAAoB,SAAC,GAAD,GAAA;AAClB,UAAA,WAAA;AAAA,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,eAAP,CAA9B;OAAA,MAAA;AAEE,QAAA,eAAA,GAAkB,GAAlB,CAAA;AACA,aAAA,0CAAA;sBAAA;AACE,UAAA,IAAG,CAAA,EAAM,CAAC,OAAH,CAAW,CAAX,CAAP;AACE,kBAAO,sBAAA,GAAsB,CAAtB,GAAwB,4BAA/B,CADF;WADF;AAAA,SAHF;OAAA;AAMA,aAAO,EAAP,CAPkB;IAAA,CAnEpB,CAAA;AAAA,IA4EA,EAAE,CAAC,SAAH,GAAe,SAAC,QAAD,GAAA;AACb,UAAA,iBAAA;AAAA,MAAA,CAAA,GAAI,EAAJ,CAAA;AACA,WAAA,+CAAA;4BAAA;AACE,QAAA,IAAG,EAAE,CAAC,OAAH,CAAW,IAAX,CAAH;AACE,UAAA,CAAE,CAAA,IAAA,CAAF,GAAU,EAAE,CAAC,OAAH,CAAW,IAAX,CAAV,CADF;SAAA,MAAA;AAGE,gBAAO,sBAAA,GAAsB,IAAtB,GAA2B,4BAAlC,CAHF;SADF;AAAA,OADA;AAMA,aAAO,CAAP,CAPa;IAAA,CA5Ef,CAAA;AAAA,IAqFA,EAAE,CAAC,kBAAH,GAAwB,SAAA,GAAA;AACtB,UAAA,mBAAA;AAAA,MAAA,CAAA,GAAI,EAAJ,CAAA;AACA;AAAA,WAAA,SAAA;oBAAA;AACE,QAAA,IAAA,GAAO,CAAC,CAAC,QAAF,CAAA,CAAP,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,MAAL,GAAc,CAAjB;AACE,UAAA,CAAC,CAAC,MAAF,CAAS,IAAT,CAAA,CADF;SAFF;AAAA,OADA;AAKA,aAAO,CAAP,CANsB;IAAA,CArFxB,CAAA;AAAA,IA6FA,EAAE,CAAC,UAAH,GAAgB,SAAC,IAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AACE,QAAA,IAAG,WAAH;AACE,iBAAO,EAAE,CAAC,OAAH,CAAW,WAAX,CAAP,CADF;SAAA;AAEA,eAAO,MAAP,CAHF;OAAA,MAAA;AAKE,QAAA,WAAA,GAAc,IAAd,CAAA;AACA,eAAO,EAAP,CANF;OADc;IAAA,CA7FhB,CAAA;AAsGA,WAAO,EAAP,CAvGiB;EAAA,CAAnB,CAD8C;AAAA,CAAhD,CAAA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,MAArC,EAA6C,SAAC,IAAD,EAAO,KAAP,EAAc,oBAAd,EAAoC,kBAApC,EAAwD,aAAxD,GAAA;AAC3C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,0MAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAGA,QAAA,GAAW,MAHX,CAAA;AAAA,MAIA,UAAA,GAAa,EAJb,CAAA;AAAA,MAKA,YAAA,GAAe,KALf,CAAA;AAAA,MAMA,UAAA,GAAa,KANb,CAAA;AAAA,MAOA,OAAA,GAAU,KAPV,CAAA;AAAA,MAQA,MAAA,GAAS,CART,CAAA;AAAA,MASA,GAAA,GAAM,MAAA,GAAS,QAAA,EATf,CAAA;AAAA,MAUA,IAAA,GAAO,MAVP,CAAA;AAAA,MAWA,UAAA,GAAa,MAXb,CAAA;AAAA,MAYA,eAAA,GAAkB,CAZlB,CAAA;AAAA,MAaA,YAAA,GAAe,GAbf,CAAA;AAAA,MAeA,KAAA,GAAQ,kBAAA,CAAA,CAfR,CAAA;AAAA,MAgBA,OAAA,GAAU,aAAA,CAAA,CAhBV,CAAA;AAAA,MAiBA,QAAA,GAAW,oBAAA,CAAA,CAjBX,CAAA;AAAA,MAqBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CArBpB,CAAA;AAAA,MA2BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CA3BlB,CAAA;AAAA,MAgCA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,6BAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,UAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAX9D,CAAA;AAYA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAZA;AAAA,QAgBA,IAAA,GAAO,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CACL,CAAC,CADI,CACF,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAP;QAAA,CADE,CAEL,CAAC,CAFI,CAEF,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAa,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB,GAAuC,CAAvC,GAA8C,CAAC,CAAC,KAA1D,EAAP;QAAA,CAFE,CAGL,CAAC,EAHI,CAGD,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,EAAR;QAAA,CAHC,CAhBP,CAAA;AAqBA,QAAA,IAAG,OAAH;AACE,UAAA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAAA,CADF;SArBA;AAAA,QAwBA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CACP,CAAC,IADM,CACD,IADC,EACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADL,CAxBT,CAAA;AAAA,QA0BA,KAAA,GAAQ,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,gBAAzC,CA1BR,CAAA;AAAA,QA2BA,KAAK,CAAC,MAAN,CAAa,MAAb,CACE,CAAC,IADH,CACQ,OADR,EACgB,oBADhB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CAFb,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,eAHpB,CAIE,CAAC,KAJH,CAIS,gBAJT,EAI2B,MAJ3B,CA3BA,CAAA;AAAA,QAmCA,IAAA,GAAO,MAAM,CAAC,MAAP,CAAc,qBAAd,CACL,CAAC,IADI,CACC,WADD,EACe,YAAA,GAAY,MAAZ,GAAmB,GADlC,CAEL,CAAC,IAFI,CAEC,QAFD,CAnCP,CAAA;AAAA,QAsCA,IAAA,GAAU,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA4B,OAAO,CAAC,QAApC,CAAlB,GAAqE,IAtC5E,CAAA;AAAA,QAuCA,IAAI,CAAC,IAAL,CAAU,GAAV,EAAe,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CAAf,CACE,CAAC,KADH,CACS,SADT,EACoB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,aAApC;WAAP;QAAA,CADpB,CAvCA,CAAA;AAAA,QA0CA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CA1CA,CAAA;AAAA,QA6CA,OACE,CAAC,CADH,CACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,CAAG,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAArD,EAAhC;QAAA,CADL,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAa,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB,GAAuC,CAAvC,GAA8C,CAAC,CAAC,KAA1D,EAAP;QAAA,CAFL,CAGE,CAAC,KAHH,CAGU,SAAC,CAAD,GAAA;AACN,cAAA,KAAA;AAAA,UAAA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAAR,CAAA;AACO,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBAAiC,MAAjC;WAAA,MAAA;mBAA4C,KAAK,CAAC,MAAlD;WAFD;QAAA,CAHV,CAOE,CAAC,QAPH,CAOY,CAAC,CAAC,KAAF,CAAA,CAPZ,CA7CA,CAAA;eAqDA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,SAArB,EAvDS;MAAA,CAhCX,CAAA;AAAA,MAyFA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,YAAA,KAAA;AAAA,QAAA,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,qBAAf,CAAR,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,KAAK,CAAC,IAAN,CAAW,GAAX,EAAgB,SAAC,CAAD,GAAA;AACd,YAAA,IAAA,CAAA;mBACA,IAAA,CAAK,CAAC,CAAC,MAAM,CAAC,KAAT,CAAe,QAAS,CAAA,CAAA,CAAxB,EAA2B,QAAS,CAAA,CAAA,CAAT,GAAc,CAAzC,CAAL,EAFc;UAAA,CAAhB,CAGE,CAAC,IAHH,CAGQ,WAHR,EAGsB,YAAA,GAAW,CAAC,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAA,GAA2B,CAA5B,CAAX,GAAyC,GAH/D,CAAA,CAAA;AAAA,UAIA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,CAJA,CAAA;iBAKA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EANF;SAAA,MAAA;AAQE,UAAA,KAAK,CAAC,IAAN,CAAW,GAAX,EAAgB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;UAAA,CAAhB,CAAA,CAAA;iBACA,OAAO,CAAC,KAAR,CAAc,IAAd,EATF;SAFM;MAAA,CAzFR,CAAA;AAAA,MAwGA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,UAAD,CAAY,OAAZ,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,UAAnC,CAA8C,QAA9C,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,CALA,CAAA;AAAA,QAUA,QAAQ,CAAC,WAAT,CAAqB,UAAU,CAAC,CAAhC,CAVA,CAAA;AAAA,QAWA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CAXA,CAAA;AAAA,QAYA,QAAQ,CAAC,EAAT,CAAa,WAAA,GAAW,GAAxB,EAA+B,QAAQ,CAAC,QAAxC,CAZA,CAAA;eAaA,QAAQ,CAAC,EAAT,CAAa,aAAA,GAAa,GAA1B,EAAiC,QAAQ,CAAC,WAA1C,EAd+B;MAAA,CAAjC,CAxGA,CAAA;AAAA,MAyHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CAzHA,CAAA;AAAA,MA0HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CA1HA,CAAA;AAAA,MA2HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CA3HA,CAAA;AAAA,MA6HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CA7HA,CAAA;AAkIA;AAAA;;;;;SAlIA;AAAA,MAwIA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,YAAA,GAAe,IAAf,CADF;SAAA,MAAA;AAGE,UAAA,YAAA,GAAe,KAAf,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALwB;MAAA,CAA1B,CAxIA,CAAA;AA+IA;AAAA;;;;;SA/IA;AAAA,MAqJA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,OAAA,GAAU,IAAV,CADF;SAAA,MAAA;AAGE,UAAA,OAAA,GAAU,KAAV,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CArJA,CAAA;AA4JA;AAAA;;;;SA5JA;aAiKA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,UAAA,GAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,EADf;SAD0B;MAAA,CAA5B,EAlKI;IAAA,CAHD;GAAP,CAF2C;AAAA,CAA7C,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAgBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,aAArC,EAAoD,SAAC,IAAD,EAAO,KAAP,EAAc,oBAAd,EAAoC,kBAApC,EAAwD,aAAxD,GAAA;AAClD,MAAA,eAAA;AAAA,EAAA,eAAA,GAAkB,CAAlB,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,mOAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,KAAA,GAAQ,EAAE,CAAC,MAAM,CAAC,KAAV,CAAA,CAFR,CAAA;AAAA,MAGA,MAAA,GAAS,MAHT,CAAA;AAAA,MAIA,MAAA,GAAS,IAJT,CAAA;AAAA,MAKA,YAAA,GAAe,KALf,CAAA;AAAA,MAMA,OAAA,GAAU,KANV,CAAA;AAAA,MAOA,WAAA,GAAc,EAPd,CAAA;AAAA,MAQA,IAAA,GAAO,MARP,CAAA;AAAA,MASA,UAAA,GAAa,MATb,CAAA;AAAA,MAUA,QAAA,GAAW,MAVX,CAAA;AAAA,MAWA,UAAA,GAAa,EAXb,CAAA;AAAA,MAYA,MAAA,GAAS,MAZT,CAAA;AAAA,MAaA,IAAA,GAAO,CAbP,CAAA;AAAA,MAcA,GAAA,GAAM,aAAA,GAAgB,eAAA,EAdtB,CAAA;AAAA,MAeA,YAAA,GAAe,GAff,CAAA;AAAA,MAiBA,KAAA,GAAQ,kBAAA,CAAA,CAjBR,CAAA;AAAA,MAkBA,OAAA,GAAU,aAAA,CAAA,CAlBV,CAAA;AAAA,MAoBA,UAAA,GAAa,MApBb,CAAA;AAAA,MAqBA,QAAA,GAAW,oBAAA,CAAA,CArBX,CAAA;AAAA,MAyBA,KACE,CAAC,MADH,CACU,SAAC,CAAD,GAAA;eAAK,CAAC,CAAC,OAAP;MAAA,CADV,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB;iBAAuC,EAAvC;SAAA,MAAA;iBAA8C,CAAC,CAAC,MAAhD;SAAP;MAAA,CAFL,CAGE,CAAC,CAHH,CAGK,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,UAAT;MAAA,CAHL,CAzBA,CAAA;AAAA,MAgCA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CAhCpB,CAAA;AAAA,MAsCA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CAtClB,CAAA;AAAA,MA2CA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,sCAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,UAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,WAAA,GAAc,KAAA,CAAM,IAAN,CAXd,CAAA;AAAA,QAaA,IAAA,GAAU,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAb5D,CAAA;AAAA,QAcA,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,IAAnB,CAdA,CAAA;AAgBA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAhBA;AAoBA,QAAA,IAAG,CAAA,MAAH;AACE,UAAA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CAAT,CADF;SApBA;AAuBA,QAAA,IAAG,MAAA,KAAU,QAAb;AACE,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,IAAV,CAAA,CAAT,CAAA;AAAA,UACA,MAAM,CAAC,MAAP,CAAc,CAAC,CAAD,EAAI,CAAJ,CAAd,CADA,CADF;SAAA,MAAA;AAGK,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAA,CAAT,CAHL;SAvBA;AAAA,QA4BA,IAAA,GAAO,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CACL,CAAC,CADI,CACF,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAR;QAAA,CADE,CAEL,CAAC,EAFI,CAED,SAAC,CAAD,GAAA;iBAAQ,MAAA,CAAO,CAAC,CAAC,EAAF,GAAO,CAAC,CAAC,CAAhB,EAAR;QAAA,CAFC,CAGL,CAAC,EAHI,CAGD,SAAC,CAAD,GAAA;iBAAQ,MAAA,CAAO,CAAC,CAAC,EAAT,EAAR;QAAA,CAHC,CA5BP,CAAA;AAiCA,QAAA,IAAG,OAAH;AACE,UAAA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAAA,CADF;SAjCA;AAAA,QAoCA,MAAA,GAAS,MACP,CAAC,IADM,CACD,WADC,EACY,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADZ,CApCT,CAAA;AAAA,QAsCA,KAAA,GAAQ,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,gBAAzC,CAtCR,CAAA;AAAA,QAuCA,KACE,CAAC,MADH,CACU,MADV,CACiB,CAAC,IADlB,CACuB,OADvB,EACgC,oBADhC,CAEI,CAAC,KAFL,CAEW,gBAFX,EAE6B,MAF7B,CAGI,CAAC,KAHL,CAGW,SAHX,EAGsB,CAHtB,CAvCA,CAAA;AAAA,QA6CA,UAAA,GAAa,MAAM,CAAC,MAAP,CAAc,qBAAd,CAIX,CAAC,IAJU,CAIL,WAJK,EAIS,YAAA,GAAY,IAAZ,GAAiB,GAJ1B,CAKX,CAAC,IALU,CAKL,QALK,CA7Cb,CAAA;AAAA,QAoDA,SAAA,GAAe,SAAH,GAAkB,UAAU,CAAC,UAAX,CAAA,CAAuB,CAAC,QAAxB,CAAiC,OAAO,CAAC,QAAzC,CAAlB,GAA0E,UApDtF,CAAA;AAAA,QAsDA,SACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CADb,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,YAFpB,CAtDA,CAAA;AAAA,QA0DA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CA1DA,CAAA;AAAA,QA6DA,OACE,CAAC,CADH,CACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,CAAG,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAArD,EAAhC;QAAA,CADL,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;iBAAO,MAAA,CAAO,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,EAAf,EAAP;QAAA,CAFL,CAGE,CAAC,KAHH,CAGU,SAAC,CAAD,GAAA;AACN,cAAA,KAAA;AAAA,UAAA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAAR,CAAA;AACO,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBAAiC,MAAjC;WAAA,MAAA;mBAA4C,KAAK,CAAC,MAAlD;WAFD;QAAA,CAHV,CAOE,CAAC,QAPH,CAOY,CAAC,CAAC,KAAF,CAAA,CAPZ,CA7DA,CAAA;eAsEA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,SAArB,EAxES;MAAA,CA3CX,CAAA;AAAA,MAqHA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,QAAA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,qBAAf,CAAT,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAM,CAAC,KAAT,CAAe,QAAS,CAAA,CAAA,CAAxB,EAA2B,QAAS,CAAA,CAAA,CAAT,GAAc,CAAzC,CAAL,EAAP;UAAA,CAAjB,CACE,CAAC,IADH,CACQ,WADR,EACsB,YAAA,GAAW,CAAC,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAA,GAA2B,CAA5B,CAAX,GAAyC,GAD/D,CAAA,CAAA;AAAA,UAEA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,CAFA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAAA,MAAA;AAME,UAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;UAAA,CAAjB,CAAA,CAAA;iBACA,OAAO,CAAC,KAAR,CAAc,IAAd,EAPF;SAFM;MAAA,CArHR,CAAA;AAAA,MAkIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,UAAD,CAAY,OAAZ,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,OAAzB,CAAiC,CAAC,cAAlC,CAAiD,IAAjD,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,UAAnC,CAA8C,QAA9C,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,SAHH,CAGa,IAHb,CAIE,CAAC,UAJH,CAIc,UAAU,CAAC,KAJzB,CAKE,CAAC,KALH,CAKS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,GAAf;QAAA,CALT,CALA,CAAA;AAAA,QAWA,QAAQ,CAAC,WAAT,CAAqB,UAAU,CAAC,CAAhC,CAXA,CAAA;AAAA,QAYA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CAZA,CAAA;AAAA,QAaA,QAAQ,CAAC,EAAT,CAAa,WAAA,GAAW,GAAxB,EAA+B,QAAQ,CAAC,QAAxC,CAbA,CAAA;eAcA,QAAQ,CAAC,EAAT,CAAa,aAAA,GAAa,GAA1B,EAAiC,QAAQ,CAAC,WAA1C,EAf+B;MAAA,CAAjC,CAlIA,CAAA;AAAA,MAoJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CApJA,CAAA;AAAA,MAqJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CArJA,CAAA;AAAA,MAsJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CAtJA,CAAA;AAAA,MAwJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAxJA,CAAA;AA8JA;AAAA;;;;;;SA9JA;AAAA,MAqKA,KAAK,CAAC,QAAN,CAAe,aAAf,EAA8B,SAAC,GAAD,GAAA;AAC5B,QAAA,IAAG,GAAA,KAAQ,MAAR,IAAA,GAAA,KAAgB,YAAhB,IAAA,GAAA,KAA8B,QAA9B,IAAA,GAAA,KAAwC,QAA3C;AACE,UAAA,MAAA,GAAS,GAAT,CADF;SAAA,MAAA;AAGE,UAAA,MAAA,GAAS,MAAT,CAHF;SAAA;AAAA,QAIA,KAAK,CAAC,MAAN,CAAa,MAAb,CAJA,CAAA;eAKA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAN4B;MAAA,CAA9B,CArKA,CAAA;AA4KA;AAAA;;;;;SA5KA;AAAA,MAkLA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,YAAA,GAAe,IAAf,CADF;SAAA,MAAA;AAGE,UAAA,YAAA,GAAe,KAAf,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALwB;MAAA,CAA1B,CAlLA,CAAA;AAyLA;AAAA;;;;;SAzLA;AAAA,MA+LA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,OAAA,GAAU,IAAV,CADF;SAAA,MAAA;AAGE,UAAA,OAAA,GAAU,KAAV,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CA/LA,CAAA;AAsMA;AAAA;;;;SAtMA;aA2MA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,UAAA,GAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,EADf;SAD0B;MAAA,CAA5B,EA5MI;IAAA,CAHD;GAAP,CAFkD;AAAA,CAApD,CAhBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAgBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,qBAArC,EAA4D,SAAC,IAAD,EAAO,KAAP,EAAc,oBAAd,EAAoC,kBAApC,EAAwD,aAAxD,GAAA;AAC1D,MAAA,mBAAA;AAAA,EAAA,mBAAA,GAAsB,CAAtB,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,2NAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,KAAA,GAAQ,EAAE,CAAC,MAAM,CAAC,KAAV,CAAA,CAFR,CAAA;AAAA,MAGA,MAAA,GAAS,MAHT,CAAA;AAAA,MAIA,MAAA,GAAS,IAJT,CAAA;AAAA,MAKA,YAAA,GAAe,KALf,CAAA;AAAA,MAMA,UAAA,GAAa,EANb,CAAA;AAAA,MAOA,OAAA,GAAU,KAPV,CAAA;AAAA,MAQA,WAAA,GAAc,EARd,CAAA;AAAA,MASA,IAAA,GAAO,MATP,CAAA;AAAA,MAUA,QAAA,GAAW,MAVX,CAAA;AAAA,MAWA,UAAA,GAAa,EAXb,CAAA;AAAA,MAYA,IAAA,GAAO,CAZP,CAAA;AAAA,MAaA,GAAA,GAAM,iBAAA,GAAoB,mBAAA,EAb1B,CAAA;AAAA,MAcA,YAAA,GAAe,GAdf,CAAA;AAAA,MAgBA,KAAA,GAAQ,kBAAA,CAAA,CAhBR,CAAA;AAAA,MAiBA,OAAA,GAAU,aAAA,CAAA,CAjBV,CAAA;AAAA,MAkBA,QAAA,GAAW,oBAAA,CAAA,CAlBX,CAAA;AAAA,MAmBA,UAAA,GAAa,MAnBb,CAAA;AAAA,MAuBA,KACE,CAAC,MADH,CACU,SAAC,CAAD,GAAA;eAAK,CAAC,CAAC,OAAP;MAAA,CADV,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB;iBAAuC,EAAvC;SAAA,MAAA;iBAA8C,CAAC,CAAC,MAAhD;SAAP;MAAA,CAFL,CAGE,CAAC,CAHH,CAGK,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,UAAT;MAAA,CAHL,CAvBA,CAAA;AAAA,MA8BA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CA9BpB,CAAA;AAAA,MAoCA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CApClB,CAAA;AAAA,MAyCA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,8CAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,UAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,WAAA,GAAc,KAAA,CAAM,IAAN,CAXd,CAAA;AAAA,QAaA,IAAA,GAAU,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAb5D,CAAA;AAeA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAfA;AAmBA,QAAA,IAAG,CAAA,MAAH;AACE,UAAA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CAAT,CADF;SAnBA;AAsBA,QAAA,IAAG,MAAA,KAAU,QAAb;AACE,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,IAAV,CAAA,CAAT,CAAA;AAAA,UACA,MAAM,CAAC,MAAP,CAAc,CAAC,CAAD,EAAI,CAAJ,CAAd,CADA,CADF;SAAA,MAAA;AAGK,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAA,CAAT,CAHL;SAtBA;AAAA,QA2BA,IAAA,GAAO,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CACL,CAAC,CADI,CACF,SAAC,CAAD,GAAA;iBAAQ,CAAA,CAAE,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAT;QAAA,CADE,CAEL,CAAC,EAFI,CAED,SAAC,CAAD,GAAA;iBAAQ,MAAA,CAAO,CAAC,CAAC,EAAF,GAAO,CAAC,CAAC,CAAhB,EAAR;QAAA,CAFC,CAGL,CAAC,EAHI,CAGD,SAAC,CAAD,GAAA;iBAAQ,MAAA,CAAO,CAAC,CAAC,EAAT,EAAR;QAAA,CAHC,CA3BP,CAAA;AAgCA,QAAA,IAAG,OAAH;AACE,UAAA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAAA,CADF;SAhCA;AAAA,QAmCA,MAAA,GAAS,MACP,CAAC,IADM,CACD,WADC,EACY,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADZ,CAnCT,CAAA;AAAA,QAqCA,KAAA,GAAQ,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,gBAAzC,CArCR,CAAA;AAAA,QAsCA,KACE,CAAC,MADH,CACU,MADV,CACiB,CAAC,IADlB,CACuB,OADvB,EACgC,oBADhC,CAEE,CAAC,KAFH,CAES,gBAFT,EAE2B,MAF3B,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAtCA,CAAA;AAAA,QA2CA,UAAA,GAAa,MAAM,CAAC,MAAP,CAAc,qBAAd,CAIX,CAAC,IAJU,CAIL,WAJK,EAIS,YAAA,GAAY,IAAZ,GAAiB,cAJ1B,CAKX,CAAC,IALU,CAKL,QALK,CA3Cb,CAAA;AAAA,QAkDA,SAAA,GAAe,SAAH,GAAkB,UAAU,CAAC,UAAX,CAAA,CAAuB,CAAC,QAAxB,CAAiC,OAAO,CAAC,QAAzC,CAAlB,GAA0E,UAlDtF,CAAA;AAAA,QAoDA,SACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CADb,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,YAFpB,CApDA,CAAA;AAAA,QAwDA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CAxDA,CAAA;AAAA,QA2DA,OACE,CAAC,CADH,CACK,SAAC,CAAD,GAAA;iBAAO,MAAA,CAAO,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,EAAf,EAAP;QAAA,CADL,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAA0B,CAAG,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAArD,EAAjC;QAAA,CAFL,CAGE,CAAC,KAHH,CAGU,SAAC,CAAD,GAAA;AACN,cAAA,KAAA;AAAA,UAAA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAAR,CAAA;AACO,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBAAiC,MAAjC;WAAA,MAAA;mBAA4C,KAAK,CAAC,MAAlD;WAFD;QAAA,CAHV,CAOE,CAAC,QAPH,CAOY,CAAC,CAAC,KAAF,CAAA,CAPZ,CAQE,CAAC,UARH,CAQc,IARd,CA3DA,CAAA;eAqEA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,SAArB,EAvES;MAAA,CAzCX,CAAA;AAAA,MAkHA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,QAAA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,qBAAf,CAAT,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAM,CAAC,KAAT,CAAe,QAAS,CAAA,CAAA,CAAxB,EAA2B,QAAS,CAAA,CAAA,CAAT,GAAc,CAAzC,CAAL,EAAP;UAAA,CAAjB,CACE,CAAC,IADH,CACQ,WADR,EACsB,YAAA,GAAW,CAAC,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAA,GAA2B,CAA5B,CAAX,GAAyC,GAD/D,CAAA,CAAA;AAAA,UAEA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,CAFA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAAA,MAAA;AAME,UAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;UAAA,CAAjB,CAAA,CAAA;iBACA,OAAO,CAAC,KAAR,CAAc,IAAd,EAPF;SAFM;MAAA,CAlHR,CAAA;AAAA,MA+HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,UAAD,CAAY,OAAZ,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,OAAzB,CAAiC,CAAC,cAAlC,CAAiD,IAAjD,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,UAAnC,CAA8C,QAA9C,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,SAHH,CAGa,IAHb,CAIE,CAAC,UAJH,CAIc,UAAU,CAAC,KAJzB,CAKE,CAAC,KALH,CAKS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,GAAf;QAAA,CALT,CALA,CAAA;AAAA,QAWA,QAAQ,CAAC,WAAT,CAAqB,UAAU,CAAC,CAAhC,CAXA,CAAA;AAAA,QAYA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CAZA,CAAA;AAAA,QAaA,QAAQ,CAAC,EAAT,CAAa,WAAA,GAAW,GAAxB,EAA+B,QAAQ,CAAC,QAAxC,CAbA,CAAA;eAcA,QAAQ,CAAC,EAAT,CAAa,aAAA,GAAa,GAA1B,EAAiC,QAAQ,CAAC,WAA1C,EAf+B;MAAA,CAAjC,CA/HA,CAAA;AAAA,MAgJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CAhJA,CAAA;AAAA,MAiJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAjJA,CAAA;AAAA,MAkJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CAlJA,CAAA;AAAA,MAoJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CApJA,CAAA;AA0JA;AAAA;;;;;;SA1JA;AAAA,MAkKA,KAAK,CAAC,QAAN,CAAe,qBAAf,EAAsC,SAAC,GAAD,GAAA;AACpC,QAAA,IAAG,GAAA,KAAQ,MAAR,IAAA,GAAA,KAAgB,YAAhB,IAAA,GAAA,KAA8B,QAA9B,IAAA,GAAA,KAAwC,QAA3C;AACE,UAAA,MAAA,GAAS,GAAT,CADF;SAAA,MAAA;AAGE,UAAA,MAAA,GAAS,MAAT,CAHF;SAAA;AAAA,QAIA,KAAK,CAAC,MAAN,CAAa,MAAb,CAJA,CAAA;eAKA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EANoC;MAAA,CAAtC,CAlKA,CAAA;AA0KA;AAAA;;;;;SA1KA;AAAA,MAiLA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,YAAA,GAAe,IAAf,CADF;SAAA,MAAA;AAGE,UAAA,YAAA,GAAe,KAAf,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALwB;MAAA,CAA1B,CAjLA,CAAA;AAwLA;AAAA;;;;;SAxLA;AAAA,MA8LA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,OAAA,GAAU,IAAV,CADF;SAAA,MAAA;AAGE,UAAA,OAAA,GAAU,KAAV,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CA9LA,CAAA;AAqMA;AAAA;;;;SArMA;aA0MA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,UAAA,GAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,EADf;SAD0B;MAAA,CAA5B,EA3MI;IAAA,CAHD;GAAP,CAF0D;AAAA,CAA5D,CAhBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,cAArC,EAAqD,SAAC,IAAD,EAAO,KAAP,EAAc,oBAAd,EAAoC,kBAApC,EAAwD,aAAxD,GAAA;AACnD,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,kOAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,QAAA,GAAW,MAFX,CAAA;AAAA,MAGA,YAAA,GAAe,MAHf,CAAA;AAAA,MAIA,QAAA,GAAW,MAJX,CAAA;AAAA,MAKA,UAAA,GAAa,EALb,CAAA;AAAA,MAMA,OAAA,GAAU,KANV,CAAA;AAAA,MAOA,YAAA,GAAe,KAPf,CAAA;AAAA,MAQA,UAAA,GAAa,EARb,CAAA;AAAA,MASA,MAAA,GAAS,CATT,CAAA;AAAA,MAUA,IAAA,GAAO,MAVP,CAAA;AAAA,MAWA,GAAA,GAAM,cAAA,GAAiB,QAAA,EAXvB,CAAA;AAAA,MAYA,YAAA,GAAe,GAZf,CAAA;AAAA,MAcA,UAAA,GAAa,MAdb,CAAA;AAAA,MAeA,eAAA,GAAkB,CAflB,CAAA;AAAA,MAiBA,KAAA,GAAQ,kBAAA,CAAA,CAjBR,CAAA;AAAA,MAkBA,OAAA,GAAU,aAAA,CAAA,CAlBV,CAAA;AAAA,MAmBA,QAAA,GAAW,oBAAA,CAAA,CAnBX,CAAA;AAAA,MAuBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CAvBpB,CAAA;AAAA,MA6BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CA7BlB,CAAA;AAAA,MAkCA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,6BAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,UAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAX9D,CAAA;AAYA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAZA;AAAA,QAgBA,IAAA,GAAO,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CACL,CAAC,CADI,CACF,SAAC,CAAD,GAAA;iBAAO,CAAA,CAAE,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAR;QAAA,CADE,CAEL,CAAC,CAFI,CAEF,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAa,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB,GAAuC,CAAvC,GAA8C,CAAC,CAAC,KAA1D,EAAP;QAAA,CAFE,CAGL,CAAC,EAHI,CAGD,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,EAAR;QAAA,CAHC,CAhBP,CAAA;AAqBA,QAAA,IAAG,OAAH;AACE,UAAA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAAA,CADF;SArBA;AAAA,QAwBA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CACP,CAAC,IADM,CACD,IADC,EACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADL,CAxBT,CAAA;AAAA,QA0BA,KAAA,GAAQ,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,gBAAzC,CA1BR,CAAA;AAAA,QA2BA,KAAK,CAAC,MAAN,CAAa,MAAb,CACE,CAAC,IADH,CACQ,OADR,EACgB,oBADhB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CAFb,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,eAHpB,CAIE,CAAC,KAJH,CAIS,gBAJT,EAI2B,MAJ3B,CA3BA,CAAA;AAAA,QAiCA,IAAA,GAAO,MAAM,CAAC,MAAP,CAAc,qBAAd,CACL,CAAC,IADI,CACC,WADD,EACe,cAAA,GAAc,MAAd,GAAqB,cADpC,CAKL,CAAC,KALI,CAKE,gBALF,EAKoB,MALpB,CAjCP,CAAA;AAAA,QAuCA,IAAI,CAAC,IAAL,CAAU,QAAV,CAvCA,CAAA;AAAA,QAwCA,IAAA,GAAU,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA4B,OAAO,CAAC,QAApC,CAAlB,GAAqE,IAxC5E,CAAA;AAAA,QAyCA,IACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CADb,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,aAApC;WAAP;QAAA,CAFpB,CAzCA,CAAA;AAAA,QA6CA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CA7CA,CAAA;AAAA,QAgDA,OACE,CAAC,UADH,CACc,IADd,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAa,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB,GAAuC,CAAvC,GAA8C,CAAC,CAAC,KAA1D,EAAP;QAAA,CAFL,CAGE,CAAC,CAHH,CAGK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,CAAG,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAArD,EAAhC;QAAA,CAHL,CAIE,CAAC,KAJH,CAIU,SAAC,CAAD,GAAA;AACN,cAAA,KAAA;AAAA,UAAA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAAR,CAAA;AACO,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBAAiC,MAAjC;WAAA,MAAA;mBAA4C,KAAK,CAAC,MAAlD;WAFD;QAAA,CAJV,CAQE,CAAC,QARH,CAQY,CAAC,CAAC,KAAF,CAAA,CARZ,CAhDA,CAAA;eAyDA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,SAArB,EA3DS;MAAA,CAlCX,CAAA;AAAA,MA+FA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,EAAiB,KAAjB,EAAwB,MAAxB,GAAA;AACN,YAAA,QAAA;AAAA,QAAA,QAAA,GAAW,IAAI,CAAC,SAAL,CAAe,qBAAf,CAAX,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,GAAd,EAAmB,SAAC,CAAD,GAAA;AACjB,YAAA,IAAA,CAAA;mBACA,IAAA,CAAK,CAAC,CAAC,MAAM,CAAC,KAAT,CAAe,QAAS,CAAA,CAAA,CAAxB,EAA2B,QAAS,CAAA,CAAA,CAAT,GAAc,CAAzC,CAAL,EAFiB;UAAA,CAAnB,CAGA,CAAC,IAHD,CAGM,WAHN,EAGoB,cAAA,GAAa,CAAC,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAA,GAA2B,CAA5B,CAAb,GAA2C,cAH/D,CAAA,CAAA;AAAA,UAIA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,CAJA,CAAA;iBAKA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EANF;SAAA,MAAA;AAQE,UAAA,QAAQ,CAAC,IAAT,CAAc,GAAd,EAAmB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;UAAA,CAAnB,CAAA,CAAA;iBACA,OAAO,CAAC,KAAR,CAAc,IAAd,EATF;SAFM;MAAA,CA/FR,CAAA;AAAA,MA8GA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,UAAD,CAAY,OAAZ,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,UAAnC,CAA8C,QAA9C,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,CALA,CAAA;AAAA,QAUA,QAAQ,CAAC,WAAT,CAAqB,UAAU,CAAC,CAAhC,CAVA,CAAA;AAAA,QAWA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CAXA,CAAA;AAAA,QAYA,QAAQ,CAAC,EAAT,CAAa,WAAA,GAAW,GAAxB,EAA+B,QAAQ,CAAC,QAAxC,CAZA,CAAA;eAaA,QAAQ,CAAC,EAAT,CAAa,aAAA,GAAa,GAA1B,EAAiC,QAAQ,CAAC,WAA1C,EAd+B;MAAA,CAAjC,CA9GA,CAAA;AAAA,MA+HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CA/HA,CAAA;AAAA,MAgIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAhIA,CAAA;AAAA,MAiIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CAjIA,CAAA;AAAA,MAmIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAnIA,CAAA;AAwIA;AAAA;;;;;SAxIA;AAAA,MA8IA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,YAAA,GAAe,IAAf,CADF;SAAA,MAAA;AAGE,UAAA,YAAA,GAAe,KAAf,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALwB;MAAA,CAA1B,CA9IA,CAAA;AAoJA;AAAA;;;;;SApJA;AAAA,MA0JA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,OAAA,GAAU,IAAV,CADF;SAAA,MAAA;AAGE,UAAA,OAAA,GAAU,KAAV,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CA1JA,CAAA;AAiKA;AAAA;;;;SAjKA;aAsKA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,UAAA,GAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,EADf;SAD0B;MAAA,CAA5B,EAvKI;IAAA,CAHD;GAAP,CAFmD;AAAA,CAArD,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAeO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,MAArC,EAA6C,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,gBAAzB,EAA2C,kBAA3C,EAA+D,oBAA/D,GAAA;AAC3C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACP,QAAA,EAAU,GADH;AAAA,IAEP,OAAA,EAAS,SAFF;AAAA,IAIP,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,wLAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,GAAA,GAAO,MAAA,GAAK,CAAC,QAAA,EAAD,CAFZ,CAAA;AAAA,MAIA,IAAA,GAAO,IAJP,CAAA;AAAA,MAKA,aAAA,GAAgB,CALhB,CAAA;AAAA,MAMA,kBAAA,GAAqB,CANrB,CAAA;AAAA,MAOA,UAAA,GAAa,EAPb,CAAA;AAAA,MAQA,SAAA,GAAY,MARZ,CAAA;AAAA,MASA,SAAA,GAAY,EATZ,CAAA;AAAA,MAUA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAVT,CAAA;AAAA,MAYA,KAAA,GAAQ,kBAAA,CAAA,CAZR,CAAA;AAAA,MAaA,QAAA,GAAW,oBAAA,CAAA,CAbX,CAAA;AAAA,MAcA,UAAA,GAAa,gBAAA,CAAA,CAdb,CAAA;AAAA,MAeA,QAAA,GAAW,MAfX,CAAA;AAAA,MAmBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,YAAA,UAAA;AAAA,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAHF;SAFkB;MAAA,CAnBpB,CAAA;AAAA,MA0BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,YAAA,UAAA;AAAA,QAAA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CAAb,CAAA;AAAA,QACA,UAAU,CAAC,QAAX,CAAoB,OAAO,CAAC,QAA5B,CAAqC,CAAC,MAAtC,CAA6C,IAAI,CAAC,cAAL,CAAA,CAA7C,CADA,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CA1BlB,CAAA;AAAA,MA+BA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,kFAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,SAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAW,KAAK,CAAC,QAAN,CAAA,CAAgB,CAAC,MAAjB,KAA2B,CAA9B,GAAqC,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAArC,GAAoE,KAAK,CAAC,GAAN,CAAU,CAAC,CAAC,IAAZ,CAF5E,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,WAAA,GAAc,CAAA,KAAS,CAAC,QAAN,CAAA,CAAJ,IAAyB,KAAK,CAAC,SAAN,CAAA,CAXvC,CAAA;AAAA,QAYA,QAAQ,CAAC,UAAT,CAAoB,WAApB,CAZA,CAAA;AAcA,QAAA,IAAG,CAAA,IAAH;AACE,UAAA,IAAA,GAAO,IAAC,CAAA,SAAD,CAAW,iBAAX,CAAP,CADF;SAdA;AAAA,QAkBA,SAAA,GAAY,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAlBZ,CAAA;AAAA,QAmBA,UAAA,GAAa,SAAA,GAAY,CAAC,CAAA,GAAI,MAAM,CAAC,OAAZ,CAAZ,GAAmC,MAAM,CAAC,OAnBvD,CAAA;AAAA,QAoBA,eAAA,GAAkB,SAAA,GAAY,CAAC,CAAA,GAAI,MAAM,CAAC,YAAZ,CAAZ,GAAwC,MAAM,CAAC,YApBjE,CAAA;AAAA,QAuBA,MAAA,GAAS,SAAC,CAAD,GAAA;AACP,UAAA,IAAG,CAAC,CAAC,OAAF,CAAA,CAAH;AACE,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAhB;aAJF;WAAA,MAAA;AAME,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAO,CAAA,UAAA,GAAc,CAArB,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAAhB;aATF;WAAA;AAUA,iBAAO,CAAP,CAXO;QAAA,CAvBT,CAAA;AAAA,QAoCA,IAAA,GAAO,IAAI,CAAC,IAAL,CAAU,IAAK,CAAA,CAAA,CAAE,CAAC,MAAlB,EAA0B,SAAC,CAAD,EAAI,CAAJ,GAAA;iBAAU,CAAC,CAAC,IAAZ;QAAA,CAA1B,CApCP,CAAA;AAAA,QAsCA,KAAA,GAAQ,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,MAAb,CAAoB,GAApB,CAAwB,CAAC,IAAzB,CAA8B,OAA9B,EAAsC,gBAAtC,CACN,CAAC,IADK,CACA,WADA,EACa,SAAC,CAAD,GAAA;iBAAO,YAAA,GAAW,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAD,CAAX,GAAyB,IAAzB,GAA4B,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,MAAA,CAAO,CAAP,CAA1B,CAA5B,GAAgE,IAAvE;QAAA,CADb,CAtCR,CAAA;AAAA,QAyCA,KAAK,CAAC,MAAN,CAAa,MAAb,CACE,CAAC,IADH,CACQ,OADR,EACiB,mCADjB,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,UAApC;WAAP;QAAA,CAFlB,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAIE,CAAC,IAJH,CAIQ,QAAQ,CAAC,OAJjB,CAKE,CAAC,IALH,CAKQ,SALR,CAzCA,CAAA;AAAA,QAgDA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA2B,OAAO,CAAC,QAAnC,CAAlB,GAAoE,IAArE,CACI,CAAC,IADL,CACU,WADV,EACuB,SAAC,CAAD,GAAA;iBAAQ,YAAA,GAAW,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAD,CAAX,GAAyB,IAAzB,GAA4B,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,MAAA,CAAO,CAAP,CAA1B,CAA5B,GAAgE,eAAxE;QAAA,CADvB,CAhDA,CAAA;AAAA,QAmDA,IAAA,GAAO,IAAI,CAAC,MAAL,CAAY,MAAZ,CAIL,CAAC,IAJI,CAIC,QAJD,CAnDP,CAAA;AAAA,QAwDA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA2B,OAAO,CAAC,QAAnC,CAAlB,GAAoE,IAArE,CACE,CAAC,IADH,CACQ,QADR,EACkB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,UAApC;WAAP;QAAA,CADlB,CAEE,CAAC,IAFH,CAEQ,OAFR,EAEiB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAA,GAAe,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,CAAxB,EAAP;QAAA,CAFjB,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAxDA,CAAA;AAAA,QA6DA,IAAI,CAAC,IAAL,CAAA,CACE,CAAC,MADH,CAAA,CA7DA,CAAA;eAgEA,IAAI,CAAC,IAAL,CAAU,UAAV,EAAsB,SAAtB,EAAiC,IAAI,CAAC,cAAL,CAAA,CAAjC,EAlES;MAAA,CA/BX,CAAA;AAAA,MAmGA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,QAAA,IACE,CAAC,IADH,CACQ,WADR,EACoB,SAAC,CAAD,GAAA;AAAO,cAAA,CAAA;iBAAC,eAAA,GAAc,CAAI,CAAC,CAAA,GAAI,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,GAAf,CAAL,CAAA,IAA6B,CAAhC,GAAuC,CAAvC,GAA8C,CAAA,IAA/C,CAAd,GAAmE,IAA3E;QAAA,CADpB,CAEI,CAAC,SAFL,CAEe,gBAFf,CAGI,CAAC,IAHL,CAGU,QAHV,EAGoB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,EAAP;QAAA,CAHpB,CAAA,CAAA;eAIA,UAAU,CAAC,KAAX,CAAiB,IAAjB,EALM;MAAA,CAnGR,CAAA;AAAA,MA4GA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,KAAzB,CAA+B,CAAC,cAAhC,CAA+C,IAA/C,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,YAAnC,CAAgD,MAAhD,CAAuD,CAAC,SAAxD,CAAkE,SAAlE,CAFA,CAAA;AAAA,QAGA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAH3B,CAAA;AAAA,QAIA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAJ5B,CAAA;AAAA,QAKA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,CALA,CAAA;AAAA,QAUA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CAVA,CAAA;eAWA,UACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,EAZ+B;MAAA,CAAjC,CA5GA,CAAA;AAAA,MA4HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CA5HA,CAAA;AAAA,MA6HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CA7HA,CAAA;AAAA,MA8HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CA9HA,CAAA;AAAA,MAgIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAhIA,CAAA;AAoIA;AAAA;;;;;;;;;;;;SApIA;AAAA,MAiJA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,YAAA,MAAA;AAAA,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB,CAAA;AAAA,UACA,MAAM,CAAC,YAAP,GAAsB,CADtB,CADF;SAAA,MAGK,IAAG,GAAA,KAAO,MAAV;AACH,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAAT,CADG;SAAA,MAAA;AAGH,UAAA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAT,CAAA;AACA,UAAA,IAAG,MAAH;AACE,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAAA;AAGA,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAJF;WAJG;SAHL;AAAA,QAcA,UAAU,CAAC,CAAC,CAAC,YAAb,CAA0B,MAA1B,CAdA,CAAA;eAeA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAhBwB;MAAA,CAA1B,CAjJA,CAAA;AAmKA;AAAA;;;;;SAnKA;AAAA,MAyKA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,IAAI,CAAC,cAAL,CAAoB,KAApB,CAAA,CADF;SAAA,MAEK,IAAG,GAAA,KAAO,MAAP,IAAiB,GAAA,KAAO,EAA3B;AACH,UAAA,IAAI,CAAC,cAAL,CAAoB,GAApB,CAAA,CADG;SAFL;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CAzKA,CAAA;AAgLA;AAAA;;;;SAhLA;AAAA,MAqLA,KAAK,CAAC,QAAN,CAAe,YAAf,EAA6B,SAAC,GAAD,GAAA;AAC3B,QAAA,IAAG,GAAH;AACE,UAAA,IAAI,CAAC,cAAL,CAAoB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAApB,CAAA,CADF;SAAA;eAEA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAH2B;MAAA,CAA7B,CArLA,CAAA;AA0LA;AAAA;;;;SA1LA;aA+LA,KAAK,CAAC,QAAN,CAAe,UAAf,EAA2B,SAAC,GAAD,GAAA;AACzB,QAAA,IAAG,GAAH;iBACE,SAAA,GAAY,KAAK,CAAC,KAAN,CAAY,GAAZ,EADd;SADyB;MAAA,CAA3B,EAhMI;IAAA,CAJC;GAAP,CAF2C;AAAA,CAA7C,CAfA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,cAArC,EAAqD,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,kBAAzB,EAA6C,oBAA7C,GAAA;AAEnD,MAAA,gBAAA;AAAA,EAAA,gBAAA,GAAmB,CAAnB,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,SAFJ;AAAA,IAIL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,uNAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,GAAA,GAAO,cAAA,GAAa,CAAC,gBAAA,EAAD,CAFpB,CAAA;AAAA,MAIA,MAAA,GAAS,IAJT,CAAA;AAAA,MAKA,SAAA,GAAY,EALZ,CAAA;AAAA,MAMA,QAAA,GAAW,MANX,CAAA;AAAA,MAQA,aAAA,GAAgB,CARhB,CAAA;AAAA,MASA,kBAAA,GAAqB,CATrB,CAAA;AAAA,MAUA,SAAA,GAAY,CAVZ,CAAA;AAAA,MAWA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAXT,CAAA;AAAA,MAaA,KAAA,GAAQ,kBAAA,CAAA,CAbR,CAAA;AAAA,MAcA,QAAA,GAAW,oBAAA,CAAA,CAdX,CAAA;AAAA,MAgBA,OAAA,GAAU,IAhBV,CAAA;AAAA,MAkBA,KAAA,GAAQ,EAAE,CAAC,MAAM,CAAC,KAAV,CAAA,CAlBR,CAAA;AAAA,MAmBA,KACE,CAAC,MADH,CACU,SAAC,CAAD,GAAA;eAAM,CAAC,CAAC,OAAR;MAAA,CADV,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,CAAC,CAAC,YAAF,IAAkB,CAAC,CAAC,UAApB,IAAkC,CAAC,CAAC,OAApC,IAA+C,CAAC,CAAC,KAApD;iBAA+D,EAA/D;SAAA,MAAA;iBAAsE,UAAtE;SAAP;MAAA,CAFL,CAGE,CAAC,CAHH,CAGK,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,SAAT;MAAA,CAHL,CAnBA,CAAA;AAAA,MA0BA,QAAA,GAAW,MA1BX,CAAA;AAAA,MA2BA,SAAA,GAAY,MA3BZ,CAAA;AAAA,MA4BA,UAAA,GAAa,EA5Bb,CAAA;AAAA,MAgCA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,YAAA,UAAA;AAAA,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CAhCpB,CAAA;AAAA,MAsCA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,YAAA,UAAA;AAAA,QAAA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CAAb,CAAA;eACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAFgB;MAAA,CAtClB,CAAA;AAAA,MA0CA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAGT,YAAA,8FAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,SAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAYA,SAAA,GAAY,IAAI,CAAC,MAAL,CAAY,SAAC,CAAD,GAAA;iBAAO,CAAA,CAAK,CAAC,KAAN,IAAgB,CAAA,CAAK,CAAC,QAA7B;QAAA,CAAZ,CAAiD,CAAC,GAAlD,CAAsD,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CAAtD,CAZZ,CAAA;AAAA,QAaA,aAAA,GAAgB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAbhB,CAAA;AAAA,QAcA,QAAA,GAAW,EAAE,CAAC,KAAK,CAAC,OAAT,CAAA,CAAkB,CAAC,MAAnB,CAA0B,SAA1B,CAAoC,CAAC,UAArC,CAAgD,CAAC,CAAD,EAAI,aAAJ,CAAhD,EAAoE,CAApE,EAAuE,CAAvE,CAdX,CAAA;AAAA,QAeA,SAAA,GAAY,QAAQ,CAAC,SAAT,CAAA,CAfZ,CAAA;AAAA,QAgBA,cAAA,GAAiB,aAAA,GAAgB,CAAC,CAAA,GAAI,MAAM,CAAC,OAAZ,CAAhB,GAAuC,MAAM,CAAC,OAhB/D,CAAA;AAAA,QAiBA,eAAA,GAAkB,aAAA,GAAgB,CAAC,CAAA,GAAI,MAAM,CAAC,YAAZ,CAAhB,GAA4C,MAAM,CAAC,YAjBrE,CAAA;AAAA,QAmBA,MAAA,GAAS,SAAC,CAAD,GAAA;AACP,UAAA,IAAG,CAAC,CAAC,OAAF,CAAA,CAAH;AACE,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,aAAA,GAAgB,cAAA,GAAiB,CAAxC,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,CAAA,cAAA,GAAkB,CAAzB,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAO,aAAA,GAAgB,cAAA,GAAiB,CAAxC,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,CAAA,cAAA,GAAkB,CAAzB,CAAhB;aAJF;WAAA,MAAA;AAME,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,CAAA,cAAA,GAAkB,CAAzB,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,aAAA,GAAgB,cAAA,GAAiB,CAAxC,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAO,CAAA,cAAA,GAAkB,CAAzB,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,aAAA,GAAgB,cAAA,GAAiB,CAAxC,CAAhB;aATF;WAAA;AAUA,iBAAO,CAAP,CAXO;QAAA,CAnBT,CAAA;AAAA,QAgCA,WAAA,GAAc,KAAA,CAAM,IAAN,CAhCd,CAAA;AAAA,QAiCA,IAAI,CAAC,GAAL,CAAS,WAAT,CAjCA,CAAA;AAkCA,QAAA,IAAG,CAAA,MAAH;AACE,UAAA,MAAA,GAAS,IAAC,CAAA,SAAD,CAAW,iBAAX,CAAT,CADF;SAlCA;AAAA,QAqCA,MAAA,GAAS,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CAAzB,CArCT,CAAA;AAAA,QAuCA,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CACE,CAAC,IADH,CACQ,OADR,EACiB,gBADjB,CAvCA,CAAA;AAAA,QA0CA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CA1CA,CAAA;AAAA,QA6CA,IAAA,GAAO,MAAM,CAAC,SAAP,CAAiB,gBAAjB,CACL,CAAC,IADI,CAEH,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,OAAT;QAAA,CAFG,EAGH,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,QAAF,GAAa,GAAb,GAAmB,CAAC,CAAC,IAA5B;QAAA,CAHG,CA7CP,CAAA;AAAA,QAmDA,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,MAAb,CAAoB,MAApB,CACE,CAAC,IADH,CACQ,OADR,EACiB,mCADjB,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAIE,CAAC,IAJH,CAIQ,QAAQ,CAAC,OAJjB,CAKE,CAAC,IALH,CAKQ,SALR,CAnDA,CAAA;AAAA,QA0DA,IACE,CAAC,IADH,CACQ,QADR,CA1DA,CAAA;AAAA,QA6DA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA2B,OAAO,CAAC,QAAnC,CAAlB,GAAoE,IAArE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,CAAC,CAAC,EAA3B,GAAgC,MAAA,CAAO,CAAP,EAAvC;QAAA,CADb,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,EAAT;QAAA,CAFlB,CAGE,CAAC,IAHH,CAGQ,OAHR,EAGiB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,CAAA,IAA4B,CAArC,EAAP;QAAA,CAHjB,CAIE,CAAC,IAJH,CAIQ,GAJR,EAIa,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAT,EAAuB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,CAAvB,EAAP;QAAA,CAJb,CAKE,CAAC,KALH,CAKS,SALT,EAKoB,CALpB,CA7DA,CAAA;AAAA,QAoEA,IAAI,CAAC,IAAL,CAAA,CACE,CAAC,MADH,CAAA,CApEA,CAAA;AAAA,QAuEA,OAAA,GAAU,KAvEV,CAAA;AAAA,QAwEA,aAAA,GAAgB,cAxEhB,CAAA;eAyEA,kBAAA,GAAqB,gBA5EZ;MAAA,CA1CX,CAAA;AAAA,MAwHA,SAAA,GAAY,SAAC,IAAD,EAAO,QAAP,GAAA;AACV,YAAA,YAAA;AAAA,QAAA,QAAQ,CAAC,UAAT,CAAoB,CAAC,CAAD,EAAG,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAH,CAApB,EAAkD,CAAlD,EAAqD,CAArD,CAAA,CAAA;AAAA,QACA,MAAA,GAAS,QAAQ,CAAC,SAAT,CAAA,CADT,CAAA;AAAA,QAEA,IAAA,GAAO,IAAI,CAAC,SAAL,CAAe,gBAAf,CAFP,CAAA;AAGA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,IACA,CAAC,IADD,CACM,GADN,EACW,SAAC,CAAD,GAAA;AAAO,gBAAA,GAAA;AAAA,YAAA,IAAG,CAAC,GAAA,GAAM,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,SAAf,CAAP,CAAA,IAAqC,CAAxC;qBAA+C,GAAA,GAAM,QAAA,CAAS,CAAC,CAAC,QAAX,EAArD;aAAA,MAAA;qBAA+E,CAAA,KAA/E;aAAP;UAAA,CADX,CAEA,CAAC,IAFD,CAEM,QAFN,EAEgB,SAAC,CAAD,GAAA;mBAAO,OAAP;UAAA,CAFhB,CAAA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAJU;MAAA,CAxHZ,CAAA;AAAA,MAoIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,KAAzB,CAA+B,CAAC,cAAhC,CAA+C,IAA/C,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,YAAnC,CAAgD,MAAhD,CAAuD,CAAC,SAAxD,CAAkE,SAAlE,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,UAAD,CAAY,OAAZ,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CALA,CAAA;AAAA,QAMA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAN5B,CAAA;eAOA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,EAR+B;MAAA,CAAjC,CApIA,CAAA;AAAA,MAmJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,SAAxC,CAnJA,CAAA;AAAA,MAoJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CApJA,CAAA;AAAA,MAqJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CArJA,CAAA;AAAA,MAuJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAvJA,CAAA;AA2JA;AAAA;;;;;;;;;;;;SA3JA;AAAA,MAwKA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,YAAA,MAAA;AAAA,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB,CAAA;AAAA,UACA,MAAM,CAAC,YAAP,GAAsB,CADtB,CADF;SAAA,MAGK,IAAG,GAAA,KAAO,MAAV;AACH,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAAT,CADG;SAAA,MAAA;AAGH,UAAA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAT,CAAA;AACA,UAAA,IAAG,MAAH;AACE,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAAA;AAGA,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAJF;WAJG;SAHL;AAAA,QAcA,UAAU,CAAC,CAAC,CAAC,YAAb,CAA0B,MAA1B,CAdA,CAAA;eAeA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAhBwB;MAAA,CAA1B,CAxKA,CAAA;AA0LA;AAAA;;;;SA1LA;aA+LA,KAAK,CAAC,QAAN,CAAe,UAAf,EAA2B,SAAC,GAAD,GAAA;AACzB,QAAA,IAAG,GAAH;iBACE,SAAA,GAAY,KAAK,CAAC,KAAN,CAAY,GAAZ,EADd;SADyB;MAAA,CAA3B,EAhMI;IAAA,CAJD;GAAP,CAHmD;AAAA,CAArD,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;GAAA;AAAA,OAgBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,YAArC,EAAmD,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,kBAAzB,EAA6C,oBAA7C,GAAA;AAEjD,MAAA,cAAA;AAAA,EAAA,cAAA,GAAiB,CAAjB,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,kJAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAGA,GAAA,GAAO,YAAA,GAAW,CAAC,cAAA,EAAD,CAHlB,CAAA;AAAA,MAKA,MAAA,GAAS,IALT,CAAA;AAAA,MAOA,QAAA,GAAW,MAPX,CAAA;AAAA,MAQA,UAAA,GAAa,EARb,CAAA;AAAA,MASA,SAAA,GAAY,MATZ,CAAA;AAAA,MAUA,SAAA,GAAY,EAVZ,CAAA;AAAA,MAYA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAZT,CAAA;AAAA,MAcA,KAAA,GAAQ,kBAAA,CAAA,CAdR,CAAA;AAAA,MAeA,QAAA,GAAW,oBAAA,CAAA,CAfX,CAAA;AAAA,MAgBA,KAAA,GAAQ,EAAE,CAAC,MAAM,CAAC,KAAV,CAAA,CAhBR,CAAA;AAAA,MAiBA,KACE,CAAC,MADH,CACU,SAAC,CAAD,GAAA;eAAK,CAAC,CAAC,OAAP;MAAA,CADV,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB;iBAAuC,EAAvC;SAAA,MAAA;iBAA8C,CAAC,CAAC,YAAhD;SAAP;MAAA,CAFL,CAGE,CAAC,CAHH,CAGK,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,UAAT;MAAA,CAHL,CAjBA,CAAA;AAAA,MAwBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,YAAA,UAAA;AAAA,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CAxBpB,CAAA;AAAA,MA8BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,YAAA,UAAA;AAAA,QAAA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CAAb,CAAA;eACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAFgB;MAAA,CA9BlB,CAAA;AAAA,MAkCA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,0DAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,SAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAWA,QAAA,IAAG,CAAA,MAAH;AACE,UAAA,MAAA,GAAS,IAAC,CAAA,SAAD,CAAW,iBAAX,CAAT,CADF;SAXA;AAAA,QAeA,UAAA,GAAa,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAAC,CAAA,GAAI,MAAM,CAAC,OAAZ,CAAxB,GAA+C,MAAM,CAAC,OAfnE,CAAA;AAAA,QAiBA,WAAA,GAAc,KAAA,CAAM,IAAN,CAjBd,CAAA;AAAA,QAkBA,MAAA,GAAS,MACP,CAAC,IADM,CACD,WADC,EACY,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADZ,CAlBT,CAAA;AAAA,QAqBA,SAAA,GAAY,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CArBZ,CAAA;AAAA,QAuBA,MAAA,GAAS,SAAC,CAAD,GAAA;AACP,UAAA,IAAG,CAAC,CAAC,OAAF,CAAA,CAAH;AACE,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAhB;aAJF;WAAA,MAAA;AAME,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAO,CAAA,UAAA,GAAc,CAArB,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAAhB;aATF;WAAA;AAUA,iBAAO,CAAP,CAXO;QAAA,CAvBT,CAAA;AAAA,QAoCA,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,gBAAzC,CApCA,CAAA;AAAA,QAqCA,MAAM,CAAC,IAAP,CAAA,CAAa,CAAC,MAAd,CAAA,CArCA,CAAA;AAAA,QAuCA,IAAA,GAAO,MAAM,CAAC,SAAP,CAAiB,gBAAjB,CAvCP,CAAA;AAAA,QAwCA,IAAA,GAAO,IAAI,CAAC,IAAL,CACL,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,OAAT;QAAA,CADK,EAEL,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,GAAG,CAAC,QAAN,CAAA,CAAA,GAAmB,GAAnB,GAAyB,CAAC,CAAC,QAAQ,CAAC,QAAX,CAAA,EAAhC;QAAA,CAFK,CAxCP,CAAA;AAAA,QA4CA,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,MAAb,CAAoB,MAApB,CAA2B,CAAC,IAA5B,CAAiC,OAAjC,EAAyC,mCAAzC,CACE,CAAC,KADH,CACS,SADT,EACoB,CADpB,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAIE,CAAC,IAJH,CAIQ,QAAQ,CAAC,OAJjB,CAKE,CAAC,IALH,CAKQ,SALR,CA5CA,CAAA;AAAA,QAmDA,IACE,CAAC,IADH,CACQ,QADR,CAnDA,CAAA;AAAA,QAsDA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA2B,OAAO,CAAC,QAAnC,CAAlB,GAAoE,IAArE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,EAAZ,EAAP;QAAA,CADb,CAEE,CAAC,IAFH,CAEQ,OAFR,EAEiB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,CAAZ,EAAP;QAAA,CAFjB,CAGE,CAAC,IAHH,CAGQ,QAHR,EAGkB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,UAApC;WAAP;QAAA,CAHlB,CAIE,CAAC,IAJH,CAIQ,GAJR,EAIa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,MAAA,CAAO,CAAP,EAAhC;QAAA,CAJb,CAKE,CAAC,KALH,CAKS,SALT,EAKoB,CALpB,CAtDA,CAAA;eA6DA,IAAI,CAAC,IAAL,CAAA,CAAW,CAAC,MAAZ,CAAA,EA/DS;MAAA,CAlCX,CAAA;AAAA,MAmGA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,YAAA,IAAA;AAAA,QAAA,IAAA,GAAO,IAAI,CAAC,SAAL,CAAe,gBAAf,CAAP,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,IACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;AAAO,gBAAA,GAAA;AAAA,YAAA,IAAG,CAAC,GAAA,GAAM,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,GAAf,CAAP,CAAA,IAA+B,CAAlC;qBAAyC,IAAzC;aAAA,MAAA;qBAAkD,CAAA,KAAlD;aAAP;UAAA,CADb,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;mBAAO,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,EAAP;UAAA,CAFlB,CAAA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAFM;MAAA,CAnGR,CAAA;AAAA,MA8GA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,OAAzB,CAAiC,CAAC,cAAlC,CAAiD,IAAjD,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,YAAnC,CAAgD,MAAhD,CAAuD,CAAC,SAAxD,CAAkE,SAAlE,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,UAAD,CAAY,OAAZ,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAL5B,CAAA;AAAA,QAMA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CANA,CAAA;eAOA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,EAR+B;MAAA,CAAjC,CA9GA,CAAA;AAAA,MA6HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CA7HA,CAAA;AAAA,MA8HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CA9HA,CAAA;AAAA,MA+HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CA/HA,CAAA;AAAA,MAiIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAjIA,CAAA;AAqIA;AAAA;;;;;;;;;;;;SArIA;AAAA,MAkJA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,YAAA,MAAA;AAAA,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB,CAAA;AAAA,UACA,MAAM,CAAC,YAAP,GAAsB,CADtB,CADF;SAAA,MAGK,IAAG,GAAA,KAAO,MAAV;AACH,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAAT,CADG;SAAA,MAAA;AAGH,UAAA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAT,CAAA;AACA,UAAA,IAAG,MAAH;AACE,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAAA;AAGA,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAJF;WAJG;SAHL;AAAA,QAcA,UAAU,CAAC,CAAC,CAAC,YAAb,CAA0B,MAA1B,CAdA,CAAA;eAeA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAhBwB;MAAA,CAA1B,CAlJA,CAAA;AAoKA;AAAA;;;;SApKA;aAyKA,KAAK,CAAC,QAAN,CAAe,UAAf,EAA2B,SAAC,GAAD,GAAA;AACzB,QAAA,IAAG,GAAH;iBACE,SAAA,GAAY,KAAK,CAAC,KAAN,CAAY,GAAZ,EADd;SADyB;MAAA,CAA3B,EA1KI;IAAA,CAHD;GAAP,CAHiD;AAAA,CAAnD,CAhBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAeO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,SAArC,EAAgD,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,kBAAzB,EAA6C,aAA7C,EAA4D,oBAA5D,GAAA;AAC9C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACP,QAAA,EAAU,GADH;AAAA,IAEP,OAAA,EAAS,SAFF;AAAA,IAIP,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,8KAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,GAAA,GAAO,SAAA,GAAQ,CAAC,QAAA,EAAD,CAFf,CAAA;AAAA,MAIA,SAAA,GAAY,EAJZ,CAAA;AAAA,MAMA,QAAA,GAAW,MANX,CAAA;AAAA,MAOA,SAAA,GAAY,MAPZ,CAAA;AAAA,MAQA,UAAA,GAAa,EARb,CAAA;AAAA,MASA,YAAA,GAAe,KATf,CAAA;AAAA,MAUA,MAAA,GAAS,CAVT,CAAA;AAAA,MAWA,UAAA,GAAa,MAXb,CAAA;AAAA,MAYA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAZT,CAAA;AAAA,MAcA,KAAA,GAAQ,kBAAA,CAAA,CAdR,CAAA;AAAA,MAeA,OAAA,GAAU,aAAA,CAAA,CAfV,CAAA;AAAA,MAgBA,QAAA,GAAW,oBAAA,CAAA,CAhBX,CAAA;AAAA,MAoBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CApBpB,CAAA;AAAA,MA0BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CA1BlB,CAAA;AAAA,MA+BA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,+JAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,EAAI,GAAJ,GAAA;iBACT,CAAC,CAAC,IAAF,CAAO,SAAC,CAAD,GAAA;AACL,gBAAA,iBAAA;AAAA,YAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,YACA,IAAI,CAAC,KAAL,CAAW,SAAX,CADA,CAAA;AAAA,YAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAE,CAAA,GAAA,CAAI,CAAC,QAArB,CAFR,CAAA;AAGA,YAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;qBACE,IAAI,CAAC,KAAL,CAAW;AAAA,gBAAC,IAAA,EAAK,KAAN;AAAA,gBAAa,MAAA,EAAO,KAApB;eAAX,EADF;aAAA,MAAA;AAGE,cAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,cACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;qBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;aAJK;UAAA,CAAP,EADS;QAAA,CAAX,CAAA;AAAA,QAYA,QAAA,GAAW,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAZX,CAAA;AAAA,QAaA,UAAA,GAAa,QAAA,GAAW,CAAC,CAAA,GAAI,MAAM,CAAC,OAAZ,CAAX,GAAkC,MAAM,CAAC,OAbtD,CAAA;AAAA,QAcA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,QAAA,GAAW,CAAjC,GAAwC,CAdjD,CAAA;AAeA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAfA;AAAA,QAmBA,MAAA,GAAS,SAAC,CAAD,GAAA;AACP,UAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,QAAnB;AAAiC,mBAAO,QAAP,CAAjC;WAAA;AACA,UAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,mBAAO,CAAA,UAAA,GAAc,CAArB,CAAlB;WADA;AAEA,UAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,mBAAQ,QAAA,GAAW,UAAA,GAAa,CAAhC,CAA/B;WAFA;AAGA,UAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,mBAAO,CAAA,UAAA,GAAc,CAArB,CAAhB;WAHA;AAIA,iBAAO,CAAP,CALO;QAAA,CAnBT,CAAA;AAAA,QA2BA,MAAA,GAAS,EA3BT,CAAA;AAAA,QA4BA,CAAA,GAAI,CA5BJ,CAAA;AAAA,QA6BA,OAAA,GAAU,KA7BV,CAAA;AAAA,QA8BA,OAAA,GAAU,KA9BV,CAAA;AA+BA,QAAA,IAAG,IAAI,CAAC,MAAL,KAAe,CAAlB;AACE,UAAA,IAAA,GAAO,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAAP,CADF;SAAA,MAEK,IAAG,IAAI,CAAC,MAAL,KAAe,CAAlB;AACH,UAAA,IAAA,GAAO,CAAC,KAAD,EAAO,IAAP,EAAa,KAAb,EAAoB,IAApB,EAA0B,KAA1B,CAAP,CAAA;AAAA,UACA,OAAA,GAAU,OAAA,GAAU,IADpB,CADG;SAjCL;AAAA,QAqCA,SAAA,GAAY,CAAC,CAAC,QAAF,CAAA,CArCZ,CAAA;AAsCA,eAAM,CAAA,GAAI,IAAK,CAAA,CAAA,CAAE,CAAC,MAAM,CAAC,MAAzB,GAAA;AACE,UAAA,CAAA,GAAI,EAAJ,CAAA;AAAA,UACA,CAAC,CAAC,GAAF,GAAQ,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,GAD1B,CAAA;AAAA,UAEA,CAAC,CAAC,SAAF,GAAc,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,SAFhC,CAAA;AAAA,UAGA,CAAC,CAAC,IAAF,GAAS,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,IAH3B,CAAA;AAAA,UAIA,CAAC,CAAC,KAAF,GAAU,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,KAJ5B,CAAA;AAAA,UAKA,CAAC,CAAC,OAAF,GAAY,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,OAL9B,CAAA;AAMA,eAAA,mDAAA;wBAAA;AACE,YAAA,CAAE,CAAA,CAAA,CAAF,GAAO,EAAP,CAAA;AAAA,YACA,CAAE,CAAA,CAAA,CAAE,CAAC,GAAL,GAAW,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,WAD7B,CAAA;AAAA,YAEA,CAAE,CAAA,CAAA,CAAE,CAAC,QAAL,GAAgB,SAAU,CAAA,CAAA,CAF1B,CADF;AAAA,WANA;AAAA,UAUA,MAAM,CAAC,IAAP,CAAY,CAAZ,CAVA,CAAA;AAAA,UAWA,CAAA,EAXA,CADF;QAAA,CAtCA;AAAA,QAoDA,GAAA,GAAM,IAAI,CAAC,SAAL,CAAe,eAAf,CACJ,CAAC,IADG,CACE,MADF,EACU,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,IAAT;QAAA,CADV,CApDN,CAAA;AAAA,QAsDA,QAAA,GAAW,GAAG,CAAC,KAAJ,CAAA,CACT,CAAC,MADQ,CACD,GADC,CACG,CAAC,IADJ,CACS,OADT,EACiB,kCADjB,CAET,CAAC,IAFQ,CAEH,WAFG,EAES,SAAC,CAAD,GAAA;iBAAQ,YAAA,GAAW,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,MAAA,CAAO,CAAP,CAA1B,CAAX,GAA+C,IAAvD;QAAA,CAFT,CAGT,CAAC,OAHQ,CAGA,iBAHA,EAGmB,IAHnB,CAIT,CAAC,KAJQ,CAIF,SAJE,EAIS,CAJT,CAKT,CAAC,IALQ,CAKH,SALG,CAtDX,CAAA;AAAA,QA4DA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CACE,CAAC,IADH,CACQ,OADR,EACiB,qCADjB,CAEE,CAAC,OAFH,CAEW,iBAFX,EAE8B,IAF9B,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAIE,CAAC,KAJH,CAIS,MAJT,EAIiB,OAJjB,CAKE,CAAC,KALH,CAKS,QALT,EAKmB,OALnB,CAME,CAAC,IANH,CAMQ,QAAQ,CAAC,OANjB,CA5DA,CAAA;AAAA,QAoEA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CACE,CAAC,IADH,CACQ,OADR,EACiB,sCADjB,CAEE,CAAC,OAFH,CAEW,iBAFX,EAE8B,IAF9B,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAIE,CAAC,KAJH,CAIS,MAJT,EAIiB,OAJjB,CAKE,CAAC,KALH,CAKS,QALT,EAKmB,OALnB,CAME,CAAC,IANH,CAMQ,QAAQ,CAAC,OANjB,CApEA,CAAA;AAAA,QA4EA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CACE,CAAC,IADH,CACQ,OADR,EACiB,kBADjB,CAEE,CAAC,OAFH,CAEW,iBAFX,EAE8B,IAF9B,CAGE,CAAC,KAHH,CAGS;AAAA,UAAC,OAAA,EAAS,CAAV;SAHT,CA5EA,CAAA;AAAA,QAgFA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CACE,CAAC,IADH,CACQ,OADR,EACiB,iBADjB,CAEE,CAAC,OAFH,CAEW,iBAFX,EAE8B,IAF9B,CAGE,CAAC,KAHH,CAGS;AAAA,UAAC,OAAA,EAAS,CAAV;SAHT,CAhFA,CAAA;AAAA,QAoFA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CACE,CAAC,IADH,CACQ,OADR,EACiB,sBADjB,CAEE,CAAC,OAFH,CAEW,iBAFX,EAE8B,IAF9B,CAGE,CAAC,KAHH,CAGS;AAAA,UAAC,OAAA,EAAS,CAAV;AAAA,UAAa,kBAAA,EAAmB,KAAhC;SAHT,CApFA,CAAA;AAAA,QAwFA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CACE,CAAC,IADH,CACQ,OADR,EACiB,iBADjB,CAEE,CAAC,OAFH,CAEW,iBAFX,EAE8B,IAF9B,CAGE,CAAC,KAHH,CAGS;AAAA,UAAC,MAAA,EAAQ,OAAT;AAAA,UAAkB,OAAA,EAAS,CAA3B;SAHT,CAxFA,CAAA;AAAA,QA4FA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CACE,CAAC,IADH,CACQ,OADR,EACiB,sBADjB,CAEE,CAAC,OAFH,CAEW,iBAFX,EAE8B,IAF9B,CAGE,CAAC,KAHH,CAGS;AAAA,UAAC,OAAA,EAAS,CAAV;AAAA,UAAa,kBAAA,EAAmB,KAAhC;SAHT,CA5FA,CAAA;AAAA,QAgGA,CAAI,SAAH,GAAkB,GAAG,CAAC,UAAJ,CAAA,CAAgB,CAAC,QAAjB,CAA2B,OAAO,CAAC,QAAnC,CAAlB,GAAoE,GAArE,CACE,CAAC,IADH,CACQ,WADR,EACoB,SAAC,CAAD,GAAA;iBAAQ,YAAA,GAAW,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,MAAA,CAAO,CAAP,CAA1B,CAAX,GAA+C,IAAvD;QAAA,CADpB,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,OAAL;mBAAkB,EAAlB;WAAA,MAAA;mBAAyB,EAAzB;WAAP;QAAA,CAFpB,CAhGA,CAAA;AAAA,QAoGA,EAAA,GAAK,GAAG,CAAC,MAAJ,CAAW,kBAAX,CACH,CAAC,IADE,CACG,QADH,EACa,IADb,CApGL,CAAA;AAAA,QAsGA,CAAI,SAAH,GAAkB,EAAE,CAAC,UAAH,CAAA,CAAe,CAAC,QAAhB,CAA0B,OAAO,CAAC,QAAlC,CAAlB,GAAmE,EAApE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,EAAE,CAAC,GAAf,EAAP;QAAA,CADb,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,EAAE,CAAC,GAAf,CAAA,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,CAA/B,EAAP;QAAA,CAFlB,CAGE,CAAC,IAHH,CAGQ,OAHR,EAGiB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,SAApC;WAAP;QAAA,CAHjB,CAIE,CAAC,KAJH,CAIS,SAJT,EAIoB,CAJpB,CAtGA,CAAA;AAAA,QA4GA,EAAA,GAAK,GAAG,CAAC,MAAJ,CAAW,kBAAX,CACH,CAAC,IADE,CACG,QADH,EACa,IADb,CA5GL,CAAA;AAAA,QA8GA,CAAI,SAAH,GAAkB,EAAE,CAAC,UAAH,CAAA,CAAe,CAAC,QAAhB,CAA0B,OAAO,CAAC,QAAlC,CAAlB,GAAmE,EAApE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,EAAP;QAAA,CADb,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,CAAA,GAAuB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,EAAE,CAAC,GAAf,CAAhC,EAAP;QAAA,CAFlB,CAGE,CAAC,IAHH,CAGQ,OAHR,EAGiB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,SAApC;WAAP;QAAA,CAHjB,CAIE,CAAC,KAJH,CAIS,SAJT,EAIoB,CAJpB,CA9GA,CAAA;AAAA,QAoHA,GAAA,GAAM,GAAG,CAAC,MAAJ,CAAW,mBAAX,CACJ,CAAC,IADG,CACE,QADF,EACY,KADZ,CApHN,CAAA;AAAA,QAsHA,CAAI,SAAH,GAAkB,GAAG,CAAC,UAAJ,CAAA,CAAgB,CAAC,QAAjB,CAA2B,OAAO,CAAC,QAAnC,CAAlB,GAAoE,GAArE,CACE,CAAC,IADH,CACQ,IADR,EACc,CAAA,QAAA,GAAY,GAD1B,CAEE,CAAC,IAFH,CAEQ,IAFR,EAEc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,QAAA,GAAS,IAA7C;WAAP;QAAA,CAFd,CAGE,CAAC,IAHH,CAGQ,IAHR,EAGc,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,EAAP;QAAA,CAHd,CAIE,CAAC,IAJH,CAIQ,IAJR,EAIc,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,EAAP;QAAA,CAJd,CAKE,CAAC,KALH,CAKS;AAAA,UAAC,SAAA,EAAU,CAAX;AAAA,UAAc,cAAA,EAAe,CAA7B;SALT,CAtHA,CAAA;AAAA,QA6HA,QAAA,GAAY,GAAG,CAAC,MAAJ,CAAW,kBAAX,CACV,CAAC,IADS,CACJ,QADI,EACM,KADN,CA7HZ,CAAA;AAAA,QA+HA,CAAI,SAAH,GAAkB,QAAQ,CAAC,UAAT,CAAA,CAAqB,CAAC,QAAtB,CAAgC,OAAO,CAAC,QAAxC,CAAlB,GAAyE,QAA1E,CACE,CAAC,IADH,CACQ,IADR,EACc,CADd,CAEE,CAAC,IAFH,CAEQ,IAFR,EAEc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,SAApC;WAAP;QAAA,CAFd,CAGE,CAAC,IAHH,CAGQ,IAHR,EAGc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,OAAH;mBAAgB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,EAAhB;WAAA,MAAA;mBAA0C,EAA1C;WAAP;QAAA,CAHd,CAIE,CAAC,IAJH,CAIQ,IAJR,EAIc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,OAAH;mBAAgB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,EAAhB;WAAA,MAAA;mBAA0C,EAA1C;WAAP;QAAA,CAJd,CAKE,CAAC,KALH,CAKS;AAAA,UAAC,SAAA,EAAU,CAAX;AAAA,UAAc,cAAA,EAAe,CAA7B;SALT,CAME,CAAC,KANH,CAMS,YANT,EAM0B,OAAH,GAAgB,SAAhB,GAA+B,MANtD,CA/HA,CAAA;AAAA,QAuIA,MAAA,GAAS,GAAG,CAAC,MAAJ,CAAW,uBAAX,CAvIT,CAAA;AAAA,QAwIA,CAAI,SAAH,GAAkB,MAAM,CAAC,UAAP,CAAA,CAAmB,CAAC,QAApB,CAA8B,OAAO,CAAC,QAAtC,CAAlB,GAAuE,MAAxE,CACE,CAAC,IADH,CACQ,IADR,EACc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,QAAA,GAAS,EAA7C;WAAP;QAAA,CADd,CAEE,CAAC,IAFH,CAEQ,IAFR,EAEc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,QAAA,GAAS,EAA7C;WAAP;QAAA,CAFd,CAGE,CAAC,IAHH,CAGQ,IAHR,EAGc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,OAAH;mBAAgB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,EAAE,CAAC,GAAf,EAAhB;WAAA,MAAA;mBAAyC,EAAzC;WAAP;QAAA,CAHd,CAIE,CAAC,IAJH,CAIQ,IAJR,EAIc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,OAAH;mBAAgB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,EAAhB;WAAA,MAAA;mBAA0C,EAA1C;WAAP;QAAA,CAJd,CAKE,CAAC,KALH,CAKS,SALT,EAKoB,CALpB,CAKsB,CAAC,KALvB,CAK6B,QAL7B,EAKuC,OALvC,CAME,CAAC,KANH,CAMS,YANT,EAM0B,OAAH,GAAgB,SAAhB,GAA+B,MANtD,CAxIA,CAAA;AAAA,QAgJA,QAAA,GAAY,GAAG,CAAC,MAAJ,CAAW,kBAAX,CACV,CAAC,IADS,CACJ,QADI,EACM,KADN,CAhJZ,CAAA;AAAA,QAkJA,CAAI,SAAH,GAAkB,QAAQ,CAAC,UAAT,CAAA,CAAqB,CAAC,QAAtB,CAAgC,OAAO,CAAC,QAAxC,CAAlB,GAAyE,QAA1E,CACE,CAAC,IADH,CACQ,IADR,EACc,CADd,CAEE,CAAC,IAFH,CAEQ,IAFR,EAEc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,SAApC;WAAP;QAAA,CAFd,CAGE,CAAC,IAHH,CAGQ,IAHR,EAGc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,OAAH;mBAAgB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,EAAhB;WAAA,MAAA;mBAA0C,EAA1C;WAAP;QAAA,CAHd,CAIE,CAAC,IAJH,CAIQ,IAJR,EAIc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,OAAH;mBAAgB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,EAAhB;WAAA,MAAA;mBAA0C,EAA1C;WAAP;QAAA,CAJd,CAKE,CAAC,KALH,CAKS;AAAA,UAAC,SAAA,EAAU,CAAX;AAAA,UAAc,cAAA,EAAe,CAA7B;SALT,CAME,CAAC,KANH,CAMS,YANT,EAM0B,OAAH,GAAgB,SAAhB,GAA+B,MANtD,CAlJA,CAAA;AAAA,QA0JA,MAAA,GAAS,GAAG,CAAC,MAAJ,CAAW,uBAAX,CA1JT,CAAA;AAAA,QA2JA,CAAI,SAAH,GAAkB,MAAM,CAAC,UAAP,CAAA,CAAmB,CAAC,QAApB,CAA8B,OAAO,CAAC,QAAtC,CAAlB,GAAuE,MAAxE,CACE,CAAC,IADH,CACQ,IADR,EACc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,QAAA,GAAS,EAA7C;WAAP;QAAA,CADd,CAEE,CAAC,IAFH,CAEQ,IAFR,EAEc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,QAAA,GAAS,EAA7C;WAAP;QAAA,CAFd,CAGE,CAAC,IAHH,CAGQ,IAHR,EAGc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,OAAH;mBAAgB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,EAAE,CAAC,GAAf,EAAhB;WAAA,MAAA;mBAAyC,EAAzC;WAAP;QAAA,CAHd,CAIE,CAAC,IAJH,CAIQ,IAJR,EAIc,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,OAAH;mBAAgB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,GAAG,CAAC,GAAhB,EAAhB;WAAA,MAAA;mBAA0C,EAA1C;WAAP;QAAA,CAJd,CAKE,CAAC,KALH,CAKS,SALT,EAKoB,CALpB,CAKsB,CAAC,KALvB,CAK6B,QAL7B,EAKuC,OALvC,CAME,CAAC,KANH,CAMS,YANT,EAM0B,OAAH,GAAgB,SAAhB,GAA+B,MANtD,CA3JA,CAAA;eAoKA,GAAG,CAAC,IAAJ,CAAA,CACE,CAAC,MADH,CAAA,EAtKS;MAAA,CA/BX,CAAA;AAAA,MAwMA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;eACN,IAAI,CAAC,SAAL,CAAe,gBAAf,CACI,CAAC,IADL,CACU,WADV,EACsB,SAAC,CAAD,GAAA;AAAO,cAAA,CAAA;iBAAC,eAAA,GAAc,CAAI,CAAC,CAAA,GAAI,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,SAAf,CAAL,CAAA,IAAmC,CAAtC,GAA6C,CAA7C,GAAoD,CAAA,IAArD,CAAd,GAAyE,IAAjF;QAAA,CADtB,CAEE,CAAC,SAFH,CAEa,gBAFb,CAGI,CAAC,IAHL,CAGU,QAHV,EAGoB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,EAAP;QAAA,CAHpB,EADM;MAAA,CAxMR,CAAA;AAAA,MAgNA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,YAAnC,CAAgD,MAAhD,CAAuD,CAAC,SAAxD,CAAkE,SAAlE,CAFA,CAAA;AAAA,QAGA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAH3B,CAAA;AAAA,QAIA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,CAJA,CAAA;AAAA,QASA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAT5B,CAAA;eAUA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,EAX+B;MAAA,CAAjC,CAhNA,CAAA;AAAA,MA8NA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CA9NA,CAAA;AAAA,MA+NA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CA/NA,CAAA;AAAA,MAgOA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CAhOA,CAAA;AAAA,MAkOA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAlOA,CAAA;AAsOA;AAAA;;;;;;;;;;;;SAtOA;AAAA,MAmPA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,YAAA,MAAA;AAAA,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB,CAAA;AAAA,UACA,MAAM,CAAC,YAAP,GAAsB,CADtB,CADF;SAAA,MAGK,IAAG,GAAA,KAAO,MAAV;AACH,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAAT,CADG;SAAA,MAAA;AAGH,UAAA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAT,CAAA;AACA,UAAA,IAAG,MAAH;AACE,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAAA;AAGA,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAJF;WAJG;SAHL;AAAA,QAcA,UAAU,CAAC,CAAC,CAAC,YAAb,CAA0B,MAA1B,CAdA,CAAA;eAeA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAhBwB;MAAA,CAA1B,CAnPA,CAAA;AAoQA;AAAA;;;;;SApQA;AAAA,MA0QA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,IAAI,CAAC,cAAL,CAAoB,KAApB,CAAA,CADF;SAAA,MAEK,IAAG,GAAA,KAAO,MAAP,IAAiB,GAAA,KAAO,EAA3B;AACH,UAAA,IAAI,CAAC,cAAL,CAAoB,GAApB,CAAA,CADG;SAFL;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CA1QA,CAAA;AAiRA;AAAA;;;;SAjRA;aAsRA,KAAK,CAAC,QAAN,CAAe,UAAf,EAA2B,SAAC,GAAD,GAAA;AACzB,QAAA,IAAG,GAAH;iBACE,SAAA,GAAY,KAAK,CAAC,KAAN,CAAY,GAAZ,EADd;SADyB;MAAA,CAA3B,EAvRI;IAAA,CAJC;GAAP,CAF8C;AAAA,CAAhD,CAfA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;;GAAA;AAAA,OAgBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,QAArC,EAA+C,SAAC,IAAD,EAAO,KAAP,GAAA;AAC7C,MAAA,UAAA;AAAA,EAAA,UAAA,GAAa,CAAb,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAIL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AAEJ,UAAA,2DAAA;AAAA,MAAA,MAAA,GAAS,UAAU,CAAC,EAApB,CAAA;AAAA,MACA,QAAA,GAAW,MADX,CAAA;AAAA,MAEA,UAAA,GAAa,EAFb,CAAA;AAAA,MAGA,GAAA,GAAM,QAAA,GAAW,UAAA,EAHjB,CAAA;AAAA,MAIA,SAAA,GAAY,MAJZ,CAAA;AAAA,MAQA,OAAA,GAAU,SAAC,IAAD,GAAA;AACR,YAAA,sBAAA;AAAA;aAAA,mBAAA;oCAAA;AACE,wBAAA,IAAC,CAAA,MAAO,CAAA,KAAK,CAAC,SAAN,CAAA,CAAA,CAAR,GAA6B;AAAA,YAAC,KAAA,EAAO,KAAK,CAAC,cAAN,CAAqB,IAArB,CAAR;AAAA,YAAoC,KAAA,EAAU,KAAA,KAAS,OAAZ,GAAyB;AAAA,cAAC,IAAA,EAAK,CAAI,MAAA,CAAA,KAAY,CAAC,GAAN,CAAU,IAAV,CAAP,KAA0B,QAA7B,GAA2C,KAAK,CAAC,GAAN,CAAU,IAAV,CAA3C,GAAgE,KAAK,CAAC,GAAN,CAAU,IAAV,CAAe,CAAC,KAAjF,CAAN;aAAzB,GAA6H;AAAA,cAAC,IAAA,EAAK,MAAN;aAAxK;YAA7B,CADF;AAAA;wBADQ;MAAA,CARV,CAAA;AAAA,MAcA,IAAA,GAAO,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAEL,YAAA,iBAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,GAAN,CAAU,CAAV,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,OAAA,GAAU,IAAC,CAAA,SAAD,CAAW,kBAAX,CAA8B,CAAC,IAA/B,CAAoC,IAApC,EAA0C,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAP;QAAA,CAA1C,CAXV,CAAA;AAAA,QAYA,OAAO,CAAC,KAAR,CAAA,CAAe,CAAC,MAAhB,CAAuB,QAAvB,CAAgC,CAAC,IAAjC,CAAsC,OAAtC,EAA8C,qCAA9C,CACE,CAAC,KADH,CACS,SADT,EACoB,CADpB,CAEE,CAAC,IAFH,CAEQ,QAAQ,CAAC,OAFjB,CAGE,CAAC,IAHH,CAGQ,SAHR,CAZA,CAAA;AAAA,QAgBA,OACE,CAAC,IADH,CACQ,QADR,CAEE,CAAC,UAFH,CAAA,CAEe,CAAC,QAFhB,CAEyB,OAAO,CAAC,QAFjC,CAGI,CAAC,IAHL,CAGU;AAAA,UACJ,CAAA,EAAI,SAAC,CAAD,GAAA;mBAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAP;UAAA,CADA;AAAA,UAEJ,EAAA,EAAI,SAAC,CAAD,GAAA;mBAAO,CAAC,CAAC,GAAF,CAAM,CAAN,EAAP;UAAA,CAFA;AAAA,UAGJ,EAAA,EAAI,SAAC,CAAD,GAAA;mBAAO,CAAC,CAAC,GAAF,CAAM,CAAN,EAAP;UAAA,CAHA;SAHV,CAQI,CAAC,KARL,CAQW,SARX,EAQsB,CARtB,CAhBA,CAAA;eAyBA,OAAO,CAAC,IAAR,CAAA,CACE,CAAC,UADH,CAAA,CACe,CAAC,QADhB,CACyB,OAAO,CAAC,QADjC,CAEI,CAAC,KAFL,CAEW,SAFX,EAEqB,CAFrB,CAEuB,CAAC,MAFxB,CAAA,EA3BK;MAAA,CAdP,CAAA;AAAA,MA+CA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,WAAtB,EAAmC,SAAA,GAAA;AACjC,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,EAAoB,MAApB,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAFA,CAAA;AAAA,QAGA,QAAA,GAAW,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,OAH7B,CAAA;AAAA,QAIA,SAAA,GAAY,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,QAJ9B,CAAA;eAKA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,OAA5B,EANiC;MAAA,CAAnC,CA/CA,CAAA;AAAA,MAuDA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,YAAA,GAAY,GAAnC,EAA0C,IAA1C,CAvDA,CAAA;aAyDA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,UAAA,GAAU,GAAjC,EAAwC,SAAA,GAAA;AACtC,QAAA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,GAAA,GAAG,GAA1B,EAAiC,IAAjC,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFsC;MAAA,CAAxC,EA3DI;IAAA,CAJD;GAAP,CAF6C;AAAA,CAA/C,CAhBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAeO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,QAArC,EAA+C,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,kBAAzB,EAA6C,gBAA7C,EAA+D,oBAA/D,GAAA;AAC7C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACP,QAAA,EAAU,GADH;AAAA,IAEP,OAAA,EAAS,SAFF;AAAA,IAIP,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,2JAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,GAAA,GAAO,QAAA,GAAO,CAAC,QAAA,EAAD,CAFd,CAAA;AAAA,MAIA,OAAA,GAAU,IAJV,CAAA;AAAA,MAKA,UAAA,GAAa,EALb,CAAA;AAAA,MAMA,SAAA,GAAY,MANZ,CAAA;AAAA,MAQA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CART,CAAA;AAAA,MAUA,KAAA,GAAQ,kBAAA,CAAA,CAVR,CAAA;AAAA,MAWA,QAAA,GAAW,oBAAA,CAAA,CAXX,CAAA;AAAA,MAYA,UAAA,GAAa,gBAAA,CAAA,CAZb,CAAA;AAAA,MAaA,QAAA,GAAW,MAbX,CAAA;AAAA,MAcA,YAAA,GAAe;AAAA,QAAC,cAAA,EAAe,CAAhB;OAdf,CAAA;AAAA,MAkBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,YAAA,UAAA;AAAA,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CAlBpB,CAAA;AAAA,MAwBA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,YAAA,UAAA;AAAA,QAAA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CAAb,CAAA;AAAA,QACA,UAAU,CAAC,QAAX,CAAoB,OAAO,CAAC,QAA5B,CAAqC,CAAC,MAAtC,CAA6C,IAAI,CAAC,cAAL,CAAA,CAA7C,CADA,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CAxBlB,CAAA;AAAA,MA6BA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,gEAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,YAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAW,KAAK,CAAC,QAAN,CAAA,CAAgB,CAAC,MAAjB,KAA2B,CAA9B,GAAqC,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAArC,GAAoE,KAAK,CAAC,GAAN,CAAU,CAAC,CAAC,IAAZ,CAF5E,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,WAAA,GAAc,CAAA,KAAS,CAAC,QAAN,CAAA,CAAJ,IAAyB,KAAK,CAAC,SAAN,CAAA,CAXvC,CAAA;AAAA,QAYA,QAAQ,CAAC,UAAT,CAAoB,WAApB,CAZA,CAAA;AAcA,QAAA,IAAG,CAAA,OAAH;AACE,UAAA,OAAA,GAAU,IAAC,CAAA,SAAD,CAAW,iBAAX,CAAV,CADF;SAdA;AAAA,QAkBA,QAAA,GAAW,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAlBX,CAAA;AAAA,QAmBA,UAAA,GAAa,QAAA,GAAW,CAAC,CAAA,GAAI,MAAM,CAAC,OAAZ,CAAX,GAAkC,MAAM,CAAC,OAnBtD,CAAA;AAAA,QAqBA,MAAA,GAAS,SAAC,CAAD,GAAA;AACP,UAAA,IAAG,CAAC,CAAC,OAAF,CAAA,CAAH;AACE,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAQ,CAAA,UAAA,GAAc,CAAtB,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,QAAA,GAAW,UAAA,GAAa,CAA/B,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAO,CAAA,UAAA,GAAc,CAArB,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,QAAA,GAAW,UAAA,GAAa,CAA/B,CAAhB;aAJF;WAAA,MAAA;AAME,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,QAAP,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAQ,QAAA,GAAW,UAAA,GAAa,CAAhC,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAhB;aATF;WAAA;AAUA,iBAAO,CAAP,CAXO;QAAA,CArBT,CAAA;AAAA,QAkCA,OAAA,GAAU,OAAO,CAAC,IAAR,CAAa,IAAK,CAAA,CAAA,CAAE,CAAC,MAArB,EAA6B,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,IAAT;QAAA,CAA7B,CAlCV,CAAA;AAAA,QAoCA,KAAA,GAAQ,OAAO,CAAC,KAAR,CAAA,CAAe,CAAC,MAAhB,CAAuB,GAAvB,CAA2B,CAAC,IAA5B,CAAiC,OAAjC,EAAyC,gBAAzC,CACN,CAAC,IADK,CACA,WADA,EACa,SAAC,CAAD,GAAA;iBAAO,YAAA,GAAW,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAD,CAAX,GAAmC,IAA1C;QAAA,CADb,CApCR,CAAA;AAAA,QAuCA,KAAK,CAAC,MAAN,CAAa,MAAb,CACE,CAAC,IADH,CACQ,OADR,EACiB,mCADjB,CAEE,CAAC,IAFH,CAEQ,OAFR,EAEiB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,SAApC;WAAP;QAAA,CAFjB,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAIE,CAAC,IAJH,CAIQ,QAAQ,CAAC,OAJjB,CAKE,CAAC,IALH,CAKQ,SALR,CAvCA,CAAA;AAAA,QA8CA,CAAI,SAAH,GAAkB,OAAO,CAAC,UAAR,CAAA,CAAoB,CAAC,QAArB,CAA8B,OAAO,CAAC,QAAtC,CAAlB,GAAuE,OAAxE,CACE,CAAC,IADH,CACQ,WADR,EACqB,SAAC,CAAD,GAAA;iBAAQ,YAAA,GAAW,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,MAAA,CAAO,CAAP,CAA1B,CAAX,GAA+C,IAAvD;QAAA,CADrB,CA9CA,CAAA;AAAA,QAiDA,IAAA,GAAO,OAAO,CAAC,MAAR,CAAe,MAAf,CAGL,CAAC,IAHI,CAGC,QAHD,CAjDP,CAAA;AAAA,QAqDA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA2B,OAAO,CAAC,QAAnC,CAAlB,GAAoE,IAArE,CACE,CAAC,IADH,CACQ,OADR,EACiB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,SAApC;WAAP;QAAA,CADjB,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAA,GAAe,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,CAAxB,EAAP;QAAA,CAFlB,CAGE,CAAC,IAHH,CAGQ,GAHR,EAGa,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAT,EAAuB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,CAAvB,EAAP;QAAA,CAHb,CAIE,CAAC,KAJH,CAIS,SAJT,EAIoB,CAJpB,CArDA,CAAA;AAAA,QA2DA,OAAO,CAAC,IAAR,CAAa,UAAb,EAAyB,SAAzB,EAAoC,IAAI,CAAC,cAAL,CAAA,CAApC,CA3DA,CAAA;eA6DA,OAAO,CAAC,IAAR,CAAA,CACA,CAAC,MADD,CAAA,EA/DS;MAAA,CA7BX,CAAA;AAAA,MA+FA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,QAAA,OACE,CAAC,IADH,CACQ,WADR,EACoB,SAAC,CAAD,GAAA;AAAO,cAAA,CAAA;iBAAC,YAAA,GAAW,CAAI,CAAC,CAAA,GAAI,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,GAAf,CAAL,CAAA,IAA6B,CAAhC,GAAuC,CAAvC,GAA8C,CAAA,IAA/C,CAAX,GAAgE,IAAxE;QAAA,CADpB,CAEE,CAAC,SAFH,CAEa,gBAFb,CAGE,CAAC,IAHH,CAGQ,OAHR,EAGiB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,EAAP;QAAA,CAHjB,CAAA,CAAA;eAIA,UAAU,CAAC,KAAX,CAAiB,OAAjB,EALM;MAAA,CA/FR,CAAA;AAAA,MAwGA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,KAAzB,CAA+B,CAAC,cAAhC,CAA+C,IAA/C,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,YAAnC,CAAgD,MAAhD,CAAuD,CAAC,SAAxD,CAAkE,SAAlE,CAFA,CAAA;AAAA,QAGA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAH3B,CAAA;AAAA,QAIA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAJ5B,CAAA;AAAA,QAKA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,CALA,CAAA;AAAA,QAUA,UACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAVA,CAAA;eAaA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,EAd+B;MAAA,CAAjC,CAxGA,CAAA;AAAA,MAwHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CAxHA,CAAA;AAAA,MAyHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAzHA,CAAA;AAAA,MA0HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CA1HA,CAAA;AAAA,MA4HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CA5HA,CAAA;AAgIA;AAAA;;;;;;;;;;;;SAhIA;AAAA,MA6IA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,YAAA,MAAA;AAAA,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB,CAAA;AAAA,UACA,MAAM,CAAC,YAAP,GAAsB,CADtB,CADF;SAAA,MAGK,IAAG,GAAA,KAAO,MAAV;AACH,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAAT,CADG;SAAA,MAAA;AAGH,UAAA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAT,CAAA;AACA,UAAA,IAAG,MAAH;AACE,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAAA;AAGA,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAJF;WAJG;SAHL;AAAA,QAcA,UAAU,CAAC,CAAC,CAAC,YAAb,CAA0B,MAA1B,CAdA,CAAA;eAeA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAhBwB;MAAA,CAA1B,CA7IA,CAAA;AA8JA;AAAA;;;;;SA9JA;AAAA,MAoKA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,IAAI,CAAC,cAAL,CAAoB,KAApB,CAAA,CADF;SAAA,MAEK,IAAG,GAAA,KAAO,MAAP,IAAiB,GAAA,KAAO,EAA3B;AACH,UAAA,IAAI,CAAC,cAAL,CAAoB,GAApB,CAAA,CADG;SAFL;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CApKA,CAAA;AA2KA;AAAA;;;;SA3KA;AAAA,MAgLA,KAAK,CAAC,QAAN,CAAe,YAAf,EAA6B,SAAC,GAAD,GAAA;AAC3B,QAAA,IAAG,GAAH;AACE,UAAA,IAAI,CAAC,cAAL,CAAoB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAApB,CAAA,CADF;SAAA;eAEA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAH2B;MAAA,CAA7B,CAhLA,CAAA;AAqLA;AAAA;;;;SArLA;aA0LA,KAAK,CAAC,QAAN,CAAe,aAAf,EAA8B,SAAC,GAAD,GAAA;AAC5B,QAAA,IAAG,GAAH;iBACE,YAAA,GAAe,KAAK,CAAC,KAAN,CAAY,GAAZ,EADjB;SAD4B;MAAA,CAA9B,EA3LI;IAAA,CAJC;GAAP,CAF6C;AAAA,CAA/C,CAfA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,iBAArC,EAAwD,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,kBAAzB,EAA6C,oBAA7C,GAAA;AAEtD,MAAA,mBAAA;AAAA,EAAA,mBAAA,GAAsB,CAAtB,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,SAFJ;AAAA,IAIL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,yNAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,GAAA,GAAO,iBAAA,GAAgB,CAAC,mBAAA,EAAD,CAFvB,CAAA;AAAA,MAIA,YAAA,GAAe,EAJf,CAAA;AAAA,MAMA,MAAA,GAAS,IANT,CAAA;AAAA,MAOA,QAAA,GAAW,MAPX,CAAA;AAAA,MASA,aAAA,GAAgB,CAThB,CAAA;AAAA,MAUA,kBAAA,GAAqB,CAVrB,CAAA;AAAA,MAWA,QAAA,GAAW,CAXX,CAAA;AAAA,MAYA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAZT,CAAA;AAAA,MAcA,KAAA,GAAQ,kBAAA,CAAA,CAdR,CAAA;AAAA,MAeA,QAAA,GAAW,oBAAA,CAAA,CAfX,CAAA;AAAA,MAiBA,OAAA,GAAU,IAjBV,CAAA;AAAA,MAmBA,KAAA,GAAQ,EAAE,CAAC,MAAM,CAAC,KAAV,CAAA,CAnBR,CAAA;AAAA,MAoBA,KACE,CAAC,MADH,CACU,SAAC,CAAD,GAAA;eAAM,CAAC,CAAC,OAAR;MAAA,CADV,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,CAAC,CAAC,YAAF,IAAkB,CAAC,CAAC,UAApB,IAAkC,CAAC,CAAC,OAApC,IAA+C,CAAC,CAAC,KAApD;iBAA+D,EAA/D;SAAA,MAAA;iBAAsE,SAAtE;SAAP;MAAA,CAFL,CAGE,CAAC,CAHH,CAGK,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,SAAT;MAAA,CAHL,CApBA,CAAA;AAAA,MA2BA,QAAA,GAAW,MA3BX,CAAA;AAAA,MA4BA,SAAA,GAAY,MA5BZ,CAAA;AAAA,MA6BA,UAAA,GAAa,EA7Bb,CAAA;AAAA,MAiCA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,YAAA,UAAA;AAAA,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CAjCpB,CAAA;AAAA,MAuCA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,YAAA,UAAA;AAAA,QAAA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CAAb,CAAA;eACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAFgB;MAAA,CAvClB,CAAA;AAAA,MA2CA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAGT,YAAA,6FAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,YAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,SAAA,GAAY,IAAI,CAAC,MAAL,CAAY,SAAC,CAAD,GAAA;iBAAO,CAAA,CAAK,CAAC,KAAN,IAAgB,CAAA,CAAK,CAAC,QAA7B;QAAA,CAAZ,CAAiD,CAAC,GAAlD,CAAsD,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CAAtD,CAXZ,CAAA;AAAA,QAYA,YAAA,GAAe,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAZf,CAAA;AAAA,QAaA,QAAA,GAAW,EAAE,CAAC,KAAK,CAAC,OAAT,CAAA,CAAkB,CAAC,MAAnB,CAA0B,SAA1B,CAAoC,CAAC,UAArC,CAAgD,CAAC,CAAD,EAAI,YAAJ,CAAhD,EAAmE,CAAnE,EAAsE,CAAtE,CAbX,CAAA;AAAA,QAeA,QAAA,GAAW,QAAQ,CAAC,SAAT,CAAA,CAfX,CAAA;AAAA,QAgBA,cAAA,GAAiB,YAAA,GAAe,CAAC,CAAA,GAAI,MAAM,CAAC,OAAZ,CAAf,GAAsC,MAAM,CAAC,OAhB9D,CAAA;AAAA,QAiBA,eAAA,GAAkB,YAAA,GAAe,CAAC,CAAA,GAAI,MAAM,CAAC,YAAZ,CAAf,GAA2C,MAAM,CAAC,YAjBpE,CAAA;AAAA,QAmBA,MAAA,GAAS,SAAC,CAAD,GAAA;AACP,UAAA,IAAG,CAAC,CAAC,OAAF,CAAA,CAAH;AACE,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,cAAA,GAAiB,CAAxB,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,YAAA,GAAe,cAAA,GAAiB,CAAvC,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAO,cAAA,GAAiB,CAAxB,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,YAAA,GAAe,cAAA,GAAiB,CAAvC,CAAhB;aAJF;WAAA,MAAA;AAME,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,YAAP,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,CAAA,GAAG,cAAA,GAAiB,CAA3B,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAQ,YAAA,GAAe,cAAA,GAAiB,CAAxC,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,CAAA,GAAG,cAAA,GAAiB,CAA3B,CAAhB;aATF;WAAA;AAUA,iBAAO,CAAP,CAXO;QAAA,CAnBT,CAAA;AAAA,QAgCA,WAAA,GAAc,KAAA,CAAM,IAAN,CAhCd,CAAA;AAAA,QAiCA,IAAI,CAAC,GAAL,CAAS,WAAT,CAjCA,CAAA;AAkCA,QAAA,IAAG,CAAA,MAAH;AACE,UAAA,MAAA,GAAS,IAAC,CAAA,SAAD,CAAW,iBAAX,CAAT,CADF;SAlCA;AAAA,QAqCA,MAAA,GAAS,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CAAzB,CArCT,CAAA;AAAA,QAuCA,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CACE,CAAC,IADH,CACQ,OADR,EACiB,gBADjB,CAvCA,CAAA;AAAA,QA0CA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CA1CA,CAAA;AAAA,QA6CA,IAAA,GAAO,MAAM,CAAC,SAAP,CAAiB,gBAAjB,CACL,CAAC,IADI,CAEH,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,OAAT;QAAA,CAFG,EAGH,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,QAAF,GAAa,GAAb,GAAmB,CAAC,CAAC,IAA5B;QAAA,CAHG,CA7CP,CAAA;AAAA,QAmDA,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,MAAb,CAAoB,MAApB,CACE,CAAC,IADH,CACQ,OADR,EACiB,mCADjB,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAIE,CAAC,IAJH,CAIQ,QAAQ,CAAC,OAJjB,CAKE,CAAC,IALH,CAKQ,SALR,CAnDA,CAAA;AAAA,QA0DA,IACE,CAAC,IADH,CACQ,QADR,CA1DA,CAAA;AAAA,QA6DA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA2B,OAAO,CAAC,QAAnC,CAAlB,GAAoE,IAArE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,CAAC,CAAC,EAA3B,GAAgC,MAAA,CAAO,CAAP,EAAvC;QAAA,CADb,CAEE,CAAC,IAFH,CAEQ,OAFR,EAEiB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,EAAT;QAAA,CAFjB,CAGE,CAAC,IAHH,CAGQ,QAHR,EAGkB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAA,GAAe,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,CAAxB,EAAP;QAAA,CAHlB,CAIE,CAAC,IAJH,CAIQ,GAJR,EAIa,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAT,EAAuB,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,CAAvB,EAAP;QAAA,CAJb,CAKE,CAAC,KALH,CAKS,SALT,EAKoB,CALpB,CA7DA,CAAA;AAAA,QAoEA,IAAI,CAAC,IAAL,CAAA,CACE,CAAC,MADH,CAAA,CApEA,CAAA;AAAA,QAuEA,OAAA,GAAU,KAvEV,CAAA;AAAA,QAwEA,aAAA,GAAgB,cAxEhB,CAAA;eAyEA,kBAAA,GAAqB,gBA5EZ;MAAA,CA3CX,CAAA;AAAA,MAyHA,SAAA,GAAY,SAAC,IAAD,EAAO,QAAP,GAAA;AACV,YAAA,YAAA;AAAA,QAAA,QAAQ,CAAC,UAAT,CAAoB,CAAC,CAAD,EAAG,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAH,CAApB,EAAkD,CAAlD,EAAqD,CAArD,CAAA,CAAA;AAAA,QACA,MAAA,GAAS,QAAQ,CAAC,SAAT,CAAA,CADT,CAAA;AAAA,QAEA,IAAA,GAAO,IAAI,CAAC,SAAL,CAAe,gBAAf,CAFP,CAAA;AAGA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,IACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;AAAO,gBAAA,GAAA;AAAA,YAAA,IAAG,CAAC,GAAA,GAAM,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,SAAf,CAAP,CAAA,IAAqC,CAAxC;qBAA+C,GAAA,GAAM,QAAA,CAAS,CAAC,CAAC,QAAX,EAArD;aAAA,MAAA;qBAA+E,CAAA,KAA/E;aAAP;UAAA,CADb,CAEE,CAAC,IAFH,CAEQ,OAFR,EAEiB,SAAC,CAAD,GAAA;mBAAO,OAAP;UAAA,CAFjB,CAAA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAJU;MAAA,CAzHZ,CAAA;AAAA,MAqIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,KAAzB,CAA+B,CAAC,cAAhC,CAA+C,IAA/C,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,YAAnC,CAAgD,MAAhD,CAAuD,CAAC,SAAxD,CAAkE,SAAlE,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,UAAD,CAAY,OAAZ,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CALA,CAAA;AAAA,QAMA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAN5B,CAAA;eAOA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,EAR+B;MAAA,CAAjC,CArIA,CAAA;AAAA,MAoJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,SAAxC,CApJA,CAAA;AAAA,MAqJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CArJA,CAAA;AAAA,MAsJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CAtJA,CAAA;AAAA,MAwJA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAxJA,CAAA;AA4JA;AAAA;;;;;;;;;;;;SA5JA;AAAA,MAyKA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,YAAA,MAAA;AAAA,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB,CAAA;AAAA,UACA,MAAM,CAAC,YAAP,GAAsB,CADtB,CADF;SAAA,MAGK,IAAG,GAAA,KAAO,MAAV;AACH,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAAT,CADG;SAAA,MAAA;AAGH,UAAA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAT,CAAA;AACA,UAAA,IAAG,MAAH;AACE,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAAA;AAGA,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAJF;WAJG;SAHL;AAAA,QAcA,UAAU,CAAC,CAAC,CAAC,YAAb,CAA0B,MAA1B,CAdA,CAAA;eAeA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAhBwB;MAAA,CAA1B,CAzKA,CAAA;AA2LA;AAAA;;;;SA3LA;aAgMA,KAAK,CAAC,QAAN,CAAe,aAAf,EAA8B,SAAC,GAAD,GAAA;AAC5B,QAAA,IAAG,GAAH;iBACE,YAAA,GAAe,KAAK,CAAC,KAAN,CAAY,GAAZ,EADjB;SAD4B;MAAA,CAA9B,EAjMI;IAAA,CAJD;GAAP,CAHsD;AAAA,CAAxD,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAeO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,eAArC,EAAsD,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,kBAAzB,EAA6C,aAA7C,EAA4D,oBAA5D,GAAA;AAEpD,MAAA,iBAAA;AAAA,EAAA,iBAAA,GAAoB,CAApB,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,qJAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAGA,GAAA,GAAO,eAAA,GAAc,CAAC,iBAAA,EAAD,CAHrB,CAAA;AAAA,MAKA,MAAA,GAAS,IALT,CAAA;AAAA,MAMA,YAAA,GAAe,EANf,CAAA;AAAA,MAQA,QAAA,GAAW,MARX,CAAA;AAAA,MASA,UAAA,GAAa,EATb,CAAA;AAAA,MAUA,SAAA,GAAY,MAVZ,CAAA;AAAA,MAYA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAZT,CAAA;AAAA,MAcA,KAAA,GAAQ,kBAAA,CAAA,CAdR,CAAA;AAAA,MAeA,QAAA,GAAW,oBAAA,CAAA,CAfX,CAAA;AAAA,MAgBA,KAAA,GAAQ,EAAE,CAAC,MAAM,CAAC,KAAV,CAAA,CAhBR,CAAA;AAAA,MAiBA,KACE,CAAC,MADH,CACU,SAAC,CAAD,GAAA;eAAK,CAAC,CAAC,OAAP;MAAA,CADV,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB;iBAAuC,EAAvC;SAAA,MAAA;iBAA8C,CAAC,CAAC,YAAhD;SAAP;MAAA,CAFL,CAGE,CAAC,CAHH,CAGK,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,UAAT;MAAA,CAHL,CAjBA,CAAA;AAAA,MAwBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,YAAA,UAAA;AAAA,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CAxBpB,CAAA;AAAA,MA8BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,YAAA,UAAA;AAAA,QAAA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CAAb,CAAA;eACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAFgB;MAAA,CA9BlB,CAAA;AAAA,MAkCA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,yDAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,YAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,QAAA,GAAW,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAXX,CAAA;AAAA,QAYA,UAAA,GAAa,QAAA,GAAW,CAAC,CAAA,GAAI,MAAM,CAAC,OAAZ,CAAX,GAAkC,MAAM,CAAC,OAZtD,CAAA;AAAA,QAcA,MAAA,GAAS,SAAC,CAAD,GAAA;AACP,UAAA,IAAG,CAAC,CAAC,OAAF,CAAA,CAAH;AACE,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAQ,CAAA,UAAA,GAAc,CAAtB,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,QAAA,GAAW,UAAA,GAAa,CAA/B,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAO,CAAA,UAAA,GAAc,CAArB,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,QAAA,GAAW,UAAA,GAAa,CAA/B,CAAhB;aAJF;WAAA,MAAA;AAME,YAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,UAAnB;AAAmC,qBAAO,QAAP,CAAnC;aAAA;AACA,YAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAlB;aADA;AAEA,YAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,qBAAQ,QAAA,GAAW,UAAA,GAAa,CAAhC,CAA/B;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,qBAAO,CAAA,UAAA,GAAc,CAArB,CAAhB;aATF;WAAA;AAUA,iBAAO,CAAP,CAXO;QAAA,CAdT,CAAA;AA2BA,QAAA,IAAG,CAAA,MAAH;AACE,UAAA,MAAA,GAAS,IAAC,CAAA,SAAD,CAAW,iBAAX,CAAT,CADF;SA3BA;AAAA,QA8BA,WAAA,GAAc,KAAA,CAAM,IAAN,CA9Bd,CAAA;AAAA,QA+BA,MAAA,GAAS,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CAAzB,CA/BT,CAAA;AAAA,QAgCA,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,gBAAzC,CAhCA,CAAA;AAAA,QAiCA,MAAM,CAAC,IAAP,CAAA,CAAa,CAAC,MAAd,CAAA,CAjCA,CAAA;AAAA,QAmCA,IAAA,GAAO,MAAM,CAAC,SAAP,CAAiB,gBAAjB,CAnCP,CAAA;AAAA,QAoCA,IAAA,GAAO,IAAI,CAAC,IAAL,CACL,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,OAAT;QAAA,CADK,EAEL,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,GAAG,CAAC,QAAN,CAAA,CAAA,GAAmB,GAAnB,GAAyB,CAAC,CAAC,QAAQ,CAAC,QAAX,CAAA,EAAhC;QAAA,CAFK,CApCP,CAAA;AAAA,QAwCA,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,MAAb,CAAoB,MAApB,CAA2B,CAAC,IAA5B,CAAiC,OAAjC,EAAyC,mCAAzC,CACE,CAAC,KADH,CACS,SADT,EACoB,CADpB,CAGE,CAAC,IAHH,CAGQ,QAAQ,CAAC,OAHjB,CAIE,CAAC,IAJH,CAIQ,SAJR,CAxCA,CAAA;AAAA,QA8CA,IACE,CAAC,IADH,CACQ,QADR,CA9CA,CAAA;AAAA,QAiDA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA2B,OAAO,CAAC,QAAnC,CAAlB,GAAoE,IAArE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,EAAF,GAAQ,CAAC,CAAC,CAApB,EAAP;QAAA,CADb,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;iBAAQ,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAA,GAAe,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,CAAZ,EAAvB;QAAA,CAFlB,CAGE,CAAC,IAHH,CAGQ,OAHR,EAGiB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,SAApC;WAAP;QAAA,CAHjB,CAIE,CAAC,IAJH,CAIQ,GAJR,EAIa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,MAAA,CAAO,CAAP,EAAhC;QAAA,CAJb,CAKE,CAAC,KALH,CAKS,SALT,EAKoB,CALpB,CAjDA,CAAA;eAwDA,IAAI,CAAC,IAAL,CAAA,CAAW,CAAC,MAAZ,CAAA,EA1DS;MAAA,CAlCX,CAAA;AAAA,MA8FA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,YAAA,IAAA;AAAA,QAAA,IAAA,GAAO,IAAI,CAAC,SAAL,CAAe,gBAAf,CAAP,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,IACA,CAAC,IADD,CACM,GADN,EACW,SAAC,CAAD,GAAA;AAAO,gBAAA,GAAA;AAAA,YAAA,IAAG,CAAC,GAAA,GAAM,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,GAAf,CAAP,CAAA,IAA+B,CAAlC;qBAAyC,IAAzC;aAAA,MAAA;qBAAkD,CAAA,KAAlD;aAAP;UAAA,CADX,CAEA,CAAC,IAFD,CAEM,OAFN,EAEe,SAAC,CAAD,GAAA;mBAAO,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,EAAP;UAAA,CAFf,CAAA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAFM;MAAA,CA9FR,CAAA;AAAA,MAyGA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,OAAzB,CAAiC,CAAC,cAAlC,CAAiD,IAAjD,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,YAAnC,CAAgD,MAAhD,CAAuD,CAAC,SAAxD,CAAkE,SAAlE,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,UAAD,CAAY,OAAZ,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAL5B,CAAA;AAAA,QAMA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CANA,CAAA;eAOA,QACA,CAAC,QADD,CACU,UAAU,CAAC,CADrB,CAEA,CAAC,UAFD,CAEY,UAAU,CAAC,CAFvB,CAGA,CAAC,UAHD,CAGY,UAAU,CAAC,KAHvB,CAIA,CAAC,KAJD,CAIO,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJP,EAR+B;MAAA,CAAjC,CAzGA,CAAA;AAAA,MAwHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CAxHA,CAAA;AAAA,MAyHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAzHA,CAAA;AAAA,MA0HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CA1HA,CAAA;AAAA,MA4HA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CA5HA,CAAA;AAgIA;AAAA;;;;;;;;;;;;SAhIA;AAAA,MA6IA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,YAAA,MAAA;AAAA,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB,CAAA;AAAA,UACA,MAAM,CAAC,YAAP,GAAsB,CADtB,CADF;SAAA,MAGK,IAAG,GAAA,KAAO,MAAV;AACH,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAAT,CADG;SAAA,MAAA;AAGH,UAAA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAT,CAAA;AACA,UAAA,IAAG,MAAH;AACE,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAAA;AAGA,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAJF;WAJG;SAHL;AAAA,QAcA,UAAU,CAAC,CAAC,CAAC,YAAb,CAA0B,MAA1B,CAdA,CAAA;eAeA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAhBwB;MAAA,CAA1B,CA7IA,CAAA;AA+JA;AAAA;;;;SA/JA;aAoKA,KAAK,CAAC,QAAN,CAAe,aAAf,EAA8B,SAAC,GAAD,GAAA;AAC5B,QAAA,IAAG,GAAH;iBACE,YAAA,GAAe,KAAK,CAAC,KAAN,CAAY,GAAZ,EADjB;SAD4B;MAAA,CAA9B,EArKI;IAAA,CAHD;GAAP,CAHoD;AAAA,CAAtD,CAfA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,OAArC,EAA8C,SAAC,IAAD,EAAO,KAAP,GAAA;AAC5C,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,SAFJ;AAAA,IAGL,UAAA,EAAY,SAAC,MAAD,EAAS,MAAT,GAAA;AACV,UAAA,EAAA;AAAA,MAAA,EAAA,GAAK;AAAA,QAAC,SAAA,EAAW,YAAZ;AAAA,QAA0B,EAAA,EAAG,KAAK,CAAC,KAAN,CAAA,CAA7B;OAAL,CAAA;AAAA,MACA,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,EAAE,CAAC,EAA3B,CADA,CAAA;AAEA,aAAO,EAAP,CAHU;IAAA,CAHP;AAAA,IAQL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,wBAAA;AAAA,MAAA,MAAA,GAAS,UAAU,CAAC,EAApB,CAAA;AAAA,MAEA,UAAA,GAAa,IAFb,CAAA;AAAA,MAMA,IAAA,GAAO,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AACL,YAAA,sEAAA;AAAA,QAAA,IAAI,CAAC,IAAL,CAAU,qBAAV,CAAA,CAAA;AAAA,QAEA,GAAA,GAAM,CAAC,IAAD,CAFN,CAAA;AAAA,QAIA,OAAA,GAAU,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,MAAV,CAAA,CAJV,CAAA;AAAA,QAKA,WAAA,GAAc,OAAO,CAAC,IAAR,CAAa,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,MAAd,CAAA,CAAb,CALd,CAAA;AAAA,QAMA,WAAW,CAAC,OAAZ,CAAoB,OAAQ,CAAA,CAAA,CAA5B,CANA,CAAA;AAAA,QAOA,WAAW,CAAC,IAAZ,CAAiB,OAAQ,CAAA,CAAA,CAAzB,CAPA,CAAA;AAAA,QAQA,MAAA,GAAS,EART,CAAA;AASA,aAAS,2GAAT,GAAA;AACE,UAAA,MAAM,CAAC,IAAP,CAAY;AAAA,YAAC,IAAA,EAAK,CAAA,WAAa,CAAA,CAAA,GAAE,CAAF,CAAnB;AAAA,YAAwB,EAAA,EAAG,CAAA,WAAa,CAAA,CAAA,CAAxC;WAAZ,CAAA,CADF;AAAA,SATA;AAAA,QAcA,GAAA,GAAM,IAAC,CAAA,SAAD,CAAW,eAAX,CAdN,CAAA;AAAA,QAeA,GAAA,GAAM,GAAG,CAAC,IAAJ,CAAS,MAAT,EAAiB,SAAC,CAAD,EAAI,CAAJ,GAAA;iBAAU,EAAV;QAAA,CAAjB,CAfN,CAAA;AAgBA,QAAA,IAAG,UAAH;AACE,UAAA,GAAG,CAAC,KAAJ,CAAA,CAAW,CAAC,MAAZ,CAAmB,MAAnB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,cAAzC,CACE,CAAC,IADH,CACQ,GADR,EACa,CADb,CACe,CAAC,IADhB,CACqB,OADrB,EAC8B,EAD9B,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,CAFpB,CAAA,CADF;SAAA,MAAA;AAKE,UAAA,GAAG,CAAC,KAAJ,CAAA,CAAW,CAAC,MAAZ,CAAmB,MAAnB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,cAAzC,CACE,CAAC,IADH,CACQ,GADR,EACa,CADb,CACe,CAAC,IADhB,CACqB,OADrB,EAC8B,EAD9B,CAAA,CALF;SAhBA;AAAA,QAwBA,GAAG,CAAC,UAAJ,CAAA,CAAgB,CAAC,QAAjB,CAA0B,OAAO,CAAC,QAAlC,CACE,CAAC,IADH,CACQ,QADR,EACiB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAAA,GAAe,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,EAAF,GAAO,CAAC,CAAC,IAAnB,EAAtB;QAAA,CADjB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEY,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,EAAZ,EAAP;QAAA,CAFZ,CAGE,CAAC,KAHH,CAGS,MAHT,EAGiB,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,IAAhB,EAAP;QAAA,CAHjB,CAIE,CAAC,KAJH,CAIS,SAJT,EAIoB,CAJpB,CAxBA,CAAA;AAAA,QA8BA,GAAG,CAAC,IAAJ,CAAA,CAAU,CAAC,MAAX,CAAA,CA9BA,CAAA;AAAA,QAkCA,SAAA,GAAY,SAAC,CAAD,GAAA;AACV,UAAA,CAAC,CAAC,MAAF,CAAS,MAAT,CAAgB,CAAC,IAAjB,CAAsB,OAAtB,EAA+B,EAA/B,CAAkC,CAAC,IAAnC,CAAwC,QAAxC,EAAkD,CAAlD,CAAoD,CAAC,KAArD,CAA2D,MAA3D,EAAmE,OAAnE,CAAA,CAAA;iBACA,CAAC,CAAC,MAAF,CAAS,QAAT,CAAkB,CAAC,IAAnB,CAAwB,GAAxB,EAA6B,EAA7B,CAAgC,CAAC,IAAjC,CAAsC,IAAtC,EAA4C,EAA5C,CAA+C,CAAC,IAAhD,CAAqD,IAArD,EAA0D,CAA1D,CAA4D,CAAC,KAA7D,CAAmE,QAAnE,EAA6E,OAA7E,EAFU;QAAA,CAlCZ,CAAA;AAAA,QAsCA,MAAA,GAAS,IAAC,CAAA,SAAD,CAAW,kBAAX,CAtCT,CAAA;AAAA,QAuCA,MAAA,GAAS,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,SAAC,CAAD,GAAA;iBAAO,kBAAP;QAAA,CAAjB,CAvCT,CAAA;AAAA,QAwCA,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAwC,iBAAxC,CAA0D,CAAC,IAA3D,CAAgE,SAAhE,CAxCA,CAAA;AA0CA,QAAA,IAAG,UAAH;AACE,UAAA,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,SAAC,CAAD,GAAA;mBAAQ,cAAA,GAAa,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,KAAZ,CAAD,CAAb,GAAiC,IAAzC;UAAA,CAAzB,CAAqE,CAAC,KAAtE,CAA4E,SAA5E,EAAuF,CAAvF,CAAA,CADF;SA1CA;AAAA,QA6CA,MACE,CAAC,UADH,CAAA,CACe,CAAC,QADhB,CACyB,OAAO,CAAC,QADjC,CAEI,CAAC,IAFL,CAEU,WAFV,EAEuB,SAAC,CAAD,GAAA;iBAAQ,cAAA,GAAa,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,KAAZ,CAAD,CAAb,GAAiC,IAAzC;QAAA,CAFvB,CAGI,CAAC,KAHL,CAGW,MAHX,EAGkB,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,KAAhB,EAAP;QAAA,CAHlB,CAGgD,CAAC,KAHjD,CAGuD,SAHvD,EAGkE,CAHlE,CA7CA,CAAA;eAkDA,UAAA,GAAa,MAnDR;MAAA,CANP,CAAA;AAAA,MA8DA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,WAAtB,EAAmC,SAAA,GAAA;AACjC,QAAA,IAAI,CAAC,cAAL,CAAoB,CAAC,GAAD,EAAM,OAAN,CAApB,CAAA,CAAA;eACA,IAAC,CAAA,OAAD,CAAS,OAAT,CAAiB,CAAC,cAAlB,CAAiC,IAAjC,EAFiC;MAAA,CAAnC,CA9DA,CAAA;aAkEA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,WAAtB,EAAmC,IAAnC,EAnEI;IAAA,CARD;GAAP,CAD4C;AAAA,CAA9C,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;;GAAA;AAAA,OAgBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,QAArC,EAA+C,SAAC,IAAD,EAAO,KAAP,GAAA;AAC7C,MAAA,kBAAA;AAAA,EAAA,OAAA,GAAU,CAAV,CAAA;AAAA,EAEA,SAAA,GAAY,SAAC,GAAD,GAAA;AACV,QAAA,CAAA;AAAA,IAAA,IAAG,GAAH;AACE,MAAA,CAAA,GAAI,GAAG,CAAC,IAAJ,CAAA,CAAU,CAAC,OAAX,CAAmB,UAAnB,EAA+B,EAA/B,CAAkC,CAAC,KAAnC,CAAyC,GAAzC,CAA6C,CAAC,GAA9C,CAAkD,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,OAAF,CAAU,kBAAV,EAA8B,EAA9B,EAAP;MAAA,CAAlD,CAAJ,CAAA;AAAA,MACA,CAAA,GAAI,CAAC,CAAC,GAAF,CAAM,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,KAAA,CAAM,CAAN,CAAH;iBAAiB,EAAjB;SAAA,MAAA;iBAAwB,CAAA,EAAxB;SAAP;MAAA,CAAN,CADJ,CAAA;AAEO,MAAA,IAAG,CAAC,CAAC,MAAF,KAAY,CAAf;AAAsB,eAAO,CAAE,CAAA,CAAA,CAAT,CAAtB;OAAA,MAAA;eAAuC,EAAvC;OAHT;KADU;EAAA,CAFZ,CAAA;AAQA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAGL,KAAA,EAAO;AAAA,MACL,OAAA,EAAS,GADJ;AAAA,MAEL,UAAA,EAAY,GAFP;KAHF;AAAA,IAQL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,kKAAA;AAAA,MAAA,MAAA,GAAS,UAAU,CAAC,EAApB,CAAA;AAAA,MAEA,QAAA,GAAW,MAFX,CAAA;AAAA,MAGA,SAAA,GAAY,MAHZ,CAAA;AAAA,MAIA,UAAA,GAAa,EAJb,CAAA;AAAA,MAKA,GAAA,GAAM,QAAA,GAAW,OAAA,EALjB,CAAA;AAAA,MAMA,YAAA,GAAe,EAAE,CAAC,GAAH,CAAA,CANf,CAAA;AAAA,MAQA,MAAA,GAAS,CART,CAAA;AAAA,MASA,OAAA,GAAU,CAAC,CAAD,EAAG,CAAH,CATV,CAAA;AAAA,MAUA,OAAA,GAAU,EAVV,CAAA;AAAA,MAcA,OAAA,GAAU,SAAC,IAAD,GAAA;AAER,YAAA,UAAA;AAAA,QAAA,GAAA,GAAM,YAAY,CAAC,GAAb,CAAiB,IAAI,CAAC,UAAW,CAAA,OAAQ,CAAA,CAAA,CAAR,CAAjC,CAAN,CAAA;AAAA,QACA,KAAA,GAAQ,UAAU,CAAC,KAAK,CAAC,GAAjB,CAAqB,GAArB,CADR,CAAA;eAEA,IAAC,CAAA,MAAO,CAAA,GAAG,CAAC,EAAJ,CAAR,GAAkB;AAAA,UAAC,KAAA,EAAM,GAAG,CAAC,GAAX;AAAA,UAAgB,KAAA,EAAO;AAAA,YAAC,IAAA,EAAQ,MAAA,CAAA,KAAA,KAAgB,QAAnB,GAAiC,KAAjC,GAA4C,KAAK,CAAC,KAAxD;WAAvB;UAJV;MAAA,CAdV,CAAA;AAAA,MAqBA,OAAA,GAAU,EArBV,CAAA;AAAA,MAuBA,WAAA,GAAc,EAAE,CAAC,GAAG,CAAC,YAAP,CAAA,CAvBd,CAAA;AAAA,MAwBA,MAAA,GAAS,CAxBT,CAAA;AAAA,MAyBA,OAAA,GAAU,CAzBV,CAAA;AAAA,MA0BA,KAAA,GAAQ,MA1BR,CAAA;AAAA,MA2BA,KAAA,GAAQ,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CACN,CAAC,UADK,CACM,WADN,CAGN,CAAC,EAHK,CAGF,aAHE,EAGa,SAAA,GAAA;AACjB,QAAA,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,cAArB,CAAA,CAAA,CAAA;eACA,OAAO,CAAC,IAAR,CAAa,GAAb,EAAkB,KAAlB,EAFiB;MAAA,CAHb,CA3BR,CAAA;AAAA,MAkCA,QAAA,GAAW,MAlCX,CAAA;AAAA,MAoCA,IAAA,GAAO,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAEL,YAAA,qBAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,sBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,GAAA,GAAM,YAAY,CAAC,GAAb,CAAiB,CAAC,CAAC,UAAW,CAAA,OAAQ,CAAA,CAAA,CAAR,CAA9B,CADN,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,GAAN,CAAU,GAAV,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,MAAA,GAAS,OAAO,CAAC,KAXjB,CAAA;AAAA,QAYA,OAAA,GAAU,OAAO,CAAC,MAZlB,CAAA;AAaA,QAAA,IAAG,IAAA,IAAS,IAAK,CAAA,CAAA,CAAE,CAAC,cAAR,CAAuB,OAAQ,CAAA,CAAA,CAA/B,CAAZ;AACE,eAAA,2CAAA;yBAAA;AACE,YAAA,YAAY,CAAC,GAAb,CAAiB,CAAE,CAAA,OAAQ,CAAA,CAAA,CAAR,CAAnB,EAAgC,CAAhC,CAAA,CADF;AAAA,WADF;SAbA;AAiBA,QAAA,IAAG,QAAH;AAEE,UAAA,WAAW,CAAC,SAAZ,CAAsB,CAAC,MAAA,GAAO,CAAR,EAAW,OAAA,GAAQ,CAAnB,CAAtB,CAAA,CAAA;AAAA,UACA,OAAA,GAAU,IAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,CAAC,IAAvB,CAA4B,QAAQ,CAAC,QAArC,EAA+C,SAAC,CAAD,GAAA;mBAAO,CAAC,CAAC,UAAW,CAAA,OAAQ,CAAA,CAAA,CAAR,EAApB;UAAA,CAA/C,CADV,CAAA;AAAA,UAEA,OACE,CAAC,KADH,CAAA,CACU,CAAC,MADX,CACkB,UADlB,CAEI,CAAC,KAFL,CAEW,MAFX,EAEkB,WAFlB,CAE8B,CAAC,KAF/B,CAEqC,QAFrC,EAE+C,UAF/C,CAGI,CAAC,IAHL,CAGU,QAAQ,CAAC,OAHnB,CAII,CAAC,IAJL,CAIU,SAJV,CAKI,CAAC,IALL,CAKU,KALV,CAFA,CAAA;AAAA,UASA,OACE,CAAC,IADH,CACQ,GADR,EACa,KADb,CAEE,CAAC,IAFH,CAEQ,QAFR,CATA,CAAA;iBAaA,OAAO,CAAC,IAAR,CAAA,CAAc,CAAC,MAAf,CAAA,EAfF;SAnBK;MAAA,CApCP,CAAA;AAAA,MA0EA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,WAAtB,EAAmC,SAAA,GAAA;AACjC,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,OAAD,CAAX,CAAb,CAAA;eACA,UAAU,CAAC,KAAK,CAAC,cAAjB,CAAgC,IAAhC,EAFiC;MAAA,CAAnC,CA1EA,CAAA;AAAA,MA8EA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,WAAtB,EAAmC,IAAnC,CA9EA,CAAA;AAAA,MA+EA,QAAA,GAAW,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,OA/E7B,CAAA;AAAA,MAgFA,SAAA,GAAY,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,QAhF9B,CAAA;AAAA,MAiFA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,OAA5B,CAjFA,CAAA;AAAA,MAmFA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,UAAA,GAAU,GAAjC,EAAwC,SAAA,GAAA;AACtC,QAAA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,GAAA,GAAG,GAA1B,EAAiC,IAAjC,CAAA,CAAA;AAAA,QACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,CADA,CAAA;eAEA,KAAK,CAAC,QAAN,CAAA,EAHsC;MAAA,CAAxC,CAnFA,CAAA;AAyFA;AAAA;;;;SAzFA;AAAA,MA8FA,KAAK,CAAC,MAAN,CAAa,YAAb,EAA2B,SAAC,GAAD,GAAA;AACzB,QAAA,IAAG,GAAA,KAAS,MAAZ;AACE,UAAA,IAAI,CAAC,GAAL,CAAS,2BAAT,EAAsC,GAAtC,CAAA,CAAA;AACA,UAAA,IAAG,EAAE,CAAC,GAAG,CAAC,cAAP,CAAsB,GAAG,CAAC,UAA1B,CAAH;AACE,YAAA,WAAA,GAAc,EAAE,CAAC,GAAI,CAAA,GAAG,CAAC,UAAJ,CAAP,CAAA,CAAd,CAAA;AAAA,YACA,WAAW,CAAC,MAAZ,CAAmB,GAAG,CAAC,MAAvB,CAA8B,CAAC,KAA/B,CAAqC,GAAG,CAAC,KAAzC,CAA+C,CAAC,MAAhD,CAAuD,GAAG,CAAC,MAA3D,CAAkE,CAAC,SAAnE,CAA6E,GAAG,CAAC,SAAjF,CADA,CAAA;AAAA,YAEA,OAAA,GAAU,GAAG,CAAC,KAFd,CAAA;AAGA,YAAA,IAAG,WAAW,CAAC,SAAf;AACE,cAAA,WAAW,CAAC,SAAZ,CAAsB,GAAG,CAAC,SAA1B,CAAA,CADF;aAHA;AAAA,YAKA,MAAA,GAAS,WAAW,CAAC,KAAZ,CAAA,CALT,CAAA;AAAA,YAMA,OAAA,GAAU,WAAW,CAAC,MAAZ,CAAA,CANV,CAAA;AAAA,YAOA,KAAA,GAAQ,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CAAa,CAAC,UAAd,CAAyB,WAAzB,CAPR,CAAA;AAAA,YAQA,KAAK,CAAC,UAAN,CAAiB,WAAjB,CARA,CAAA;mBAUA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,MAAnB,CAAA,EAXF;WAFF;SADyB;MAAA,CAA3B,EAgBE,IAhBF,CA9FA,CAAA;AAgHA;AAAA;;;;SAhHA;aAqHA,KAAK,CAAC,MAAN,CAAa,SAAb,EAAwB,SAAC,GAAD,GAAA;AACtB,QAAA,IAAG,GAAA,KAAS,MAAT,IAAuB,GAAA,KAAS,EAAnC;AACE,UAAA,QAAA,GAAW,GAAX,CAAA;iBACA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,MAAnB,CAAA,EAFF;SADsB;MAAA,CAAxB,EAtHI;IAAA,CARD;GAAP,CAT6C;AAAA,CAA/C,CAhBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAeO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,oBAArC,EAA2D,SAAC,IAAD,EAAO,SAAP,EAAkB,KAAlB,EAAyB,cAAzB,GAAA;AAEzD,MAAA,UAAA;AAAA,EAAA,UAAA,GAAa,CAAb,CAAA;AAEA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,SAFJ;AAAA,IAIL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,0GAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,GAAA,GAAO,WAAA,GAAU,CAAC,UAAA,EAAD,CAFjB,CAAA;AAAA,MAIA,UAAA,GAAa,EAJb,CAAA;AAAA,MAKA,OAAA,GAAU,MALV,CAAA;AAAA,MAMA,MAAA,GAAS,MANT,CAAA;AAAA,MAOA,MAAA,GAAS,EAPT,CAAA;AAAA,MASA,QAAA,GAAW,MATX,CAAA;AAAA,MAUA,SAAA,GAAY,MAVZ,CAAA;AAAA,MAWA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAXT,CAAA;AAAA,MAaA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAA,CAAiB,CAAC,GAAlB,CAAsB,SAAC,CAAD,GAAA;eAAM,CAAC,CAAC,KAAR;MAAA,CAAtB,CAbT,CAAA;AAAA,MAeA,OAAA,GAAU,IAfV,CAAA;AAAA,MAmBA,QAAA,GAAW,MAnBX,CAAA;AAAA,MAqBA,OAAA,GAAU,SAAC,IAAD,GAAA;AACR,YAAA,kBAAA;AAAA,QAAA,IAAC,CAAA,UAAD,GAAc,UAAU,CAAC,MAAM,CAAC,SAAlB,CAAA,CAAd,CAAA;AAAA,QACA,IAAC,CAAA,WAAD,GAAe,UAAU,CAAC,CAAC,CAAC,SAAb,CAAA,CADf,CAAA;AAAA,QAEA,KAAA,GAAQ,UAAU,CAAC,MAAM,CAAC,WAAlB,CAA8B,UAAU,CAAC,MAAM,CAAC,UAAlB,CAA6B,IAAI,CAAC,IAAlC,CAA9B,CAFR,CAAA;AAGA,QAAA,IAAG,UAAU,CAAC,MAAM,CAAC,aAAlB,CAAA,CAAH;AACE,UAAA,KAAA,GAAQ,UAAU,CAAC,MAAM,CAAC,WAAlB,CAA8B,UAAU,CAAC,MAAM,CAAC,UAAlB,CAA6B,IAAI,CAAC,IAAlC,CAA9B,CAAR,CAAA;AAAA,UACA,IAAA,GAAO,KAAA,GAAQ,KAAR,GAAgB,KADvB,CADF;SAAA,MAAA;AAIE,UAAA,IAAA,GAAO,UAAU,CAAC,MAAM,CAAC,WAAlB,CAA8B,UAAU,CAAC,MAAM,CAAC,UAAlB,CAA6B,IAAI,CAAC,IAAlC,CAA9B,CAAP,CAJF;SAHA;eASA,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa;AAAA,UAAC,IAAA,EAAM,IAAP;AAAA,UAAa,KAAA,EAAO,UAAU,CAAC,CAAC,CAAC,cAAb,CAA4B,IAAI,CAAC,IAAjC,CAApB;AAAA,UAA4D,KAAA,EAAM;AAAA,YAAC,kBAAA,EAAoB,UAAU,CAAC,KAAK,CAAC,GAAjB,CAAqB,IAAI,CAAC,IAA1B,CAArB;WAAlE;SAAb,EAVQ;MAAA,CArBV,CAAA;AAAA,MAmCA,IAAA,GAAO,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,EAAmC,KAAnC,EAA0C,MAA1C,GAAA;AAEL,YAAA,iCAAA;AAAA,QAAA,IAAG,MAAM,CAAC,aAAP,CAAA,CAAH;AACE,UAAA,MAAA,GAAS,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;mBAAO;AAAA,cAAC,CAAA,EAAE,MAAM,CAAC,KAAP,CAAA,CAAA,CAAe,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAf,CAAH;AAAA,cAAyC,IAAA,EAAK,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAA9C;AAAA,cAAoE,KAAA,EAAM,MAAM,CAAC,KAAP,CAAA,CAAA,CAAe,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAf,CAAA,GAAuC,MAAM,CAAC,KAAP,CAAA,CAAA,CAAe,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAf,CAAjH;AAAA,cAAuJ,CAAA,EAAE,CAAC,CAAC,GAAF,CAAM,CAAN,CAAzJ;AAAA,cAAmK,MAAA,EAAO,OAAO,CAAC,MAAR,GAAiB,CAAC,CAAC,GAAF,CAAM,CAAN,CAA3L;AAAA,cAAqM,KAAA,EAAM,KAAK,CAAC,GAAN,CAAU,CAAV,CAA3M;AAAA,cAAyN,IAAA,EAAK,CAA9N;cAAP;UAAA,CAAT,CAAT,CADF;SAAA,MAAA;AAGE,UAAA,IAAG,IAAI,CAAC,MAAL,GAAc,CAAjB;AACE,YAAA,KAAA,GAAQ,MAAM,CAAC,UAAP,CAAkB,IAAK,CAAA,CAAA,CAAvB,CAAR,CAAA;AAAA,YACA,IAAA,GAAO,MAAM,CAAC,UAAP,CAAkB,IAAK,CAAA,CAAA,CAAvB,CAAA,GAA6B,KADpC,CAAA;AAAA,YAEA,KAAA,GAAQ,OAAO,CAAC,KAAR,GAAgB,IAAI,CAAC,MAF7B,CAAA;AAAA,YAGA,MAAA,GAAS,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,EAAI,CAAJ,GAAA;qBAAU;AAAA,gBAAC,CAAA,EAAE,MAAM,CAAC,KAAP,CAAA,CAAA,CAAe,KAAA,GAAQ,IAAA,GAAO,CAA9B,CAAH;AAAA,gBAAqC,IAAA,EAAK,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAA1C;AAAA,gBAAgE,KAAA,EAAM,KAAtE;AAAA,gBAA6E,CAAA,EAAE,CAAC,CAAC,GAAF,CAAM,CAAN,CAA/E;AAAA,gBAAyF,MAAA,EAAO,OAAO,CAAC,MAAR,GAAiB,CAAC,CAAC,GAAF,CAAM,CAAN,CAAjH;AAAA,gBAA2H,KAAA,EAAM,KAAK,CAAC,GAAN,CAAU,CAAV,CAAjI;AAAA,gBAA+I,IAAA,EAAK,CAApJ;gBAAV;YAAA,CAAT,CAHT,CADF;WAHF;SAAA;AAAA,QASA,MAAA,CAAO,MAAP,CAAc,CAAC,KAAf,CAAqB;AAAA,UAAC,CAAA,EAAE,CAAH;AAAA,UAAM,KAAA,EAAM,CAAZ;SAArB,CAAoC,CAAC,IAArC,CAA0C;AAAA,UAAC,CAAA,EAAE,OAAO,CAAC,KAAX;AAAA,UAAkB,KAAA,EAAO,CAAzB;SAA1C,CATA,CAAA;AAWA,QAAA,IAAG,CAAA,OAAH;AACE,UAAA,OAAA,GAAU,IAAC,CAAA,SAAD,CAAW,kBAAX,CAAV,CADF;SAXA;AAAA,QAcA,OAAA,GAAU,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAT;QAAA,CAArB,CAdV,CAAA;AAAA,QAgBA,KAAA,GAAQ,OAAO,CAAC,KAAR,CAAA,CAAe,CAAC,MAAhB,CAAuB,GAAvB,CAA2B,CAAC,IAA5B,CAAiC,OAAjC,EAAyC,iBAAzC,CACN,CAAC,IADK,CACA,WADA,EACa,SAAC,CAAD,GAAA;iBAAQ,YAAA,GAAW,CAAI,OAAH,GAAgB,CAAC,CAAC,CAAlB,GAAyB,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAmB,CAAC,CAApB,GAAyB,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAmB,CAAC,KAAvE,CAAX,GAAwF,GAAxF,GAA2F,CAAC,CAAC,CAA7F,GAA+F,UAA/F,GAAwG,CAAI,OAAH,GAAgB,CAAhB,GAAuB,CAAxB,CAAxG,GAAkI,MAA1I;QAAA,CADb,CAhBR,CAAA;AAAA,QAkBA,KAAK,CAAC,MAAN,CAAa,MAAb,CACE,CAAC,IADH,CACQ,OADR,EACiB,qBADjB,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,OAAT;QAAA,CAFlB,CAGE,CAAC,IAHH,CAGQ,OAHR,EAGiB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAHjB,CAIE,CAAC,KAJH,CAIS,MAJT,EAIgB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJhB,CAKE,CAAC,KALH,CAKS,SALT,EAKuB,OAAH,GAAgB,CAAhB,GAAuB,CAL3C,CAME,CAAC,IANH,CAMQ,QAAQ,CAAC,OANjB,CAOE,CAAC,IAPH,CAOQ,SAPR,CAlBA,CAAA;AAAA,QA0BA,KAAK,CAAC,MAAN,CAAa,MAAb,CACE,CAAC,IADH,CACQ,OADR,EACgB,qBADhB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,GAAU,EAAjB;QAAA,CAFb,CAGE,CAAC,IAHH,CAGQ,GAHR,EAGa,CAAA,cAAe,CAAC,gBAAgB,CAAC,IAH9C,CAIE,CAAC,IAJH,CAIQ;AAAA,UAAC,aAAA,EAAc,QAAf;SAJR,CAKE,CAAC,KALH,CAKS;AAAA,UAAC,OAAA,EAAS,CAAV;SALT,CA1BA,CAAA;AAAA,QAiCA,OAAO,CAAC,UAAR,CAAA,CAAoB,CAAC,QAArB,CAA8B,OAAO,CAAC,QAAtC,CACE,CAAC,IADH,CACQ,WADR,EACqB,SAAC,CAAD,GAAA;iBAAQ,YAAA,GAAY,CAAC,CAAC,CAAd,GAAgB,IAAhB,GAAoB,CAAC,CAAC,CAAtB,GAAwB,eAAhC;QAAA,CADrB,CAjCA,CAAA;AAAA,QAmCA,OAAO,CAAC,MAAR,CAAe,MAAf,CAAsB,CAAC,UAAvB,CAAA,CAAmC,CAAC,QAApC,CAA6C,OAAO,CAAC,QAArD,CACE,CAAC,IADH,CACQ,OADR,EACiB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CADjB,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,OAAT;QAAA,CAFlB,CAGE,CAAC,KAHH,CAGS,MAHT,EAGgB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAHhB,CAIE,CAAC,KAJH,CAIS,SAJT,EAImB,CAJnB,CAnCA,CAAA;AAAA,QAwCA,OAAO,CAAC,MAAR,CAAe,MAAf,CACE,CAAC,IADH,CACQ,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,cAAF,CAAiB,CAAC,CAAC,IAAnB,EAAP;QAAA,CADR,CAEE,CAAC,UAFH,CAAA,CAEe,CAAC,QAFhB,CAEyB,OAAO,CAAC,QAFjC,CAGI,CAAC,IAHL,CAGU,GAHV,EAGe,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,GAAU,EAAjB;QAAA,CAHf,CAII,CAAC,KAJL,CAIW,SAJX,EAIyB,IAAI,CAAC,cAAL,CAAA,CAAH,GAA8B,CAA9B,GAAqC,CAJ3D,CAxCA,CAAA;AAAA,QA8CA,OAAO,CAAC,IAAR,CAAA,CAAc,CAAC,UAAf,CAAA,CAA2B,CAAC,QAA5B,CAAqC,OAAO,CAAC,QAA7C,CACE,CAAC,IADH,CACQ,WADR,EACqB,SAAC,CAAD,GAAA;iBAAQ,YAAA,GAAW,CAAC,MAAM,CAAC,WAAP,CAAmB,CAAnB,CAAqB,CAAC,CAAvB,CAAX,GAAoC,GAApC,GAAuC,CAAC,CAAC,CAAzC,GAA2C,eAAnD;QAAA,CADrB,CAEE,CAAC,MAFH,CAAA,CA9CA,CAAA;eAkDA,OAAA,GAAU,MApDL;MAAA,CAnCP,CAAA;AAAA,MAyFA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,EAAiB,KAAjB,EAAwB,MAAxB,GAAA;AACN,YAAA,WAAA;AAAA,QAAA,WAAA,GAAc,SAAC,IAAD,EAAO,CAAP,GAAA;AACZ,UAAA,IAAG,IAAI,CAAC,aAAL,CAAA,CAAH;AACE,mBAAO,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,IAAI,CAAC,UAAL,CAAgB,CAAC,CAAC,IAAlB,CAAb,CAAA,GAAwC,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,IAAI,CAAC,UAAL,CAAgB,CAAC,CAAC,IAAlB,CAAb,CAA/C,CADF;WAAA,MAAA;AAGE,mBAAO,KAAA,GAAQ,IAAI,CAAC,GAAL,CAAS,QAAS,CAAA,CAAA,CAAT,GAAc,QAAS,CAAA,CAAA,CAAvB,GAA4B,CAArC,EAAwC,CAAxC,CAAf,CAHF;WADY;QAAA,CAAd,CAAA;AAAA,QAMA,OACE,CAAC,IADH,CACQ,WADR,EACoB,SAAC,CAAD,GAAA;AAChB,cAAA,CAAA;AAAA,UAAA,IAAA,CAAA;iBACC,YAAA,GAAW,CAAI,CAAC,CAAA,GAAI,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,IAAf,CAAL,CAAA,IAA8B,CAAjC,GAAwC,CAAxC,GAA+C,CAAA,IAAhD,CAAX,GAAiE,IAAjE,GAAqE,CAAC,CAAC,CAAvE,GAAyE,IAF1D;QAAA,CADpB,CANA,CAAA;AAAA,QAUA,OAAO,CAAC,MAAR,CAAe,MAAf,CACE,CAAC,IADH,CACQ,OADR,EACiB,SAAC,CAAD,GAAA;iBAAO,WAAA,CAAY,IAAZ,EAAkB,CAAlB,EAAP;QAAA,CADjB,CAVA,CAAA;eAYA,OAAO,CAAC,SAAR,CAAkB,MAAlB,CACE,CAAC,IADH,CACQ,GADR,EACY,SAAC,CAAD,GAAA;iBAAO,WAAA,CAAY,IAAZ,EAAkB,CAAlB,CAAA,GAAuB,EAA9B;QAAA,CADZ,EAbM;MAAA,CAzFR,CAAA;AAAA,MA2GA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,QAAD,EAAW,GAAX,EAAgB,OAAhB,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,KAAzB,CAA+B,CAAC,cAAhC,CAA+C,IAA/C,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,QAAT,CAAkB,CAAC,cAAnB,CAAkC,IAAlC,CAAuC,CAAC,SAAxC,CAAkD,QAAlD,CAA2D,CAAC,UAA5D,CAAuE,aAAvE,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,OAAD,CAAS,OAAT,CAAiB,CAAC,cAAlB,CAAiC,IAAjC,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAL5B,CAAA;eAMA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,OAA5B,EAP+B;MAAA,CAAjC,CA3GA,CAAA;AAAA,MAoHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,IAAjC,CApHA,CAAA;AAAA,MAqHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,KAAjC,CArHA,CAAA;AAwHA;AAAA;;;;;SAxHA;aA8HA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,IAAI,CAAC,cAAL,CAAoB,KAApB,CAAA,CADF;SAAA,MAEK,IAAG,GAAA,KAAO,MAAP,IAAiB,GAAA,KAAO,EAA3B;AACH,UAAA,IAAI,CAAC,cAAL,CAAoB,GAApB,CAAA,CADG;SAFL;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,EA/HI;IAAA,CAJD;GAAP,CAJyD;AAAA,CAA3D,CAfA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,MAArC,EAA6C,SAAC,IAAD,EAAO,QAAP,EAAiB,KAAjB,EAAwB,kBAAxB,EAA4C,oBAA5C,EAAkE,aAAlE,GAAA;AAC3C,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,2KAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAGA,QAAA,GAAW,MAHX,CAAA;AAAA,MAIA,YAAA,GAAe,KAJf,CAAA;AAAA,MAKA,OAAA,GAAU,KALV,CAAA;AAAA,MAMA,UAAA,GAAa;AAAA,QAAC,cAAA,EAAe,CAAhB;OANb,CAAA;AAAA,MAOA,UAAA,GAAa,EAPb,CAAA;AAAA,MAQA,MAAA,GAAS,CART,CAAA;AAAA,MASA,GAAA,GAAM,MAAA,GAAS,QAAA,EATf,CAAA;AAAA,MAUA,IAAA,GAAO,MAVP,CAAA;AAAA,MAWA,OAAA,GAAU,MAXV,CAAA;AAAA,MAYA,UAAA,GAAa,MAZb,CAAA;AAAA,MAcA,KAAA,GAAQ,kBAAA,CAAA,CAdR,CAAA;AAAA,MAeA,OAAA,GAAU,aAAA,CAAA,CAfV,CAAA;AAAA,MAgBA,QAAA,GAAW,oBAAA,CAAA,CAhBX,CAAA;AAAA,MAoBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CApBpB,CAAA;AAAA,MA0BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CA1BlB,CAAA;AAAA,MA+BA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,0CAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,UAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,MAAA,EAAO,KAAR;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,MAAN,GAAe,IADf,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,IAAI,CAAC,KAAL,CAAW,MAAX,EAAmB,IAAnB,CAXA,CAAA;AAAA,QAYA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAZ9D,CAAA;AAaA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAbA;AAAA,QAiBA,WAAA,GAAc,CAAC,OAAO,CAAC,KAAR,GAAgB,IAAK,CAAA,CAAA,CAAE,CAAC,MAAM,CAAC,MAAhC,CAAA,GAAwC,CAjBtD,CAAA;AAAA,QAmBA,IAAA,GAAO,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CAEL,CAAC,CAFI,CAEF,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAa,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB,GAAuC,CAAvC,GAA8C,CAAC,CAAC,KAA1D,EAAP;QAAA,CAFE,CAnBP,CAAA;AAuBA,QAAA,IAAG,OAAH;AACE,UAAA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAAA,CADF;SAvBA;AA0BA,QAAA,IAAG,CAAC,CAAC,SAAF,CAAA,CAAH;AACE,UAAA,IAAI,CAAC,CAAL,CAAO,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,CAAC,CAAC,UAAL;qBAAqB,OAAO,CAAC,KAAR,GAAgB,YAArC;aAAA,MAAsD,IAAG,CAAC,CAAC,SAAL;qBAAoB,CAAA,YAApB;aAAA,MAAA;qBAAsC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAtC;aAA7D;UAAA,CAAP,CAAA,CADF;SAAA,MAAA;AAGE,UAAA,IAAI,CAAC,CAAL,CAAO,SAAC,CAAD,GAAA;mBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAP;UAAA,CAAP,CAAA,CAHF;SA1BA;AAAA,QA+BA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CACP,CAAC,IADM,CACD,IADC,EACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADL,CA/BT,CAAA;AAAA,QAiCA,KAAA,GAAQ,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,gBAAzC,CAjCR,CAAA;AAAA,QAkCA,KAAK,CAAC,MAAN,CAAa,MAAb,CACE,CAAC,IADH,CACQ,OADR,EACgB,eADhB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CAFb,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAIE,CAAC,KAJH,CAIS,gBAJT,EAI2B,MAJ3B,CAlCA,CAAA;AAAA,QAyCA,IAAA,GAAO,MAAM,CAAC,MAAP,CAAc,gBAAd,CAzCP,CAAA;AAAA,QA0CA,IAAI,CAAC,IAAL,CAAU,QAAV,CA1CA,CAAA;AAAA,QA2CA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA4B,OAAO,CAAC,QAApC,CAAlB,GAAqE,IAAtE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CADb,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,EAApC;WAAP;QAAA,CAFpB,CAGE,CAAC,KAHH,CAGS,gBAHT,EAG2B,MAH3B,CA3CA,CAAA;AAAA,QAgDA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CAhDA,CAAA;AAAA,QAmDA,OAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAa,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB,GAAuC,CAAvC,GAA8C,CAAC,CAAC,KAA1D,EAAP;QAAA,CAFL,CAGE,CAAC,KAHH,CAGU,SAAC,CAAD,GAAA;AACN,cAAA,KAAA;AAAA,UAAA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAAR,CAAA;AACO,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBAAiC,MAAjC;WAAA,MAAA;mBAA4C,KAAK,CAAC,MAAlD;WAFD;QAAA,CAHV,CAOE,CAAC,QAPH,CAOY,CAAC,CAAC,KAAF,CAAA,CAPZ,CAnDA,CAAA;AA4DA,QAAA,IAAG,CAAC,CAAC,SAAF,CAAA,CAAH;AACE,UAAA,OAAO,CAAC,CAAR,CAAU,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,CAAC,CAAC,UAAL;qBAAqB,OAAO,CAAC,KAAR,GAAgB,YAArC;aAAA,MAAsD,IAAG,CAAC,CAAC,SAAL;qBAAoB,CAAA,YAApB;aAAA,MAAA;qBAAsC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,EAAvF;aAA7D;UAAA,CAAV,CAAA,CADF;SAAA,MAAA;AAGE,UAAA,OAAO,CAAC,CAAR,CAAU,SAAC,CAAD,GAAA;mBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAP;UAAA,CAAV,CAAA,CAHF;SA5DA;eAiEA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,SAArB,EAnES;MAAA,CA/BX,CAAA;AAAA,MAoGA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,YAAA,KAAA;AAAA,QAAA,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,gBAAf,CAAR,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,KAAK,CAAC,IAAN,CAAW,GAAX,EAAgB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAM,CAAC,KAAT,CAAe,QAAS,CAAA,CAAA,CAAxB,EAA2B,QAAS,CAAA,CAAA,CAAT,GAAc,CAAzC,CAAL,EAAP;UAAA,CAAhB,CACE,CAAC,IADH,CACQ,WADR,EACsB,YAAA,GAAW,CAAC,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAA,GAA2B,CAA5B,CAAX,GAAyC,GAD/D,CAAA,CAAA;AAAA,UAEA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,CAFA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAAA,MAAA;AAME,UAAA,KAAK,CAAC,IAAN,CAAW,GAAX,EAAgB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;UAAA,CAAhB,CAAA,CAAA;iBACA,OAAO,CAAC,KAAR,CAAc,IAAd,EAPF;SAFM;MAAA,CApGR,CAAA;AAAA,MAiHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,UAAD,CAAY,OAAZ,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,UAAnC,CAA8C,QAA9C,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,CALA,CAAA;AAAA,QAUA,QAAQ,CAAC,WAAT,CAAqB,UAAU,CAAC,CAAhC,CAVA,CAAA;AAAA,QAWA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CAXA,CAAA;AAAA,QAYA,QAAQ,CAAC,EAAT,CAAa,WAAA,GAAW,GAAxB,EAA+B,QAAQ,CAAC,QAAxC,CAZA,CAAA;eAaA,QAAQ,CAAC,EAAT,CAAa,aAAA,GAAa,GAA1B,EAAiC,QAAQ,CAAC,WAA1C,EAd+B;MAAA,CAAjC,CAjHA,CAAA;AAAA,MAkIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CAlIA,CAAA;AAAA,MAmIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAnIA,CAAA;AAAA,MAoIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CApIA,CAAA;AAAA,MAsIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAtIA,CAAA;AA4IA;AAAA;;;;;SA5IA;AAAA,MAkJA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,YAAA,GAAe,IAAf,CADF;SAAA,MAAA;AAGE,UAAA,YAAA,GAAe,KAAf,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALwB;MAAA,CAA1B,CAlJA,CAAA;AAyJA;AAAA;;;;;SAzJA;AAAA,MA+JA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,OAAA,GAAU,IAAV,CADF;SAAA,MAAA;AAGE,UAAA,OAAA,GAAU,KAAV,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CA/JA,CAAA;AAsKA;AAAA;;;;SAtKA;aA2KA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,UAAA,GAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,EADf;SAD0B;MAAA,CAA5B,EA5KI;IAAA,CAHD;GAAP,CAF2C;AAAA,CAA7C,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,cAArC,EAAqD,SAAC,IAAD,EAAO,KAAP,EAAc,oBAAd,EAAoC,kBAApC,EAAwD,aAAxD,GAAA;AACnD,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,0LAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAGA,aAAA,GAAgB,CAHhB,CAAA;AAAA,MAIA,QAAA,GAAW,MAJX,CAAA;AAAA,MAKA,YAAA,GAAe,KALf,CAAA;AAAA,MAMA,OAAA,GAAU,KANV,CAAA;AAAA,MAOA,UAAA,GAAa,EAPb,CAAA;AAAA,MAQA,MAAA,GAAS,CART,CAAA;AAAA,MASA,GAAA,GAAM,cAAA,GAAiB,QAAA,EATvB,CAAA;AAAA,MAWA,UAAA,GAAa,MAXb,CAAA;AAAA,MAYA,IAAA,GAAO,MAZP,CAAA;AAAA,MAaA,UAAA,GAAa,EAbb,CAAA;AAAA,MAeA,KAAA,GAAQ,kBAAA,CAAA,CAfR,CAAA;AAAA,MAgBA,OAAA,GAAU,aAAA,CAAA,CAhBV,CAAA;AAAA,MAiBA,QAAA,GAAW,oBAAA,CAAA,CAjBX,CAAA;AAAA,MAqBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CArBpB,CAAA;AAAA,MA2BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CA3BlB,CAAA;AAAA,MAgCA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,0CAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,UAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,MAAA,EAAO,KAAR;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,MAAN,GAAe,IADf,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAX9D,CAAA;AAYA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAZA;AAAA,QAgBA,WAAA,GAAc,CAAC,OAAO,CAAC,MAAR,GAAiB,IAAK,CAAA,CAAA,CAAE,CAAC,MAAM,CAAC,MAAjC,CAAA,GAAyC,CAhBvD,CAAA;AAAA,QAkBA,IAAA,GAAO,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CACL,CAAC,CADI,CACF,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAa,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB,GAAuC,CAAvC,GAA8C,CAAC,CAAC,KAA1D,EAAP;QAAA,CADE,CAlBP,CAAA;AAqBA,QAAA,IAAG,OAAH;AACE,UAAA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAAA,CADF;SArBA;AAwBA,QAAA,IAAG,CAAC,CAAC,SAAF,CAAA,CAAH;AACE,UAAA,IAAI,CAAC,CAAL,CAAO,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,CAAC,CAAC,SAAL;qBAAoB,OAAO,CAAC,MAAR,GAAiB,YAArC;aAAA,MAAsD,IAAG,CAAC,CAAC,UAAL;qBAAqB,CAAA,YAArB;aAAA,MAAA;qBAAuC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAvC;aAA7D;UAAA,CAAP,CAAA,CADF;SAAA,MAAA;AAGE,UAAA,IAAI,CAAC,CAAL,CAAO,SAAC,CAAD,GAAA;mBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAP;UAAA,CAAP,CAAA,CAHF;SAxBA;AAAA,QA6BA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CACT,CAAC,IADQ,CACH,IADG,EACG,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADH,CA7BT,CAAA;AAAA,QA+BA,KAAA,GAAQ,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,GAAtB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAAyC,gBAAzC,CA/BR,CAAA;AAAA,QAgCA,KAAK,CAAC,MAAN,CAAa,MAAb,CACE,CAAC,IADH,CACQ,OADR,EACgB,eADhB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CAFb,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,CAHpB,CAIE,CAAC,KAJH,CAIS,gBAJT,EAI2B,MAJ3B,CAKE,CAAC,KALH,CAKS,QALT,EAKmB,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,EAAP;QAAA,CALnB,CAhCA,CAAA;AAAA,QAuCA,IAAA,GAAO,MAAM,CAAC,MAAP,CAAc,gBAAd,CACL,CAAC,IADI,CACC,WADD,EACe,cAAA,GAAc,MAAd,GAAqB,GADpC,CAvCP,CAAA;AAAA,QAyCA,IAAI,CAAC,IAAL,CAAU,QAAV,CAzCA,CAAA;AAAA,QA0CA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA4B,OAAO,CAAC,QAApC,CAAlB,GAAqE,IAAtE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CADb,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,EAApC;WAAP;QAAA,CAFpB,CAGE,CAAC,KAHH,CAGS,gBAHT,EAG2B,MAH3B,CA1CA,CAAA;AAAA,QA+CA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CA/CA,CAAA;AAAA,QAkDA,OACE,CAAC,UADH,CACc,IADd,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAa,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,YAArB,GAAuC,CAAvC,GAA8C,CAAC,CAAC,KAA1D,EAAP;QAAA,CAFL,CAGE,CAAC,KAHH,CAGU,SAAC,CAAD,GAAA;AACN,cAAA,KAAA;AAAA,UAAA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAAR,CAAA;AACO,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBAAiC,MAAjC;WAAA,MAAA;mBAA4C,KAAK,CAAC,MAAlD;WAFD;QAAA,CAHV,CAOE,CAAC,QAPH,CAOY,CAAC,CAAC,KAAF,CAAA,CAPZ,CAlDA,CAAA;AA2DA,QAAA,IAAG,CAAC,CAAC,SAAF,CAAA,CAAH;AACE,UAAA,OAAO,CAAC,CAAR,CAAU,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,CAAC,CAAC,SAAL;qBAAoB,OAAO,CAAC,MAAR,GAAiB,YAArC;aAAA,MAAsD,IAAG,CAAC,CAAC,UAAL;qBAAqB,CAAA,YAArB;aAAA,MAAA;qBAAuC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAA0B,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,EAAzF;aAA7D;UAAA,CAAV,CAAA,CADF;SAAA,MAAA;AAGE,UAAA,OAAO,CAAC,CAAR,CAAU,SAAC,CAAD,GAAA;mBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAP;UAAA,CAAV,CAAA,CAHF;SA3DA;eAgEA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,SAArB,EAlES;MAAA,CAhCX,CAAA;AAAA,MAoGA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,YAAA,MAAA;AAAA,QAAA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,gBAAf,CAAT,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAM,CAAC,KAAT,CAAe,QAAS,CAAA,CAAA,CAAxB,EAA2B,QAAS,CAAA,CAAA,CAAT,GAAc,CAAzC,CAAL,EAAP;UAAA,CAAjB,CACI,CAAC,IADL,CACU,WADV,EACwB,cAAA,GAAa,CAAC,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAA,GAA2B,CAA5B,CAAb,GAA2C,GADnE,CAAA,CAAA;AAAA,UAEA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,CAFA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAAA,MAAA;AAME,UAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,KAAP,EAAP;UAAA,CAAjB,CAAA,CAAA;iBACA,OAAO,CAAC,KAAR,CAAc,IAAd,EAPF;SAFM;MAAA,CApGR,CAAA;AAAA,MAiHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,UAAD,CAAY,OAAZ,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,UAAnC,CAA8C,QAA9C,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,CALA,CAAA;AAAA,QAUA,QAAQ,CAAC,WAAT,CAAqB,UAAU,CAAC,CAAhC,CAVA,CAAA;AAAA,QAWA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,CAXA,CAAA;AAAA,QAYA,QAAQ,CAAC,EAAT,CAAa,WAAA,GAAW,GAAxB,EAA+B,QAAQ,CAAC,QAAxC,CAZA,CAAA;eAaA,QAAQ,CAAC,EAAT,CAAa,aAAA,GAAa,GAA1B,EAAiC,QAAQ,CAAC,WAA1C,EAd+B;MAAA,CAAjC,CAjHA,CAAA;AAAA,MAkIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CAlIA,CAAA;AAAA,MAmIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAnIA,CAAA;AAAA,MAoIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CApIA,CAAA;AAAA,MAsIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAtIA,CAAA;AA4IA;AAAA;;;;;SA5IA;AAAA,MAkJA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,YAAA,GAAe,IAAf,CADF;SAAA,MAAA;AAGE,UAAA,YAAA,GAAe,KAAf,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALwB;MAAA,CAA1B,CAlJA,CAAA;AAyJA;AAAA;;;;;SAzJA;AAAA,MA+JA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,OAAA,GAAU,IAAV,CADF;SAAA,MAAA;AAGE,UAAA,OAAA,GAAU,KAAV,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CA/JA,CAAA;AAsKA;AAAA;;;;SAtKA;aA2KA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,UAAA,GAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,EADf;SAD0B;MAAA,CAA5B,EA5KI;IAAA,CAHD;GAAP,CAFmD;AAAA,CAArD,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;GAAA;AAAA,OAcO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,KAArC,EAA4C,SAAC,IAAD,EAAO,KAAP,GAAA;AAC1C,MAAA,OAAA;AAAA,EAAA,OAAA,GAAU,CAAV,CAAA;AAEA,SAAO;AAAA,IACP,QAAA,EAAU,IADH;AAAA,IAEP,OAAA,EAAS,SAFF;AAAA,IAGP,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,8OAAA;AAAA,MAAA,MAAA,GAAS,UAAU,CAAC,EAApB,CAAA;AAAA,MAIA,GAAA,GAAO,KAAA,GAAI,CAAC,OAAA,EAAD,CAJX,CAAA;AAAA,MAMA,KAAA,GAAQ,MANR,CAAA;AAAA,MAOA,KAAA,GAAQ,MAPR,CAAA;AAAA,MAQA,MAAA,GAAS,MART,CAAA;AAAA,MASA,WAAA,GAAc,MATd,CAAA;AAAA,MAUA,SAAA,GAAY,MAVZ,CAAA;AAAA,MAWA,MAAA,GAAS,MAXT,CAAA;AAAA,MAYA,QAAA,GAAW,MAZX,CAAA;AAAA,MAaA,UAAA,GAAa,EAbb,CAAA;AAAA,MAcA,SAAA,GAAY,MAdZ,CAAA;AAAA,MAeA,QAAA,GAAW,MAfX,CAAA;AAAA,MAgBA,WAAA,GAAc,KAhBd,CAAA;AAAA,MAiBA,MAAA,GAAS,KAjBT,CAAA;AAAA,MAkBA,eAAA,GAAkB,CAlBlB,CAAA;AAAA,MAmBA,iBAAA,GAAoB,CAnBpB,CAAA;AAAA,MAqBA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAA,CArBT,CAAA;AAAA,MAyBA,OAAA,GAAU,SAAC,IAAD,GAAA;AACR,YAAA,OAAA;AAAA,QAAA,IAAC,CAAA,UAAD,GAAc,UAAU,CAAC,CAAC,CAAC,SAAb,CAAA,CAAd,CAAA;AAAA,QACA,IAAC,CAAA,WAAD,GAAe,UAAU,CAAC,IAAI,CAAC,SAAhB,CAAA,CADf,CAAA;AAAA,QAEA,CAAA,GAAI,EAFJ,CAAA;AAAA,QAGA,CAAC,CAAC,KAAF,GAAU,UAAU,CAAC,IAAI,CAAC,cAAhB,CAA+B,IAA/B,CAHV,CAAA;AAAA,QAIA,IAAA,GAAO,UAAU,CAAC,KAAK,CAAC,GAAjB,CAAqB,IAArB,CAJP,CAAA;AAAA,QAKA,CAAC,CAAC,KAAF,GAAa,MAAA,CAAA,IAAA,KAAe,QAAlB,GAAgC;AAAA,UAAC,IAAA,EAAK,IAAN;AAAA,UAAY,MAAA,EAAO,IAAnB;SAAhC,GAA8D,IALxE,CAAA;eAMA,IAAC,CAAA,MAAO,CAAA,CAAC,CAAC,KAAF,CAAR,GAAmB,EAPX;MAAA,CAzBV,CAAA;AAAA,MAoCA,WAAA,GAAc,IApCd,CAAA;AAAA,MAsCA,IAAA,GAAO,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAGL,YAAA,uFAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,SAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,GAAN,CAAU,CAAC,CAAC,IAAZ,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,iBAAA,GAAoB,OAAO,CAAC,QAX5B,CAAA;AAAA,QAaA,CAAA,GAAI,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,KAAjB,EAAwB,OAAO,CAAC,MAAhC,CAAA,GAA0C,CAb9C,CAAA;AAAA,QAcA,eAAA,GAAkB,CAAA,GAAI,IAdtB,CAAA;AAgBA,QAAA,IAAG,CAAA,MAAH;AACE,UAAA,MAAA,GAAQ,IAAC,CAAA,MAAD,CAAQ,GAAR,CAAY,CAAC,IAAb,CAAkB,OAAlB,EAA0B,iBAA1B,CAAR,CADF;SAhBA;AAAA,QAkBA,MAAM,CAAC,IAAP,CAAY,WAAZ,EAA0B,YAAA,GAAW,CAAC,OAAO,CAAC,KAAR,GAAgB,CAAjB,CAAX,GAA8B,GAA9B,GAAgC,CAAC,OAAO,CAAC,MAAR,GAAiB,CAAlB,CAAhC,GAAoD,GAA9E,CAlBA,CAAA;AAAA,QAoBA,MAAA,GAAU,CAAA,GAAI,CAAG,WAAH,GAAoB,GAApB,GAA6B,GAA7B,CApBd,CAAA;AAAA,QAqBA,MAAA,GAAS,MAAA,GAAS,CAAG,MAAH,GAAe,GAAf,GAAwB,CAAxB,CArBlB,CAAA;AAAA,QAuBA,QAAA,GAAW,EAAE,CAAC,GAAG,CAAC,GAAP,CAAA,CACT,CAAC,WADQ,CACI,MADJ,CAET,CAAC,WAFQ,CAEI,MAFJ,CAvBX,CAAA;AAAA,QA2BA,QAAA,GAAW,EAAE,CAAC,GAAG,CAAC,GAAP,CAAA,CACT,CAAC,WADQ,CACI,CAAA,GAAI,GADR,CAET,CAAC,WAFQ,CAEI,CAAA,GAAI,GAFR,CA3BX,CAAA;AAAA,QA+BA,GAAA,GAAM,SAAC,CAAD,GAAA;iBAAO,UAAU,CAAC,CAAC,CAAC,KAAb,CAAmB,CAAC,CAAC,IAArB,EAAP;QAAA,CA/BN,CAAA;AAAA,QAiCA,GAAA,GAAM,EAAE,CAAC,MAAM,CAAC,GAAV,CAAA,CACJ,CAAC,IADG,CACE,IADF,CAEJ,CAAC,KAFG,CAEG,IAAI,CAAC,KAFR,CAjCN,CAAA;AAAA,QAqCA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,CAAA;AAAA,UAAA,CAAA,GAAI,EAAE,CAAC,WAAH,CAAe,IAAI,CAAC,QAApB,EAA8B,CAA9B,CAAJ,CAAA;AAAA,UACA,IAAI,CAAC,QAAL,GAAgB,CAAA,CAAE,CAAF,CADhB,CAAA;AAEA,iBAAO,SAAC,CAAD,GAAA;mBACL,QAAA,CAAS,CAAA,CAAE,CAAF,CAAT,EADK;UAAA,CAAP,CAHS;QAAA,CArCX,CAAA;AAAA,QA2CA,QAAA,GAAW,GAAA,CAAI,IAAJ,CA3CX,CAAA;AAAA,QA4CA,MAAM,CAAC,GAAP,CAAW,GAAX,CA5CA,CAAA;AAAA,QA6CA,MAAA,CAAO,QAAP,CAAgB,CAAC,KAAjB,CAAuB;AAAA,UAAC,UAAA,EAAW,CAAZ;AAAA,UAAe,QAAA,EAAS,CAAxB;SAAvB,CAAkD,CAAC,IAAnD,CAAwD;AAAA,UAAC,UAAA,EAAW,IAAI,CAAC,EAAL,GAAU,CAAtB;AAAA,UAAyB,QAAA,EAAU,IAAI,CAAC,EAAL,GAAU,CAA7C;SAAxD,CA7CA,CAAA;AAiDA,QAAA,IAAG,CAAA,KAAH;AACE,UAAA,KAAA,GAAQ,MAAM,CAAC,SAAP,CAAiB,oBAAjB,CAAR,CADF;SAjDA;AAAA,QAoDA,KAAA,GAAQ,KACN,CAAC,IADK,CACA,QADA,EACS,GADT,CApDR,CAAA;AAAA,QAuDA,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,MAAd,CAAqB,MAArB,CACE,CAAC,IADH,CACQ,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,QAAL,GAAmB,WAAH,GAAoB,CAApB,GAA2B;AAAA,YAAC,UAAA,EAAW,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAmB,CAAC,QAAhC;AAAA,YAA0C,QAAA,EAAS,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAmB,CAAC,QAAvE;YAAlD;QAAA,CADR,CAEE,CAAC,IAFH,CAEQ,OAFR,EAEgB,uCAFhB,CAME,CAAC,IANH,CAMQ,QAAQ,CAAC,OANjB,CAOE,CAAC,IAPH,CAOQ,SAPR,CAvDA,CAAA;AAAA,QAgEA,KAEE,CAAC,IAFH,CAEQ,QAFR,CAGE,CAAC,UAHH,CAAA,CAGe,CAAC,QAHhB,CAGyB,OAAO,CAAC,QAHjC,CAKI,CAAC,SALL,CAKe,GALf,EAKmB,QALnB,CAhEA,CAAA;AAAA,QAuEA,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,KAAb,CAAmB,SAAC,CAAD,GAAA;iBAAQ;AAAA,YAAC,UAAA,EAAW,MAAM,CAAC,WAAP,CAAmB,CAAnB,CAAqB,CAAC,UAAlC;AAAA,YAA8C,QAAA,EAAS,MAAM,CAAC,WAAP,CAAmB,CAAnB,CAAqB,CAAC,UAA7E;YAAR;QAAA,CAAnB,CACE,CAAC,UADH,CAAA,CACe,CAAC,QADhB,CACyB,OAAO,CAAC,QADjC,CAEI,CAAC,SAFL,CAEe,GAFf,EAEmB,QAFnB,CAGI,CAAC,MAHL,CAAA,CAvEA,CAAA;AAAA,QA8EA,QAAA,GAAW,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,UAAF,GAAe,CAAC,CAAC,CAAC,QAAF,GAAa,CAAC,CAAC,UAAhB,CAAA,GAA8B,EAApD;QAAA,CA9EX,CAAA;AAgFA,QAAA,IAAG,WAAH;AAEE,UAAA,MAAA,GAAS,MAAM,CAAC,SAAP,CAAiB,sBAAjB,CAAwC,CAAC,IAAzC,CAA8C,QAA9C,EAAwD,GAAxD,CAAT,CAAA;AAAA,UAEA,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,MAAf,CAAsB,MAAtB,CAA6B,CAAC,IAA9B,CAAmC,OAAnC,EAA4C,qBAA5C,CACE,CAAC,IADH,CACQ,SAAC,CAAD,GAAA;mBAAO,IAAC,CAAA,QAAD,GAAY,EAAnB;UAAA,CADR,CAEE,CAAC,IAFH,CAEQ,IAFR,EAEc,OAFd,CAGE,CAAC,KAHH,CAGS,MAAM,CAAC,cAAP,CAAA,CAHT,CAIE,CAAC,KAJH,CAIS,SAJT,EAIoB,CAJpB,CAKE,CAAC,IALH,CAKQ,SAAC,CAAD,GAAA;mBAAO,IAAI,CAAC,cAAL,CAAoB,CAAC,CAAC,IAAtB,EAAP;UAAA,CALR,CAFA,CAAA;AAAA,UASA,MAAM,CAAC,UAAP,CAAA,CAAmB,CAAC,QAApB,CAA6B,OAAO,CAAC,QAArC,CACE,CAAC,KADH,CACS,SADT,EACmB,CADnB,CAEE,CAAC,IAFH,CAEQ,SAAC,CAAD,GAAA;mBAAO,IAAI,CAAC,cAAL,CAAoB,CAAC,CAAC,IAAtB,EAAP;UAAA,CAFR,CAGE,CAAC,SAHH,CAGa,WAHb,EAG0B,SAAC,CAAD,GAAA;AACtB,gBAAA,kBAAA;AAAA,YAAA,KAAA,GAAQ,IAAR,CAAA;AAAA,YACA,WAAA,GAAc,EAAE,CAAC,WAAH,CAAe,KAAK,CAAC,QAArB,EAA+B,CAA/B,CADd,CAAA;AAEA,mBAAO,SAAC,CAAD,GAAA;AACL,kBAAA,OAAA;AAAA,cAAA,EAAA,GAAK,WAAA,CAAY,CAAZ,CAAL,CAAA;AAAA,cACA,KAAK,CAAC,QAAN,GAAiB,EADjB,CAAA;AAAA,cAEA,GAAA,GAAM,QAAQ,CAAC,QAAT,CAAkB,EAAlB,CAFN,CAAA;AAAA,cAGA,GAAI,CAAA,CAAA,CAAJ,IAAU,EAAA,GAAK,CAAI,QAAA,CAAS,EAAT,CAAA,GAAe,IAAI,CAAC,EAAvB,GAAgC,CAAhC,GAAuC,CAAA,CAAxC,CAHf,CAAA;AAIA,qBAAQ,YAAA,GAAY,GAAZ,GAAgB,GAAxB,CALK;YAAA,CAAP,CAHsB;UAAA,CAH1B,CAYE,CAAC,UAZH,CAYc,aAZd,EAY6B,SAAC,CAAD,GAAA;AACzB,gBAAA,WAAA;AAAA,YAAA,WAAA,GAAc,EAAE,CAAC,WAAH,CAAe,IAAC,CAAA,QAAhB,EAA0B,CAA1B,CAAd,CAAA;AACA,mBAAO,SAAC,CAAD,GAAA;AACL,kBAAA,EAAA;AAAA,cAAA,EAAA,GAAK,WAAA,CAAY,CAAZ,CAAL,CAAA;AACO,cAAA,IAAG,QAAA,CAAS,EAAT,CAAA,GAAe,IAAI,CAAC,EAAvB;uBAAgC,QAAhC;eAAA,MAAA;uBAA6C,MAA7C;eAFF;YAAA,CAAP,CAFyB;UAAA,CAZ7B,CATA,CAAA;AAAA,UA4BA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,UADH,CAAA,CACe,CAAC,QADhB,CACyB,OAAO,CAAC,QADjC,CAC0C,CAAC,KAD3C,CACiD,SADjD,EAC2D,CAD3D,CAC6D,CAAC,MAD9D,CAAA,CA5BA,CAAA;AAAA,UAiCA,QAAA,GAAW,MAAM,CAAC,SAAP,CAAiB,oBAAjB,CAAsC,CAAC,IAAvC,CAA4C,QAA5C,EAAsD,GAAtD,CAjCX,CAAA;AAAA,UAmCA,QAAQ,CAAC,KAAT,CAAA,CACA,CAAE,MADF,CACS,UADT,CACoB,CAAC,IADrB,CAC0B,OAD1B,EACkC,mBADlC,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,CAFpB,CAGE,CAAC,KAHH,CAGS,gBAHT,EAG0B,MAH1B,CAIE,CAAC,IAJH,CAIQ,SAAC,CAAD,GAAA;mBAAQ,IAAI,CAAC,QAAL,GAAgB,EAAxB;UAAA,CAJR,CAnCA,CAAA;AAAA,UAyCA,QAAQ,CAAC,UAAT,CAAA,CAAqB,CAAC,QAAtB,CAA+B,OAAO,CAAC,QAAvC,CACE,CAAC,KADH,CACS,SADT,EACoB,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,CAAC,CAAC,IAAI,CAAC,KAAP,KAAgB,CAAnB;qBAA2B,EAA3B;aAAA,MAAA;qBAAkC,GAAlC;aAAP;UAAA,CADpB,CAEE,CAAC,SAFH,CAEa,QAFb,EAEuB,SAAC,CAAD,GAAA;AACnB,gBAAA,kBAAA;AAAA,YAAA,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,QAArB,CAAA;AAAA,YACA,WAAA,GAAc,EAAE,CAAC,WAAH,CAAe,IAAI,CAAC,QAApB,EAA8B,CAA9B,CADd,CAAA;AAAA,YAEA,KAAA,GAAQ,IAFR,CAAA;AAGA,mBAAO,SAAC,CAAD,GAAA;AACL,kBAAA,OAAA;AAAA,cAAA,EAAA,GAAK,WAAA,CAAY,CAAZ,CAAL,CAAA;AAAA,cACA,KAAK,CAAC,QAAN,GAAiB,EADjB,CAAA;AAAA,cAEA,GAAA,GAAM,QAAQ,CAAC,QAAT,CAAkB,EAAlB,CAFN,CAAA;AAAA,cAGA,GAAI,CAAA,CAAA,CAAJ,IAAU,EAAA,GAAK,CAAI,QAAA,CAAS,EAAT,CAAA,GAAe,IAAI,CAAC,EAAvB,GAAgC,CAAhC,GAAuC,CAAA,CAAxC,CAHf,CAAA;AAIA,qBAAO,CAAC,QAAQ,CAAC,QAAT,CAAkB,EAAlB,CAAD,EAAwB,QAAQ,CAAC,QAAT,CAAkB,EAAlB,CAAxB,EAA+C,GAA/C,CAAP,CALK;YAAA,CAAP,CAJmB;UAAA,CAFvB,CAzCA,CAAA;AAAA,UAuDA,QAAQ,CAAC,IAAT,CAAA,CACE,CAAC,UADH,CAAA,CACe,CAAC,QADhB,CACyB,OAAO,CAAC,QADjC,CAEE,CAAC,KAFH,CAES,SAFT,EAEmB,CAFnB,CAGE,CAAC,MAHH,CAAA,CAvDA,CAFF;SAAA,MAAA;AA+DE,UAAA,MAAM,CAAC,SAAP,CAAiB,oBAAjB,CAAsC,CAAC,MAAvC,CAAA,CAAA,CAAA;AAAA,UACA,MAAM,CAAC,SAAP,CAAiB,sBAAjB,CAAwC,CAAC,MAAzC,CAAA,CADA,CA/DF;SAhFA;eAkJA,WAAA,GAAc,MArJT;MAAA,CAtCP,CAAA;AAAA,MA6LA,iBAAA,GAAoB,SAAC,CAAD,GAAA;AAClB,YAAA,sBAAA;AAAA,QAAA,GAAA,GAAM,EAAE,CAAC,MAAH,CAAU,IAAV,CAAN,CAAA;AACA,QAAA,IAAG,GAAG,CAAC,OAAJ,CAAY,mBAAZ,CAAH;AACE,UAAA,GAAA,GAAM,CAAC,CAAC,CAAC,UAAF,GAAe,CAAC,CAAC,QAAlB,CAAA,GAA8B,CAApC,CAAA;AAAA,UACA,KAAA,GAAQ,IAAI,CAAC,GAAL,CAAS,GAAT,CAAA,GAAgB,eADxB,CAAA;AAAA,UAEA,KAAA,GAAQ,CAAA,IAAK,CAAC,GAAL,CAAS,GAAT,CAAD,GAAiB,eAFzB,CAAA;iBAGA,GAAG,CAAC,UAAJ,CAAA,CAAgB,CAAC,QAAjB,CAA0B,iBAA1B,CACE,CAAC,IADH,CACQ,WADR,EACqB,YAAA,GAAY,KAAZ,GAAkB,GAAlB,GAAqB,KAArB,GAA2B,GADhD,EAJF;SAAA,MAAA;iBAOE,GAAG,CAAC,UAAJ,CAAA,CAAgB,CAAC,QAAjB,CAA0B,iBAA1B,CACE,CAAC,IADH,CACQ,WADR,EACoB,gBADpB,EAPF;SAFkB;MAAA,CA7LpB,CAAA;AAAA,MAyMA,gBAAA,GAAmB,SAAC,OAAD,GAAA;eACjB,MAAM,CAAC,SAAP,CAAiB,oBAAjB,CAAsC,CAAC,IAAvC,CAA4C,iBAA5C,EADiB;MAAA,CAzMnB,CAAA;AAAA,MA8MA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,WAAtB,EAAmC,SAAA,GAAA;AACjC,QAAA,UAAA,GAAa,IAAI,CAAC,SAAL,CAAe,CAAC,MAAD,EAAS,GAAT,EAAc,OAAd,CAAf,CAAb,CAAA;AAAA,QACA,UAAU,CAAC,KAAK,CAAC,SAAjB,CAA2B,YAA3B,CADA,CAAA;AAAA,QAEA,UAAU,CAAC,CAAC,CAAC,SAAb,CAAuB,SAAvB,CAFA,CAAA;AAAA,QAGA,QAAA,GAAW,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,OAH7B,CAAA;AAAA,QAIA,SAAA,GAAY,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,QAJ9B,CAAA;eAKA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,OAA5B,EANiC;MAAA,CAAnC,CA9MA,CAAA;AAAA,MAsNA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,YAAA,GAAY,GAAnC,EAA0C,IAA1C,CAtNA,CAAA;AAAA,MAuNA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,kBAAA,GAAkB,GAAzC,EAAgD,gBAAhD,CAvNA,CAAA;AAAA,MAyNA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,UAAA,GAAU,GAAjC,EAAwC,SAAA,GAAA;AACtC,QAAA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,GAAA,GAAG,GAA1B,EAAiC,IAAjC,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFsC;MAAA,CAAxC,CAzNA,CAAA;AA+NA;AAAA;;;;;SA/NA;AAAA,MAqOA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,WAAA,GAAc,KAAd,CADF;SAAA,MAEK,IAAG,GAAA,KAAO,MAAP,IAAiB,GAAA,KAAO,EAA3B;AACH,UAAA,WAAA,GAAc,IAAd,CADG;SAFL;eAIA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,MAAnB,CAAA,EALuB;MAAA,CAAzB,CArOA,CAAA;AAAA,MA4OA,KAAK,CAAC,QAAN,CAAe,OAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAA,GAAS,KAAT,CADF;SAAA,MAEK,IAAG,GAAA,KAAO,MAAP,IAAiB,GAAA,KAAO,EAA3B;AACH,UAAA,MAAA,GAAS,IAAT,CADG;SAFL;eAIA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,MAAnB,CAAA,EALuB;MAAA,CAAzB,CA5OA,CAAA;AAmPA;AAAA;;;;SAnPA;AAAA,MAwPA,KAAK,CAAC,QAAN,CAAe,YAAf,EAA6B,SAAC,GAAD,GAAA;AAC3B,QAAA,IAAG,GAAH;AACE,UAAA,MAAM,CAAC,cAAP,CAAsB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAtB,CAAA,CADF;SAAA;eAEA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,MAAnB,CAAA,EAH2B;MAAA,CAA7B,CAxPA,CAAA;AA6PA;AAAA;;;;SA7PA;aAkQA,KAAK,CAAC,QAAN,CAAe,UAAf,EAA2B,SAAC,GAAD,GAAA;AACzB,QAAA,IAAG,GAAH;iBACE,SAAA,GAAY,KAAK,CAAC,KAAN,CAAY,GAAZ,EADd;SADyB;MAAA,CAA3B,EAnQI;IAAA,CAHC;GAAP,CAH0C;AAAA,CAA5C,CAdA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,WAArC,EAAkD,SAAC,IAAD,EAAO,KAAP,EAAc,kBAAd,EAAkC,aAAlC,EAAiD,oBAAjD,GAAA;AAChD,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACP,QAAA,EAAU,GADH;AAAA,IAEP,OAAA,EAAS,QAFF;AAAA,IAGP,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,4LAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAGA,QAAA,GAAW,MAHX,CAAA;AAAA,MAIA,UAAA,GAAa,EAJb,CAAA;AAAA,MAKA,YAAA,GAAe,KALf,CAAA;AAAA,MAMA,OAAA,GAAU,KANV,CAAA;AAAA,MAOA,MAAA,GAAS,CAPT,CAAA;AAAA,MAQA,GAAA,GAAM,WAAA,GAAc,QAAA,EARpB,CAAA;AAAA,MASA,IAAA,GAAO,MATP,CAAA;AAAA,MAUA,UAAA,GAAa,MAVb,CAAA;AAAA,MAWA,eAAA,GAAkB,CAXlB,CAAA;AAAA,MAYA,UAAA,GAAa,EAZb,CAAA;AAAA,MAcA,KAAA,GAAQ,kBAAA,CAAA,CAdR,CAAA;AAAA,MAeA,OAAA,GAAU,aAAA,CAAA,CAfV,CAAA;AAAA,MAgBA,QAAA,GAAW,oBAAA,CAAA,CAhBX,CAAA;AAAA,MAoBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,EAAmC,KAAnC,EAA0C,MAA1C,EAAkD,MAAlD,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,EAA0C,IAA1C,EAAgD,KAAhD,EAAuD,MAAvD,EAA+D,MAA/D,CAArB,EAFF;SAFkB;MAAA,CApBpB,CAAA;AAAA,MA0BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,EAAmC,KAAnC,EAA0C,MAA1C,EAAkD,MAAlD,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,EAAyC,IAAzC,EAA+C,KAA/C,EAAsD,MAAtD,EAA8D,MAA9D,CAArB,EAHgB;MAAA,CA1BlB,CAAA;AAAA,MA+BA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,EAAwC,IAAxC,EAA8C,KAA9C,EAAqD,MAArD,EAA6D,MAA7D,GAAA;AAET,YAAA,qCAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,UAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAX9D,CAAA;AAYA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAZA;AAAA,QAgBA,IAAA,GAAO,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CACL,CAAC,CADI,CACF,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAP;QAAA,CADE,CAEL,CAAC,CAFI,CAEF,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,KAAZ,EAAP;QAAA,CAFE,CAGL,CAAC,EAHI,CAGD,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,MAAZ,EAAP;QAAA,CAHC,CAhBP,CAAA;AAqBA,QAAA,IAAG,OAAH;AACE,UAAA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAAA,CADF;SArBA;AAAA,QAwBA,CAAA,GAAI,CAxBJ,CAAA;AAAA,QAyBA,SAAA,GAAY;UAAC;AAAA,YAAC,MAAA,EAAO,IAAK,CAAA,CAAA,CAAE,CAAC,MAAhB;AAAA,YAAwB,QAAA,EAAS,IAAK,CAAA,CAAA,CAAE,CAAC,QAAzC;WAAD;SAzBZ,CAAA;AA0BA,eAAM,CAAA,GAAI,SAAU,CAAA,CAAA,CAAE,CAAC,MAAM,CAAC,MAA9B,GAAA;AACE,UAAA,SAAU,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,MAAvB,GAAgC,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,KAAlD,CAAA;AAAA,UACA,CAAA,EADA,CADF;QAAA,CA1BA;AAAA,QA8BA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CACP,CAAC,IADM,CACD,IADC,EACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADL,CA9BT,CAAA;AAAA,QAgCA,MAAM,CAAC,KAAP,CAAA,CACE,CAAC,MADH,CACU,GADV,CACc,CAAC,IADf,CACoB,OADpB,EAC4B,gBAD5B,CAhCA,CAAA;AAAA,QAmCA,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,qBAAf,CACN,CAAC,IADK,CACA,SADA,EACW,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADX,CAnCR,CAAA;AAAA,QAqCA,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,MAAd,CAAqB,MAArB,CACE,CAAC,IADH,CACQ,OADR,EACgB,6CADhB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CAFb,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,eAHpB,CAIE,CAAC,KAJH,CAIS,gBAJT,EAI2B,MAJ3B,CAOE,CAAC,IAPH,CAOQ,WAPR,EAOsB,YAAA,GAAY,MAAZ,GAAmB,GAPzC,CArCA,CAAA;AAAA,QA8CA,KACE,CAAC,KADH,CACS,QADT,EACmB,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,EAAP;QAAA,CADnB,CAEE,CAAC,KAFH,CAES,gBAFT,EAE2B,MAF3B,CAGE,CAAC,IAHH,CAGQ,QAHR,CA9CA,CAAA;AAAA,QAmDA,CAAI,SAAH,GAAkB,KAAK,CAAC,UAAN,CAAA,CAAkB,CAAC,QAAnB,CAA6B,OAAO,CAAC,QAArC,CAAlB,GAAsE,KAAvE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CADb,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,EAApC;WAAP;QAAA,CAFpB,CAnDA,CAAA;AAAA,QAuDA,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,MAAb,CAAA,CAvDA,CAAA;AAAA,QAyDA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CAzDA,CAAA;AAAA,QA4DA,OACE,CAAC,CADH,CACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,CAAG,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAArD,EAAhC;QAAA,CADL,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,KAAZ,EAAP;QAAA,CAFL,CAGE,CAAC,KAHH,CAGS,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,EAAP;QAAA,CAHT,CA5DA,CAAA;eAgEA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,SAArB,EAlES;MAAA,CA/BX,CAAA;AAAA,MAmGA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,YAAA,SAAA;AAAA,QAAA,SAAA,GAAY,IAAI,CAAC,SAAL,CAAe,qBAAf,CAAZ,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,SAAS,CAAC,IAAV,CAAe,GAAf,EAAoB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAM,CAAC,KAAT,CAAe,QAAS,CAAA,CAAA,CAAxB,EAA2B,QAAS,CAAA,CAAA,CAAT,GAAc,CAAzC,CAAL,EAAP;UAAA,CAApB,CACA,CAAC,IADD,CACM,WADN,EACoB,YAAA,GAAW,CAAC,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAA,GAA2B,CAA5B,CAAX,GAAyC,GAD7D,CAAA,CAAA;AAAA,UAEA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,CAFA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAAA,MAAA;AAME,UAAA,SAAS,CAAC,IAAV,CAAe,GAAf,EAAoB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;UAAA,CAApB,CAAA,CAAA;iBACA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,EAPF;SAFM;MAAA,CAnGR,CAAA;AAAA,MAgHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,UAAD,CAAY,OAAZ,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,UAAnC,CAA8C,QAA9C,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QACA,CAAC,QADD,CACU,UAAU,CAAC,CADrB,CAEA,CAAC,UAFD,CAEY,UAAU,CAAC,CAFvB,CAGA,CAAC,UAHD,CAGY,UAAU,CAAC,KAHvB,CAIA,CAAC,KAJD,CAIO,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJP,CALA,CAAA;AAAA,QAUA,QAAQ,CAAC,WAAT,CAAqB,UAAU,CAAC,CAAhC,CAVA,CAAA;AAAA,QAWA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,QAArC,CAXA,CAAA;AAAA,QAYA,QAAQ,CAAC,EAAT,CAAa,WAAA,GAAW,GAAxB,EAA+B,QAAQ,CAAC,QAAxC,CAZA,CAAA;eAaA,QAAQ,CAAC,EAAT,CAAa,aAAA,GAAa,GAA1B,EAAiC,QAAQ,CAAC,WAA1C,EAd+B;MAAA,CAAjC,CAhHA,CAAA;AAAA,MAiIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CAjIA,CAAA;AAAA,MAkIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAlIA,CAAA;AAAA,MAmIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CAnIA,CAAA;AAAA,MAqIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CArIA,CAAA;AA0IA;AAAA;;;;;SA1IA;AAAA,MAgJA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,YAAA,GAAe,IAAf,CADF;SAAA,MAAA;AAGE,UAAA,YAAA,GAAe,KAAf,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALwB;MAAA,CAA1B,CAhJA,CAAA;AAuJA;AAAA;;;;;SAvJA;AAAA,MA6JA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,OAAA,GAAU,IAAV,CADF;SAAA,MAAA;AAGE,UAAA,OAAA,GAAU,KAAV,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CA7JA,CAAA;AAoKA;AAAA;;;;SApKA;aAyKA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,UAAA,GAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,EADf;SAD0B;MAAA,CAA5B,EA1KI;IAAA,CAHC;GAAP,CAFgD;AAAA,CAAlD,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,mBAArC,EAA0D,SAAC,IAAD,EAAO,KAAP,EAAc,kBAAd,EAAkC,aAAlC,EAAiD,oBAAjD,GAAA;AACxD,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACP,QAAA,EAAU,GADH;AAAA,IAEP,OAAA,EAAS,QAFF;AAAA,IAGP,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,4LAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAGA,QAAA,GAAW,MAHX,CAAA;AAAA,MAIA,UAAA,GAAa,EAJb,CAAA;AAAA,MAKA,YAAA,GAAe,KALf,CAAA;AAAA,MAMA,OAAA,GAAU,KANV,CAAA;AAAA,MAOA,MAAA,GAAS,CAPT,CAAA;AAAA,MAQA,GAAA,GAAM,mBAAA,GAAsB,QAAA,EAR5B,CAAA;AAAA,MASA,IAAA,GAAO,MATP,CAAA;AAAA,MAUA,UAAA,GAAa,MAVb,CAAA;AAAA,MAWA,eAAA,GAAkB,CAXlB,CAAA;AAAA,MAYA,UAAA,GAAa,EAZb,CAAA;AAAA,MAcA,KAAA,GAAQ,kBAAA,CAAA,CAdR,CAAA;AAAA,MAeA,OAAA,GAAU,aAAA,CAAA,CAfV,CAAA;AAAA,MAgBA,QAAA,GAAW,oBAAA,CAAA,CAhBX,CAAA;AAAA,MAoBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CApBpB,CAAA;AAAA,MA0BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CA1BlB,CAAA;AAAA,MA+BA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,qCAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,UAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAX9D,CAAA;AAYA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAZA;AAAA,QAgBA,IAAA,GAAO,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CACL,CAAC,CADI,CACF,SAAC,CAAD,GAAA;iBAAO,CAAA,CAAE,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,EAAR;QAAA,CADE,CAEL,CAAC,CAFI,CAEF,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,KAAZ,EAAP;QAAA,CAFE,CAGL,CAAC,EAHI,CAGD,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,MAAZ,EAAP;QAAA,CAHC,CAhBP,CAAA;AAqBA,QAAA,IAAG,OAAH;AACE,UAAA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAAA,CADF;SArBA;AAAA,QAwBA,CAAA,GAAI,CAxBJ,CAAA;AAAA,QAyBA,SAAA,GAAY;UAAC;AAAA,YAAC,MAAA,EAAO,IAAK,CAAA,CAAA,CAAE,CAAC,MAAhB;AAAA,YAAwB,QAAA,EAAS,IAAK,CAAA,CAAA,CAAE,CAAC,QAAzC;WAAD;SAzBZ,CAAA;AA0BA,eAAM,CAAA,GAAI,SAAU,CAAA,CAAA,CAAE,CAAC,MAAM,CAAC,MAA9B,GAAA;AACE,UAAA,SAAU,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,MAAvB,GAAgC,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,KAAlD,CAAA;AAAA,UACA,CAAA,EADA,CADF;QAAA,CA1BA;AAAA,QA8BA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CACP,CAAC,IADM,CACD,IADC,EACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADL,CA9BT,CAAA;AAAA,QAgCA,MAAM,CAAC,KAAP,CAAA,CACE,CAAC,MADH,CACU,GADV,CACc,CAAC,IADf,CACoB,OADpB,EAC4B,gBAD5B,CAhCA,CAAA;AAAA,QAmCA,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,qBAAf,CACN,CAAC,IADK,CACA,SADA,EACW,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADX,CAnCR,CAAA;AAAA,QAqCA,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,MAAd,CAAqB,MAArB,CACE,CAAC,IADH,CACQ,OADR,EACgB,oBADhB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CAFb,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,eAHpB,CAIE,CAAC,KAJH,CAIS,gBAJT,EAI2B,MAJ3B,CAOE,CAAC,IAPH,CAOQ,WAPR,EAOsB,cAAA,GAAc,MAAd,GAAqB,cAP3C,CArCA,CAAA;AAAA,QA8CA,KACE,CAAC,KADH,CACS,QADT,EACmB,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,EAAP;QAAA,CADnB,CAEE,CAAC,KAFH,CAES,gBAFT,EAE2B,MAF3B,CAGE,CAAC,IAHH,CAGQ,QAHR,CA9CA,CAAA;AAAA,QAmDA,CAAI,SAAH,GAAkB,KAAK,CAAC,UAAN,CAAA,CAAkB,CAAC,QAAnB,CAA6B,OAAO,CAAC,QAArC,CAAlB,GAAsE,KAAvE,CACE,CAAC,IADH,CACQ,GADR,EACa,SAAC,CAAD,GAAA;iBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;QAAA,CADb,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,EAApC;WAAP;QAAA,CAFpB,CAnDA,CAAA;AAAA,QAuDA,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,MAAb,CAAA,CAvDA,CAAA;AAAA,QAyDA,MAAM,CAAC,IAAP,CAAA,CACE,CAAC,MADH,CAAA,CAzDA,CAAA;AAAA,QA4DA,OACE,CAAC,CADH,CACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,CAAG,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAAA,GAAwB,CAA9C,GAAqD,CAArD,EAAhC;QAAA,CADL,CAEE,CAAC,CAFH,CAEK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,KAAZ,EAAP;QAAA,CAFL,CAGE,CAAC,KAHH,CAGS,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,EAAP;QAAA,CAHT,CA5DA,CAAA;eAgEA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,SAArB,EAlES;MAAA,CA/BX,CAAA;AAAA,MAmGA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;AACN,YAAA,SAAA;AAAA,QAAA,SAAA,GAAY,IAAI,CAAC,SAAL,CAAe,qBAAf,CAAZ,CAAA;AACA,QAAA,IAAG,IAAI,CAAC,SAAL,CAAA,CAAH;AACE,UAAA,SAAS,CAAC,IAAV,CAAe,GAAf,EAAoB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAM,CAAC,KAAT,CAAe,QAAS,CAAA,CAAA,CAAxB,EAA2B,QAAS,CAAA,CAAA,CAAT,GAAc,CAAzC,CAAL,EAAP;UAAA,CAApB,CACA,CAAC,IADD,CACM,WADN,EACoB,YAAA,GAAW,CAAC,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,CAAA,GAA2B,CAA5B,CAAX,GAAyC,GAD7D,CAAA,CAAA;AAAA,UAEA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,CAFA,CAAA;iBAGA,QAAQ,CAAC,UAAT,CAAoB,QAApB,EAJF;SAAA,MAAA;AAME,UAAA,SAAS,CAAC,IAAV,CAAe,GAAf,EAAoB,SAAC,CAAD,GAAA;mBAAO,IAAA,CAAK,CAAC,CAAC,MAAP,EAAP;UAAA,CAApB,CAAA,CAAA;iBACA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,QAApB,EAPF;SAFM;MAAA,CAnGR,CAAA;AAAA,MAgHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,UAAD,CAAY,OAAZ,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CAFA,CAAA;AAAA,QAGA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,UAAnC,CAA8C,QAA9C,CAHA,CAAA;AAAA,QAIA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAJ3B,CAAA;AAAA,QAKA,QACA,CAAC,QADD,CACU,UAAU,CAAC,CADrB,CAEA,CAAC,UAFD,CAEY,UAAU,CAAC,CAFvB,CAGA,CAAC,UAHD,CAGY,UAAU,CAAC,KAHvB,CAIA,CAAC,KAJD,CAIO,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJP,CALA,CAAA;AAAA,QAUA,QAAQ,CAAC,WAAT,CAAqB,UAAU,CAAC,CAAhC,CAVA,CAAA;AAAA,QAWA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,QAArC,CAXA,CAAA;AAAA,QAYA,QAAQ,CAAC,EAAT,CAAa,WAAA,GAAW,GAAxB,EAA+B,QAAQ,CAAC,QAAxC,CAZA,CAAA;eAaA,QAAQ,CAAC,EAAT,CAAa,aAAA,GAAa,GAA1B,EAAiC,QAAQ,CAAC,WAA1C,EAd+B;MAAA,CAAjC,CAhHA,CAAA;AAAA,MAiIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CAjIA,CAAA;AAAA,MAkIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAlIA,CAAA;AAAA,MAmIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CAnIA,CAAA;AAAA,MAqIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CArIA,CAAA;AA0IA;AAAA;;;;;SA1IA;AAAA,MAgJA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,YAAA,GAAe,IAAf,CADF;SAAA,MAAA;AAGE,UAAA,YAAA,GAAe,KAAf,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALwB;MAAA,CAA1B,CAhJA,CAAA;AAuJA;AAAA;;;;;SAvJA;AAAA,MA6JA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;AACE,UAAA,OAAA,GAAU,IAAV,CADF;SAAA,MAAA;AAGE,UAAA,OAAA,GAAU,KAAV,CAHF;SAAA;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CA7JA,CAAA;AAoKA;AAAA;;;;SApKA;aAyKA,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,SAAC,GAAD,GAAA;AAC1B,QAAA,IAAG,GAAH;iBACE,UAAA,GAAa,KAAK,CAAC,KAAN,CAAY,GAAZ,EADf;SAD0B;MAAA,CAA5B,EA1KI;IAAA,CAHC;GAAP,CAFwD;AAAA,CAA1D,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAeO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,WAArC,EAAkD,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,kBAAzB,EAA6C,aAA7C,EAA4D,oBAA5D,GAAA;AAChD,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACP,QAAA,EAAU,GADH;AAAA,IAEP,OAAA,EAAS,SAFF;AAAA,IAIP,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,8KAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,GAAA,GAAO,WAAA,GAAU,CAAC,QAAA,EAAD,CAFjB,CAAA;AAAA,MAIA,SAAA,GAAY,EAJZ,CAAA;AAAA,MAMA,QAAA,GAAW,MANX,CAAA;AAAA,MAOA,SAAA,GAAY,MAPZ,CAAA;AAAA,MAQA,UAAA,GAAa,EARb,CAAA;AAAA,MASA,YAAA,GAAe,KATf,CAAA;AAAA,MAUA,MAAA,GAAS,CAVT,CAAA;AAAA,MAWA,UAAA,GAAa,MAXb,CAAA;AAAA,MAYA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAZT,CAAA;AAAA,MAcA,KAAA,GAAQ,kBAAA,CAAA,CAdR,CAAA;AAAA,MAeA,OAAA,GAAU,aAAA,CAAA,CAfV,CAAA;AAAA,MAgBA,QAAA,GAAW,oBAAA,CAAA,CAhBX,CAAA;AAAA,MAoBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CApBpB,CAAA;AAAA,MA0BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CA1BlB,CAAA;AAAA,MA+BA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,4DAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,SAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,SAAA,GAAY,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAXZ,CAAA;AAAA,QAYA,UAAA,GAAa,SAAA,GAAY,CAAC,CAAA,GAAI,MAAM,CAAC,OAAZ,CAAZ,GAAmC,MAAM,CAAC,OAZvD,CAAA;AAAA,QAaA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,SAAA,GAAY,CAAlC,GAAyC,CAblD,CAAA;AAcA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAdA;AAAA,QAkBA,MAAA,GAAS,SAAC,CAAD,GAAA;AACP,UAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,QAAnB;AAAiC,mBAAO,CAAA,UAAA,GAAc,CAArB,CAAjC;WAAA;AACA,UAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,mBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAAlB;WADA;AAEA,UAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,mBAAO,CAAA,UAAA,GAAc,CAArB,CAA/B;WAFA;AAGA,UAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,mBAAO,SAAA,GAAY,UAAA,GAAa,CAAhC,CAAhB;WAHA;AAIA,iBAAO,CAAP,CALO;QAAA,CAlBT,CAAA;AAAA,QAyBA,CAAA,GAAI,CAzBJ,CAAA;AAAA,QA0BA,SAAA,GAAY;UAAC;AAAA,YAAC,MAAA,EAAO,IAAK,CAAA,CAAA,CAAE,CAAC,MAAhB;AAAA,YAAwB,QAAA,EAAS,IAAK,CAAA,CAAA,CAAE,CAAC,QAAzC;WAAD;SA1BZ,CAAA;AA2BA,eAAM,CAAA,GAAI,SAAU,CAAA,CAAA,CAAE,CAAC,MAAM,CAAC,MAA9B,GAAA;AACE,UAAA,SAAU,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,MAAvB,GAAgC,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,WAAlD,CAAA;AAAA,UACA,CAAA,EADA,CADF;QAAA,CA3BA;AAAA,QA+BA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CACP,CAAC,IADM,CACD,IADC,EACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADL,CA/BT,CAAA;AAAA,QAiCA,MAAM,CAAC,KAAP,CAAA,CACE,CAAC,MADH,CACU,GADV,CACc,CAAC,IADf,CACoB,OADpB,EAC4B,gBAD5B,CAjCA,CAAA;AAAA,QAoCA,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,gBAAf,CACN,CAAC,IADK,CACA,SAAU,CAAA,CAAA,CAAE,CAAC,MADb,EACqB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,IAAT;QAAA,CADrB,CApCR,CAAA;AAAA,QAsCA,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,MAAd,CAAqB,MAArB,CACE,CAAC,IADH,CACQ,OADR,EACgB,eADhB,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,CAFpB,CAIE,CAAC,IAJH,CAIQ,QAAQ,CAAC,OAJjB,CAKE,CAAC,IALH,CAKQ,SALR,CAME,CAAC,IANH,CAMQ,WANR,EAMoB,SAAC,CAAD,GAAA;iBAAQ,eAAA,GAAc,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAD,CAAd,GAAsC,IAA9C;QAAA,CANpB,CAtCA,CAAA;AAAA,QA8CA,KACE,CAAC,IADH,CACQ,QADR,CA9CA,CAAA;AAAA,QAiDA,CAAI,SAAH,GAAkB,KAAK,CAAC,UAAN,CAAA,CAAkB,CAAC,QAAnB,CAA6B,OAAO,CAAC,QAArC,CAAlB,GAAsE,KAAvE,CACE,CAAC,IADH,CACQ,WADR,EACoB,SAAC,CAAD,GAAA;iBAAQ,eAAA,GAAc,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,MAAA,CAAO,CAAP,CAA1B,CAAd,GAAkD,IAA1D;QAAA,CADpB,CAEE,CAAC,IAFH,CAEQ,QAFR,EAEkB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,UAApC;WAAP;QAAA,CAFlB,CAGE,CAAC,IAHH,CAGQ,OAHR,EAGiB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,CAAA,GAA2B,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,MAAZ,CAApC,EAAP;QAAA,CAHjB,CAIE,CAAC,IAJH,CAIQ,GAJR,EAIa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,MAAZ,EAAP;QAAA,CAJb,CAKE,CAAC,KALH,CAKS,QALT,EAKmB,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,EAAP;QAAA,CALnB,CAME,CAAC,KANH,CAMS,SANT,EAMoB,CANpB,CAjDA,CAAA;AAAA,QAyDA,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,MAAb,CAAA,CAzDA,CAAA;eA2DA,MAAM,CAAC,IAAP,CAAA,CACA,CAAC,MADD,CAAA,EA7DS;MAAA,CA/BX,CAAA;AAAA,MA+FA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;eACN,IAAI,CAAC,SAAL,CAAe,gBAAf,CACE,CAAC,IADH,CACQ,WADR,EACoB,SAAC,CAAD,GAAA;AAAO,cAAA,CAAA;iBAAC,eAAA,GAAc,CAAI,CAAC,CAAA,GAAI,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,SAAf,CAAL,CAAA,IAAmC,CAAtC,GAA6C,CAA7C,GAAoD,CAAA,IAArD,CAAd,GAAyE,IAAjF;QAAA,CADpB,CAEE,CAAC,SAFH,CAEa,gBAFb,CAGI,CAAC,IAHL,CAGU,QAHV,EAGoB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,EAAP;QAAA,CAHpB,EADM;MAAA,CA/FR,CAAA;AAAA,MAuGA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,YAAnC,CAAgD,MAAhD,CAAuD,CAAC,SAAxD,CAAkE,SAAlE,CAFA,CAAA;AAAA,QAGA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAH3B,CAAA;AAAA,QAIA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,CAJA,CAAA;AAAA,QASA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAT5B,CAAA;eAUA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,EAX+B;MAAA,CAAjC,CAvGA,CAAA;AAAA,MAqHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CArHA,CAAA;AAAA,MAsHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAtHA,CAAA;AAAA,MAuHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CAvHA,CAAA;AAAA,MAyHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAzHA,CAAA;AA8HA;AAAA;;;;;;;;;;;;;SA9HA;AAAA,MA4IA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,YAAA,MAAA;AAAA,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB,CAAA;AAAA,UACA,MAAM,CAAC,YAAP,GAAsB,CADtB,CADF;SAAA,MAGK,IAAG,GAAA,KAAO,MAAV;AACH,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAAT,CADG;SAAA,MAAA;AAGH,UAAA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAT,CAAA;AACA,UAAA,IAAG,MAAH;AACE,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAAA;AAGA,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAJF;WAJG;SAHL;AAAA,QAcA,UAAU,CAAC,CAAC,CAAC,YAAb,CAA0B,MAA1B,CAdA,CAAA;eAeA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAhBwB;MAAA,CAA1B,CA5IA,CAAA;AA8JA;AAAA;;;;;SA9JA;AAAA,MAoKA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,IAAI,CAAC,cAAL,CAAoB,KAApB,CAAA,CADF;SAAA,MAEK,IAAG,GAAA,KAAO,MAAP,IAAiB,GAAA,KAAO,EAA3B;AACH,UAAA,IAAI,CAAC,cAAL,CAAoB,GAApB,CAAA,CADG;SAFL;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CApKA,CAAA;AA2KA;AAAA;;;;SA3KA;aAgLA,KAAK,CAAC,QAAN,CAAe,UAAf,EAA2B,SAAC,GAAD,GAAA;AACzB,QAAA,IAAG,GAAH;iBACE,SAAA,GAAY,KAAK,CAAC,KAAN,CAAY,GAAZ,EADd;SADyB;MAAA,CAA3B,EAjLI;IAAA,CAJC;GAAP,CAFgD;AAAA,CAAlD,CAfA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAeO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,aAArC,EAAoD,SAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,kBAAzB,EAA6C,aAA7C,EAA4D,oBAA5D,GAAA;AAClD,MAAA,QAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;AACA,SAAO;AAAA,IACP,QAAA,EAAU,GADH;AAAA,IAEP,OAAA,EAAS,SAFF;AAAA,IAIP,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,iLAAA;AAAA,MAAA,IAAA,GAAO,UAAU,CAAC,EAAlB,CAAA;AAAA,MAEA,GAAA,GAAO,aAAA,GAAY,CAAC,QAAA,EAAD,CAFnB,CAAA;AAAA,MAIA,YAAA,GAAe,EAJf,CAAA;AAAA,MAMA,QAAA,GAAW,MANX,CAAA;AAAA,MAOA,SAAA,GAAY,MAPZ,CAAA;AAAA,MAQA,UAAA,GAAa,EARb,CAAA;AAAA,MASA,YAAA,GAAe,KATf,CAAA;AAAA,MAUA,MAAA,GAAS,CAVT,CAAA;AAAA,MAWA,UAAA,GAAa,MAXb,CAAA;AAAA,MAYA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAZT,CAAA;AAAA,MAcA,KAAA,GAAQ,kBAAA,CAAA,CAdR,CAAA;AAAA,MAeA,OAAA,GAAU,aAAA,CAAA,CAfV,CAAA;AAAA,MAgBA,QAAA,GAAW,oBAAA,CAAA,CAhBX,CAAA;AAAA,MAoBA,iBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAClB,QAAA,KAAK,CAAC,QAAN,CAAe,CAAf,CAAiB,CAAC,UAAlB,CAA6B,CAA7B,CAA+B,CAAC,IAAhC,CAAqC,IAArC,EAA2C,IAA3C,CAAA,CAAA;AACA,QAAA,IAAG,CAAA,KAAS,CAAC,SAAN,CAAA,CAAP;AACE,UAAA,UAAA,GAAa,KAAK,CAAC,oBAAN,CAAA,CAAb,CAAA;iBACA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAnC,CAArB,EAFF;SAFkB;MAAA,CApBpB,CAAA;AAAA,MA0BA,eAAA,GAAkB,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,GAAA;AAChB,QAAA,OAAO,CAAC,MAAR,CAAe,YAAf,CAAA,CAAA;AAAA,QACA,UAAA,GAAa,KAAK,CAAC,kBAAN,CAAA,CADb,CAAA;eAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,CAArB,EAHgB;MAAA,CA1BlB,CAAA;AAAA,MA+BA,QAAA,GAAW,SAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,GAAA;AAET,YAAA,4DAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UACA,IAAI,CAAC,KAAL,CAAW,YAAX,CADA,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,KAAN;AAAA,cAAa,MAAA,EAAO,KAApB;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,IAAN,GAAa,IADb,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,SAAA,GAAY,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,SAAV,CAAA,CAXZ,CAAA;AAAA,QAYA,UAAA,GAAa,SAAA,GAAY,CAAC,CAAA,GAAI,MAAM,CAAC,OAAZ,CAAZ,GAAmC,MAAM,CAAC,OAZvD,CAAA;AAAA,QAaA,MAAA,GAAY,CAAC,CAAC,SAAF,CAAA,CAAH,GAAsB,SAAA,GAAY,CAAlC,GAAyC,CAblD,CAAA;AAcA,QAAA,IAAG,QAAH;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAA,CAAA;AAAA,UACA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CADA,CADF;SAdA;AAAA,QAkBA,MAAA,GAAS,SAAC,CAAD,GAAA;AACP,UAAA,IAAG,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,QAAnB;AAAiC,mBAAO,SAAP,CAAjC;WAAA;AACA,UAAA,IAAG,CAAC,CAAC,OAAL;AAAkB,mBAAO,CAAA,UAAA,GAAc,CAArB,CAAlB;WADA;AAEA,UAAA,IAAG,CAAC,CAAC,KAAF,IAAY,CAAC,CAAC,QAAjB;AAA+B,mBAAQ,SAAA,GAAY,UAAA,GAAa,CAAjC,CAA/B;WAFA;AAGA,UAAA,IAAG,CAAC,CAAC,KAAL;AAAgB,mBAAO,CAAA,UAAA,GAAc,CAArB,CAAhB;WAHA;AAIA,iBAAO,CAAP,CALO;QAAA,CAlBT,CAAA;AAAA,QAyBA,CAAA,GAAI,CAzBJ,CAAA;AAAA,QA0BA,SAAA,GAAY;UAAC;AAAA,YAAC,MAAA,EAAO,IAAK,CAAA,CAAA,CAAE,CAAC,MAAhB;AAAA,YAAwB,QAAA,EAAS,IAAK,CAAA,CAAA,CAAE,CAAC,QAAzC;WAAD;SA1BZ,CAAA;AA2BA,eAAM,CAAA,GAAI,SAAU,CAAA,CAAA,CAAE,CAAC,MAAM,CAAC,MAA9B,GAAA;AACE,UAAA,SAAU,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,MAAvB,GAAgC,IAAK,CAAA,CAAA,CAAE,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,WAAlD,CAAA;AAAA,UACA,CAAA,EADA,CADF;QAAA,CA3BA;AAAA,QA+BA,MAAA,GAAS,IAAI,CAAC,SAAL,CAAe,iBAAf,CACP,CAAC,IADM,CACD,IADC,EACK,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,SAAT;QAAA,CADL,CA/BT,CAAA;AAAA,QAiCA,MAAM,CAAC,KAAP,CAAA,CACE,CAAC,MADH,CACU,GADV,CACc,CAAC,IADf,CACoB,OADpB,EAC4B,gBAD5B,CAjCA,CAAA;AAAA,QAoCA,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,gBAAf,CACN,CAAC,IADK,CACA,SAAU,CAAA,CAAA,CAAE,CAAC,MADb,EACqB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,IAAT;QAAA,CADrB,CApCR,CAAA;AAAA,QAsCA,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,MAAd,CAAqB,MAArB,CACE,CAAC,IADH,CACQ,OADR,EACgB,eADhB,CAEE,CAAC,KAFH,CAES,SAFT,EAEoB,CAFpB,CAIE,CAAC,IAJH,CAIQ,QAAQ,CAAC,OAJjB,CAKE,CAAC,IALH,CAKQ,SALR,CAME,CAAC,IANH,CAMQ,WANR,EAMoB,SAAC,CAAD,GAAA;iBAAQ,YAAA,GAAW,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAD,CAAX,GAAmC,IAA3C;QAAA,CANpB,CAtCA,CAAA;AAAA,QA8CA,KACE,CAAC,IADH,CACQ,QADR,CA9CA,CAAA;AAAA,QAiDA,CAAI,SAAH,GAAkB,KAAK,CAAC,UAAN,CAAA,CAAkB,CAAC,QAAnB,CAA6B,OAAO,CAAC,QAArC,CAAlB,GAAsE,KAAvE,CACE,CAAC,IADH,CACQ,WADR,EACoB,SAAC,CAAD,GAAA;iBAAQ,YAAA,GAAW,CAAC,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,SAAZ,CAAA,GAAyB,MAAA,CAAO,CAAP,CAA1B,CAAX,GAA+C,IAAvD;QAAA,CADpB,CAEE,CAAC,IAFH,CAEQ,OAFR,EAEiB,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,UAApC;WAAP;QAAA,CAFjB,CAGE,CAAC,IAHH,CAGQ,QAHR,EAGkB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,CAAA,GAA2B,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,MAAZ,CAApC,EAAP;QAAA,CAHlB,CAIE,CAAC,IAJH,CAIQ,GAJR,EAIa,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAC,CAAC,WAAZ,EAAP;QAAA,CAJb,CAKE,CAAC,KALH,CAKS,QALT,EAKmB,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAC,CAAC,QAAhB,EAAP;QAAA,CALnB,CAME,CAAC,KANH,CAMS,SANT,EAMoB,CANpB,CAjDA,CAAA;AAAA,QAyDA,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,MAAb,CAAA,CAzDA,CAAA;eA2DA,MAAM,CAAC,IAAP,CAAA,CACA,CAAC,MADD,CAAA,EA7DS;MAAA,CA/BX,CAAA;AAAA,MA+FA,KAAA,GAAQ,SAAC,IAAD,EAAO,QAAP,GAAA;eACN,IAAI,CAAC,SAAL,CAAe,gBAAf,CACI,CAAC,IADL,CACU,WADV,EACsB,SAAC,CAAD,GAAA;AAAO,cAAA,CAAA;iBAAC,eAAA,GAAc,CAAI,CAAC,CAAA,GAAI,IAAI,CAAC,KAAL,CAAA,CAAA,CAAa,CAAC,CAAC,SAAf,CAAL,CAAA,IAAmC,CAAtC,GAA6C,CAA7C,GAAoD,CAAA,IAArD,CAAd,GAAyE,IAAjF;QAAA,CADtB,CAEE,CAAC,SAFH,CAEa,gBAFb,CAGI,CAAC,IAHL,CAGU,QAHV,EAGoB,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,KAAL,CAAA,CAAY,CAAC,SAAb,CAAA,EAAP;QAAA,CAHpB,EADM;MAAA,CA/FR,CAAA;AAAA,MAuGA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAoB,WAApB,EAAiC,SAAA,GAAA;AAC/B,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,YAAnC,CAAgD,MAAhD,CAAuD,CAAC,SAAxD,CAAkE,SAAlE,CAFA,CAAA;AAAA,QAGA,QAAA,GAAW,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,OAH3B,CAAA;AAAA,QAIA,QACE,CAAC,QADH,CACY,UAAU,CAAC,CADvB,CAEE,CAAC,UAFH,CAEc,UAAU,CAAC,CAFzB,CAGE,CAAC,UAHH,CAGc,UAAU,CAAC,KAHzB,CAIE,CAAC,KAJH,CAIS,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,MAAT;QAAA,CAJT,CAJA,CAAA;AAAA,QASA,SAAA,GAAY,IAAI,CAAC,QAAL,CAAA,CAAe,CAAC,QAT5B,CAAA;eAUA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,QAAQ,CAAC,KAArC,EAX+B;MAAA,CAAjC,CAvGA,CAAA;AAAA,MAqHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,YAAA,GAAY,GAAjC,EAAwC,KAAxC,CArHA,CAAA;AAAA,MAsHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,sBAAA,GAAsB,GAA3C,EAAkD,iBAAlD,CAtHA,CAAA;AAAA,MAuHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,oBAAA,GAAoB,GAAzC,EAAgD,eAAhD,CAvHA,CAAA;AAAA,MAyHA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,UAAA,GAAU,GAA/B,EAAsC,SAAA,GAAA;AACpC,QAAA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,EAAjB,CAAqB,GAAA,GAAG,GAAxB,EAA+B,IAA/B,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFoC;MAAA,CAAtC,CAzHA,CAAA;AA6HA;AAAA;;;;;;;;;;;;SA7HA;AAAA,MA0IA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,SAAC,GAAD,GAAA;AACxB,YAAA,MAAA;AAAA,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,MAAM,CAAC,OAAP,GAAiB,CAAjB,CAAA;AAAA,UACA,MAAM,CAAC,YAAP,GAAsB,CADtB,CADF;SAAA,MAGK,IAAG,GAAA,KAAO,MAAV;AACH,UAAA,MAAA,GAAS,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,IAAnB,CAAT,CADG;SAAA,MAAA;AAGH,UAAA,MAAA,GAAS,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAT,CAAA;AACA,UAAA,IAAG,MAAH;AACE,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAAA;AAGA,YAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,cAAA,MAAM,CAAC,OAAP,GAAiB,MAAO,CAAA,CAAA,CAAP,GAAU,GAA3B,CAAA;AAAA,cACA,MAAM,CAAC,YAAP,GAAsB,MAAO,CAAA,CAAA,CAAP,GAAU,GADhC,CADF;aAJF;WAJG;SAHL;AAAA,QAcA,UAAU,CAAC,CAAC,CAAC,YAAb,CAA0B,MAA1B,CAdA,CAAA;eAeA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EAhBwB;MAAA,CAA1B,CA1IA,CAAA;AA2JA;AAAA;;;;;SA3JA;AAAA,MAiKA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,SAAC,GAAD,GAAA;AACvB,QAAA,IAAG,GAAA,KAAO,OAAV;AACE,UAAA,IAAI,CAAC,cAAL,CAAoB,KAApB,CAAA,CADF;SAAA,MAEK,IAAG,GAAA,KAAO,MAAP,IAAiB,GAAA,KAAO,EAA3B;AACH,UAAA,IAAI,CAAC,cAAL,CAAoB,GAApB,CAAA,CADG;SAFL;eAIA,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,MAAjB,CAAA,EALuB;MAAA,CAAzB,CAjKA,CAAA;AAwKA;AAAA;;;;SAxKA;aA6KA,KAAK,CAAC,QAAN,CAAe,aAAf,EAA8B,SAAC,GAAD,GAAA;AAC5B,QAAA,IAAG,GAAH;iBACE,YAAA,GAAe,KAAK,CAAC,KAAN,CAAY,GAAZ,EADjB;SAD4B;MAAA,CAA9B,EA9KI;IAAA,CAJC;GAAP,CAFkD;AAAA,CAApD,CAfA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;;;GAAA;AAAA,OAiBO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,SAArC,EAAgD,SAAC,IAAD,EAAO,KAAP,GAAA;AAC9C,MAAA,UAAA;AAAA,EAAA,UAAA,GAAa,CAAb,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,SAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,2EAAA;AAAA,MAAA,MAAA,GAAS,UAAU,CAAC,EAApB,CAAA;AAAA,MACA,QAAA,GAAW,MADX,CAAA;AAAA,MAEA,SAAA,GAAY,MAFZ,CAAA;AAAA,MAGA,GAAA,GAAM,SAAA,GAAY,UAAA,EAHlB,CAAA;AAAA,MAIA,UAAA,GAAa,EAJb,CAAA;AAAA,MAMA,OAAA,GAAU,SAAC,IAAD,GAAA;AACR,YAAA,sBAAA;AAAA;aAAA,mBAAA;oCAAA;AACE,wBAAA,IAAC,CAAA,MAAO,CAAA,KAAK,CAAC,SAAN,CAAA,CAAA,CAAR,GACE;AAAA,YACE,KAAA,EAAO,KAAK,CAAC,cAAN,CAAqB,IAArB,CADT;AAAA,YAEE,KAAA,EAAU,KAAA,KAAS,OAAZ,GAAyB;AAAA,cAAC,IAAA,EAAK,CAAI,MAAA,CAAA,KAAY,CAAC,GAAN,CAAU,IAAV,CAAP,KAA0B,QAA7B,GAA2C,KAAK,CAAC,GAAN,CAAU,IAAV,CAA3C,GAAgE,KAAK,CAAC,GAAN,CAAU,IAAV,CAAe,CAAC,KAAjF,CAAN;aAAzB,GAA6H;AAAA,cAAC,IAAA,EAAK,MAAN;aAFtI;AAAA,YAGE,IAAA,EAAS,KAAA,KAAS,OAAZ,GAAyB,EAAE,CAAC,GAAG,CAAC,MAAP,CAAA,CAAe,CAAC,IAAhB,CAAqB,KAAK,CAAC,GAAN,CAAU,IAAV,CAArB,CAAqC,CAAC,IAAtC,CAA2C,EAA3C,CAAA,CAAA,CAAzB,GAA+E,MAHvF;AAAA,YAIE,OAAA,EAAU,KAAA,KAAS,OAAZ,GAAyB,uBAAzB,GAAsD,EAJ/D;YADF,CADF;AAAA;wBADQ;MAAA,CANV,CAAA;AAAA,MAkBA,cAAA,GAAiB,CAlBjB,CAAA;AAAA,MAsBA,IAAA,GAAO,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,IAA7B,EAAmC,KAAnC,GAAA;AAGL,YAAA,MAAA;AAAA,QAAA,MAAA,GAAS,IAAC,CAAA,SAAD,CAAW,iBAAX,CACP,CAAC,IADM,CACD,IADC,EACI,SAAC,CAAD,EAAG,CAAH,GAAA;iBAAS,EAAT;QAAA,CADJ,CAAT,CAAA;AAAA,QAEA,MAAM,CAAC,KAAP,CAAA,CACE,CAAC,MADH,CACU,MADV,CACiB,CAAC,IADlB,CACuB,OADvB,EACgC,oCADhC,CAEI,CAAC,IAFL,CAEU,WAFV,EAEuB,SAAC,CAAD,GAAA;iBAAO,YAAA,GAAW,CAAC,CAAC,CAAC,GAAF,CAAM,CAAN,CAAD,CAAX,GAAqB,GAArB,GAAuB,CAAC,CAAC,CAAC,GAAF,CAAM,CAAN,CAAD,CAAvB,GAAiC,IAAxC;QAAA,CAFvB,CAGI,CAAC,KAHL,CAGW,SAHX,EAGsB,cAHtB,CAII,CAAC,IAJL,CAIU,QAAQ,CAAC,OAJnB,CAKI,CAAC,IALL,CAKU,SALV,CAFA,CAAA;AAAA,QAQA,MACE,CAAC,KADH,CACS,MADT,EACiB,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,GAAN,CAAW,CAAX,EAAP;QAAA,CADjB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEa,EAAE,CAAC,GAAG,CAAC,MAAP,CAAA,CAAe,CAAC,IAAhB,CAAqB,SAAC,CAAD,GAAA;iBAAO,KAAK,CAAC,GAAN,CAAU,CAAV,EAAP;QAAA,CAArB,CAAyC,CAAC,IAA1C,CAA+C,SAAC,CAAD,GAAA;iBAAO,IAAI,CAAC,GAAL,CAAS,CAAT,CAAA,GAAc,IAAI,CAAC,GAAL,CAAS,CAAT,EAArB;QAAA,CAA/C,CAFb,CAGE,CAAC,UAHH,CAAA,CAGe,CAAC,QAHhB,CAGyB,OAAO,CAAC,QAHjC,CAII,CAAC,IAJL,CAIU,WAJV,EAIuB,SAAC,CAAD,GAAA;iBAAO,YAAA,GAAW,CAAC,CAAC,CAAC,GAAF,CAAM,CAAN,CAAD,CAAX,GAAqB,GAArB,GAAuB,CAAC,CAAC,CAAC,GAAF,CAAM,CAAN,CAAD,CAAvB,GAAiC,IAAxC;QAAA,CAJvB,CAKI,CAAC,KALL,CAKW,SALX,EAKsB,CALtB,CARA,CAAA;AAAA,QAeA,cAAA,GAAiB,CAfjB,CAAA;eAiBA,MAAM,CAAC,IAAP,CAAA,CAAa,CAAC,MAAd,CAAA,EApBK;MAAA,CAtBP,CAAA;AAAA,MA8CA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,WAAtB,EAAmC,SAAA,GAAA;AACjC,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,EAAoB,MAApB,EAA4B,OAA5B,CAAX,CAAb,CAAA;AAAA,QACA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,UAAd,CAAyB,QAAzB,CAAkC,CAAC,cAAnC,CAAkD,IAAlD,CADA,CAAA;AAAA,QAEA,IAAC,CAAA,OAAD,CAAS,GAAT,CAAa,CAAC,cAAd,CAA6B,IAA7B,CAAkC,CAAC,UAAnC,CAA8C,QAA9C,CAFA,CAAA;AAAA,QAGA,QAAA,GAAW,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,OAH7B,CAAA;AAAA,QAIA,SAAA,GAAY,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,QAJ9B,CAAA;eAKA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,OAA5B,EANiC;MAAA,CAAnC,CA9CA,CAAA;AAAA,MAsDA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,YAAA,GAAY,GAAnC,EAA0C,IAA1C,CAtDA,CAAA;aAwDA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,UAAA,GAAU,GAAjC,EAAwC,SAAA,GAAA;AACtC,QAAA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,GAAA,GAAG,GAA1B,EAAiC,IAAjC,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFsC;MAAA,CAAxC,EAzDI;IAAA,CAHD;GAAP,CAF8C;AAAA,CAAhD,CAjBA,CAAA;;ACAA;AAAA;;;;;;;;;;;;;;GAAA;AAAA,OAeO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,QAArC,EAA+C,SAAC,IAAD,EAAO,KAAP,GAAA;AAC7C,MAAA,UAAA;AAAA,EAAA,UAAA,GAAa,CAAb,CAAA;AACA,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,QAFJ;AAAA,IAIL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,UAAxB,GAAA;AACJ,UAAA,6DAAA;AAAA,MAAA,MAAA,GAAS,UAAU,CAAC,EAApB,CAAA;AAAA,MAGA,QAAA,GAAW,MAHX,CAAA;AAAA,MAIA,UAAA,GAAa,EAJb,CAAA;AAAA,MAKA,GAAA,GAAM,QAAA,GAAW,UAAA,EALjB,CAAA;AAAA,MAMA,IAAA,GAAO,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CANP,CAAA;AAAA,MAOA,KAAA,GAAQ,MAPR,CAAA;AAAA,MAWA,OAAA,GAAU,SAAC,IAAD,GAAA;AACR,YAAA,4BAAA;AAAA;aAAA,4CAAA;wBAAA;AACE,UAAA,KAAA,GAAQ,UAAU,CAAC,KAAK,CAAC,KAAjB,CAAA,CAAA,CAAyB,IAAzB,CAAR,CAAA;AAAA,wBACA,IAAC,CAAA,MAAO,CAAA,UAAU,CAAC,CAAC,CAAC,KAAb,CAAmB,CAAnB,CAAA,CAAR,GAAiC;AAAA,YAAC,KAAA,EAAM,UAAU,CAAC,CAAC,CAAC,WAAb,CAAyB,CAAE,CAAA,IAAA,CAA3B,CAAP;AAAA,YAA0C,KAAA,EAAO;AAAA,cAAC,IAAA,EAAK,CAAI,MAAA,CAAA,KAAA,KAAgB,QAAnB,GAAiC,KAAjC,GAA4C,KAAK,CAAC,KAAnD,CAAN;aAAjD;YADjC,CADF;AAAA;wBADQ;MAAA,CAXV,CAAA;AAAA,MAkBA,IAAA,GAAO,SAAC,IAAD,EAAO,OAAP,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,GAAA;AAEL,YAAA,yIAAA;AAAA,QAAA,QAAA,GAAW,SAAC,CAAD,GAAA;AACT,cAAA,iBAAA;AAAA,UAAA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,IAAV,CAAP,CAAA;AAAA,UAEA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA,CAAA,CAAc,CAAd,CAFR,CAAA;AAGA,UAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;mBACE,IAAI,CAAC,KAAL,CAAW;AAAA,cAAC,IAAA,EAAK,MAAN;AAAA,cAAc,MAAA,EAAO,KAArB;AAAA,cAA4B,cAAA,EAAe,CAA3C;aAAX,EADF;WAAA,MAAA;AAGE,YAAA,IAAA,GAAO,KAAK,CAAC,KAAb,CAAA;AAAA,YACA,KAAK,CAAC,MAAN,GAAe,IADf,CAAA;mBAEA,IAAI,CAAC,KAAL,CAAW,KAAX,EALF;WAJS;QAAA,CAAX,CAAA;AAAA,QAWA,KAAA,GAAQ,IAXR,CAAA;AAAA,QAYA,IAAI,CAAC,GAAL,CAAS,IAAT,CAZA,CAAA;AAAA,QAcA,OAAA,GAAU,OAAO,CAAC,KAAR,GAAc,CAdxB,CAAA;AAAA,QAeA,OAAA,GAAU,OAAO,CAAC,MAAR,GAAe,CAfzB,CAAA;AAAA,QAgBA,MAAA,GAAS,EAAE,CAAC,GAAH,CAAO,CAAC,OAAD,EAAU,OAAV,CAAP,CAAA,GAA6B,GAhBtC,CAAA;AAAA,QAiBA,QAAA,GAAW,EAjBX,CAAA;AAAA,QAkBA,OAAA,GAAU,IAAI,CAAC,MAlBf,CAAA;AAAA,QAmBA,GAAA,GAAM,IAAI,CAAC,EAAL,GAAU,CAAV,GAAc,OAnBpB,CAAA;AAAA,QAoBA,IAAA,GAAO,GAAA,GAAM,OApBb,CAAA;AAAA,QAsBA,KAAA,GAAQ,IAAI,CAAC,MAAL,CAAY,gBAAZ,CAtBR,CAAA;AAuBA,QAAA,IAAG,KAAK,CAAC,KAAN,CAAA,CAAH;AACE,UAAA,KAAA,GAAQ,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,CAAC,IAAjB,CAAsB,OAAtB,EAA+B,eAA/B,CAAR,CADF;SAvBA;AAAA,QA0BA,KAAA,GAAQ,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,KAAV,CAAgB,CAAC,CAAC,KAAF,CAAA,CAAhB,CA1BR,CAAA;AAAA,QA2BA,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,KAAV,CAAgB,CAAC,MAAD,EAAQ,CAAR,CAAhB,CA3BA,CAAA;AAAA,QA4BA,IAAI,CAAC,KAAL,CAAW,CAAC,CAAC,KAAF,CAAA,CAAX,CAAqB,CAAC,MAAtB,CAA6B,OAA7B,CAAqC,CAAC,UAAtC,CAAiD,KAAjD,CAAuD,CAAC,UAAxD,CAAmE,CAAC,CAAC,UAAF,CAAA,CAAnE,CA5BA,CAAA;AAAA,QA6BA,KAAK,CAAC,IAAN,CAAW,IAAX,CAAgB,CAAC,IAAjB,CAAsB,WAAtB,EAAoC,YAAA,GAAY,OAAZ,GAAoB,GAApB,GAAsB,CAAC,OAAA,GAAQ,MAAT,CAAtB,GAAsC,GAA1E,CA7BA,CAAA;AAAA,QA8BA,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,KAAV,CAAgB,CAAC,CAAD,EAAG,MAAH,CAAhB,CA9BA,CAAA;AAAA,QAgCA,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,qBAAf,CAAqC,CAAC,IAAtC,CAA2C,IAA3C,EAAgD,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAP;QAAA,CAAhD,CAhCR,CAAA;AAAA,QAiCA,KAAK,CAAC,KAAN,CAAA,CACE,CAAC,MADH,CACU,MADV,CACiB,CAAC,IADlB,CACuB,OADvB,EACgC,oBADhC,CAEE,CAAC,KAFH,CAES,QAFT,EAEmB,UAFnB,CAjCA,CAAA;AAAA,QAqCA,KACE,CAAC,IADH,CACQ;AAAA,UAAC,EAAA,EAAG,CAAJ;AAAA,UAAO,EAAA,EAAG,CAAV;AAAA,UAAa,EAAA,EAAG,CAAhB;AAAA,UAAmB,EAAA,EAAG,MAAtB;SADR,CAEE,CAAC,IAFH,CAEQ,WAFR,EAEoB,SAAC,CAAD,EAAG,CAAH,GAAA;iBAAU,YAAA,GAAY,OAAZ,GAAoB,IAApB,GAAwB,OAAxB,GAAgC,UAAhC,GAAyC,CAAC,IAAA,GAAO,CAAP,GAAW,GAAZ,CAAzC,GAAyD,IAAnE;QAAA,CAFpB,CArCA,CAAA;AAAA,QAyCA,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,MAAb,CAAA,CAzCA,CAAA;AAAA,QA4CA,QAAA,GAAW,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CAAa,CAAC,CAAd,CAAgB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,EAAT;QAAA,CAAhB,CAA2B,CAAC,CAA5B,CAA8B,SAAC,CAAD,GAAA;iBAAK,CAAC,CAAC,EAAP;QAAA,CAA9B,CA5CX,CAAA;AAAA,QA6CA,QAAA,GAAW,IAAI,CAAC,SAAL,CAAe,oBAAf,CAAoC,CAAC,IAArC,CAA0C,KAA1C,CA7CX,CAAA;AAAA,QA8CA,QAAQ,CAAC,KAAT,CAAA,CAAgB,CAAC,MAAjB,CAAwB,MAAxB,CAA+B,CAAC,IAAhC,CAAqC,OAArC,EAA8C,mBAA9C,CACE,CAAC,KADH,CACS,MADT,EACiB,MADjB,CACwB,CAAC,KADzB,CAC+B,QAD/B,EACyC,WADzC,CA9CA,CAAA;AAAA,QAiDA,QACE,CAAC,IADH,CACQ,GADR,EACY,SAAC,CAAD,GAAA;AACR,cAAA,CAAA;AAAA,UAAA,CAAA,GAAI,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,EAAI,CAAJ,GAAA;mBAAU;AAAA,cAAC,CAAA,EAAE,IAAI,CAAC,GAAL,CAAS,GAAA,GAAI,CAAJ,GAAQ,IAAI,CAAC,EAAtB,CAAA,GAA4B,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAA/B;AAAA,cAA4C,CAAA,EAAE,IAAI,CAAC,GAAL,CAAS,GAAA,GAAI,CAAJ,GAAQ,IAAI,CAAC,EAAtB,CAAA,GAA4B,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAV,CAA1E;cAAV;UAAA,CAAT,CAAJ,CAAA;iBACA,QAAA,CAAS,CAAT,CAAA,GAAc,IAFN;QAAA,CADZ,CAIE,CAAC,IAJH,CAIQ,WAJR,EAIsB,YAAA,GAAY,OAAZ,GAAoB,IAApB,GAAwB,OAAxB,GAAgC,GAJtD,CAjDA,CAAA;AAAA,QAuDA,QAAQ,CAAC,IAAT,CAAA,CAAe,CAAC,MAAhB,CAAA,CAvDA,CAAA;AAAA,QAyDA,UAAA,GAAa,IAAI,CAAC,SAAL,CAAe,qBAAf,CAAqC,CAAC,IAAtC,CAA2C,IAA3C,EAAgD,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAP;QAAA,CAAhD,CAzDb,CAAA;AAAA,QA0DA,UAAU,CAAC,KAAX,CAAA,CAAkB,CAAC,MAAnB,CAA0B,MAA1B,CACE,CAAC,IADH,CACQ,OADR,EACiB,oBADjB,CAEE,CAAC,KAFH,CAES,MAFT,EAEiB,OAFjB,CAGE,CAAC,IAHH,CAGQ,IAHR,EAGc,OAHd,CAIE,CAAC,IAJH,CAIQ,aAJR,EAIuB,QAJvB,CA1DA,CAAA;AAAA,QA+DA,UACE,CAAC,IADH,CACQ;AAAA,UACF,CAAA,EAAG,SAAC,CAAD,EAAI,CAAJ,GAAA;mBAAU,OAAA,GAAU,IAAI,CAAC,GAAL,CAAS,GAAA,GAAM,CAAN,GAAU,IAAI,CAAC,EAAxB,CAAA,GAA8B,CAAC,MAAA,GAAS,QAAV,EAAlD;UAAA,CADD;AAAA,UAEF,CAAA,EAAG,SAAC,CAAD,EAAI,CAAJ,GAAA;mBAAU,OAAA,GAAU,IAAI,CAAC,GAAL,CAAS,GAAA,GAAM,CAAN,GAAU,IAAI,CAAC,EAAxB,CAAA,GAA8B,CAAC,MAAA,GAAS,QAAV,EAAlD;UAAA,CAFD;SADR,CAKE,CAAC,IALH,CAKQ,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAP;QAAA,CALR,CA/DA,CAAA;AAAA,QAqEA,UAAU,CAAC,IAAX,CAAA,CAAiB,CAAC,MAAlB,CAAA,CArEA,CAAA;AAAA,QAyEA,QAAA,GAAW,EAAE,CAAC,GAAG,CAAC,IAAP,CAAA,CAAa,CAAC,CAAd,CAAgB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,EAAT;QAAA,CAAhB,CAA2B,CAAC,CAA5B,CAA8B,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,EAAT;QAAA,CAA9B,CAzEX,CAAA;AAAA,QA2EA,QAAA,GAAW,IAAI,CAAC,SAAL,CAAe,qBAAf,CAAqC,CAAC,IAAtC,CAA2C,CAAC,CAAC,SAAF,CAAY,IAAZ,CAA3C,CA3EX,CAAA;AAAA,QA4EA,QAAQ,CAAC,KAAT,CAAA,CAAgB,CAAC,MAAjB,CAAwB,MAAxB,CAA+B,CAAC,IAAhC,CAAqC,OAArC,EAA8C,oBAA9C,CAOE,CAAC,IAPH,CAOQ,QAAQ,CAAC,OAPjB,CA5EA,CAAA;eAoFA,QAAQ,CAAC,IAAT,CAAc,GAAd,EAAmB,SAAC,CAAD,GAAA;AACf,cAAA,CAAA;AAAA,UAAA,CAAA,GAAI,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,EAAI,CAAJ,GAAA;mBAAU;AAAA,cAAC,CAAA,EAAE,IAAI,CAAC,GAAL,CAAS,GAAA,GAAI,CAAJ,GAAQ,IAAI,CAAC,EAAtB,CAAA,GAA4B,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAE,CAAA,CAAA,CAAZ,CAA/B;AAAA,cAA+C,CAAA,EAAE,IAAI,CAAC,GAAL,CAAS,GAAA,GAAI,CAAJ,GAAQ,IAAI,CAAC,EAAtB,CAAA,GAA4B,CAAC,CAAC,KAAF,CAAA,CAAA,CAAU,CAAE,CAAA,CAAA,CAAZ,CAA7E;cAAV;UAAA,CAAT,CAAJ,CAAA;iBACA,QAAA,CAAS,CAAT,CAAA,GAAc,IAFC;QAAA,CAAnB,CAIE,CAAC,IAJH,CAIQ,QAJR,CAKE,CAAC,IALH,CAKQ,WALR,EAKsB,YAAA,GAAY,OAAZ,GAAoB,IAApB,GAAwB,OAAxB,GAAgC,GALtD,EAtFK;MAAA,CAlBP,CAAA;AAAA,MAkHA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAsB,WAAtB,EAAmC,SAAA,GAAA;AACjC,QAAA,UAAA,GAAa,IAAC,CAAA,SAAD,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAX,CAAb,CAAA;AAAA,QACA,UAAU,CAAC,CAAC,CAAC,UAAb,CAAwB,KAAxB,CADA,CAAA;AAAA,QAEA,UAAU,CAAC,CAAC,CAAC,cAAb,CAA4B,IAA5B,CAAiC,CAAC,SAAlC,CAA4C,SAA5C,CAFA,CAAA;AAAA,QAIA,QAAA,GAAW,MAAM,CAAC,QAAP,CAAA,CAAiB,CAAC,OAJ7B,CAAA;eAKA,QAAQ,CAAC,EAAT,CAAa,QAAA,GAAQ,GAArB,EAA4B,OAA5B,EANiC;MAAA,CAAnC,CAlHA,CAAA;AAAA,MA0HA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,YAAA,GAAY,GAAnC,EAA0C,IAA1C,CA1HA,CAAA;aA4HA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,UAAA,GAAU,GAAjC,EAAwC,SAAA,GAAA;AACtC,QAAA,MAAM,CAAC,SAAP,CAAA,CAAkB,CAAC,EAAnB,CAAuB,GAAA,GAAG,GAA1B,EAAiC,IAAjC,CAAA,CAAA;eACA,QAAQ,CAAC,EAAT,CAAa,GAAA,GAAG,GAAhB,EAAuB,IAAvB,EAFsC;MAAA,CAAxC,EA7HI;IAAA,CAJD;GAAP,CAF6C;AAAA,CAA/C,CAfA,CAAA;;ACAA;AAAA;;;;;;GAAA;AAAA,OAQO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,QAA3B,CAAoC,eAApC,EAAqD,SAAA,GAAA;AAEnD,MAAA,eAAA;AAAA,EAAA,MAAA,GAAS,OAAT,CAAA;AAAA,EAEA,OAAA,GAAU;AAAA,IAER,KAAA,EAAM,EAAE,CAAC,MAAH,CAAU;AAAA,MACd,OAAA,EAAS,GADK;AAAA,MAEd,SAAA,EAAW,GAFG;AAAA,MAGd,QAAA,EAAU,CAAC,CAAD,CAHI;AAAA,MAId,QAAA,EAAU,CAAC,EAAD,EAAK,IAAL,CAJI;AAAA,MAKd,QAAA,EAAU,uBALI;AAAA,MAMd,IAAA,EAAM,UANQ;AAAA,MAOd,IAAA,EAAM,UAPQ;AAAA,MAQd,OAAA,EAAS,CAAC,IAAD,EAAO,IAAP,CARK;AAAA,MASd,IAAA,EAAM,CAAC,SAAD,EAAY,QAAZ,EAAsB,UAAtB,EAAkC,UAAlC,EAA8C,YAA9C,EAA4D,SAA5D,EAAuE,SAAvE,CATQ;AAAA,MAUd,SAAA,EAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,CAVG;AAAA,MAWd,MAAA,EAAQ,CAAC,QAAD,EAAW,SAAX,EAAsB,MAAtB,EAA8B,OAA9B,EAAuC,KAAvC,EAA8C,MAA9C,EAAsD,MAAtD,EAA8D,QAA9D,EAAwE,WAAxE,EAAqF,SAArF,EACC,UADD,EACa,UADb,CAXM;AAAA,MAad,WAAA,EAAa,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAbC;KAAV,CAFE;AAAA,IAkBR,OAAA,EAAS,EAAE,CAAC,MAAH,CAAU;AAAA,MACjB,SAAA,EAAW,GADM;AAAA,MAEjB,WAAA,EAAa,GAFI;AAAA,MAGjB,UAAA,EAAY,CAAC,CAAD,CAHK;AAAA,MAIjB,UAAA,EAAY,CAAC,GAAD,EAAM,EAAN,CAJK;AAAA,MAKjB,UAAA,EAAY,gBALK;AAAA,MAMjB,MAAA,EAAQ,UANS;AAAA,MAOjB,MAAA,EAAQ,UAPS;AAAA,MAQjB,SAAA,EAAW,CAAC,IAAD,EAAO,IAAP,CARM;AAAA,MASjB,MAAA,EAAQ,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CATS;AAAA,MAUjB,WAAA,EAAa,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAVI;AAAA,MAWjB,QAAA,EAAU,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,SAAxF,EACC,UADD,EACa,UADb,CAXO;AAAA,MAajB,aAAA,EAAe,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAbE;KAAV,CAlBD;GAFV,CAAA;AAqCA;AAAA;;;;KArCA;AAAA,EA0CA,IAAI,CAAC,SAAL,GAAiB,SAAC,CAAD,GAAA;AACf,IAAA,IAAG,CAAC,CAAC,GAAF,CAAM,OAAN,EAAe,CAAf,CAAH;aACE,MAAA,GAAS,EADX;KAAA,MAAA;AAGE,YAAO,kBAAA,GAAkB,CAAlB,GAAoB,yBAA3B,CAHF;KADe;EAAA,CA1CjB,CAAA;AAgDA;AAAA;;;;;KAhDA;AAAA,EAsDA,IAAI,CAAC,mBAAL,GAA2B,SAAC,IAAD,EAAO,CAAP,GAAA;WACzB,OAAQ,CAAA,IAAA,CAAR,GAAgB,EAAE,CAAC,MAAH,CAAU,CAAV,EADS;EAAA,CAtD3B,CAAA;AA0DA;AAAA;;;;;;KA1DA;AAAA,EAiEA,IAAI,CAAC,IAAL,GAAY;IAAC,MAAD,EAAQ,SAAC,IAAD,GAAA;AAClB,aAAO,OAAQ,CAAA,MAAA,CAAf,CADkB;IAAA,CAAR;GAjEZ,CAAA;AAqEA,SAAO,IAAP,CAvEmD;AAAA,CAArD,CARA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,QAA3B,CAAoC,eAApC,EAAqD,SAAA,GAAA;AAEnD,MAAA,2IAAA;AAAA,EAAA,aAAA,GAAgB,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,EAA4B,OAA5B,EAAqC,MAArC,CAAhB,CAAA;AAAA,EACA,YAAA,GAAe,MADf,CAAA;AAAA,EAGA,eAAA,GAAkB,SAAA,GAAA;AAChB,QAAA,WAAA;AAAA,IAAA,OAAA,GAAU,EAAE,CAAC,KAAK,CAAC,OAAT,CAAA,CAAV,CAAA;AAAA,IAEA,EAAA,GAAK,SAAC,KAAD,GAAA;AACH,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,EAAP,CAA9B;OAAA;AACA,aAAO,KAAP,CAFG;IAAA,CAFL,CAAA;AAAA,IAMA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,aAAO,GAAP,CADU;IAAA,CANZ,CAAA;AAAA,IASA,EAAE,CAAC,MAAH,GAAY,EAAE,CAAC,KAAK,CAAC,MATrB,CAAA;AAAA,IAUA,EAAE,CAAC,KAAH,GAAW,EAAE,CAAC,KAAK,CAAC,MAVpB,CAAA;AAYA,WAAO,EAAP,CAbgB;EAAA,CAHlB,CAAA;AAAA,EAkBA,MAAA,GAAS,SAAA,GAAA;AACP,QAAA,oBAAA;AAAA,IAAA,OAAA,GAAU,EAAE,CAAC,KAAK,CAAC,OAAT,CAAA,CAAV,CAAA;AAAA,IAEA,OAAA,GAAU,SAAC,KAAD,GAAA;AACR,UAAA,8BAAA;AAAA,MAAA,IAAA,GAAO,CAAP,CAAA;AAAA,MACA,CAAA,GAAI,OAAO,CAAC,KAAR,CAAA,CAAe,CAAC,MAAhB,GAAyB,CAD7B,CAAA;AAEA;WAAS,iGAAT,GAAA;AACE,sBAAA,IAAA,GAAO,CAAC,EAAA,GAAK,IAAL,GAAY,KAAK,CAAC,MAAN,CAAa,CAAb,CAAb,CAAA,GAAgC,EAAvC,CADF;AAAA;sBAHQ;IAAA,CAFV,CAAA;AAAA,IAQA,EAAA,GAAK,SAAC,KAAD,GAAA;AACH,MAAA,IAAG,CAAA,SAAH;AAAsB,eAAO,EAAP,CAAtB;OAAA;aACA,OAAA,CAAQ,OAAA,CAAQ,KAAR,CAAR,EAFG;IAAA,CARL,CAAA;AAAA,IAYA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,MAAA,IAAG,CAAA,SAAH;AAAsB,eAAO,OAAO,CAAC,KAAR,CAAA,CAAP,CAAtB;OAAA;AAAA,MACA,OAAO,CAAC,MAAR,CAAe,EAAE,CAAC,KAAH,CAAS,KAAK,CAAC,MAAf,CAAf,CADA,CAAA;aAEA,OAAO,CAAC,KAAR,CAAc,KAAd,EAHS;IAAA,CAZX,CAAA;AAAA,IAiBA,EAAE,CAAC,MAAH,GAAY,OAAO,CAAC,MAjBpB,CAAA;AAAA,IAkBA,EAAE,CAAC,UAAH,GAAgB,OAAO,CAAC,WAlBxB,CAAA;AAAA,IAmBA,EAAE,CAAC,UAAH,GAAgB,OAAO,CAAC,UAnBxB,CAAA;AAAA,IAoBA,EAAE,CAAC,eAAH,GAAqB,OAAO,CAAC,eApB7B,CAAA;AAAA,IAqBA,EAAE,CAAC,SAAH,GAAe,OAAO,CAAC,SArBvB,CAAA;AAAA,IAsBA,EAAE,CAAC,WAAH,GAAiB,OAAO,CAAC,WAtBzB,CAAA;AAAA,IAwBA,EAAE,CAAC,IAAH,GAAU,SAAC,EAAD,GAAA;AACR,MAAA,IAAG,CAAA,SAAH;AAAsB,eAAO,OAAP,CAAtB;OAAA;AAAA,MACA,OAAA,GAAU,EADV,CAAA;AAEA,aAAO,EAAP,CAHQ;IAAA,CAxBV,CAAA;AA6BA,WAAO,EAAP,CA9BO;EAAA,CAlBT,CAAA;AAAA,EAkDA,WAAA,GAAc,SAAA,GAAA;AACZ,QAAA,kBAAA;AAAA,IAAA,OAAA,GAAU,EAAE,CAAC,KAAK,CAAC,OAAT,CAAA,CAAV,CAAA;AAAA,IACA,KAAA,GAAQ,YAAA,IAAgB,OADxB,CAAA;AAAA,IAGA,EAAA,GAAK,SAAC,KAAD,GAAA;AACH,MAAA,IAAG,CAAA,SAAH;AAAsB,eAAO,EAAP,CAAtB;OAAA;AAEA,aAAO,KAAK,CAAC,KAAN,CAAY,EAAZ,EAAgB,CAAC,KAAD,EAAQ,EAAE,CAAC,MAAH,CAAA,CAAR,CAAhB,CAAP,CAHG;IAAA,CAHL,CAAA;AAAA,IAQA,EAAE,CAAC,KAAH,GAAW,SAAC,EAAD,GAAA;AACT,MAAA,IAAG,CAAA,SAAH;AAAsB,eAAO,KAAP,CAAtB;OAAA;AACA,MAAA,IAAG,CAAC,CAAC,UAAF,CAAa,EAAb,CAAH;AACE,QAAA,KAAA,GAAQ,EAAR,CADF;OADA;AAGA,aAAO,EAAP,CAJS;IAAA,CARX,CAAA;AAAA,IAcA,EAAE,CAAC,MAAH,GAAY,OAAO,CAAC,MAdpB,CAAA;AAAA,IAeA,EAAE,CAAC,KAAH,GAAW,OAAO,CAAC,KAfnB,CAAA;AAAA,IAgBA,EAAE,CAAC,UAAH,GAAgB,OAAO,CAAC,WAhBxB,CAAA;AAAA,IAiBA,EAAE,CAAC,UAAH,GAAgB,OAAO,CAAC,UAjBxB,CAAA;AAAA,IAkBA,EAAE,CAAC,eAAH,GAAqB,OAAO,CAAC,eAlB7B,CAAA;AAAA,IAmBA,EAAE,CAAC,SAAH,GAAe,OAAO,CAAC,SAnBvB,CAAA;AAAA,IAoBA,EAAE,CAAC,WAAH,GAAiB,OAAO,CAAC,WApBzB,CAAA;AAsBA,WAAO,EAAP,CAvBY;EAAA,CAlDd,CAAA;AAAA,EA4EA,cAAA,GAAiB,SAAA,GAAA;AAAM,WAAO,EAAE,CAAC,KAAK,CAAC,OAAT,CAAA,CAAkB,CAAC,KAAnB,CAAyB,aAAzB,CAAP,CAAN;EAAA,CA5EjB,CAAA;AAAA,EA6EA,gBAAA,GAAmB,SAAA,GAAA;AAAM,WAAO,EAAE,CAAC,KAAK,CAAC,OAAT,CAAA,CAAkB,CAAC,KAAnB,CAAyB,EAAE,CAAC,KAAK,CAAC,UAAT,CAAA,CAAqB,CAAC,KAAtB,CAAA,CAA6B,CAAC,GAA9B,CAAkC,SAAC,CAAD,GAAA;aAAQ,aAAA,GAAY,CAAC,CAAC,CAAC,OAAF,CAAU,GAAV,EAAc,EAAd,CAAD,CAAZ,GAA+B,IAAvC;IAAA,CAAlC,CAAzB,CAAP,CAAN;EAAA,CA7EnB,CAAA;AAAA,EA8EA,gBAAA,GAAmB,SAAA,GAAA;AAAM,WAAO,EAAE,CAAC,KAAK,CAAC,OAAT,CAAA,CAAkB,CAAC,KAAnB,CAAyB,EAAE,CAAC,KAAK,CAAC,UAAT,CAAA,CAAqB,CAAC,KAAtB,CAAA,CAA6B,CAAC,GAA9B,CAAkC,SAAC,CAAD,GAAA;aAAQ,aAAA,GAAY,CAAC,CAAC,CAAC,OAAF,CAAU,GAAV,EAAc,EAAd,CAAD,CAAZ,GAA+B,IAAvC;IAAA,CAAlC,CAAzB,CAAP,CAAN;EAAA,CA9EnB,CAAA;AAAA,EAgFA,oBAAA,GAAuB,SAAA,GAAA;AAAM,WAAO,MAAA,CAAA,CAAQ,CAAC,KAAT,CAAe,aAAf,CAAP,CAAN;EAAA,CAhFvB,CAAA;AAAA,EAkFA,IAAI,CAAC,MAAL,GAAc,SAAC,MAAD,GAAA;WACZ,aAAA,GAAgB,OADJ;EAAA,CAlFd,CAAA;AAAA,EAqFA,IAAI,CAAC,WAAL,GAAmB,SAAC,EAAD,GAAA;AACjB,QAAA,KAAA;AAAA,IAAA,IAAG,CAAC,CAAC,UAAF,CAAa,EAAb,CAAH;aACE,KAAA,GAAQ,GADV;KADiB;EAAA,CArFnB,CAAA;AAAA,EAyFA,IAAI,CAAC,IAAL,GAAY;IAAC,MAAD,EAAQ,SAAC,IAAD,GAAA;AAClB,aAAO;AAAA,QACL,MAAA,EAAQ,MADH;AAAA,QAEL,cAAA,EAAgB,cAFX;AAAA,QAGL,oBAAA,EAAsB,oBAHjB;AAAA,QAIL,WAAA,EAAa,WAJR;AAAA,QAKL,gBAAA,EAAkB,gBALb;AAAA,QAML,gBAAA,EAAkB,gBANb;AAAA,QAOL,eAAA,EAAiB,eAPZ;OAAP,CADkB;IAAA,CAAR;GAzFZ,CAAA;AAqGA,SAAO,IAAP,CAvGmD;AAAA,CAArD,CAAA,CAAA;;ACAA;AAAA;;;;;;GAAA;AAAA,OAQO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,QAA3B,CAAoC,kBAApC,EAAwD,SAAA,GAAA;AAEtD,MAAA,wDAAA;AAAA,EAAA,kBAAA,GAAqB,wBAArB,CAAA;AAAA,EACA,iBAAA,GAAoB,uBADpB,CAAA;AAAA,EAEA,iBAAA,GAAoB,yBAFpB,CAAA;AAGA;AAAA;;;;KAHA;AAAA,EAQA,IAAI,CAAC,kBAAL,GAA0B,SAAC,GAAD,GAAA;WACxB,kBAAA,GAAqB,IADG;EAAA,CAR1B,CAAA;AAWA;AAAA;;;;KAXA;AAAA,EAgBA,IAAI,CAAC,iBAAL,GAAyB,SAAC,GAAD,GAAA;WACvB,iBAAA,GAAoB,IADG;EAAA,CAhBzB,CAAA;AAmBA;AAAA;;;;KAnBA;AAAA,EAwBA,IAAI,CAAC,aAAL,GAAqB,SAAC,GAAD,GAAA;WACnB,iBAAA,GAAoB,IADD;EAAA,CAxBrB,CAAA;AA2BA;AAAA;;;;;;KA3BA;AAAA,EAkCA,IAAI,CAAC,IAAL,GAAY;IAAC,MAAD,EAAS,gBAAT,EAA0B,SAAC,IAAD,EAAO,cAAP,GAAA;AACpC,aAAO;AACL;AAAA;;;;WADK;AAAA,QAML,eAAA,EAAiB,SAAA,GAAA;iBAAM,cAAc,CAAC,GAAf,CAAmB,kBAAnB,EAAN;QAAA,CANZ;AAQL;AAAA;;;;WARK;AAAA,QAaL,cAAA,EAAgB,SAAA,GAAA;iBAAM,cAAc,CAAC,GAAf,CAAmB,iBAAnB,EAAN;QAAA,CAbX;AAeL;AAAA;;;;WAfK;AAAA,QAoBL,cAAA,EAAgB,SAAA,GAAA;iBAAM,cAAc,CAAC,GAAf,CAAmB,iBAAnB,EAAN;QAAA,CApBX;OAAP,CADoC;IAAA,CAA1B;GAlCZ,CAAA;AA2DA,SAAO,IAAP,CA7DsD;AAAA,CAAxD,CARA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,kBAAnC,EAAuD,SAAC,IAAD,GAAA;AACrD,MAAA,yCAAA;AAAA,EAAA,UAAA,GAAa,EAAb,CAAA;AAAA,EACA,kBAAA,GAAqB,EADrB,CAAA;AAAA,EAEA,SAAA,GAAY,EAFZ,CAAA;AAAA,EAIA,IAAI,CAAC,WAAL,GAAmB,SAAC,KAAD,GAAA,CAJnB,CAAA;AAAA,EAOA,IAAI,CAAC,YAAL,GAAoB,SAAC,SAAD,EAAY,iBAAZ,EAA+B,KAA/B,GAAA;AAClB,QAAA,4BAAA;AAAA,IAAA,IAAG,KAAH;AACE,MAAA,UAAW,CAAA,KAAA,CAAX,GAAoB,SAApB,CAAA;AAAA,MACA,kBAAmB,CAAA,KAAA,CAAnB,GAA4B,iBAD5B,CAAA;AAEA,MAAA,IAAG,SAAU,CAAA,KAAA,CAAb;AACE;AAAA;aAAA,2CAAA;wBAAA;AACE,wBAAA,EAAA,CAAG,SAAH,EAAc,iBAAd,EAAA,CADF;AAAA;wBADF;OAHF;KADkB;EAAA,CAPpB,CAAA;AAAA,EAeA,IAAI,CAAC,YAAL,GAAoB,SAAC,KAAD,GAAA;AAClB,QAAA,GAAA;AAAA,IAAA,GAAA,GAAM,KAAA,IAAS,SAAf,CAAA;AACA,WAAO,SAAU,CAAA,GAAA,CAAjB,CAFkB;EAAA,CAfpB,CAAA;AAAA,EAmBA,IAAI,CAAC,QAAL,GAAgB,SAAC,KAAD,EAAQ,QAAR,GAAA;AACd,IAAA,IAAG,KAAH;AACE,MAAA,IAAG,CAAA,SAAc,CAAA,KAAA,CAAjB;AACE,QAAA,SAAU,CAAA,KAAA,CAAV,GAAmB,EAAnB,CADF;OAAA;AAGA,MAAA,IAAG,CAAA,CAAK,CAAC,QAAF,CAAW,SAAU,CAAA,KAAA,CAArB,EAA6B,QAA7B,CAAP;eACE,SAAU,CAAA,KAAA,CAAM,CAAC,IAAjB,CAAsB,QAAtB,EADF;OAJF;KADc;EAAA,CAnBhB,CAAA;AAAA,EA2BA,IAAI,CAAC,UAAL,GAAkB,SAAC,KAAD,EAAQ,QAAR,GAAA;AAChB,QAAA,GAAA;AAAA,IAAA,IAAG,SAAU,CAAA,KAAA,CAAb;AACE,MAAA,GAAA,GAAM,SAAU,CAAA,KAAA,CAAM,CAAC,OAAjB,CAAyB,QAAzB,CAAN,CAAA;AACA,MAAA,IAAG,GAAA,IAAO,CAAV;eACE,SAAU,CAAA,KAAA,CAAM,CAAC,MAAjB,CAAwB,GAAxB,EAA6B,CAA7B,EADF;OAFF;KADgB;EAAA,CA3BlB,CAAA;AAiCA,SAAO,IAAP,CAlCqD;AAAA,CAAvD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,QAAnC,EAA6C,SAAC,IAAD,GAAA;AAE3C,MAAA,6BAAA;AAAA,EAAA,MAAA,GAAS,EAAT,CAAA;AAAA,EACA,YAAA,GAAe,CADf,CAAA;AAAA,EAEA,OAAA,GAAU,CAFV,CAAA;AAAA,EAIA,IAAI,CAAC,IAAL,GAAY,SAAA,GAAA;WACV,YAAA,GAAe,IAAI,CAAC,GAAL,CAAA,EADL;EAAA,CAJZ,CAAA;AAAA,EAOA,IAAI,CAAC,KAAL,GAAa,SAAC,KAAD,GAAA;AACX,QAAA,GAAA;AAAA,IAAA,GAAA,GAAM,MAAO,CAAA,KAAA,CAAb,CAAA;AACA,IAAA,IAAG,CAAA,GAAH;AACE,MAAA,GAAA,GAAM,MAAO,CAAA,KAAA,CAAP,GAAgB;AAAA,QAAC,IAAA,EAAK,KAAN;AAAA,QAAa,KAAA,EAAM,CAAnB;AAAA,QAAsB,KAAA,EAAM,CAA5B;AAAA,QAA+B,OAAA,EAAQ,CAAvC;AAAA,QAA0C,MAAA,EAAQ,KAAlD;OAAtB,CADF;KADA;AAAA,IAGA,GAAG,CAAC,KAAJ,GAAY,IAAI,CAAC,GAAL,CAAA,CAHZ,CAAA;WAIA,GAAG,CAAC,MAAJ,GAAa,KALF;EAAA,CAPb,CAAA;AAAA,EAcA,IAAI,CAAC,IAAL,GAAY,SAAC,KAAD,GAAA;AACV,QAAA,GAAA;AAAA,IAAA,IAAG,GAAA,GAAM,MAAO,CAAA,KAAA,CAAhB;AACE,MAAA,GAAG,CAAC,MAAJ,GAAa,KAAb,CAAA;AAAA,MACA,GAAG,CAAC,KAAJ,IAAa,IAAI,CAAC,GAAL,CAAA,CAAA,GAAa,GAAG,CAAC,KAD9B,CAAA;AAAA,MAEA,GAAG,CAAC,OAAJ,IAAe,CAFf,CADF;KAAA;WAIA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA,CAAA,GAAa,aALb;EAAA,CAdZ,CAAA;AAAA,EAqBA,IAAI,CAAC,MAAL,GAAc,SAAA,GAAA;AACZ,QAAA,UAAA;AAAA,SAAA,eAAA;0BAAA;AACE,MAAA,GAAG,CAAC,GAAJ,GAAU,GAAG,CAAC,KAAJ,GAAY,GAAG,CAAC,OAA1B,CADF;AAAA,KAAA;AAAA,IAEA,IAAI,CAAC,IAAL,CAAU,MAAV,CAFA,CAAA;AAAA,IAGA,IAAI,CAAC,IAAL,CAAU,mBAAV,EAA+B,OAA/B,CAHA,CAAA;AAIA,WAAO,MAAP,CALY;EAAA,CArBd,CAAA;AAAA,EA4BA,IAAI,CAAC,KAAL,GAAa,SAAA,GAAA;WACX,MAAA,GAAS,GADE;EAAA,CA5Bb,CAAA;AA+BA,SAAO,IAAP,CAjC2C;AAAA,CAA7C,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,kBAAnC,EAAuD,SAAC,IAAD,EAAO,cAAP,GAAA;AAErD,MAAA,oBAAA;AAAA,EAAA,QAAA,GAAW,CAAX,CAAA;SAEA,UAAA,GAAa,SAAA,GAAA;AAEX,QAAA,+GAAA;AAAA,IAAA,eAAA,GAAkB,MAAlB,CAAA;AAAA,IACA,OAAA,GAAU,KADV,CAAA;AAAA,IAEA,SAAA,GAAY,MAFZ,CAAA;AAAA,IAGA,WAAA,GAAc,MAHd,CAAA;AAAA,IAIA,QAAA,GAAW,MAJX,CAAA;AAAA,IAKA,UAAA,GAAa,MALb,CAAA;AAAA,IAMA,OAAA,GAAU,MANV,CAAA;AAAA,IAOA,OAAA,GAAU,MAPV,CAAA;AAAA,IAQA,SAAA,GAAY,MARZ,CAAA;AAAA,IASA,MAAA,GAAS;AAAA,MAAC,WAAA,EAAY,OAAb;KATT,CAAA;AAAA,IAWA,EAAA,GAAK,SAAC,CAAD,EAAI,SAAJ,EAAe,KAAf,GAAA;AACH,UAAA,aAAA;AAAA,MAAA,eAAA,GAAkB,CAAlB,CAAA;AAAA,MAGA,OAAA,GAAU,SAAS,CAAC,KAAV,CAAA,CAAiB,CAAC,SAAlB,CAAA,CAHV,CAAA;AAAA,MAKA,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,MAAT,CALP,CAAA;AAMA,MAAA,IAAG,IAAI,CAAC,KAAL,CAAA,CAAH;AACE,QAAA,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,MAAT,CAAgB,CAAC,IAAjB,CAAsB,OAAtB,EAA+B,qBAA/B,CACP,CAAC,IADM,CACD,OADC,CAEP,CAAC,KAFM,CAEA,SAFA,EAEW,CAFX,CAGP,CAAC,IAHM,CAGD,QAHC,EAGS,SAAC,CAAD,GAAA;AAAO,UAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;mBAA6B,EAA7B;WAAA,MAAA;mBAAoC,OAAA,GAAU,EAA9C;WAAP;QAAA,CAHT,CAIP,CAAC,IAJM,CAID,UAJC,EAIW,SAAC,CAAD,GAAA;iBAAO,OAAA,GAAU,CAAG,UAAA,KAAc,GAAjB,GAA0B,IAAI,CAAC,GAAL,CAAS,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAApB,CAAA,GAAyB,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAAC,CAAC,WAAtB,CAAlC,CAA1B,GAAqG,IAAI,CAAC,GAAL,CAAS,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAApB,CAAT,EAAiC,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAAC,CAAC,WAAtB,CAAjC,CAArG,EAAjB;QAAA,CAJX,CAAP,CADF;OANA;AAAA,MAaA,IACE,CAAC,IADH,CACQ,SAAC,CAAD,GAAA;eAAO,WAAW,CAAC,WAAZ,CAAwB,CAAC,CAAC,WAA1B,EAAP;MAAA,CADR,CAEE,CAAC,KAFH,CAES,KAFT,CAbA,CAAA;aAgBA,CAAI,SAAH,GAAkB,IAAI,CAAC,UAAL,CAAA,CAAiB,CAAC,QAAlB,CAA2B,SAA3B,CAAlB,GAA6D,IAA9D,CACE,CAAC,IADH,CACQ,QADR,EACkB,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAhB;iBAA6B,EAA7B;SAAA,MAAA;iBAAoC,OAAA,GAAU,EAA9C;SAAP;MAAA,CADlB,CAEE,CAAC,IAFH,CAEQ,UAFR,EAEoB,SAAC,CAAD,GAAA;eAAO,OAAA,GAAU,CAAG,UAAA,KAAc,GAAjB,GAA0B,IAAI,CAAC,GAAL,CAAS,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAApB,CAAA,GAAyB,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAAC,CAAC,WAAtB,CAAlC,CAA1B,GAAqG,IAAI,CAAC,GAAL,CAAS,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAApB,CAAT,EAAiC,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAAC,CAAC,WAAtB,CAAjC,CAArG,EAAjB;MAAA,CAFpB,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,SAAC,CAAD,GAAA;AAAO,QAAA,IAAG,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAb,IAAwB,CAAA,OAA3B;iBAA4C,EAA5C;SAAA,MAAA;iBAAmD,EAAnD;SAAP;MAAA,CAHpB,EAjBG;IAAA,CAXL,CAAA;AAAA,IAiCA,EAAE,CAAC,KAAH,GAAW,SAAC,CAAD,GAAA;aACT,CAAC,CAAC,MAAF,CAAS,MAAT,CAAgB,CAAC,IAAjB,CAAsB,QAAtB,EAA+B,SAAS,CAAC,KAAV,CAAA,CAAiB,CAAC,SAAlB,CAAA,CAAA,GAAgC,CAA/D,EADS;IAAA,CAjCX,CAAA;AAAA,IAoCA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA;AAAA,MACA,OAAA,GAAU,GADV,CAAA;AAEA,aAAO,EAAP,CAHU;IAAA,CApCZ,CAAA;AAAA,IAyCA,EAAE,CAAC,QAAH,GAAc,SAAC,GAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA;AAAA,MACA,SAAA,GAAY,GADZ,CAAA;AAEA,MAAA,IAAG,SAAS,CAAC,YAAV,CAAA,CAAH;AACE,QAAA,QAAA,GAAW,GAAX,CAAA;AAAA,QACA,UAAA,GAAa,GADb,CAAA;AAAA,QAEA,OAAA,GAAU;AAAA,UAAC,aAAA,EAAc,QAAf;SAFV,CAAA;AAAA,QAGA,OAAA,GAAU,CAAA,cAAe,CAAC,gBAAgB,CAAC,IAH3C,CADF;OAAA,MAAA;AAME,QAAA,QAAA,GAAW,GAAX,CAAA;AAAA,QACA,UAAA,GAAa,GADb,CAAA;AAAA,QAEA,OAAA,GAAU;AAAA,UAAC,aAAA,EAAc,OAAf;AAAA,UAAwB,IAAA,EAAK,QAA7B;SAFV,CAAA;AAAA,QAGA,OAAA,GAAU,cAAc,CAAC,gBAAgB,CAAC,GAH1C,CANF;OAFA;AAYA,aAAO,EAAP,CAbY;IAAA,CAzCd,CAAA;AAAA,IAwDA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA;AAAA,MACA,WAAA,GAAc,GADd,CAAA;AAEA,aAAO,EAAP,CAHc;IAAA,CAxDhB,CAAA;AAAA,IA6DA,EAAE,CAAC,QAAH,GAAc,SAAC,GAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA;AAAA,MACA,SAAA,GAAY,GADZ,CAAA;AAEA,aAAO,EAAP,CAHY;IAAA,CA7Dd,CAAA;AAAA,IAkEA,EAAE,CAAC,KAAH,GAAW,SAAC,GAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA;AAAA,MACA,MAAA,GAAS,GADT,CAAA;AAEA,aAAO,EAAP,CAHS;IAAA,CAlEX,CAAA;AAuEA,WAAO,EAAP,CAzEW;EAAA,EAJwC;AAAA,CAAvD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,aAAnC,EAAkD,SAAC,IAAD,GAAA;AAEhD,MAAA,OAAA;SAAA,OAAA,GAAU,SAAA,GAAA;AACR,QAAA,+DAAA;AAAA,IAAA,KAAA,GAAQ,EAAR,CAAA;AAAA,IACA,UAAA,GAAa,EADb,CAAA;AAAA,IAEA,EAAA,GAAK,MAFL,CAAA;AAAA,IAGA,UAAA,GAAa,KAHb,CAAA;AAAA,IAIA,IAAA,GAAO,QAJP,CAAA;AAAA,IAKA,IAAA,GAAO,CAAA,QALP,CAAA;AAAA,IAMA,KAAA,GAAQ,QANR,CAAA;AAAA,IAOA,KAAA,GAAQ,CAAA,QAPR,CAAA;AAAA,IASA,EAAA,GAAK,SAAA,GAAA,CATL,CAAA;AAAA,IAWA,EAAE,CAAC,IAAH,GAAU,SAAC,GAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,CAAiB,EAAA,CAAG,CAAH,CAAjB,CAAH;AACE,eAAO,KAAP,CADF;OAAA,MAAA;AAGE,QAAA,KAAA,GAAQ,GAAR,CAAA;AACA,eAAO,EAAP,CAJF;OADQ;IAAA,CAXV,CAAA;AAAA,IAkBA,EAAE,CAAC,SAAH,GAAe,SAAC,IAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AACE,eAAO,UAAP,CADF;OAAA,MAAA;AAGE,QAAA,UAAA,GAAa,IAAb,CAAA;AACA,eAAO,EAAP,CAJF;OADa;IAAA,CAlBf,CAAA;AAAA,IAyBA,EAAE,CAAC,CAAH,GAAO,SAAC,IAAD,GAAA;AACL,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AACE,eAAO,EAAP,CADF;OAAA,MAAA;AAGE,QAAA,EAAA,GAAK,IAAL,CAAA;AACA,eAAO,EAAP,CAJF;OADK;IAAA,CAzBP,CAAA;AAAA,IAgCA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AACE,eAAO,UAAP,CADF;OAAA,MAAA;AAGE,QAAA,UAAA,GAAa,GAAb,CAAA;AACA,eAAO,EAAP,CAJF;OADa;IAAA,CAhCf,CAAA;AAAA,IAuCA,EAAE,CAAC,GAAH,GAAS,SAAA,GAAA;aACP,KADO;IAAA,CAvCT,CAAA;AAAA,IA0CA,EAAE,CAAC,GAAH,GAAS,SAAA,GAAA;aACP,KADO;IAAA,CA1CT,CAAA;AAAA,IA6CA,EAAE,CAAC,QAAH,GAAc,SAAA,GAAA;aACZ,MADY;IAAA,CA7Cd,CAAA;AAAA,IAgDA,EAAE,CAAC,QAAH,GAAc,SAAA,GAAA;aACZ,MADY;IAAA,CAhDd,CAAA;AAAA,IAmDA,EAAE,CAAC,MAAH,GAAY,SAAA,GAAA;aACV,CAAC,EAAE,CAAC,GAAH,CAAA,CAAD,EAAW,EAAE,CAAC,GAAH,CAAA,CAAX,EADU;IAAA,CAnDZ,CAAA;AAAA,IAsDA,EAAE,CAAC,WAAH,GAAiB,SAAA,GAAA;aACf,CAAC,EAAE,CAAC,QAAH,CAAA,CAAD,EAAgB,EAAE,CAAC,QAAH,CAAA,CAAhB,EADe;IAAA,CAtDjB,CAAA;AAAA,IAyDA,EAAE,CAAC,OAAH,GAAa,SAAC,IAAD,GAAA;AACX,UAAA,yDAAA;AAAA,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAEE,QAAA,GAAA,GAAM,EAAN,CAAA;AAAA,QACA,IAAA,GAAO,QADP,CAAA;AAAA,QAEA,IAAA,GAAO,CAAA,QAFP,CAAA;AAAA,QAGA,KAAA,GAAQ,QAHR,CAAA;AAAA,QAIA,KAAA,GAAQ,CAAA,QAJR,CAAA;AAMA,aAAA,yDAAA;4BAAA;AACE,UAAA,GAAI,CAAA,CAAA,CAAJ,GAAS;AAAA,YAAC,GAAA,EAAI,CAAL;AAAA,YAAQ,KAAA,EAAM,EAAd;AAAA,YAAkB,GAAA,EAAI,QAAtB;AAAA,YAAgC,GAAA,EAAI,CAAA,QAApC;WAAT,CADF;AAAA,SANA;AAQA,aAAA,qDAAA;sBAAA;AACE,UAAA,CAAA,GAAI,CAAJ,CAAA;AAAA,UACA,EAAA,GAAQ,MAAA,CAAA,EAAA,KAAa,QAAhB,GAA8B,CAAE,CAAA,EAAA,CAAhC,GAAyC,EAAA,CAAG,CAAH,CAD9C,CAAA;AAGA,eAAA,4CAAA;wBAAA;AACE,YAAA,CAAA,GAAI,CAAA,CAAG,CAAA,CAAC,CAAC,GAAF,CAAP,CAAA;AAAA,YACA,CAAC,CAAC,KAAK,CAAC,IAAR,CAAa;AAAA,cAAC,CAAA,EAAE,EAAH;AAAA,cAAO,KAAA,EAAO,CAAd;AAAA,cAAiB,GAAA,EAAI,CAAC,CAAC,GAAvB;aAAb,CADA,CAAA;AAEA,YAAA,IAAG,CAAC,CAAC,GAAF,GAAQ,CAAX;AAAkB,cAAA,CAAC,CAAC,GAAF,GAAQ,CAAR,CAAlB;aAFA;AAGA,YAAA,IAAG,CAAC,CAAC,GAAF,GAAQ,CAAX;AAAkB,cAAA,CAAC,CAAC,GAAF,GAAQ,CAAR,CAAlB;aAHA;AAIA,YAAA,IAAG,IAAA,GAAO,CAAV;AAAiB,cAAA,IAAA,GAAO,CAAP,CAAjB;aAJA;AAKA,YAAA,IAAG,IAAA,GAAO,CAAV;AAAiB,cAAA,IAAA,GAAO,CAAP,CAAjB;aALA;AAMA,YAAA,IAAG,UAAH;AAAmB,cAAA,CAAA,IAAK,CAAA,CAAL,CAAnB;aAPF;AAAA,WAHA;AAWA,UAAA,IAAG,UAAH;AAEE,YAAA,IAAG,KAAA,GAAQ,CAAX;AAAkB,cAAA,KAAA,GAAQ,CAAR,CAAlB;aAAA;AACA,YAAA,IAAG,KAAA,GAAQ,CAAX;AAAkB,cAAA,KAAA,GAAQ,CAAR,CAAlB;aAHF;WAZF;AAAA,SARA;AAwBA,eAAO;AAAA,UAAC,GAAA,EAAI,IAAL;AAAA,UAAW,GAAA,EAAI,IAAf;AAAA,UAAqB,QAAA,EAAS,KAA9B;AAAA,UAAoC,QAAA,EAAS,KAA7C;AAAA,UAAoD,IAAA,EAAK,GAAzD;SAAP,CA1BF;OAAA;AA2BA,aAAO,EAAP,CA5BW;IAAA,CAzDb,CAAA;AAAA,IAyFA,EAAE,CAAC,IAAH,GAAU,SAAC,IAAD,GAAA;AACR,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AACE,eAAO,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD,GAAA;iBAAO;AAAA,YAAC,CAAA,EAAG,CAAE,CAAA,EAAA,CAAN;AAAA,YAAW,MAAA,EAAQ,SAAS,CAAC,GAAV,CAAc,SAAC,CAAD,GAAA;qBAAO;AAAA,gBAAC,GAAA,EAAI,CAAL;AAAA,gBAAQ,KAAA,EAAO,CAAE,CAAA,CAAA,CAAjB;AAAA,gBAAqB,CAAA,EAAE,CAAE,CAAA,EAAA,CAAzB;gBAAP;YAAA,CAAd,CAAnB;YAAP;QAAA,CAAT,CAAP,CADF;OAAA;AAEA,aAAO,EAAP,CAHQ;IAAA,CAzFV,CAAA;AA+FA,WAAO,EAAP,CAhGQ;EAAA,EAFsC;AAAA,CAAlD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,eAAnC,EAAoD,SAAC,IAAD,EAAO,WAAP,GAAA;AAElD,MAAA,mBAAA;AAAA,EAAA,UAAA,GAAa,CAAb,CAAA;SAEA,OAAA,GAAU,SAAA,GAAA;AAER,QAAA,gHAAA;AAAA,IAAA,EAAA,GAAK,MAAL,CAAA;AAAA,IACA,EAAA,GAAK,MADL,CAAA;AAAA,IAEA,MAAA,GAAS,MAFT,CAAA;AAAA,IAGA,OAAA,GAAU,KAHV,CAAA;AAAA,IAIA,QAAA,GAAW,CAJX,CAAA;AAAA,IAKA,eAAA,GAAkB,CALlB,CAAA;AAAA,IAMA,SAAA,GAAY,WAAW,CAAC,QANxB,CAAA;AAAA,IAOA,WAAA,GAAc,KAPd,CAAA;AAAA,IAQA,SAAA,GAAY,MARZ,CAAA;AAAA,IASA,gBAAA,GAAmB,MATnB,CAAA;AAAA,IAUA,GAAA,GAAM,UAAA,EAVN,CAAA;AAAA,IAYA,EAAA,GAAK,SAAC,CAAD,EAAI,SAAJ,GAAA;AACH,UAAA,iBAAA;AAAA,MAAA,gBAAA,GAAmB,CAAnB,CAAA;AACA,MAAA,IAAG,OAAH;AACE,QAAA,CAAA,GAAI,CAAC,CAAC,SAAF,CAAa,mBAAA,GAAmB,GAAhC,CAAsC,CAAC,IAAvC,CACF,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,OAAT;QAAA,CADE,EAEF,SAAC,CAAD,EAAI,CAAJ,GAAA;iBAAU,EAAV;QAAA,CAFE,CAAJ,CAAA;AAAA,QAKA,CAAC,CAAC,KAAF,CAAA,CAAS,CAAC,MAAV,CAAiB,QAAjB,CAA0B,CAAC,IAA3B,CAAgC,OAAhC,EAA0C,kBAAA,GAAkB,GAA5D,CACE,CAAC,KADH,CACS,MADT,EACiB,MADjB,CAEE,CAAC,IAFH,CAEQ,GAFR,EAEa,CAFb,CAGE,CAAC,KAHH,CAGS,gBAHT,EAG2B,MAH3B,CAIE,CAAC,KAJH,CAIS,SAJT,EAIoB,eAJpB,CALA,CAAA;AAAA,QAUA,OAAA,GAAa,SAAH,GAAkB,CAAC,CAAC,UAAF,CAAA,CAAc,CAAC,QAAf,CAAwB,SAAxB,CAAlB,GAA0D,CAVpE,CAAA;AAAA,QAWA,OACE,CAAC,IADH,CACQ,IADR,EACc,EADd,CAEE,CAAC,IAFH,CAEQ,IAFR,EAEc,EAFd,CAGE,CAAC,KAHH,CAGS,SAHT,EAGoB,SAAC,CAAD,GAAA;iBAAO,CAAI,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAb,IAAwB,CAAC,CAAC,UAA1B,IAAwC,CAAC,CAAC,YAA7C,GAA+D,CAA/D,GAAsE,CAAvE,CAAA,GAA4E,SAAnF;QAAA,CAHpB,CAXA,CAAA;AAAA,QAeA,KAAA,GAAW,SAAH,GAAkB,CAAC,CAAC,IAAF,CAAA,CAAQ,CAAC,UAAT,CAAA,CAAqB,CAAC,QAAtB,CAA+B,SAA/B,CAAlB,GAAiE,CAAC,CAAC,IAAF,CAAA,CAfzE,CAAA;eAgBA,KACE,CAAC,MADH,CAAA,EAjBF;OAAA,MAAA;eAoBE,CAAC,CAAC,SAAF,CAAa,mBAAA,GAAmB,GAAhC,CAAsC,CAAC,UAAvC,CAAA,CAAmD,CAAC,QAApD,CAA6D,SAA7D,CACE,CAAC,KADH,CACS,SADT,EACoB,CADpB,CACsB,CAAC,MADvB,CAAA,EApBF;OAFG;IAAA,CAZL,CAAA;AAAA,IAqCA,EAAE,CAAC,KAAH,GAAW,SAAC,SAAD,EAAY,QAAZ,GAAA;AACT,UAAA,YAAA;AAAA,MAAA,IAAG,OAAH;AACE,QAAA,IAAG,WAAH;AACE,UAAA,CAAA,GAAI,IAAJ,CAAA;AAAA,UACA,CAAA,GAAI,EADJ,CADF;SAAA,MAAA;AAIE,UAAA,CAAA,GAAI,IAAJ,CAAA;AAAA,UACA,CAAA,GAAI,EADJ,CAJF;SAAA;AAMA,QAAA,IAAG,QAAH;iBACE,gBAAgB,CAAC,SAAjB,CAA4B,mBAAA,GAAmB,GAA/C,CAAqD,CAAC,IAAtD,CAA2D,CAA3D,EAA6D,CAA7D,CAA+D,CAAC,KAAhE,CAAsE,SAAtE,EAAiF,SAAC,CAAD,EAAG,CAAH,GAAA;AAAS,YAAA,IAAG,QAAS,CAAA,CAAA,CAAT,IAAe,CAAf,IAAqB,CAAA,IAAK,QAAS,CAAA,CAAA,CAAtC;qBAA8C,EAA9C;aAAA,MAAA;qBAAqD,EAArD;aAAT;UAAA,CAAjF,EADF;SAAA,MAAA;AAGE,UAAA,MAAA,GAAS,SAAS,CAAC,MAAV,CAAA,CAAT,CAAA;iBACA,gBAAgB,CAAC,SAAjB,CAA4B,mBAAA,GAAmB,GAA/C,CAAqD,CAAC,IAAtD,CAA2D,CAA3D,EAA8D,CAA9D,CAAgE,CAAC,KAAjE,CAAuE,SAAvE,EAAkF,SAAC,CAAD,GAAA;AAAO,YAAA,IAAG,MAAO,CAAA,CAAA,CAAP,IAAa,CAAC,CAAC,GAAf,IAAuB,CAAC,CAAC,GAAF,IAAS,MAAO,CAAA,CAAA,CAA1C;qBAAkD,EAAlD;aAAA,MAAA;qBAAyD,EAAzD;aAAP;UAAA,CAAlF,EAJF;SAPF;OADS;IAAA,CArCX,CAAA;AAAA,IAoDA,EAAE,CAAC,MAAH,GAAY,SAAC,SAAD,GAAA;AACV,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA;AAAA,MACA,eAAA,GAAqB,CAAA,OAAA,IAAgB,SAAnB,GAAkC,CAAlC,GAAyC,CAD3D,CAAA;AAAA,MAEA,OAAA,GAAU,SAFV,CAAA;AAAA,MAGA,QAAA,GAAc,OAAH,GAAgB,CAAhB,GAAuB,CAHlC,CAAA;AAIA,aAAO,EAAP,CALU;IAAA,CApDZ,CAAA;AAAA,IA2DA,EAAE,CAAC,CAAH,GAAO,SAAC,GAAD,GAAA;AACL,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,EAAP,CAA9B;OAAA;AAAA,MACA,EAAA,GAAK,GADL,CAAA;AAEA,aAAO,EAAP,CAHK;IAAA,CA3DP,CAAA;AAAA,IAgEA,EAAE,CAAC,CAAH,GAAO,SAAC,GAAD,GAAA;AACL,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,EAAP,CAA9B;OAAA;AAAA,MACA,EAAA,GAAK,GADL,CAAA;AAEA,aAAO,EAAP,CAHK;IAAA,CAhEP,CAAA;AAAA,IAqEA,EAAE,CAAC,KAAH,GAAW,SAAC,GAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA;AAAA,MACA,MAAA,GAAS,GADT,CAAA;AAEA,aAAO,EAAP,CAHS;IAAA,CArEX,CAAA;AAAA,IA0EA,EAAE,CAAC,OAAH,GAAa,SAAC,GAAD,GAAA;AACX,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,QAAP,CAA9B;OAAA;AAAA,MACA,QAAA,GAAW,GADX,CAAA;AAEA,aAAO,EAAP,CAHW;IAAA,CA1Eb,CAAA;AAAA,IA+EA,EAAE,CAAC,QAAH,GAAc,SAAC,GAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA;AAAA,MACA,SAAA,GAAY,GADZ,CAAA;AAEA,aAAO,EAAP,CAHY;IAAA,CA/Ed,CAAA;AAAA,IAoFA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA;AAAA,MACA,WAAA,GAAc,GADd,CAAA;AAEA,aAAO,EAAP,CAHc;IAAA,CApFhB,CAAA;AAAA,IAyFA,EAAE,CAAC,QAAH,GAAc,SAAC,GAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA;AAAA,MACA,SAAA,GAAY,GADZ,CAAA;AAEA,aAAO,EAAP,CAHY;IAAA,CAzFd,CAAA;AA8FA,WAAO,EAAP,CAhGQ;EAAA,EAJwC;AAAA,CAApD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,SAArC,EAAgD,SAAC,IAAD,GAAA;AAE9C,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,QAAA,EAAU,2CAFL;AAAA,IAGL,KAAA,EACE;AAAA,MAAA,IAAA,EAAM,GAAN;AAAA,MACA,KAAA,EAAO,GADP;KAJG;AAAA,IAML,IAAA,EAAM,SAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,GAAA;AACJ,MAAA,KAAK,CAAC,KAAN,GAAc;AAAA,QACZ,MAAA,EAAQ,MADI;AAAA,QAEZ,KAAA,EAAO,KAAK,CAAC,KAAN,GAAc,IAFT;AAAA,QAGZ,gBAAA,EAAkB,QAHN;OAAd,CAAA;AAAA,MAKA,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,SAAC,GAAD,GAAA;AACrB,QAAA,IAAG,GAAH;iBACE,EAAE,CAAC,MAAH,CAAU,IAAK,CAAA,CAAA,CAAf,CAAkB,CAAC,MAAnB,CAA0B,MAA1B,CAAiC,CAAC,IAAlC,CAAuC,GAAvC,EAA4C,GAA5C,CAAgD,CAAC,IAAjD,CAAsD,WAAtD,EAAmE,gBAAnE,EADF;SADqB;MAAA,CAAvB,CALA,CAAA;aASA,KAAK,CAAC,GAAN,CAAU,UAAV,EAAsB,SAAA,GAAA;eACpB,IAAI,CAAC,GAAL,CAAS,yBAAT,EADoB;MAAA,CAAtB,EAVI;IAAA,CAND;GAAP,CAF8C;AAAA,CAAhD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,sBAAnC,EAA2D,SAAC,IAAD,GAAA;AAEzD,MAAA,oBAAA;AAAA,EAAA,SAAA,GAAY,CAAZ,CAAA;AAAA,EAEA,SAAA,GAAY,SAAA,GAAA;AACV,QAAA,uHAAA;AAAA,IAAA,SAAA,GAAY,MAAZ,CAAA;AAAA,IACA,WAAA,GAAc,MADd,CAAA;AAAA,IAEA,UAAA,GAAa,KAFb,CAAA;AAAA,IAGA,WAAA,GAAc,MAHd,CAAA;AAAA,IAIA,WAAA,GAAc,KAJd,CAAA;AAAA,IAKA,OAAA,GAAU,MALV,CAAA;AAAA,IAMA,MAAA,GAAS,MANT,CAAA;AAAA,IAOA,QAAA,GAAW,MAPX,CAAA;AAAA,IAQA,WAAA,GAAc,EARd,CAAA;AAAA,IASA,QAAA,GAAW,MATX,CAAA;AAAA,IAUA,GAAA,GAAM,SAAA,EAVN,CAAA;AAAA,IAYA,EAAA,GAAK,EAZL,CAAA;AAAA,IAcA,EAAE,CAAC,QAAH,GAAc,SAAC,GAAD,GAAA;AACZ,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,SAAP,CAA9B;OAAA;AAAA,MACA,SAAA,GAAY,GADZ,CAAA;AAEA,aAAO,EAAP,CAHY;IAAA,CAdd,CAAA;AAAA,IAmBA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,UAAA,aAAA;AAAA,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA;AAAA,MACA,WAAA,GAAc,GADd,CAAA;AAAA,MAEA,aAAA,GAAgB,WAAW,CAAC,IAAZ,CAAA,CAAA,KAAsB,QAAtB,IAAkC,WAAW,CAAC,IAAZ,CAAA,CAAA,KAAsB,QAFxE,CAAA;AAGA,aAAO,EAAP,CAJc;IAAA,CAnBhB,CAAA;AAAA,IAyBA,EAAE,CAAC,SAAH,GAAe,SAAC,GAAD,GAAA;AACb,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,UAAP,CAA9B;OAAA;AAAA,MACA,UAAA,GAAa,GADb,CAAA;AAEA,aAAO,EAAP,CAHa;IAAA,CAzBf,CAAA;AAAA,IA8BA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA;AAAA,MACA,WAAA,GAAc,GADd,CAAA;AAEA,aAAO,EAAP,CAHc;IAAA,CA9BhB,CAAA;AAAA,IAmCA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA;AAAA,MACA,WAAA,GAAc,GADd,CAAA;AAEA,aAAO,EAAP,CAHc;IAAA,CAnChB,CAAA;AAAA,IAwCA,EAAE,CAAC,MAAH,GAAY,SAAC,GAAD,GAAA;AACV,UAAA,oBAAA;AAAA,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,OAAP,CAA9B;OAAA;AAAA,MACA,OAAA,GAAU,GADV,CAAA;AAAA,MAEA,QAAA,GAAW,EAFX,CAAA;AAAA,MAGA,WAAA,GAAc,CAAC,CAAD,EAAI,OAAQ,CAAA,CAAA,CAAE,CAAC,MAAM,CAAC,MAAlB,GAA2B,CAA/B,CAHd,CAAA;AAIA;AAAA,WAAA,mDAAA;oBAAA;AACE,QAAA,IAAG,CAAA,CAAK,CAAC,OAAT;AACE,UAAA,QAAQ,CAAC,IAAT,CAAc,CAAd,CAAA,CADF;SADF;AAAA,OAJA;AAOA,aAAO,EAAP,CARU;IAAA,CAxCZ,CAAA;AAAA,IAkDA,EAAE,CAAC,UAAH,GAAgB,SAAC,GAAD,GAAA;AACd,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,WAAP,CAA9B;OAAA;aACA,WAAA,GAAc,IAFA;IAAA,CAlDhB,CAAA;AAAA,IAsDA,EAAE,CAAC,KAAH,GAAW,SAAC,GAAD,GAAA;AACT,MAAA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;AAA8B,eAAO,MAAP,CAA9B;OAAA;AAAA,MACA,MAAA,GAAS,GADT,CAAA;AAEA,aAAO,EAAP,CAHS;IAAA,CAtDX,CAAA;AAAA,IA2DA,EAAE,CAAC,KAAH,GAAW,SAAC,IAAD,GAAA;AACT,UAAA,+CAAA;AAAA,MAAA,IAAC,CAAA,UAAD,GAAc,SAAS,CAAC,SAAV,CAAA,CAAd,CAAA;AAAA,MACA,IAAC,CAAA,WAAD,GAAgB,SAAS,CAAC,cAAV,CAAyB,IAAzB,CADhB,CAAA;AAAA,MAEA,SAAA,GAAgB,WAAW,CAAC,WAAZ,CAAA,CAAH,GAAkC,WAAW,CAAC,WAAZ,CAAA,CAAyB,CAAC,SAA1B,CAAoC,IAApC,CAAlC,GAAiF,WAAW,CAAC,SAAZ,CAAsB,IAAtB,CAF9F,CAAA;AAGA;WAAA,gDAAA;4BAAA;AACE,QAAA,IAAC,CAAA,MAAO,CAAA,GAAA,CAAR,GAAe,EAAf,CAAA;AAAA,QACA,IAAC,CAAA,MAAO,CAAA,GAAA,CAAI,CAAC,KAAb,GAAqB,WAAW,CAAC,mBAAZ,CAAgC,IAAhC,EAAqC,GAArC,CADrB,CAAA;AAAA,QAEA,IAAA,GAAO,EAFP,CAAA;AAGA,QAAA,IAAG,WAAW,CAAC,QAAZ,CAAA,CAAsB,CAAC,MAAvB,GAAgC,CAAnC;AACE,UAAA,IAAA,GAAQ,WAAW,CAAC,GAAZ,CAAgB,IAAhB,CAAR,CADF;SAAA,MAEK,IAAG,WAAH;AACH,UAAA,IAAA,GAAO,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAApB,CAAP,CADG;SAAA,MAAA;AAGH,UAAA,IAAA,GAAO,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,GAApB,CAAP,CAHG;SALL;AASA,QAAA,IAAG,MAAA,CAAA,IAAA,KAAe,QAAlB;AACE,UAAA,KAAA,GAAS;AAAA,YAAC,IAAA,EAAK,IAAN;AAAA,YAAY,MAAA,EAAO,IAAnB;WAAT,CADF;SAAA,MAAA;AAGE,UAAA,KAAA,GAAQ,IAAR,CAAA;AAAA,UACA,KAAK,CAAC,IAAN,GAAa,IAAI,CAAC,KADlB,CAHF;SATA;AAAA,sBAcA,IAAC,CAAA,MAAO,CAAA,GAAA,CAAI,CAAC,KAAb,GAAqB,MAdrB,CADF;AAAA;sBAJS;IAAA,CA3DX,CAAA;AAAA,IAgFA,EAAE,CAAC,QAAH,GAAc,SAAC,GAAD,EAAM,IAAN,GAAA;aACZ,EAAE,CAAC,KAAK,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,CAArB,EADY;IAAA,CAhFd,CAAA;AAAA,IAmFA,EAAE,CAAC,WAAH,GAAiB,SAAC,GAAD,EAAM,IAAN,GAAA;AACf,UAAA,+DAAA;AAAA,MAAA,IAAG,CAAA,GAAA,IAAW,CAAA,IAAd;AACE,cAAA,CADF;OAAA;AAAA,MAEA,SAAA,GAAY,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAFZ,CAAA;AAAA,MAGA,SAAA,GAAY,WAAW,CAAC,SAAZ,CAAsB,IAAtB,CAHZ,CAAA;AAAA,MAIA,KAAA,GAAQ,SAAS,CAAC,GAAV,CAAc,SAAC,GAAD,GAAA;eAAS;AAAA,UAAC,GAAA,EAAK,GAAN;AAAA,UAAW,KAAA,EAAO,WAAW,CAAC,UAAZ,CAAuB,IAAvB,EAA6B,GAA7B,CAAlB;UAAT;MAAA,CAAd,CAJR,CAAA;AAKA,MAAA,IAAG,UAAH;AAEE,QAAA,GAAA,GAAM,CAAN,CAAA;AACA,aAAA,4CAAA;wBAAA;AACE,UAAA,GAAA,GAAM,GAAA,GAAM,CAAC,CAAC,KAAd,CAAA;AAAA,UACA,CAAC,CAAC,KAAF,GAAU,GADV,CADF;AAAA,SAHF;OALA;AAAA,MAYA,QAAA,GAAW,IAAI,CAAC,SAAL,CAAgB,sBAAA,GAAsB,GAAtC,CAA4C,CAAC,IAA7C,CAAkD,KAAlD,EAAyD,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,IAAT;MAAA,CAAzD,CAZX,CAAA;AAAA,MAaA,KAAA,GAAQ,QAAQ,CAAC,KAAT,CAAA,CAAgB,CAAC,MAAjB,CAAwB,GAAxB,CAA4B,CAAC,IAA7B,CAAkC,OAAlC,EAA4C,qBAAA,GAAqB,GAAjE,CAbR,CAAA;AAAA,MAcA,KAAK,CAAC,MAAN,CAAa,QAAb,CAAsB,CAAC,IAAvB,CAA4B,OAA5B,EAAqC,oBAArC,CACE,CAAC,IADH,CACQ,GADR,EACa,CADb,CAEE,CAAC,KAFH,CAES,MAFT,EAEiB,SAAC,CAAD,GAAA;AACb,YAAA,KAAA;AAAA,QAAA,KAAA,GAAQ,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAAC,CAAC,GAAtB,CAAR,CAAA;AACO,QAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;iBAAiC,MAAjC;SAAA,MAAA;iBAA4C,KAAK,CAAC,MAAlD;SAFM;MAAA,CAFjB,CAME,CAAC,KANH,CAMS,cANT,EAMyB,GANzB,CAOE,CAAC,KAPH,CAOS,QAPT,EAOmB,SAAC,CAAD,GAAA;eAAM,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAAC,CAAC,GAAtB,EAAN;MAAA,CAPnB,CAQE,CAAC,KARH,CAQS,gBART,EAQ2B,MAR3B,CAdA,CAAA;AAAA,MAuBA,KAAK,CAAC,MAAN,CAAa,QAAb,CAAsB,CAAC,IAAvB,CAA4B,OAA5B,EAAqC,0BAArC,CACE,CAAC,IADH,CACQ,GADR,EACa,CADb,CAEE,CAAC,KAFH,CAES,MAFT,EAEiB,SAAC,CAAD,GAAA;AACb,YAAA,KAAA;AAAA,QAAA,KAAA,GAAQ,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAAC,CAAC,GAAtB,CAAR,CAAA;AACO,QAAA,IAAG,MAAA,CAAA,KAAA,KAAgB,QAAnB;iBAAiC,MAAjC;SAAA,MAAA;iBAA4C,KAAK,CAAC,MAAlD;SAFM;MAAA,CAFjB,CAME,CAAC,KANH,CAMS,cANT,EAMyB,GANzB,CAOE,CAAC,KAPH,CAOS,QAPT,EAOmB,OAPnB,CAQE,CAAC,KARH,CAQS,gBART,EAQ2B,MAR3B,CAvBA,CAAA;AAAA,MAgCA,CAAA,GAAO,SAAS,CAAC,YAAV,CAAA,CAAH,GAAiC,IAAjC,GAA2C,IAhC/C,CAAA;AAAA,MAiCA,QAAQ,CAAC,MAAT,CAAgB,qBAAhB,CACE,CAAC,IADH,CACQ,CADR,EACW,SAAC,CAAD,GAAA;eAAO,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAAC,CAAC,KAAtB,EAAP;MAAA,CADX,CAjCA,CAAA;AAAA,MAmCA,QAAQ,CAAC,MAAT,CAAgB,2BAAhB,CACA,CAAC,IADD,CACM,CADN,EACS,SAAC,CAAD,GAAA;eAAO,WAAW,CAAC,KAAZ,CAAA,CAAA,CAAoB,CAAC,CAAC,KAAtB,EAAP;MAAA,CADT,CAnCA,CAAA;AAAA,MAqCA,QAAQ,CAAC,IAAT,CAAA,CACE,CAAC,MADH,CAAA,CArCA,CAAA;AAAA,MAuCA,MAAA,GAAY,SAAS,CAAC,SAAV,CAAA,CAAH,GAA8B,SAAS,CAAC,KAAV,CAAA,CAAiB,CAAC,SAAlB,CAAA,CAAA,GAAgC,CAA9D,GAAqE,CAvC9E,CAAA;AAwCA,MAAA,IAAG,SAAS,CAAC,YAAV,CAAA,CAAH;AACE,QAAA,IAAG,KAAA,CAAM,SAAS,CAAC,KAAV,CAAA,CAAA,CAAkB,SAAlB,CAAA,GAA+B,MAArC,CAAH;AACE,mBADF;SAAA;eAEA,IAAI,CAAC,IAAL,CAAU,WAAV,EAAwB,YAAA,GAAW,CAAC,SAAS,CAAC,KAAV,CAAA,CAAA,CAAkB,SAAlB,CAAA,GAA+B,MAAhC,CAAX,GAAkD,GAA1E,EAHF;OAAA,MAAA;eAKE,IAAI,CAAC,IAAL,CAAU,WAAV,EAAwB,cAAA,GAAa,CAAC,SAAS,CAAC,KAAV,CAAA,CAAA,CAAkB,SAAlB,CAAA,GAA+B,MAAhC,CAAb,GAAoD,GAA5E,EALF;OAzCe;IAAA,CAnFjB,CAAA;AAkIA,WAAO,EAAP,CAnIU;EAAA,CAFZ,CAAA;AAuIA,SAAO,SAAP,CAzIyD;AAAA,CAA3D,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,OAAnC,EAA4C,SAAC,IAAD,GAAA;AAI1C,MAAA,EAAA;AAAA,EAAA,IAAC,CAAA,IAAD,GAAQ,SAAC,CAAD,EAAG,CAAH,EAAK,SAAL,GAAA;AACN,QAAA,iBAAA;AAAA,IAAA,MAAA,GAAS,SAAC,CAAD,GAAA;aACP,CAAC,CAAC,OAAF,CAAU,CAAV,CAAA,GAAe,EADR;IAAA,CAAT,CAAA;AAAA,IAGA,GAAA,GAAM,EAHN,CAAA;AAAA,IAIA,CAAA,GAAI,CAJJ,CAAA;AAKA,WAAM,CAAA,GAAI,CAAC,CAAC,MAAZ,GAAA;AACE,MAAA,IAAG,MAAA,CAAO,CAAE,CAAA,CAAA,CAAT,CAAH;AACE,QAAA,GAAI,CAAA,CAAE,CAAA,CAAA,CAAF,CAAJ,GAAY,MAAZ,CAAA;AAAA,QACA,CAAA,GAAI,CAAA,GAAI,SADR,CAAA;AAEA,eAAM,CAAA,CAAA,IAAK,CAAL,IAAK,CAAL,GAAS,CAAC,CAAC,MAAX,CAAN,GAAA;AACE,UAAA,IAAG,MAAA,CAAO,CAAE,CAAA,CAAA,CAAT,CAAH;AACE,YAAA,CAAA,IAAK,SAAL,CADF;WAAA,MAAA;AAGE,YAAA,GAAI,CAAA,CAAE,CAAA,CAAA,CAAF,CAAJ,GAAa,CAAE,CAAA,CAAA,CAAf,CAAA;AACA,kBAJF;WADF;QAAA,CAHF;OAAA;AAAA,MASA,CAAA,EATA,CADF;IAAA,CALA;AAgBA,WAAO,GAAP,CAjBM;EAAA,CAAR,CAAA;AAAA,EAqBA,EAAA,GAAK,CArBL,CAAA;AAAA,EAsBA,IAAC,CAAA,KAAD,GAAS,SAAA,GAAA;AACP,WAAO,OAAA,GAAU,EAAA,EAAjB,CADO;EAAA,CAtBT,CAAA;AAAA,EA2BA,IAAC,CAAA,SAAD,GAAa,SAAC,GAAD,GAAA;AACX,QAAA,CAAA;AAAA,IAAA,IAAG,GAAH;AACE,MAAA,CAAA,GAAI,GAAG,CAAC,IAAJ,CAAA,CAAU,CAAC,OAAX,CAAmB,UAAnB,EAA+B,EAA/B,CAAkC,CAAC,KAAnC,CAAyC,GAAzC,CAA6C,CAAC,GAA9C,CAAkD,SAAC,CAAD,GAAA;eAAO,CAAC,CAAC,OAAF,CAAU,kBAAV,EAA8B,EAA9B,EAAP;MAAA,CAAlD,CAAJ,CAAA;AACO,MAAA,IAAG,CAAC,CAAC,MAAF,KAAY,CAAf;AAAsB,eAAO,CAAE,CAAA,CAAA,CAAT,CAAtB;OAAA,MAAA;eAAuC,EAAvC;OAFT;KAAA;AAGA,WAAO,MAAP,CAJW;EAAA,CA3Bb,CAAA;AAAA,EAiCA,IAAC,CAAA,cAAD,GAAkB,SAAC,GAAD,GAAA;AAChB,IAAA,IAAG,GAAA,KAAO,EAAP,IAAa,GAAA,KAAO,MAAvB;aAAmC,KAAnC;KAAA,MAAA;AAA8C,MAAA,IAAG,GAAA,KAAO,OAAV;eAAuB,MAAvB;OAAA,MAAA;eAAkC,OAAlC;OAA9C;KADgB;EAAA,CAjClB,CAAA;AAAA,EAsCA,IAAC,CAAA,SAAD,GAAa,SAAA,GAAA;AAEX,QAAA,4FAAA;AAAA,IAAA,SAAA,GAAY,EAAZ,CAAA;AAAA,IACA,KAAA,GAAQ,EADR,CAAA;AAAA,IAEA,SAAA,GAAY,EAFZ,CAAA;AAAA,IAGA,KAAA,GAAQ,EAHR,CAAA;AAAA,IAIA,WAAA,GAAc,EAJd,CAAA;AAAA,IAKA,OAAA,GAAU,EALV,CAAA;AAAA,IAMA,MAAA,GAAS,MANT,CAAA;AAAA,IAOA,KAAA,GAAQ,MAPR,CAAA;AAAA,IASA,IAAA,GAAO,SAAC,CAAD,GAAA;aAAO,EAAP;IAAA,CATP,CAAA;AAAA,IAUA,SAAA,GAAY,SAAC,CAAD,GAAA;aAAO,EAAP;IAAA,CAVZ,CAAA;AAAA,IAaA,EAAA,GAAK,SAAC,IAAD,GAAA;AAEH,UAAA,iCAAA;AAAA,MAAA,SAAA,GAAY,EAAZ,CAAA;AAAA,MACA,SAAA,GAAY,EADZ,CAAA;AAEA,WAAA,oDAAA;qBAAA;AACE,QAAA,SAAU,CAAA,CAAA,CAAV,GAAe,CAAf,CAAA;AAAA,QACA,SAAU,CAAA,IAAA,CAAK,CAAL,CAAA,CAAV,GAAqB,CADrB,CADF;AAAA,OAFA;AAAA,MAOA,WAAA,GAAc,EAPd,CAAA;AAAA,MAQA,OAAA,GAAU,EARV,CAAA;AAAA,MASA,KAAA,GAAQ,EATR,CAAA;AAAA,MAUA,KAAA,GAAQ,IAVR,CAAA;AAYA,WAAA,sDAAA;qBAAA;AACE,QAAA,GAAA,GAAM,IAAA,CAAK,CAAL,CAAN,CAAA;AAAA,QACA,KAAM,CAAA,GAAA,CAAN,GAAa,CADb,CAAA;AAEA,QAAA,IAAG,SAAS,CAAC,cAAV,CAAyB,GAAzB,CAAH;AAEE,UAAA,WAAY,CAAA,SAAU,CAAA,GAAA,CAAV,CAAZ,GAA8B,IAA9B,CAAA;AAAA,UACA,OAAQ,CAAA,CAAA,CAAR,GAAa,IADb,CAFF;SAHF;AAAA,OAZA;AAmBA,aAAO,EAAP,CArBG;IAAA,CAbL,CAAA;AAAA,IAoCA,EAAE,CAAC,GAAH,GAAS,SAAC,EAAD,GAAA;AACP,MAAA,IAAG,CAAA,SAAH;AAAsB,eAAO,IAAP,CAAtB;OAAA;AAAA,MACA,IAAA,GAAO,EADP,CAAA;AAEA,aAAO,EAAP,CAHO;IAAA,CApCT,CAAA;AAAA,IAyCA,EAAE,CAAC,KAAH,GAAW,SAAC,KAAD,GAAA;AACT,MAAA,IAAG,CAAA,SAAH;AAAsB,eAAO,MAAP,CAAtB;OAAA;AAAA,MACA,MAAA,GAAS,KADT,CAAA;AAEA,aAAO,EAAP,CAHS;IAAA,CAzCX,CAAA;AAAA,IA8CA,EAAE,CAAC,IAAH,GAAU,SAAC,IAAD,GAAA;AACR,MAAA,IAAG,CAAA,SAAH;AAAsB,eAAO,KAAP,CAAtB;OAAA;AAAA,MACA,KAAA,GAAQ,IADR,CAAA;AAEA,aAAO,EAAP,CAHQ;IAAA,CA9CV,CAAA;AAAA,IAmDA,EAAE,CAAC,KAAH,GAAW,SAAA,GAAA;AACT,UAAA,mBAAA;AAAA,MAAA,GAAA,GAAM,EAAN,CAAA;AACA,WAAA,oDAAA;qBAAA;AACE,QAAA,IAAG,CAAA,OAAS,CAAA,CAAA,CAAZ;AAAoB,UAAA,GAAG,CAAC,IAAJ,CAAS,EAAT,CAAA,CAApB;SADF;AAAA,OADA;AAGA,aAAO,GAAP,CAJS;IAAA,CAnDX,CAAA;AAAA,IAyDA,EAAE,CAAC,OAAH,GAAa,SAAA,GAAA;AACX,UAAA,mBAAA;AAAA,MAAA,GAAA,GAAM,EAAN,CAAA;AACA,WAAA,wDAAA;yBAAA;AACE,QAAA,IAAG,CAAA,WAAa,CAAA,CAAA,CAAhB;AAAwB,UAAA,GAAG,CAAC,IAAJ,CAAS,SAAU,CAAA,CAAA,CAAnB,CAAA,CAAxB;SADF;AAAA,OADA;AAGA,aAAO,GAAP,CAJW;IAAA,CAzDb,CAAA;AAAA,IA+DA,EAAE,CAAC,OAAH,GAAa,SAAC,GAAD,GAAA;AACX,aAAO,KAAM,CAAA,KAAM,CAAA,GAAA,CAAN,CAAb,CADW;IAAA,CA/Db,CAAA;AAAA,IAkEA,EAAE,CAAC,IAAH,GAAU,SAAC,GAAD,GAAA;AACR,aAAO,SAAU,CAAA,SAAU,CAAA,GAAA,CAAV,CAAjB,CADQ;IAAA,CAlEV,CAAA;AAAA,IAqEA,EAAE,CAAC,SAAH,GAAe,SAAC,KAAD,GAAA;AACb,UAAA,OAAA;AAAA,MAAA,OAAA,GAAU,KAAM,CAAA,IAAA,CAAK,KAAL,CAAA,CAAhB,CAAA;AACA,aAAM,CAAA,OAAS,CAAA,OAAA,CAAf,GAAA;AACE,QAAA,IAAG,OAAA,EAAA,GAAY,CAAf;AAAsB,iBAAO,MAAP,CAAtB;SADF;MAAA,CADA;AAGA,aAAO,SAAU,CAAA,SAAU,CAAA,IAAA,CAAK,KAAM,CAAA,OAAA,CAAX,CAAA,CAAV,CAAjB,CAJa;IAAA,CArEf,CAAA;AAAA,IA2EA,EAAE,CAAC,SAAS,CAAC,IAAb,GAAoB,SAAC,KAAD,GAAA;aAClB,EAAE,CAAC,SAAH,CAAa,KAAb,CAAmB,CAAC,EADF;IAAA,CA3EpB,CAAA;AAAA,IA8EA,EAAE,CAAC,SAAS,CAAC,KAAb,GAAqB,SAAC,KAAD,GAAA;AACnB,UAAA,GAAA;AAAA,MAAA,GAAA,GAAM,EAAE,CAAC,SAAH,CAAa,KAAb,CAAN,CAAA;AACA,MAAA,IAAG,CAAC,CAAC,GAAF,CAAM,GAAN,EAAW,OAAX,CAAH;eAA4B,GAAG,CAAC,CAAJ,GAAQ,GAAG,CAAC,MAAxC;OAAA,MAAA;eAAmD,GAAG,CAAC,EAAvD;OAFmB;IAAA,CA9ErB,CAAA;AAAA,IAkFA,EAAE,CAAC,WAAH,GAAiB,SAAC,OAAD,GAAA;AACf,UAAA,OAAA;AAAA,MAAA,OAAA,GAAU,SAAU,CAAA,IAAA,CAAK,OAAL,CAAA,CAApB,CAAA;AACA,aAAM,CAAA,WAAa,CAAA,OAAA,CAAnB,GAAA;AACE,QAAA,IAAG,OAAA,EAAA,IAAa,SAAS,CAAC,MAA1B;AAAsC,iBAAO,KAAP,CAAtC;SADF;MAAA,CADA;AAGA,aAAO,KAAM,CAAA,KAAM,CAAA,IAAA,CAAK,SAAU,CAAA,OAAA,CAAf,CAAA,CAAN,CAAb,CAJe;IAAA,CAlFjB,CAAA;AAwFA,WAAO,EAAP,CA1FW;EAAA,CAtCb,CAAA;AAAA,EAkIA,IAAC,CAAA,iBAAD,GAAsB,SAAC,IAAD,EAAO,IAAP,GAAA;AACpB,QAAA,0CAAA;AAAA,IAAA,IAAA,GAAO,CAAP,CAAA;AAAA,IACA,IAAA,GAAO,CADP,CAAA;AAAA,IAEA,OAAA,GAAU,IAAI,CAAC,MAAL,GAAc,CAFxB,CAAA;AAAA,IAGA,OAAA,GAAU,IAAI,CAAC,MAAL,GAAc,CAHxB,CAAA;AAAA,IAIA,IAAA,GAAO,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAlB,CAJP,CAAA;AAAA,IAKA,MAAA,GAAS,EALT,CAAA;AAOA,WAAM,IAAA,IAAQ,OAAR,IAAoB,IAAA,IAAQ,OAAlC,GAAA;AACE,MAAA,IAAG,CAAA,IAAM,CAAA,IAAA,CAAN,KAAe,CAAA,IAAM,CAAA,IAAA,CAAxB;AACE,QAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAP,EAA8B,IAAK,CAAA,IAAA,CAAnC,CAAZ,CAAA,CAAA;AAAA,QAEA,IAAA,EAFA,CAAA;AAAA,QAGA,IAAA,EAHA,CADF;OAAA,MAKK,IAAG,CAAA,IAAM,CAAA,IAAA,CAAN,GAAc,CAAA,IAAM,CAAA,IAAA,CAAvB;AAEH,QAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,EAAM,MAAN,EAAiB,IAAK,CAAA,IAAA,CAAtB,CAAZ,CAAA,CAAA;AAAA,QAEA,IAAA,EAFA,CAFG;OAAA,MAAA;AAOH,QAAA,MAAM,CAAC,IAAP,CAAY,CAAC,MAAD,EAAY,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAZ,EAAmC,IAAK,CAAA,IAAA,CAAxC,CAAZ,CAAA,CAAA;AAAA,QAEA,IAAA,EAFA,CAPG;OANP;IAAA,CAPA;AAwBA,WAAM,IAAA,IAAQ,OAAd,GAAA;AAEE,MAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,EAAM,MAAN,EAAiB,IAAK,CAAA,IAAA,CAAtB,CAAZ,CAAA,CAAA;AAAA,MAEA,IAAA,EAFA,CAFF;IAAA,CAxBA;AA8BA,WAAM,IAAA,IAAQ,OAAd,GAAA;AAEE,MAAA,MAAM,CAAC,IAAP,CAAY,CAAC,MAAD,EAAY,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAZ,EAAmC,IAAK,CAAA,IAAA,CAAxC,CAAZ,CAAA,CAAA;AAAA,MAEA,IAAA,EAFA,CAFF;IAAA,CA9BA;AAoCA,WAAO,MAAP,CArCoB;EAAA,CAlItB,CAAA;AAAA,EAyKA,IAAC,CAAA,mBAAD,GAAuB,SAAC,IAAD,EAAM,IAAN,GAAA;AACrB,QAAA,0CAAA;AAAA,IAAA,IAAA,GAAO,CAAP,CAAA;AAAA,IACA,IAAA,GAAO,CADP,CAAA;AAAA,IAEA,OAAA,GAAU,IAAI,CAAC,MAAL,GAAc,CAFxB,CAAA;AAAA,IAGA,OAAA,GAAU,IAAI,CAAC,MAAL,GAAc,CAHxB,CAAA;AAAA,IAIA,IAAA,GAAO,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAlB,CAJP,CAAA;AAAA,IAKA,MAAA,GAAS,EALT,CAAA;AAOA,WAAM,IAAA,IAAQ,OAAR,IAAoB,IAAA,IAAQ,OAAlC,GAAA;AACE,MAAA,IAAG,IAAK,CAAA,IAAA,CAAL,KAAc,IAAK,CAAA,IAAA,CAAtB;AACE,QAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAP,EAA8B,IAAK,CAAA,IAAA,CAAnC,CAAZ,CAAA,CAAA;AAAA,QAEA,IAAA,EAFA,CAAA;AAAA,QAGA,IAAA,EAHA,CADF;OAAA,MAKK,IAAG,IAAI,CAAC,OAAL,CAAa,IAAK,CAAA,IAAA,CAAlB,CAAA,GAA2B,CAA9B;AAEH,QAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,EAAM,MAAN,EAAiB,IAAK,CAAA,IAAA,CAAtB,CAAZ,CAAA,CAAA;AAAA,QAEA,IAAA,EAFA,CAFG;OAAA,MAAA;AAOH,QAAA,MAAM,CAAC,IAAP,CAAY,CAAC,MAAD,EAAY,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAZ,EAAmC,IAAK,CAAA,IAAA,CAAxC,CAAZ,CAAA,CAAA;AAAA,QAEA,IAAA,EAFA,CAPG;OANP;IAAA,CAPA;AAwBA,WAAM,IAAA,IAAQ,OAAd,GAAA;AAEE,MAAA,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,EAAM,MAAN,EAAiB,IAAK,CAAA,IAAA,CAAtB,CAAZ,CAAA,CAAA;AAAA,MAEA,IAAA,EAFA,CAFF;IAAA,CAxBA;AA8BA,WAAM,IAAA,IAAQ,OAAd,GAAA;AAEE,MAAA,MAAM,CAAC,IAAP,CAAY,CAAC,MAAD,EAAY,IAAI,CAAC,GAAL,CAAS,IAAT,EAAc,OAAd,CAAZ,EAAmC,IAAK,CAAA,IAAA,CAAxC,CAAZ,CAAA,CAAA;AAAA,MAEA,IAAA,EAFA,CAFF;IAAA,CA9BA;AAoCA,WAAO,MAAP,CArCqB;EAAA,CAzKvB,CAAA;AAgNA,SAAO,IAAP,CApN0C;AAAA,CAA5C,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,SAA3B,CAAqC,gBAArC,EAAuD,SAAC,IAAD,EAAO,YAAP,EAAqB,UAArB,GAAA;AAErD,SAAO;AAAA,IACL,QAAA,EAAS,GADJ;AAAA,IAEL,KAAA,EACE;AAAA,MAAA,MAAA,EAAO,GAAP;AAAA,MACA,UAAA,EAAW,GADX;AAAA,MAEA,KAAA,EAAM,GAFN;AAAA,MAGA,OAAA,EAAQ,GAHR;KAHG;AAAA,IAOL,IAAA,EAAM,SAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,GAAA;AACJ,MAAA,IAAG,MAAM,CAAC,UAAV;AACE,QAAA,KAAK,CAAC,UAAN,GAAmB,YAAY,CAAC,MAAb,CAAA,CAAnB,CADF;OAAA;aAGA,KAAK,CAAC,MAAN,CAAa,YAAb,EAA2B,SAAC,MAAD,GAAA;AACzB,QAAA,IAAG,YAAY,CAAC,MAAb,CAAA,CAAH;AACE,UAAA,IAAG,MAAM,CAAC,MAAV;AACE,YAAA,KAAK,CAAC,MAAN,GAAe,YAAY,CAAC,cAAb,CAA4B,KAAK,CAAC,UAAlC,CAAf,CADF;WAAA;AAEA,UAAA,IAAG,MAAM,CAAC,OAAP,IAAmB,YAAY,CAAC,WAAnC;mBACE,KAAK,CAAC,OAAN,CAAc;AAAA,cAAC,QAAA,EAAS,YAAY,CAAC,QAAvB;aAAd,EADF;WAHF;SAAA,MAAA;AAME,UAAA,IAAG,MAAM,CAAC,KAAV;mBACE,KAAK,CAAC,KAAN,CAAY;AAAA,cAAC,MAAA,EAAO,YAAY,CAAC,MAArB;aAAZ,EADF;WANF;SADyB;MAAA,CAA3B,EASE,IATF,EAJI;IAAA,CAPD;GAAP,CAFqD;AAAA,CAAvD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,YAAnC,EAAiD,SAAC,IAAD,EAAO,cAAP,EAAuB,UAAvB,GAAA;AAE/C,MAAA,WAAA;AAAA,EAAA,IAAI,CAAC,WAAL,GAAmB,WAAA,GAAc,SAAC,GAAD,GAAA;AAC/B,WAAO,GAAG,CAAC,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAwB,CAAC,OAAzB,CAAiC,mBAAjC,EAAsD,OAAtD,CAA8D,CAAC,WAA/D,CAAA,CAAP,CAD+B;EAAA,CAAjC,CAAA;AAAA,EAIA,IAAI,CAAC,WAAL,GAAmB,SAAC,GAAD,GAAA;AACjB,WAAO,GAAG,CAAC,OAAJ,CAAY,SAAZ,EAAuB,SAAC,CAAD,EAAI,GAAJ,GAAA;AAAY,aAAO,GAAG,CAAC,WAAJ,CAAA,CAAP,CAAZ;IAAA,CAAvB,CAAP,CADiB;EAAA,CAJnB,CAAA;AAAA,EAQA,IAAI,CAAC,WAAL,GAAmB,SAAC,GAAD,EAAM,KAAN,EAAa,IAAb,GAAA;AACjB,WAAO,MAAM,CAAC,cAAP,CAAsB,GAAtB,EAA2B,IAA3B,EAAiC;AAAA,MACtC,GAAA,EAAK,SAAA,GAAA;eAAM,KAAM,CAAA,IAAA,CAAK,CAAC,MAAlB;MAAA,CADiC;AAAA,MAEtC,GAAA,EAAK,SAAC,GAAD,GAAA;eAAS,KAAM,CAAA,IAAA,CAAK,CAAC,KAAZ,GAAoB,IAA7B;MAAA,CAFiC;AAAA,MAGtC,UAAA,EAAW,IAH2B;KAAjC,CAAP,CADiB;EAAA,CARnB,CAAA;AAAA,EAeA,IAAI,CAAC,SAAL,GAAiB,SAAC,GAAD,EAAM,KAAN,EAAa,IAAb,GAAA;AACf,WAAO,MAAM,CAAC,cAAP,CAAsB,GAAtB,EAA2B,IAA3B,EAAiC;AAAA,MACtC,GAAA,EAAK,SAAA,GAAA;eAAM,KAAM,CAAA,IAAA,EAAZ;MAAA,CADiC;AAAA,MAEtC,UAAA,EAAW,IAF2B;KAAjC,CAAP,CADe;EAAA,CAfjB,CAAA;AAAA,EAsBA,IAAI,CAAC,aAAL,GAAqB,SAAC,KAAD,EAAQ,KAAR,EAAe,EAAf,GAAA;AACnB,QAAA,cAAA;AAAA,SAAA,aAAA;6BAAA;AACE,MAAA,IAAG,CAAA,CAAK,CAAC,GAAF,CAAM,EAAN,EAAU,IAAV,CAAP;AACE,QAAA,KAAM,CAAA,IAAA,CAAN,GAAc,EAAd,CAAA;AAAA,QACA,IAAI,CAAC,WAAL,CAAiB,EAAjB,EAAqB,KAArB,EAA4B,IAA5B,CADA,CAAA;AAEA,QAAA,IAAG,CAAC,CAAC,QAAF,CAAW,QAAX,CAAH;AACE,UAAA,KAAM,CAAA,IAAA,CAAK,CAAC,SAAZ,GAAwB,UAAU,CAAC,YAAX,CAAwB,QAAxB,CAAxB,CADF;SAAA,MAAA;AAGE,UAAA,IAAG,QAAQ,CAAC,IAAT,KAAiB,MAApB;AACE,YAAA,KAAM,CAAA,IAAA,CAAK,CAAC,MAAD,CAAX,GAAmB,QAAQ,CAAC,MAA5B,CAAA;AAAA,YACA,KAAM,CAAA,IAAA,CAAK,CAAC,SAAZ,GAAwB,UAAU,CAAC,YAAX,CAAwB,QAAxB,CADxB,CADF;WAHF;SAHF;OADF;AAAA,KAAA;AAAA,IAWA,EAAE,CAAC,QAAH,GAAc,SAAC,IAAD,EAAO,KAAP,GAAA;AAAiB,aAAO,KAAM,CAAA,IAAA,CAAK,CAAC,SAAS,CAAC,KAAtB,CAA4B,KAAM,CAAA,IAAA,CAAlC,EAAyC,CAAC,KAAD,CAAzC,CAAP,CAAjB;IAAA,CAXd,CAAA;WAYA,EAAE,CAAC,cAAH,GAAoB,SAAC,IAAD,GAAA;AAAU,aAAO,KAAM,CAAA,IAAA,CAAK,CAAC,MAAD,CAAlB,CAAV;IAAA,EAbD;EAAA,CAtBrB,CAAA;AAAA,EAqCA,IAAI,CAAC,YAAL,GAAoB,SAAC,IAAD,EAAO,KAAP,EAAc,EAAd,GAAA;AAClB,IAAA,KAAM,CAAA,IAAI,CAAC,IAAL,CAAN,GAAmB,EAAnB,CAAA;AAAA,IACA,KAAM,CAAA,IAAI,CAAC,GAAL,CAAN,GAAkB,EADlB,CAAA;AAAA,IAEA,IAAI,CAAC,WAAL,CAAiB,EAAjB,EAAqB,KAArB,EAA4B,IAAI,CAAC,GAAjC,CAFA,CAAA;AAGA,IAAA,IAAG,CAAC,CAAC,GAAF,CAAM,IAAN,EAAY,OAAZ,CAAH;AACE,MAAA,IAAI,CAAC,WAAL,CAAiB,EAAjB,EAAqB,KAArB,EAA4B,IAAI,CAAC,IAAjC,CAAA,CAAA;AACA,MAAA,IAAG,CAAC,CAAC,QAAF,CAAW,IAAI,CAAC,KAAhB,CAAH;AACE,QAAA,KAAM,CAAA,IAAI,CAAC,IAAL,CAAU,CAAC,SAAjB,GAA6B,UAAU,CAAC,YAAX,CAAwB,IAAI,CAAC,KAA7B,CAA7B,CADF;OAAA,MAAA;AAAA;OADA;AAIA,MAAA,IAAG,IAAI,CAAC,KAAK,CAAC,IAAX,KAAmB,MAAtB;AACE,QAAA,KAAM,CAAA,IAAI,CAAC,IAAL,CAAU,CAAC,MAAD,CAAhB,GAAwB,IAAI,CAAC,KAAK,CAAC,MAAnC,CAAA;AAAA,QACA,KAAM,CAAA,IAAI,CAAC,IAAL,CAAU,CAAC,SAAjB,GAA6B,UAAU,CAAC,YAAX,CAAwB,IAAI,CAAC,KAA7B,CAD7B,CADF;OALF;KAHA;WAYA,IAAI,CAAC,aAAL,CAAmB,IAAI,CAAC,UAAxB,EAAoC,KAApC,EAA2C,EAA3C,EAbkB;EAAA,CArCpB,CAAA;AAAA,EAoDA,IAAI,CAAC,aAAL,GAAqB,SAAC,UAAD,EAAa,KAAb,EAAoB,EAApB,GAAA;AACnB,QAAA,wBAAA;AAAA,IAAA,IAAG,UAAH;AACE;WAAA,iDAAA;8BAAA;AACE,sBAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,EAA/B,EAAA,CADF;AAAA;sBADF;KADmB;EAAA,CApDrB,CAAA;AAAA,EAyDA,IAAI,CAAC,kBAAL,GAA0B,SAAC,WAAD,EAAc,MAAd,GAAA;AACxB,QAAA,kBAAA;AAAA,IAAA,MAAA,GAAS,EAAT,CAAA;AACA,SAAA,mBAAA;+BAAA;AACE,MAAA,IAAG,MAAO,CAAA,IAAA,CAAP,KAAkB,MAAlB,IAAgC,MAAO,CAAA,IAAA,CAAP,KAAkB,IAAlD,IAA2D,MAAO,CAAA,IAAA,CAAP,KAAkB,EAAhF;AACE,QAAA,IAAG,CAAC,CAAC,GAAF,CAAM,WAAY,CAAA,IAAA,CAAlB,EAAyB,WAAzB,CAAH;AACE,UAAA,MAAA,IAAU,WAAY,CAAA,IAAA,CAAK,CAAC,SAAlB,CAA4B,MAAO,CAAA,IAAA,CAAnC,CAAV,CADF;SAAA,MAAA;AAGE,UAAA,IAAG,CAAC,CAAC,QAAF,CAAW,MAAO,CAAA,IAAA,CAAlB,CAAH;AACE,YAAA,MAAA,IAAW,GAAA,GAAE,CAAC,WAAA,CAAY,IAAZ,CAAD,CAAF,GAAqB,KAArB,GAAyB,CAAC,MAAO,CAAA,IAAA,CAAK,CAAC,QAAb,CAAA,CAAD,CAAzB,GAAkD,IAA7D,CADF;WAAA,MAAA;AAGE,YAAA,MAAA,IAAW,GAAA,GAAE,CAAC,WAAA,CAAY,IAAZ,CAAD,CAAF,GAAqB,KAArB,GAA0B,MAAO,CAAA,IAAA,CAAjC,GAAuC,IAAlD,CAHF;WAHF;SADF;OADF;AAAA,KADA;AAUA,WAAO,MAAP,CAXwB;EAAA,CAzD1B,CAAA;AAAA,EAsEA,IAAI,CAAC,kBAAL,GAA0B,SAAC,WAAD,EAAc,MAAd,GAAA;AACxB,QAAA,sBAAA;AAAA,IAAA,MAAA,GAAS,EAAT,CAAA;AACA,IAAA,IAAG,WAAH;AACE,WAAA,kDAAA;+BAAA;AACE,QAAA,IAAG,MAAO,CAAA,IAAI,CAAC,GAAL,CAAV;AACE,UAAA,IAAG,CAAC,CAAC,GAAF,CAAM,IAAN,EAAY,WAAZ,CAAH;AACE,YAAA,MAAA,IAAU,IAAI,CAAC,SAAL,CAAe,MAAO,CAAA,IAAI,CAAC,IAAL,CAAtB,CAAV,CADF;WAAA,MAAA;AAGE,YAAA,IAAG,MAAO,CAAA,IAAI,CAAC,IAAL,CAAV;AACE,cAAA,MAAA,IAAW,GAAA,GAAE,CAAC,WAAA,CAAY,IAAI,CAAC,IAAjB,CAAD,CAAF,GAA0B,KAA1B,GAA+B,MAAO,CAAA,IAAI,CAAC,IAAL,CAAtC,GAAiD,IAA5D,CADF;aAAA,MAAA;AAGE,cAAA,MAAA,IAAU,GAAA,GAAM,WAAA,CAAY,IAAI,CAAC,IAAjB,CAAhB,CAHF;aAHF;WAAA;AAAA,UAOA,MAAA,IAAU,IAAI,CAAC,kBAAL,CAAwB,IAAI,CAAC,UAA7B,EAAyC,MAAzC,CAPV,CADF;SADF;AAAA,OAAA;AAUA,aAAO,MAAP,CAXF;KADA;AAaA,WAAO,EAAP,CAdwB;EAAA,CAtE1B,CAAA;AAsFA,SAAO,IAAP,CAxF+C;AAAA,CAAjD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,cAAnC,EAAmD,SAAC,IAAD,EAAO,UAAP,EAAmB,gBAAnB,EAAqC,aAArC,EAAoD,UAApD,GAAA;AAEjD,MAAA,SAAA;AAAA,EAAA,SAAA,GAAY,SAAC,KAAD,GAAA;WACV,CAAC,SAAC,KAAD,GAAA;AACC,UAAA,SAAA;AAAA,MAAA,KAAA,GAAQ,EAAR,CAAA;AAAA,MACA,KAAK,CAAC,UAAN,GAAmB,EADnB,CAAA;AAAA,MAEA,KAAK,CAAC,OAAN,GAAgB,EAFhB,CAAA;AAAA,MAGA,KAAK,CAAC,UAAN,GAAmB,EAHnB,CAAA;AAAA,MAIA,EAAA,GAAK,EAJL,CAAA;AAAA,MAMA,UAAU,CAAC,aAAX,CAAyB,KAAK,CAAC,UAA/B,EAA2C,KAA3C,EAAkD,EAAlD,CANA,CAAA;AAAA,MAQA,UAAU,CAAC,aAAX,CAAyB,KAAK,CAAC,UAA/B,EAA2C,KAA3C,EAAkD,EAAlD,CARA,CAAA;AAAA,MAUA,UAAU,CAAC,SAAX,CAAqB,EAArB,EAAyB,KAAzB,EAAgC,YAAhC,CAVA,CAAA;AAAA,MAWA,UAAU,CAAC,SAAX,CAAqB,EAArB,EAAyB,KAAzB,EAAgC,SAAhC,CAXA,CAAA;AAAA,MAYA,UAAU,CAAC,SAAX,CAAqB,EAArB,EAAyB,KAAzB,EAAgC,YAAhC,CAZA,CAAA;AAAA,MAcA,EAAE,CAAC,mBAAH,GAAyB,SAAA,GAAA;AACvB,eAAO,CAAC,CAAC,IAAF,CAAO,UAAU,CAAC,SAAlB,CAAP,CADuB;MAAA,CAdzB,CAAA;AAAA,MAgBA,EAAE,CAAC,YAAH,GAAkB,SAAC,IAAD,GAAA;AAChB,QAAA,KAAK,CAAC,UAAW,CAAA,IAAA,CAAjB,GAAyB,gBAAgB,CAAC,MAAjB,CAAwB,IAAxB,CAAzB,CAAA;AACA,eAAO,KAAK,CAAC,UAAW,CAAA,IAAA,CAAxB,CAFgB;MAAA,CAhBlB,CAAA;AAAA,MAmBA,EAAE,CAAC,eAAH,GAAqB,SAAC,IAAD,GAAA;AACnB,QAAA,MAAA,CAAA,KAAY,CAAC,UAAW,CAAA,IAAA,CAAxB,CAAA;AACA,eAAO,MAAP,CAFmB;MAAA,CAnBrB,CAAA;AAAA,MAsBA,EAAE,CAAC,gBAAH,GAAsB,SAAA,GAAA;AACpB,eAAO,CAAC,CAAC,IAAF,CAAO,UAAU,CAAC,OAAlB,CAAP,CADoB;MAAA,CAtBtB,CAAA;AAAA,MAwBA,EAAE,CAAC,SAAH,GAAe,SAAC,IAAD,EAAO,MAAP,GAAA;AACb,YAAA,CAAA;AAAA,QAAA,CAAA,GAAI,aAAa,CAAC,MAAd,CAAqB,MAArB,CAAJ,CAAA;AAAA,QACA,KAAK,CAAC,OAAQ,CAAA,IAAA,CAAd,GAAuB,CADvB,CAAA;AAAA,QAEA,KAAK,CAAC,OAAQ,CAAA,IAAA,CAAK,CAAC,UAApB,GAAiC,IAFjC,CAAA;AAGA,eAAO,CAAP,CAJa;MAAA,CAxBf,CAAA;AAAA,MA6BA,EAAE,CAAC,YAAH,GAAkB,SAAC,IAAD,GAAA;AAChB,QAAA,MAAA,CAAA,KAAY,CAAC,OAAQ,CAAA,IAAA,CAArB,CAAA;AACA,eAAO,MAAP,CAFgB;MAAA,CA7BlB,CAAA;AAAA,MAiCA,EAAE,CAAC,WAAH,GAAiB,SAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,GAAA;AACf,YAAA,qCAAA;AAAA,QAAA,UAAA,GAAgB,KAAK,CAAC,UAAW,CAAA,OAAA,CAApB,GAAkC,MAAA,GAAS,GAAT,GAAe,OAAjD,GAA8D,MAA3E,CAAA;AAAA,QACA,CAAA,GAAI,KAAK,CAAC,OAAQ,CAAA,UAAA,CADlB,CAAA;AAEA,QAAA,IAAG,CAAA,CAAH;AACE,UAAA,CAAA,GAAI,EAAE,CAAC,SAAH,CAAa,UAAb,EAAyB,MAAzB,CAAJ,CADF;SAFA;AAAA,QAIA,SAAA,GAAY,CAAC,CAAC,UAAW,CAAA,OAAA,CAJzB,CAAA;AAKA,QAAA,IAAG,CAAA,SAAH;AACE,UAAA,SAAA,GAAY,CAAC,CAAC,YAAF,CAAe,OAAf,CAAZ,CADF;SALA;AAAA,QAOA,IAAA,GAAO,SAAS,CAAC,QAPjB,CAAA;AAQA,QAAA,IAAG,IAAH;AACE,UAAA,KAAA,GAAQ,IAAI,CAAC,KAAL,CAAW,GAAX,CAAR,CAAA;AACA,UAAA,IAAG,KAAK,CAAC,OAAN,CAAc,QAAQ,CAAC,IAAT,CAAA,CAAd,CAAA,GAAiC,CAApC;AACE,YAAA,KAAK,CAAC,IAAN,CAAW,QAAQ,CAAC,IAAT,CAAA,CAAX,CAAA,CAAA;AAAA,YACA,SAAS,CAAC,QAAV,GAAqB,KAAK,CAAC,IAAN,CAAW,GAAX,CADrB,CAAA;mBAEA,KAAK,CAAC,UAAU,CAAC,IAAjB,CAAsB;AAAA,cAAC,QAAA,EAAS,QAAV;AAAA,cAAoB,OAAA,EAAS,OAA7B;AAAA,cAAsC,SAAA,EAAU,SAAhD;AAAA,cAA2D,UAAA,EAAW,MAAtE;AAAA,cAA8E,MAAA,EAAO,CAArF;aAAtB,EAHF;WAFF;SAAA,MAAA;AAOE,UAAA,SAAS,CAAC,QAAV,GAAqB,QAAQ,CAAC,IAAT,CAAA,CAArB,CAAA;iBACA,KAAK,CAAC,UAAU,CAAC,IAAjB,CAAsB;AAAA,YAAC,QAAA,EAAS,QAAV;AAAA,YAAoB,OAAA,EAAS,OAA7B;AAAA,YAAsC,SAAA,EAAU,SAAhD;AAAA,YAA2D,UAAA,EAAW,MAAtE;AAAA,YAA8E,MAAA,EAAO,CAArF;WAAtB,EARF;SATe;MAAA,CAjCjB,CAAA;AAAA,MAoDA,EAAE,CAAC,cAAH,GAAoB,SAAC,QAAD,EAAW,OAAX,EAAoB,UAApB,GAAA;AAClB,YAAA,kDAAA;AAAA,QAAA,CAAA,GAAI,KAAK,CAAC,OAAQ,CAAA,UAAA,CAAlB,CAAA;AAAA,QACA,SAAA,GAAY,CAAC,CAAC,UAAW,CAAA,OAAA,CADzB,CAAA;AAAA,QAEA,IAAA,GAAO,SAAS,CAAC,QAFjB,CAAA;AAAA,QAGA,KAAA,GAAQ,IAAI,CAAC,KAAL,CAAW,GAAX,CAHR,CAAA;AAAA,QAIA,KAAK,CAAC,MAAN,CAAa,KAAK,CAAC,OAAN,CAAc,QAAd,CAAb,EAAsC,CAAtC,CAJA,CAAA;AAKA,QAAA,IAAG,KAAK,CAAC,MAAN,GAAe,CAAlB;AACE,UAAA,SAAS,CAAC,QAAV,GAAqB,KAAK,CAAC,IAAN,CAAW,GAAX,CAArB,CADF;SAAA,MAAA;AAGE,UAAA,SAAS,CAAC,QAAV,GAAqB,EAArB,CAAA;AAAA,UACA,CAAC,CAAC,eAAF,CAAkB,OAAlB,CADA,CAAA;AAEA,UAAA,IAAG,CAAC,CAAC,IAAF,CAAO,CAAC,CAAC,UAAT,CAAoB,CAAC,MAArB,KAA+B,CAAlC;AACE,YAAA,EAAE,CAAC,YAAH,CAAgB,UAAhB,CAAA,CADF;WALF;SALA;AAAA,QAaA,QAAA,GAAW,KAAK,CAAC,UAAU,CAAC,MAAjB,CAAwB,SAAC,CAAD,GAAA;iBAAO,CAAC,CAAC,QAAF,KAAc,QAAd,IAA2B,CAAC,CAAC,OAAF,KAAa,OAAxC,IAAoD,CAAA,CAAC,CAAC,UAAF,GAAe,UAAf,EAA3D;QAAA,CAAxB,CAbX,CAAA;AAcA,aAAA,+CAAA;6BAAA;AACE,UAAA,KAAK,CAAC,UAAU,CAAC,MAAjB,CAAwB,KAAK,CAAC,UAAU,CAAC,OAAjB,CAAyB,GAAzB,CAAxB,EAAsD,CAAtD,CAAA,CADF;AAAA,SAfkB;MAAA,CApDpB,CAAA;AAAA,MAwEA,EAAE,CAAC,aAAH,GAAmB,SAAA,GAAA;AAAM,eAAO,KAAP,CAAN;MAAA,CAxEnB,CAAA;AAyEA,aAAO,EAAP,CA1ED;IAAA,CAAD,CAAA,CA2EE,KA3EF,EADU;EAAA,CAAZ,CAAA;AAAA,EA8EA,IAAI,CAAC,MAAL,GAAc,SAAA,GAAA;AACZ,WAAO,SAAA,CAAU,UAAU,CAAC,KAArB,CAAP,CADY;EAAA,CA9Ed,CAAA;AAAA,EAiFA,IAAI,CAAC,MAAL,GAAc,SAAA,GAAA;AACZ,WAAO,IAAP,CADY;EAAA,CAjFd,CAAA;AAAA,EAoFA,IAAI,CAAC,cAAL,GAAsB,SAAC,MAAD,GAAA;AACpB,QAAA,cAAA;AAAA,IAAA,MAAA,GAAS,MAAM,CAAC,aAAP,CAAA,CAAT,CAAA;AAAA,IACA,MAAA,GAAU,GAAA,GAAG,MAAM,CAAC,IADpB,CAAA;AAAA,IAEA,MAAA,IAAU,UAAU,CAAC,kBAAX,CAA8B,MAAM,CAAC,UAArC,EAAiD,MAAjD,CAFV,CAAA;AAAA,IAGA,MAAA,IAAU,UAAU,CAAC,kBAAX,CAA8B,MAAM,CAAC,UAArC,EAAiD,MAAjD,CAHV,CAAA;AAAA,IAIA,MAAA,IAAU,GAJV,CAAA;AAAA,IAMA,MAAA,IAAU,gBAAgB,CAAC,cAAjB,CAAgC,MAAM,CAAC,UAAvC,CANV,CAAA;AAAA,IAOA,MAAA,IAAU,aAAa,CAAC,cAAd,CAA6B,MAAM,CAAC,OAApC,CAPV,CAAA;AAAA,IASA,MAAA,IAAW,MAAA,GAAM,MAAM,CAAC,IAAb,GAAkB,GAT7B,CAAA;AAUA,WAAO,MAAP,CAXoB;EAAA,CApFtB,CAAA;AAAA,EAiGA,IAAI,CAAC,SAAL,GAAiB,KAjGjB,CAAA;AAAA,EAkGA,IAAI,CAAC,MAAL,GAAc,EAlGd,CAAA;AAAA,EAoGA,IAAI,CAAC,WAAL,GAAmB,KApGnB,CAAA;AAAA,EAqGA,IAAI,CAAC,QAAL,GAAgB,EArGhB,CAAA;AAuGA,SAAO,IAAP,CAzGiD;AAAA,CAAnD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,kBAAnC,EAAuD,SAAC,IAAD,EAAO,UAAP,EAAmB,UAAnB,GAAA;AAErD,MAAA,SAAA;AAAA,EAAA,SAAA,GAAY,SAAC,KAAD,GAAA;WACV,CAAC,SAAC,KAAD,GAAA;AACC,UAAA,SAAA;AAAA,MAAA,KAAA,GAAQ,EAAR,CAAA;AAAA,MACA,EAAA,GAAK,EADL,CAAA;AAAA,MAGA,UAAU,CAAC,aAAX,CAAyB,KAAK,CAAC,UAA/B,EAA2C,KAA3C,EAAkD,EAAlD,CAHA,CAAA;AAAA,MAKA,UAAU,CAAC,aAAX,CAAyB,KAAK,CAAC,UAA/B,EAA2C,KAA3C,EAAkD,EAAlD,CALA,CAAA;AAAA,MAOA,EAAE,CAAC,aAAH,GAAmB,SAAA,GAAA;AAAM,eAAO,KAAP,CAAN;MAAA,CAPnB,CAAA;AASA,aAAO,EAAP,CAVD;IAAA,CAAD,CAAA,CAWE,KAXF,EADU;EAAA,CAAZ,CAAA;AAAA,EAeA,IAAI,CAAC,MAAL,GAAc,SAAC,IAAD,GAAA;AACZ,IAAA,IAAG,CAAC,CAAC,GAAF,CAAM,UAAU,CAAC,SAAjB,EAA2B,IAA3B,CAAH;AACE,aAAO,SAAA,CAAU,UAAU,CAAC,SAAU,CAAA,IAAA,CAA/B,CAAP,CADF;KADY;EAAA,CAfd,CAAA;AAAA,EAmBA,IAAI,CAAC,cAAL,GAAsB,SAAC,WAAD,GAAA;AACpB,QAAA,yBAAA;AAAA,IAAA,MAAA,GAAS,EAAT,CAAA;AACA,SAAA,mBAAA;8BAAA;AACE,MAAA,MAAA,GAAS,GAAG,CAAC,aAAJ,CAAA,CAAT,CAAA;AAAA,MACA,MAAA,IAAW,SAAA,GAAS,MAAM,CAAC,IAD3B,CAAA;AAAA,MAEA,MAAA,IAAU,UAAU,CAAC,kBAAX,CAA8B,MAAM,CAAC,UAArC,EAAiD,GAAjD,CAFV,CAAA;AAAA,MAGA,MAAA,IAAU,UAAU,CAAC,kBAAX,CAA8B,MAAM,CAAC,UAArC,EAAiD,GAAjD,CAHV,CAAA;AAAA,MAIA,MAAA,IAAU,KAJV,CADF;AAAA,KADA;AAOA,WAAO,MAAP,CARoB;EAAA,CAnBtB,CAAA;AA6BA,SAAO,IAAP,CA/BqD;AAAA,CAAvD,CAAA,CAAA;;ACAA,OAAO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,eAAnC,EAAoD,SAAC,IAAD,EAAO,gBAAP,EAAyB,UAAzB,EAAqC,UAArC,GAAA;AAElD,MAAA,SAAA;AAAA,EAAA,SAAA,GAAY,SAAC,KAAD,GAAA;WACV,CAAC,SAAC,KAAD,GAAA;AACC,UAAA,0BAAA;AAAA,MAAA,KAAA,GAAQ,EAAR,CAAA;AAAA,MACA,KAAK,CAAC,UAAN,GAAmB,EADnB,CAAA;AAAA,MAEA,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,IAFrB,CAAA;AAAA,MAGA,EAAA,GAAK,EAHL,CAAA;AAAA,MAKA,UAAU,CAAC,aAAX,CAAyB,KAAK,CAAC,UAA/B,EAA2C,KAA3C,EAAkD,EAAlD,CALA,CAAA;AAAA,MAOA,UAAU,CAAC,aAAX,CAAyB,KAAK,CAAC,UAA/B,EAA2C,KAA3C,EAAkD,EAAlD,CAPA,CAAA;AASA;AAAA,WAAA,YAAA;yBAAA;AACE,QAAA,KAAK,CAAC,UAAW,CAAA,IAAA,CAAjB,GAAyB,gBAAgB,CAAC,MAAjB,CAAwB,IAAxB,CAAzB,CADF;AAAA,OATA;AAAA,MAYA,UAAU,CAAC,SAAX,CAAqB,EAArB,EAAyB,KAAzB,EAAgC,YAAhC,CAZA,CAAA;AAAA,MAaA,UAAU,CAAC,SAAX,CAAqB,EAArB,EAAyB,KAAzB,EAAgC,QAAhC,CAbA,CAAA;AAAA,MAcA,EAAE,CAAC,YAAH,GAAkB,SAAC,IAAD,GAAA;AAChB,QAAA,KAAK,CAAC,UAAW,CAAA,IAAA,CAAjB,GAAyB,gBAAgB,CAAC,MAAjB,CAAwB,IAAxB,CAAzB,CAAA;AACA,eAAO,KAAK,CAAC,UAAW,CAAA,IAAA,CAAxB,CAFgB;MAAA,CAdlB,CAAA;AAAA,MAiBA,EAAE,CAAC,eAAH,GAAqB,SAAC,IAAD,GAAA;AACnB,QAAA,MAAA,CAAA,KAAY,CAAC,UAAW,CAAA,IAAA,CAAxB,CAAA;AACA,eAAO,MAAP,CAFmB;MAAA,CAjBrB,CAAA;AAAA,MAqBA,EAAE,CAAC,aAAH,GAAmB,SAAA,GAAA;AAAM,eAAO,KAAP,CAAN;MAAA,CArBnB,CAAA;AAuBA,aAAO,EAAP,CAxBD;IAAA,CAAD,CAAA,CAyBE,KAzBF,EADU;EAAA,CAAZ,CAAA;AAAA,EA4BA,IAAI,CAAC,MAAL,GAAc,SAAC,IAAD,GAAA;AACZ,IAAA,IAAG,CAAC,CAAC,GAAF,CAAM,UAAU,CAAC,OAAjB,EAA0B,IAA1B,CAAH;AACE,aAAO,SAAA,CAAU,UAAU,CAAC,OAAQ,CAAA,IAAA,CAA7B,CAAP,CADF;KADY;EAAA,CA5Bd,CAAA;AAgCA;AAAA;;;;;;KAhCA;AAAA,EAuCA,IAAI,CAAC,cAAL,GAAsB,SAAC,WAAD,GAAA;AACpB,QAAA,4BAAA;AAAA,IAAA,MAAA,GAAS,EAAT,CAAA;AACA,SAAA,mBAAA;iCAAA;AACE,MAAA,MAAA,GAAS,MAAM,CAAC,aAAP,CAAA,CAAT,CAAA;AAAA,MACA,MAAA,IAAU,aADV,CAAA;AAEA,MAAA,IAAG,CAAA,MAAW,CAAA,UAAU,CAAC,WAAX,CAAuB,MAAM,CAAC,IAA9B,CAAA,CAAd;AACE,QAAA,MAAA,IAAW,GAAA,GAAE,CAAC,UAAU,CAAC,WAAX,CAAuB,MAAM,CAAC,IAA9B,CAAD,CAAb,CADF;OAFA;AAAA,MAKA,MAAA,IAAU,UAAU,CAAC,kBAAX,CAA8B,MAAM,CAAC,UAArC,EAAiD,MAAjD,CALV,CAAA;AAAA,MAMA,MAAA,IAAU,UAAU,CAAC,kBAAX,CAA8B,MAAM,CAAC,UAArC,EAAiD,MAAjD,CANV,CAAA;AAAA,MAOA,MAAA,IAAU,GAPV,CAAA;AAAA,MASA,MAAA,IAAU,gBAAgB,CAAC,cAAjB,CAAgC,MAAM,CAAC,UAAvC,CATV,CAAA;AAAA,MAUA,MAAA,IAAU,eAVV,CADF;AAAA,KADA;AAaA,WAAO,MAAP,CAdoB;EAAA,CAvCtB,CAAA;AA2DA,SAAO,IAAP,CA7DkD;AAAA,CAApD,CAAA,CAAA;;ACAA,YAAA,CAAA;AAAA,IAAA,qJAAA;;AAAA,OAEO,CAAC,MAAR,CAAe,UAAf,CAA0B,CAAC,OAA3B,CAAmC,YAAnC,EAAiD,SAAC,IAAD,EAAO,aAAP,GAAA;AAI/C,MAAA,6RAAA;AAAA,EAAA,MAAA,GAAS,SAAC,IAAD,EAAO,cAAP,EAAuB,UAAvB,EAAmC,UAAnC,GAAA;AAGP,QAAA,GAAA;AAAA,IAAA,GAAA,GAAO;AAAA,MACL,IAAA,EAAM,IADD;AAAA,MAEL,KAAA,EAAO,QAFF;AAAA,MAGL,cAAA,EAAgB,cAHX;AAAA,MAIL,UAAA,EAAY,MAAA,CAAO,UAAP,CAJP;AAAA,MAKL,UAAA,EAAY,UALP;KAAP,CAAA;AAOA,WAAO,GAAP,CAVO;EAAA,CAAT,CAAA;AAAA,EAYA,GAAA,GAAM,SAAC,IAAD,EAAO,UAAP,EAAmB,UAAnB,GAAA;AACJ,WAAO;AAAA,MACP,KAAA,EAAM,WADC;AAAA,MAEP,IAAA,EAAK,IAFE;AAAA,MAGP,UAAA,EAAa,MAAA,CAAO,UAAP,CAHN;AAAA,MAIP,UAAA,EAAa,UAJN;KAAP,CADI;EAAA,CAZN,CAAA;AAAA,EAoBA,aAAA,GAAgB,SAAA,GAAA;AACd,WAAO,CAAC,CAAC,IAAF,CAAO,EAAE,CAAC,KAAV,CAAgB,CAAC,MAAjB,CAAwB,MAAxB,CAA+B,CAAC,MAAhC,CAAuC,CAAC,CAAC,IAAF,CAAO,aAAP,CAAvC,CAAP,CADc;EAAA,CApBhB,CAAA;AAAA,EAuBA,MAAA,GAAS,SAAC,IAAD,GAAA;AACP,WAAO,CAAC,CAAC,MAAM,CAAC,KAAT,CAAe,IAAf,EAAqB,CAAC,EAAD,CAAI,CAAC,MAAL,CAAY,IAAZ,CAArB,CAAP,CADO;EAAA,CAvBT,CAAA;AAAA,EA0BA,YAAA,GAAe;AAAA,IACb,MAAA,EAAO,QADM;AAAA,IAEb,MAAA,EAAO,QAFM;AAAA,IAGb,IAAA,EAAK,SAHQ;AAAA,IAIb,IAAA,EAAK,MAJQ;AAAA,IAKb,MAAA,EAAK,SAAC,IAAD,GAAA;AACH,aAAO;AAAA,QACL,IAAA,EAAK,MADA;AAAA,QAEL,MAAA,EAAO,IAFF;OAAP,CADG;IAAA,CALQ;AAAA,IAUb,MAAA,EAAQ,gBAVK;AAAA,IAWb,KAAA,EAAO,aAXM;AAAA,IAYb,QAAA,EAAU,UAZG;AAAA,IAab,QAAA,EAAU,gBAbG;GA1Bf,CAAA;AAAA,EA0CA,IAAI,CAAC,YAAL,GAAoB,SAAC,IAAD,GAAA;AAClB,YAAO,IAAP;AAAA,WACO,YAAY,CAAC,MADpB;AACgC,eAAO,CAAC,CAAC,QAAT,CADhC;AAAA,WAEO,YAAY,CAAC,MAFpB;AAEgC,eAAO,CAAC,CAAC,QAAT,CAFhC;AAAA,WAGO,YAAY,CAAC,IAHpB;AAG8B,eAAO,CAAC,CAAC,SAAT,CAH9B;AAAA,WAIO,YAAY,CAAC,IAJpB;AAI8B,eAAO,SAAC,GAAD,GAAA;iBACjC,gCAAgC,CAAC,IAAjC,CAAsC,GAAtC,EADiC;QAAA,CAAP,CAJ9B;AAAA;AAOI,QAAA,IAAG,CAAC,CAAC,QAAF,CAAW,IAAX,CAAA,IAAqB,IAAI,CAAC,IAAL,KAAa,MAArC;AACE,iBAAO,SAAC,GAAD,GAAA;mBAAS,eAAO,IAAI,CAAC,MAAD,CAAX,EAAA,GAAA,OAAT;UAAA,CAAP,CADF;SAAA,MAAA;AAGE,iBAAO,SAAA,GAAA;mBAAM,KAAN;UAAA,CAAP,CAHF;SAPJ;AAAA,KADkB;EAAA,CA1CpB,CAAA;AAAA,EAyDA,OAAA,GAAU;AAAA,IAAC,OAAA,EAAQ,YAAY,CAAC,IAAtB;GAzDV,CAAA;AAAA,EA0DA,KAAA,GAAQ;AAAA,IAAC,KAAA,EAAM,YAAY,CAAC,IAApB;GA1DR,CAAA;AAAA,EA2DA,OAAA,GAAU;AAAA,IAAC,OAAA,EAAQ,YAAY,CAAC,MAAtB;GA3DV,CAAA;AAAA,EA4DA,YAAA,GAAe;AAAA,IAAC,YAAA,EAAa,YAAY,CAAC,MAA3B;GA5Df,CAAA;AAAA,EA6DA,WAAA,GAAc;AAAA,IAAC,WAAA,EAAY,YAAY,CAAC,MAAD,CAAZ,CAAkB,CAAC,MAAD,EAAS,YAAT,EAAsB,QAAtB,EAA+B,QAA/B,CAAlB,CAAb;GA7Dd,CAAA;AAAA,EA8DA,mBAAA,GAAsB;AAAA,IAAC,mBAAA,EAAoB,YAAY,CAAC,MAAD,CAAZ,CAAkB,CAAC,MAAD,EAAS,YAAT,EAAsB,QAAtB,EAA+B,QAA/B,CAAlB,CAArB;GA9DtB,CAAA;AAAA,EA+DA,OAAA,GAAU;AAAA,IAAC,OAAA,EAAQ,YAAY,CAAC,MAAtB;GA/DV,CAAA;AAAA,EAgEA,UAAA,GAAa;AAAA,IAAC,UAAA,EAAW,YAAY,CAAC,MAAzB;GAhEb,CAAA;AAAA,EAiEA,MAAA,GAAS;AAAA,IAAC,MAAA,EAAO,YAAY,CAAC,IAArB;GAjET,CAAA;AAAA,EAkEA,WAAA,GAAc;AAAA,IAAC,WAAA,EAAY,YAAY,CAAC,MAA1B;GAlEd,CAAA;AAAA,EAoEA,QAAA,GAAW;AAAA,IACT,QAAA,EAAS,YAAY,CAAC,IADb;GApEX,CAAA;AAAA,EAwEA,YAAA,GAAe;AAAA,IACb,gBAAA,EAAiB,YAAY,CAAC,MADjB;GAxEf,CAAA;AAAA,EA2EA,KAAA,GAAQ;AAAA,IACN,aAAA,EAAc,YAAY,CAAC,MADrB;AAAA,IAEN,aAAA,EAAc,YAAY,CAAC,MAFrB;GA3ER,CAAA;AAAA,EA+EA,IAAA,GAAO;AAAA,IACL,IAAA,EAAK,YAAY,CAAC,MAAD,CAAZ,CAAkB,aAAA,CAAA,CAAlB,CADA;AAAA,IAEL,UAAA,EAAW,YAAY,CAAC,MAFnB;AAAA,IAGL,MAAA,EAAO,YAAY,CAAC,IAHf;AAAA,IAIL,SAAA,EAAU,YAAY,CAAC,MAJlB;AAAA,IAKL,SAAA,EAAU,YAAY,CAAC,MALlB;AAAA,IAML,KAAA,EAAM,YAAY,CAAC,IANd;AAAA,IAOL,KAAA,EAAM,YAAY,CAAC,IAPd;AAAA,IAQL,WAAA,EAAY,YAAY,CAAC,MAAD,CAAZ,CAAkB,CAAC,KAAD,EAAQ,KAAR,EAAe,QAAf,EAAwB,OAAxB,CAAlB,CARP;AAAA,IASL,KAAA,EAAM,YAAY,CAAC,MATd;AAAA,IAUL,UAAA,EAAW,YAAY,CAAC,MAVnB;AAAA,IAWL,QAAA,EAAS,YAAY,CAAC,MAXjB;AAAA,IAYL,OAAA,EAAQ,YAAY,CAAC,IAZhB;GA/EP,CAAA;AAAA,EAgGA,KAAA,GAAQ;AAAA,IACN,IAAA,EAAM,OADA;AAAA,IAEN,KAAA,EAAO,WAFD;AAAA,IAGN,GAAA,EAAK,OAHC;GAhGR,CAAA;AAAA,EAsGA,GAAA,GAAM;AAAA,IACJ,IAAA,EAAM,KADF;AAAA,IAEJ,KAAA,EAAO,WAFH;AAAA,IAGJ,GAAA,EAAK,KAHD;GAtGN,CAAA;AAAA,EA4GA,QAAA,GAAW;AAAA,IACT,IAAA,EAAM,UADG;AAAA,IAET,KAAA,EAAM,WAFG;AAAA,IAGT,GAAA,EAAI,UAHK;AAAA,IAIT,UAAA,EAAY;AAAA,MACV,gBAAA,EAAiB,YAAY,CAAC,MADpB;KAJH;GA5GX,CAAA;AAAA,EAqHA,IAAA,GAAO;AAAA,IACL,IAAA,EAAK,MADA;AAAA,IAEL,KAAA,EAAM,WAFD;AAAA,IAGL,GAAA,EAAI,MAHC;AAAA,IAIL,UAAA,EAAY;AAAA,MACV,IAAA,EAAM,YAAY,CAAC,IADT;AAAA,MAEV,SAAA,EAAW,YAAY,CAAC,MAFd;AAAA,MAGV,MAAA,EAAQ,YAAY,CAAC,MAHX;AAAA,MAIV,SAAA,EAAW,YAAY,CAAC,IAJd;AAAA,MAKV,KAAA,EAAO,YAAY,CAAC,MALV;AAAA,MAMV,YAAA,EAAc,YAAY,CAAC,MANjB;AAAA,MAOV,UAAA,EAAY,YAAY,CAAC,MAPf;AAAA,MAQV,cAAA,EAAgB,YAAY,CAAC,MARnB;AAAA,MASV,aAAA,EAAe,YAAY,CAAC,MATlB;KAJP;GArHP,CAAA;AAAA,EAsIA,MAAA,GAAS;AAAA,IACP,IAAA,EAAK,QADE;AAAA,IAEP,KAAA,EAAM,WAFC;AAAA,IAGP,GAAA,EAAI,YAHG;AAAA,IAIP,KAAA,EAAO,YAAY,CAAC,MAAD,CAAZ,CAAkB,CAAC,UAAD,EAAY,WAAZ,EAAwB,aAAxB,EAAsC,cAAtC,CAAlB,CAJA;AAAA,IAKP,UAAA,EAAY;AAAA,MACV,WAAA,EAAY,YAAY,CAAC,MADf;AAAA,MAEV,WAAA,EAAa,YAAY,CAAC,MAFhB;KALL;GAtIT,CAAA;AAAA,EAiJA,YAAA,GAAe;AAAA,IACb,IAAA,EAAK,cADQ;AAAA,IAEb,KAAA,EAAM,WAFO;AAAA,IAGb,GAAA,EAAI,kBAHS;AAAA,IAIb,KAAA,EAAO,YAAY,CAAC,MAAD,CAAZ,CAAkB,CAAC,UAAD,EAAY,WAAZ,EAAwB,aAAxB,EAAsC,cAAtC,CAAlB,CAJM;AAAA,IAKb,UAAA,EAAY;AAAA,MACV,WAAA,EAAY,YAAY,CAAC,MADf;AAAA,MAEV,WAAA,EAAa,YAAY,CAAC,MAFhB;KALC;GAjJf,CAAA;AAAA,EA4JA,SAAA,GAAY;AAAA,IACV,IAAA,EAAK,WADK;AAAA,IAEV,KAAA,EAAM,WAFI;AAAA,IAGV,GAAA,EAAI,WAHM;AAAA,IAIV,UAAA,EAAY;AAAA,MACV,cAAA,EAAgB,YAAY,CAAC,MADnB;AAAA,MAEV,cAAA,EAAgB,YAAY,CAAC,QAFnB;AAAA,MAGV,oBAAA,EAAsB,YAAY,CAAC,KAHzB;KAJF;GA5JZ,CAAA;AAAA,EAuKA,KAAA,GAAQ;AAAA,IACN,IAAA,EAAK,OADC;AAAA,IAEN,GAAA,EAAI,WAFE;AAAA,IAGN,KAAA,EAAM,WAHA;AAAA,IAIN,KAAA,EAAO,YAAY,CAAC,MAJd;AAAA,IAKN,UAAA,EAAY;AAAA,MACV,cAAA,EAAgB,YAAY,CAAC,MADnB;AAAA,MAEV,cAAA,EAAgB,YAAY,CAAC,MAFnB;AAAA,MAGV,WAAA,EAAa,YAAY,CAAC,MAHhB;AAAA,MAIV,oBAAA,EAAsB,YAAY,CAAC,KAJzB;AAAA,MAKV,UAAA,EAAY,YAAY,CAAC,KALf;AAAA,MAMV,QAAA,EAAU,YAAY,CAAC,KANb;AAAA,MAOV,UAAA,EAAY,YAAY,CAAC,QAPf;KALN;GAvKR,CAAA;AAAA,EAuLA,OAAA,GAAU;AAAA,IACR,IAAA,EAAK,SADG;AAAA,IAER,KAAA,EAAM,WAFE;AAAA,IAGR,GAAA,EAAI,aAHI;AAAA,IAIR,KAAA,EAAQ,YAAY,CAAC,MAJb;GAvLV,CAAA;AAAA,EA8LA,MAAA,GAAS;AAAA,IACP,IAAA,EAAM,QADC;AAAA,IAEP,KAAA,EAAO,WAFA;AAAA,IAGP,GAAA,EAAK,YAHE;AAAA,IAIP,UAAA,EAAY;AAAA,MACV,UAAA,EAAY,YAAY,CAAC,MADf;KAJL;GA9LT,CAAA;AAAA,EA2MA,IAAI,CAAC,KAAL,GAAa;AAAA,IACX,IAAA,EAAK,OADM;AAAA,IAEX,KAAA,EAAM,OAFK;AAAA,IAGX,UAAA,EAAY;AAAA,MACV,IAAA,EAAM,YAAY,CAAC,QADT;AAAA,MAEV,MAAA,EAAQ,YAAY,CAAC,MAFX;AAAA,MAGV,WAAA,EAAa,YAAY,CAAC,MAHhB;AAAA,MAIV,SAAA,EAAW,YAAY,CAAC,MAJd;AAAA,MAKV,cAAA,EAAe,YAAY,CAAC,MALlB;AAAA,MAMV,SAAA,EAAW,YAAY,CAAC,IANd;AAAA,MAOV,MAAA,EAAQ,YAAY,CAAC,MAPX;AAAA,MAQV,IAAA,EAAM,YAAY,CAAC,IART;AAAA,MASV,YAAA,EAAc,YAAY,CAAC,KATjB;AAAA,MAUV,iBAAA,EAAmB,YAAY,CAAC,MAVtB;AAAA,MAWV,eAAA,EAAiB,YAAY,CAAC,MAXpB;KAHD;AAAA,IAgBX,UAAA,EAAY,CAAC,QAAD,CAhBD;AAAA,IAiBX,UAAA,EAAY,EAjBD;AAAA,IAkBX,OAAA,EAAS,EAlBE;GA3Mb,CAAA;AAAA,EAkOA,IAAI,CAAC,OAAL,GAAe;AAAA,IACb,IAAA,EAAoB,MAAA,CAAO,MAAP,EAAc,GAAd,EAAmB,CAAC,OAAD,EAAU,MAAV,CAAnB,CADP;AAAA,IAEb,YAAA,EAAoB,MAAA,CAAO,cAAP,EAAsB,GAAtB,EAA2B,CAAC,OAAD,EAAU,MAAV,CAA3B,CAFP;AAAA,IAGb,IAAA,EAAoB,MAAA,CAAO,MAAP,EAAe,GAAf,EAAoB,CAAC,OAAD,EAAU,MAAV,CAApB,CAHP;AAAA,IAIb,YAAA,EAAoB,MAAA,CAAO,cAAP,EAAuB,GAAvB,EAA4B,CAAC,OAAD,EAAU,MAAV,CAA5B,CAJP;AAAA,IAKb,WAAA,EAAoB,MAAA,CAAO,aAAP,EAAsB,KAAtB,EAA6B,GAA7B,EAAkC,CAAC,WAAD,EAAc,OAAd,EAAuB,MAAvB,CAAlC,CALP;AAAA,IAMb,mBAAA,EAAoB,MAAA,CAAO,qBAAP,EAA8B,KAA9B,EAAqC,GAArC,EAA0C,CAAC,mBAAD,EAAsB,OAAtB,EAA+B,MAA/B,CAA1C,CANP;AAAA,IAOb,IAAA,EAAoB,MAAA,CAAO,MAAP,EAAe,KAAf,EAAsB,CAAC,OAAD,EAAU,YAAV,CAAtB,EAA8C,CAAC,MAAD,EAAS,SAAT,CAA9C,CAPP;AAAA,IAQb,UAAA,EAAoB,MAAA,CAAO,YAAP,EAAqB,GAArB,EAA0B,CAAC,OAAD,EAAU,YAAV,CAA1B,EAAkD,CAAC,SAAD,CAAlD,CARP;AAAA,IASb,YAAA,EAAoB,MAAA,CAAO,cAAP,EAAuB,GAAvB,EAA4B,CAAC,OAAD,EAAU,YAAV,CAA5B,EAAoD,CAAC,SAAD,CAApD,CATP;AAAA,IAUb,MAAA,EAAoB,MAAA,CAAO,QAAP,EAAiB,KAAjB,EAAwB,CAAC,OAAD,EAAU,YAAV,CAAxB,EAAgD,CAAC,MAAD,EAAS,SAAT,CAAhD,CAVP;AAAA,IAWb,aAAA,EAAoB,MAAA,CAAO,eAAP,EAAwB,GAAxB,EAA6B,CAAC,OAAD,EAAU,YAAV,CAA7B,EAAqD,CAAC,SAAD,CAArD,CAXP;AAAA,IAYb,eAAA,EAAoB,MAAA,CAAO,iBAAP,EAA0B,GAA1B,EAA+B,CAAC,OAAD,EAAU,YAAV,CAA/B,EAAuD,CAAC,SAAD,CAAvD,CAZP;AAAA,IAab,SAAA,EAAoB,MAAA,CAAO,WAAP,EAAoB,KAApB,EAA0B,EAA1B,EAA6B,CAAC,SAAD,CAA7B,CAbP;AAAA,IAcb,iBAAA,EAAoB,MAAA,CAAO,mBAAP,EAA4B,KAA5B,EAAkC,EAAlC,EAAqC,CAAC,SAAD,CAArC,CAdP;AAAA,IAeb,SAAA,EAAoB,MAAA,CAAO,WAAP,EAAoB,KAApB,EAA0B,EAA1B,EAA6B,CAAC,MAAD,EAAQ,SAAR,CAA7B,CAfP;AAAA,IAgBb,WAAA,EAAoB,MAAA,CAAO,aAAP,EAAsB,KAAtB,EAA4B,EAA5B,EAA+B,CAAC,MAAD,EAAQ,SAAR,CAA/B,CAhBP;AAAA,IAiBb,SAAA,EAAoB,MAAA,CAAO,WAAP,EAAoB,KAApB,EAA0B,EAA1B,EAA6B,CAAC,MAAD,EAAQ,SAAR,CAA7B,CAjBP;AAAA,IAkBb,GAAA,EAAoB,MAAA,CAAO,KAAP,EAAc,KAAd,EAAoB,CAAC,KAAD,CAApB,EAA4B,CAAC,MAAD,EAAQ,SAAR,CAA5B,CAlBP;AAAA,IAmBb,MAAA,EAAoB,MAAA,CAAO,QAAP,EAAiB,KAAjB,EAAuB,EAAvB,EAA0B,CAAC,SAAD,CAA1B,CAnBP;AAAA,IAoBb,MAAA,EAAoB,MAAA,CAAO,QAAP,EAAiB,KAAjB,EAAuB,EAAvB,EAA0B,CAAC,SAAD,EAAY,KAAZ,CAA1B,CApBP;AAAA,IAqBb,OAAA,EAAoB,MAAA,CAAO,SAAP,EAAkB,KAAlB,EAAwB,EAAxB,EAA2B,CAAC,SAAD,EAAY,KAAZ,CAA3B,CArBP;AAAA,IAsBb,MAAA,EAAoB,MAAA,CAAO,SAAP,EAAiB,KAAjB,EAAuB,CAAC,OAAD,EAAS,UAAT,CAAvB,EAA4C,CAAC,SAAD,CAA5C,CAtBP;GAlOf,CAAA;AAAA,EA6PA,IAAI,CAAC,SAAL,GAAiB;AAAA,IACf,CAAA,EAAG,GAAA,CAAI,GAAJ,EAAS,CAAC,QAAD,EAAW,IAAX,EAAiB,YAAjB,CAAT,EAAyC,CAAC,IAAD,EAAO,KAAP,EAAc,OAAd,CAAzC,CADY;AAAA,IAEf,OAAA,EAAS,GAAA,CAAI,OAAJ,EAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,YAAjB,CAAb,EAA6C,CAAC,IAAD,EAAO,KAAP,EAAc,OAAd,CAA7C,CAFM;AAAA,IAGf,CAAA,EAAG,GAAA,CAAI,GAAJ,EAAS,CAAC,QAAD,EAAW,IAAX,EAAiB,YAAjB,CAAT,EAAwC,CAAC,IAAD,EAAO,KAAP,EAAc,OAAd,CAAxC,CAHY;AAAA,IAIf,SAAA,EAAW,GAAA,CAAI,SAAJ,EAAe,CAAC,QAAD,EAAW,IAAX,EAAiB,YAAjB,CAAf,EAA8C,CAAC,IAAD,EAAO,KAAP,EAAc,OAAd,CAA9C,CAJI;AAAA,IAKf,KAAA,EAAO,GAAA,CAAI,OAAJ,EAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,WAAjB,CAAb,EAA2C,CAAC,MAAD,EAAS,YAAT,CAA3C,CALQ;AAAA,IAMf,IAAA,EAAM,GAAA,CAAI,MAAJ,EAAY,CAAC,QAAD,EAAW,IAAX,CAAZ,EAA6B,CAAC,MAAD,EAAS,YAAT,CAA7B,CANS;AAAA,IAOf,KAAA,EAAO,GAAA,CAAI,OAAJ,EAAa,CAAC,QAAD,EAAW,IAAX,CAAb,EAA8B,CAAC,MAAD,EAAS,YAAT,CAA9B,CAPQ;GA7PjB,CAAA;AAyQA,SAAO,IAAP,CA7Q+C;AAAA,CAAjD,CAFA,CAAA","file":"wk-charts.js","sourcesContent":["\r\n###*\r\n  @ngdoc module\r\n  @name wk.chart\r\n  @module wk.chart\r\n  @description\r\n  wk-charts module - beautiful charts defined through HTML markup, based on AngularJs\r\n  -----------------------------------------------------------------------------------\r\n\r\n  ** wide range of charts\r\n  ** nicely animated\r\n  ** implemented as AngularJs Directives  -> defined as markup\r\n  ** Angular data binding for data an chart attributes\r\n###\r\nangular.module('wk.chart', [])\r\n\r\n\r\n\r\n###*\r\n   lists the ordinal scale objects,\r\n ###\r\nangular.module('wk.chart').constant 'd3OrdinalScales', [\r\n    'ordinal'\r\n    'category10'\r\n    'category20'\r\n    'category20b'\r\n    'category20c'\r\n]\r\n\r\n###*\r\n  Sets the default margins and paddings for the chart layout\r\n###\r\nangular.module('wk.chart').constant 'wkChartMargins', {\r\n  top: 10\r\n  left: 50\r\n  bottom: 40\r\n  right: 20\r\n  topBottomMargin:{axis:25, label:18}\r\n  leftRightMargin:{axis:40, label:20}\r\n  minMargin:8\r\n  default:\r\n    top: 8\r\n    left:8\r\n    bottom:8\r\n    right:10\r\n  axis:\r\n    top:25\r\n    bottom:25\r\n    left:40\r\n    right:40\r\n  label:\r\n    top:18\r\n    bottom:18\r\n    left:20\r\n    right:20\r\n  dataLabelPadding: {\r\n    hor:5\r\n    vert:5\r\n  }\r\n}\r\n\r\nangular.module('wk.chart').constant 'd3Shapes', [\r\n  'circle',\r\n  'cross',\r\n  'triangle-down',\r\n  'triangle-up',\r\n  'square',\r\n  'diamond'\r\n]\r\n\r\nangular.module('wk.chart').constant 'axisConfig', {\r\n  labelFontSize: '1.6em'\r\n  x:\r\n    axisPositions: ['top', 'bottom']\r\n    axisOffset: {bottom:'height'}\r\n    axisPositionDefault: 'bottom'\r\n    direction: 'horizontal'\r\n    measure: 'width'\r\n    labelPositions:['outside', 'inside']\r\n    labelPositionDefault: 'outside'\r\n    labelOffset:\r\n      top: '1em'\r\n      bottom: '-0.8em'\r\n  y:\r\n    axisPositions: ['left', 'right']\r\n    axisOffset: {right:'width'}\r\n    axisPositionDefault: 'left'\r\n    direction: 'vertical'\r\n    measure: 'height'\r\n    labelPositions:['outside', 'inside']\r\n    labelPositionDefault: 'outside'\r\n    labelOffset:\r\n      left: '1.2em'\r\n      right: '1.2em'\r\n}\r\n\r\nangular.module('wk.chart').constant 'd3Animation', {\r\n  duration:300\r\n}\r\n\r\nangular.module('wk.chart').constant 'maxTicks', 200\r\n\r\nangular.module('wk.chart').constant 'templateDir', 'templates/'\r\n\r\nangular.module('wk.chart').constant 'formatDefaults', {\r\n  date: '%x' # '%d.%m.%Y'\r\n  number :  ',.2f'\r\n}\r\n\r\nangular.module('wk.chart').constant 'barConfig', {\r\n  padding: 0.1\r\n  outerPadding: 0\r\n}\r\n\r\n","// Copyright (c) 2013, Jason Davies, http://www.jasondavies.com\r\n// See LICENSE.txt for details.\r\n(function() {\r\n\r\nvar radians = Math.PI / 180,\r\n    degrees = 180 / Math.PI;\r\n\r\n// TODO make incremental rotate optional\r\n\r\nd3.geo.zoom = function() {\r\n  var projection,\r\n      zoomPoint,\r\n      event = d3.dispatch(\"zoomstart\", \"zoom\", \"zoomend\"),\r\n      zoom = d3.behavior.zoom()\r\n        .on(\"zoomstart\", function() {\r\n          var mouse0 = d3.mouse(this),\r\n              rotate = quaternionFromEuler(projection.rotate()),\r\n              point = position(projection, mouse0);\r\n          if (point) zoomPoint = point;\r\n\r\n          zoomOn.call(zoom, \"zoom\", function() {\r\n                projection.scale(d3.event.scale);\r\n                var mouse1 = d3.mouse(this),\r\n                    between = rotateBetween(zoomPoint, position(projection, mouse1));\r\n                projection.rotate(eulerFromQuaternion(rotate = between\r\n                    ? multiply(rotate, between)\r\n                    : multiply(bank(projection, mouse0, mouse1), rotate)));\r\n                mouse0 = mouse1;\r\n                event.zoom.apply(this, arguments);\r\n              });\r\n          event.zoomstart.apply(this, arguments);\r\n        })\r\n        .on(\"zoomend\", function() {\r\n          zoomOn.call(zoom, \"zoom\", null);\r\n          event.zoomend.apply(this, arguments);\r\n        }),\r\n      zoomOn = zoom.on;\r\n\r\n  zoom.projection = function(_) {\r\n    return arguments.length ? zoom.scale((projection = _).scale()) : projection;\r\n  };\r\n\r\n  return d3.rebind(zoom, event, \"on\");\r\n};\r\n\r\nfunction bank(projection, p0, p1) {\r\n  var t = projection.translate(),\r\n      angle = Math.atan2(p0[1] - t[1], p0[0] - t[0]) - Math.atan2(p1[1] - t[1], p1[0] - t[0]);\r\n  return [Math.cos(angle / 2), 0, 0, Math.sin(angle / 2)];\r\n}\r\n\r\nfunction position(projection, point) {\r\n  var t = projection.translate(),\r\n      spherical = projection.invert(point);\r\n  return spherical && isFinite(spherical[0]) && isFinite(spherical[1]) && cartesian(spherical);\r\n}\r\n\r\nfunction quaternionFromEuler(euler) {\r\n  var λ = .5 * euler[0] * radians,\r\n      φ = .5 * euler[1] * radians,\r\n      γ = .5 * euler[2] * radians,\r\n      sinλ = Math.sin(λ), cosλ = Math.cos(λ),\r\n      sinφ = Math.sin(φ), cosφ = Math.cos(φ),\r\n      sinγ = Math.sin(γ), cosγ = Math.cos(γ);\r\n  return [\r\n    cosλ * cosφ * cosγ + sinλ * sinφ * sinγ,\r\n    sinλ * cosφ * cosγ - cosλ * sinφ * sinγ,\r\n    cosλ * sinφ * cosγ + sinλ * cosφ * sinγ,\r\n    cosλ * cosφ * sinγ - sinλ * sinφ * cosγ\r\n  ];\r\n}\r\n\r\nfunction multiply(a, b) {\r\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\r\n      b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  return [\r\n    a0 * b0 - a1 * b1 - a2 * b2 - a3 * b3,\r\n    a0 * b1 + a1 * b0 + a2 * b3 - a3 * b2,\r\n    a0 * b2 - a1 * b3 + a2 * b0 + a3 * b1,\r\n    a0 * b3 + a1 * b2 - a2 * b1 + a3 * b0\r\n  ];\r\n}\r\n\r\nfunction rotateBetween(a, b) {\r\n  if (!a || !b) return;\r\n  var axis = cross(a, b),\r\n      norm = Math.sqrt(dot(axis, axis)),\r\n      halfγ = .5 * Math.acos(Math.max(-1, Math.min(1, dot(a, b)))),\r\n      k = Math.sin(halfγ) / norm;\r\n  return norm && [Math.cos(halfγ), axis[2] * k, -axis[1] * k, axis[0] * k];\r\n}\r\n\r\nfunction eulerFromQuaternion(q) {\r\n  return [\r\n    Math.atan2(2 * (q[0] * q[1] + q[2] * q[3]), 1 - 2 * (q[1] * q[1] + q[2] * q[2])) * degrees,\r\n    Math.asin(Math.max(-1, Math.min(1, 2 * (q[0] * q[2] - q[3] * q[1])))) * degrees,\r\n    Math.atan2(2 * (q[0] * q[3] + q[1] * q[2]), 1 - 2 * (q[2] * q[2] + q[3] * q[3])) * degrees\r\n  ];\r\n}\r\n\r\nfunction cartesian(spherical) {\r\n  var λ = spherical[0] * radians,\r\n      φ = spherical[1] * radians,\r\n      cosφ = Math.cos(φ);\r\n  return [\r\n    cosφ * Math.cos(λ),\r\n    cosφ * Math.sin(λ),\r\n    Math.sin(φ)\r\n  ];\r\n}\r\n\r\nfunction dot(a, b) {\r\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\r\n  return s;\r\n}\r\n\r\nfunction cross(a, b) {\r\n  return [\r\n    a[1] * b[2] - a[2] * b[1],\r\n    a[2] * b[0] - a[0] * b[2],\r\n    a[0] * b[1] - a[1] * b[0]\r\n  ];\r\n}\r\n\r\n})();\r\n","###*\r\n  @ngdoc behavior\r\n  @name brush\r\n  @module wk.chart\r\n  @restrict A\r\n  @element x, y or layout\r\n  @description\r\n\r\n  enable brushing behavior\r\n###\r\n\r\n###*\r\n  @ngdoc attr\r\n  @name brush#brush\r\n  @values none\r\n  @param brush {string} Brush name\r\n  Brush will be published under this name for consumption by other layouts\r\n###\r\nangular.module('wk.chart').directive 'brush', ($log, selectionSharing, behavior) ->\r\n  brushId = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: ['^chart', '^?layout', '?x', '?y']\r\n    scope:\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#brushExtent\r\n        @param brushExtent {array} Contains the data array index of the start and end item of teh brush area. Updates when brush is moved and can be set to position the brush. An empty array ´[]´ resets the brush to empty.\r\n      ###\r\n      brushExtent: '='\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#selectedValues\r\n        @param selectedValues {array} Contains array of the axis values of the selected the brush  area. Is undefined if brush is empty or is xy (layout) brushes\r\n      ###\r\n      selectedValues: '='\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#selectedDomain\r\n        @param selectedDomain {array} Contains an array of data objects for the selected brush area.\r\n      ###\r\n      selectedDomain: '='\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#selectedDomainChange\r\n        @param selectedDomainChange {expression} expression to evaluate upon a change of the brushes selected domain. The selected domain is available as ´domain´\r\n      ###\r\n      selectedDomainChange: '&'\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#brushStart\r\n        @param brushStart {expression} expression to evaluate upon a start of brushing. Is fired on 'mousedown'.\r\n      ###\r\n      brushStart: '&'\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name brush#brushEnd\r\n        @param brushEnd {expression} expression to evaluate upon a end of brushing. is fired on 'mouseup'. The selected domain is available as ´domain´\r\n      ###\r\n      brushEnd: '&'\r\n\r\n    link:(scope, element, attrs, controllers) ->\r\n      $log.log 'brush-scope', scope.$id\r\n      _id = brushId++\r\n      chart = controllers[0].me\r\n      layout = controllers[1]?.me\r\n      x = controllers[2]?.me\r\n      y = controllers[3]?.me\r\n      xScale = undefined\r\n      yScale = undefined\r\n      _selectables = undefined\r\n      _brushAreaSelection = undefined\r\n      _isAreaBrush = not x and not y\r\n      _brushGroup = undefined\r\n\r\n      $log.log 'creating brush scope', scope.$id\r\n\r\n      brush = chart.behavior().brush\r\n\r\n      host = chart or layout\r\n\r\n      if not x and not y\r\n        #layout brush, get x and y from layout scales\r\n        scales = host.scales().getScales(['x', 'y'])\r\n        brush.x(scales.x)\r\n        brush.y(scales.y)\r\n      else\r\n        brush.x(x)\r\n        brush.y(y)\r\n      brush.active(true)\r\n\r\n      attrs.$observe \"brush\", (val) ->\r\n        if _.isString(val) and val.length > 0\r\n          brush.brushGroup(val)\r\n        else\r\n          brush.brushGroup(undefined)\r\n\r\n      scope.$watch 'brushExtent', (newVal, oldVal) ->\r\n        if _.isArray(newVal) and newVal.length is 0 and _.isArray(oldVal) and oldVal.length isnt 0\r\n          brush.clearBrush()\r\n\r\n      brush.events().on \"brushStart.#{_id}\", () ->\r\n        if attrs.brushStart\r\n          scope.brushStart()\r\n          scope.$apply()\r\n\r\n      brush.events().on \"brush.#{_id}\", (idxRange, valueRange, domain) ->\r\n        if attrs.brushExtent\r\n          scope.brushExtent = idxRange\r\n        if attrs.selectedValues\r\n          scope.selectedValues = valueRange\r\n        if attrs.selectedDomain\r\n          scope.selectedDomain = domain\r\n        scope.selectedDomainChange({domain:domain})\r\n        scope.$apply()\r\n\r\n      brush.events().on \"brushEnd.#{_id}\", (idxRange, valueRange, domain) ->\r\n        if attrs.brushEnd\r\n          scope.brushEnd({domain:domain})\r\n          scope.$apply()\r\n\r\n      chart.lifeCycle().on 'drawChart.brush', (data) ->\r\n        brush.data(data)\r\n\r\n      host.lifeCycle().on 'destroy.brush', () ->\r\n        #scope.$apply()\r\n        brush.events().on \".#{_id}\", null #deregister handlers\r\n        chart.lifeCycle().on \".#{_id}\", null\r\n        scope.$destroy()\r\n        $log.log 'destroying brush scope', scope.$id\r\n\r\n  }","/**\r\n * innerHTML property for SVGElement\r\n * Copyright(c) 2010, Jeff Schiller\r\n *\r\n * Licensed under the Apache License, Version 2\r\n *\r\n * Works in a SVG document in Chrome 6+, Safari 5+, Firefox 4+ and IE9+.\r\n * Works in a HTML5 document in Chrome 7+, Firefox 4+ and IE9+.\r\n * Does not work in Opera since it doesn't support the SVGElement interface yet.\r\n *\r\n * I haven't decided on the best name for this property - thus the duplication.\r\n */\r\n\r\n(function() {\r\n    var serializeXML = function(node, output) {\r\n        var nodeType = node.nodeType;\r\n        if (nodeType == 3) { // TEXT nodes.\r\n            // Replace special XML characters with their entities.\r\n            output.push(node.textContent.replace(/&/, '&amp;').replace(/</, '&lt;').replace('>', '&gt;'));\r\n        } else if (nodeType == 1) { // ELEMENT nodes.\r\n            // Serialize Element nodes.\r\n            output.push('<', node.tagName);\r\n            if (node.hasAttributes()) {\r\n                var attrMap = node.attributes;\r\n                for (var i = 0, len = attrMap.length; i < len; ++i) {\r\n                    var attrNode = attrMap.item(i);\r\n                    output.push(' ', attrNode.name, '=\\'', attrNode.value, '\\'');\r\n                }\r\n            }\r\n            if (node.hasChildNodes()) {\r\n                output.push('>');\r\n                var childNodes = node.childNodes;\r\n                for (var i = 0, len = childNodes.length; i < len; ++i) {\r\n                    serializeXML(childNodes.item(i), output);\r\n                }\r\n                output.push('</', node.tagName, '>');\r\n            } else {\r\n                output.push('/>');\r\n            }\r\n        } else if (nodeType == 8) {\r\n            // TODO(codedread): Replace special characters with XML entities?\r\n            output.push('<!--', node.nodeValue, '-->');\r\n        } else {\r\n            // TODO: Handle CDATA nodes.\r\n            // TODO: Handle ENTITY nodes.\r\n            // TODO: Handle DOCUMENT nodes.\r\n            throw 'Error serializing XML. Unhandled node of type: ' + nodeType;\r\n        }\r\n    }\r\n// The innerHTML DOM property for SVGElement.\r\n    Object.defineProperty(SVGElement.prototype, 'innerHTML', {\r\n        get: function() {\r\n            var output = [];\r\n            var childNode = this.firstChild;\r\n            while (childNode) {\r\n                serializeXML(childNode, output);\r\n                childNode = childNode.nextSibling;\r\n            }\r\n            return output.join('');\r\n        },\r\n        set: function(markupText) {\r\n            // Wipe out the current contents of the element.\r\n            while (this.firstChild) {\r\n                this.removeChild(this.firstChild);\r\n            }\r\n\r\n            try {\r\n                // Parse the markup into valid nodes.\r\n                var dXML = new DOMParser();\r\n                dXML.async = false;\r\n                // Wrap the markup into a SVG node to ensure parsing works.\r\n                sXML = '<svg xmlns=\\'http://www.w3.org/2000/svg\\'>' + markupText + '</svg>';\r\n                var svgDocElement = dXML.parseFromString(sXML, 'text/xml').documentElement;\r\n\r\n                // Now take each node, import it and append to this element.\r\n                var childNode = svgDocElement.firstChild;\r\n                while(childNode) {\r\n                    this.appendChild(this.ownerDocument.importNode(childNode, true));\r\n                    childNode = childNode.nextSibling;\r\n                }\r\n            } catch(e) {\r\n                throw new Error('Error parsing XML string');\r\n            };\r\n        }\r\n    });\r\n\r\n// The innerSVG DOM property for SVGElement.\r\n    Object.defineProperty(SVGElement.prototype, 'innerSVG', {\r\n        get: function() {\r\n            return this.innerHTML;\r\n        },\r\n        set: function(markupText) {\r\n            this.innerHTML = markupText;\r\n        }\r\n    });\r\n\r\n})();\r\n\r\n","###*\r\n  @ngdoc behavior\r\n  @name brushed\r\n  @module wk.chart\r\n  @restrict A\r\n  @description\r\n\r\n  enables an axis to be scaled by a named brush in a different layout\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'brushed', ($log,selectionSharing, timing) ->\r\n  sBrushedCnt = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: ['^chart', '?^layout', '?x', '?y', '?rangeX', '?rangeY']\r\n    link: (scope, element, attrs, controllers) ->\r\n      $log.log 'brushed-scope', scope.$id\r\n      _id = sBrushedCnt++\r\n      chart = controllers[0].me\r\n      layout = controllers[1]?.me\r\n      x = controllers[2]?.me\r\n      y = controllers[3]?.me\r\n      rangeX = controllers[4]?.me\r\n      rangeY = controllers[5]?.me\r\n\r\n      axis = x or y or rangeX or rangeY\r\n      _brushGroup = undefined\r\n\r\n      brusher = (extent, idxRange) ->\r\n        #timing.start(\"brusher#{axis.id()}\")\r\n        if not axis then return\r\n        #axis\r\n        if extent.length > 0\r\n          axis.domain(extent).scale().domain(extent)\r\n        else\r\n          # reset domain to initial state\r\n          axis.domain(undefined)\r\n          axis.scale().domain(axis.getDomain(chart.getData()))\r\n          if axis.isOrdinal()\r\n            idxRange = [0, axis.scale().domain().length - 1]\r\n\r\n        for l in chart.layouts() when l.scales().getKind(axis.kind()).id() is axis.id()  #need to do it this way to ensure the right axis is chosen in case of several layouts w. different axis  in a container\r\n          l.lifeCycle().brush(axis, true, idxRange) #no animation\r\n        #timing.stop(\"brusher#{axis.id()}\")\r\n\r\n      attrs.$observe 'brushed', (val) ->\r\n        if _.isString(val) and val.length > 0\r\n          _brushGroup = val\r\n          selectionSharing.register _brushGroup, brusher\r\n        else\r\n          _brushGroup = undefined\r\n\r\n      chart.lifeCycle().on \"destroy.#{_id}\", () ->\r\n        selectionSharing.unregister _brushGroup, brusher\r\n        chart.lifeCycle().on \".#{_id}\", null\r\n\r\n  }","/**\r\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\r\n * directory of this distribution and at\r\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\r\n */\r\n\r\n(function() {\r\n    /**\r\n     * Class for dimension change detection.\r\n     *\r\n     * @param {Element|Element[]|Elements|jQuery} element\r\n     * @param {Function} callback\r\n     *\r\n     * @constructor\r\n     */\r\n    this.ResizeSensor = function(element, callback) {\r\n        /**\r\n         *\r\n         * @constructor\r\n         */\r\n        function EventQueue() {\r\n            this.q = [];\r\n            this.add = function(ev) {\r\n                this.q.push(ev);\r\n            };\r\n            var i, j;\r\n            this.call = function() {\r\n                for (i = 0, j = this.q.length; i < j; i++) {\r\n                    this.q[i].call();\r\n                }\r\n            };\r\n        }\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @param {String} prop\r\n         * @returns {String|Number}\r\n         */\r\n        function getComputedStyle(element, prop) {\r\n            if (element.currentStyle) {\r\n                return element.currentStyle[prop];\r\n            } else if (window.getComputedStyle) {\r\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\r\n            } else {\r\n                return element.style[prop];\r\n            }\r\n        }\r\n        /**\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} resized\r\n         */\r\n        function attachResizeEvent(element, resized) {\r\n            if (!element.resizedAttached) {\r\n                element.resizedAttached = new EventQueue();\r\n                element.resizedAttached.add(resized);\r\n            } else if (element.resizedAttached) {\r\n                element.resizedAttached.add(resized);\r\n                return;\r\n            }\r\n            element.resizeSensor = document.createElement('div');\r\n            element.resizeSensor.className = 'wk-chart-resize-sensor';\r\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;';\r\n            var styleChild = 'position: absolute; left: 0; top: 0;';\r\n            element.resizeSensor.style.cssText = style;\r\n            element.resizeSensor.innerHTML =\r\n                '<div class=\"wk-chart-resize-sensor-expand\" style=\"' + style + '\">' +\r\n                '<div style=\"' + styleChild + '\"></div>' +\r\n                '</div>' +\r\n                '<div class=\"wk-chart-resize-sensor-shrink\" style=\"' + style + '\">' +\r\n                '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\r\n                '</div>';\r\n            element.appendChild(element.resizeSensor);\r\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\r\n                element.style.position = 'relative';\r\n            }\r\n            var expand = element.resizeSensor.childNodes[0];\r\n            var expandChild = expand.childNodes[0];\r\n            var shrink = element.resizeSensor.childNodes[1];\r\n            var shrinkChild = shrink.childNodes[0];\r\n            var lastWidth, lastHeight;\r\n            var reset = function() {\r\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\r\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\r\n                expand.scrollLeft = expand.scrollWidth;\r\n                expand.scrollTop = expand.scrollHeight;\r\n                shrink.scrollLeft = shrink.scrollWidth;\r\n                shrink.scrollTop = shrink.scrollHeight;\r\n                lastWidth = element.offsetWidth;\r\n                lastHeight = element.offsetHeight;\r\n            };\r\n            reset();\r\n            var changed = function() {\r\n                element.resizedAttached.call();\r\n            };\r\n            var addEvent = function(el, name, cb) {\r\n                if (el.attachEvent) {\r\n                    el.attachEvent('on' + name, cb);\r\n                } else {\r\n                    el.addEventListener(name, cb);\r\n                }\r\n            };\r\n            addEvent(expand, 'scroll', function() {\r\n                if (element.offsetWidth > lastWidth || element.offsetHeight > lastHeight) {\r\n                    changed();\r\n                }\r\n                reset();\r\n            });\r\n            addEvent(shrink, 'scroll',function() {\r\n                if (element.offsetWidth < lastWidth || element.offsetHeight < lastHeight) {\r\n                    changed();\r\n                }\r\n                reset();\r\n            });\r\n        }\r\n        if (\"[object Array]\" === Object.prototype.toString.call(element)\r\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\r\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\r\n            ) {\r\n            var i = 0, j = element.length;\r\n            for (; i < j; i++) {\r\n                attachResizeEvent(element[i], callback);\r\n            }\r\n        } else {\r\n            attachResizeEvent(element, callback);\r\n        }\r\n    }\r\n})()",null,"###*\r\n  @ngdoc container\r\n  @name chart\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  chart is the container directive for all charts.\r\n  @param {array} data - Data to be graphed, {@link guide/data ...more}\r\n  @param {boolean} [deep-watch=false]\r\n  @param {string} [filter] - filters the data using the angular filter function\r\n  @param {string} [header] - The chart title\r\n  @param {object} [headerStyle=font-size:\"1.8em\"]\r\n  @param {string} [subHeader] - The chart subtitle\r\n  @param {object} [subHeaderStyle=font-size:\"1.3em\"]\r\n  @param {boolean} [edit=false] - sets chart to edit mode if true\r\n  @param {function} [edit-selection] - called when and editable chart element is clicked in edit mode.\r\n  @param {number} [animation-duration=300] - animation duration in milliseconds\r\n###\r\nangular.module('wk.chart').directive 'chart', ($log, chart, $filter) ->\r\n  chartCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: 'chart'\r\n    scope:\r\n      data: '='\r\n      filter: '='\r\n      #editSelected: '&'\r\n    controller: ($scope) ->\r\n      this.me = chart()\r\n      this.me.scope($scope)\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      $log.log 'chart-scope', scope.$id\r\n      me = controller.me\r\n\r\n      deepWatch = false\r\n      watcherRemoveFn = undefined\r\n      element.addClass(me.id())\r\n\r\n      _data = undefined\r\n      _filter = undefined\r\n\r\n      me.container().element(element[0])\r\n\r\n      me.lifeCycle().configure()\r\n\r\n      me.lifeCycle().on 'scopeApply.chart', () ->\r\n        scope.$apply()\r\n\r\n      me.lifeCycle().on 'editSelected.chart', (selection, object) ->\r\n        if attr.editSelected\r\n          #scope.editSelected({selected:selection, object:object})\r\n          scope.$apply()\r\n\r\n      attrs.$observe 'animationDuration', (val) ->\r\n        if val and _.isNumber(+val) and +val >= 0\r\n          me.animationDuration(val)\r\n\r\n      attrs.$observe 'header', (val) ->\r\n        if val\r\n          me.title(val)\r\n        else\r\n          me.title(undefined)\r\n\r\n      attrs.$observe 'headerStyle', (val) ->\r\n        if val\r\n          me.titleStyle(scope.$eval(val))\r\n\r\n      attrs.$observe 'subHeader', (val) ->\r\n        if val\r\n          me.subTitle(val)\r\n        else\r\n          me.subTitle(undefined)\r\n\r\n      attrs.$observe 'subHeaderStyle', (val) ->\r\n        if val\r\n          me.subTitleStyle(scope.$eval(val))\r\n\r\n      attrs.$observe 'backgroundStyle', (val) ->\r\n        if val\r\n          me.backgroundStyle(scope.$eval(val))\r\n\r\n      scope.$watch 'filter', (val) ->\r\n        if val\r\n          _filter = val # scope.$eval(val)\r\n          if _data\r\n            me.lifeCycle().newData($filter('filter')(_data, _filter))\r\n        else\r\n          _filter = undefined\r\n          if _data\r\n            me.lifeCycle().newData(_data)\r\n\r\n      attrs.$observe 'deepWatch', (val) ->\r\n        if val isnt undefined and val isnt 'false'\r\n          deepWatch = true\r\n        else\r\n          deepWatch = false\r\n        if watcherRemoveFn\r\n          watcherRemoveFn()\r\n        watcherRemoveFn = scope.$watch 'data', dataWatchFn, deepWatch\r\n\r\n      attrs.$observe 'edit', (val) ->\r\n        if val is '' or val is 'true'\r\n          me.editMode(true)\r\n        else\r\n          me.editMode(false)\r\n\r\n      dataWatchFn = (val) ->\r\n        if val\r\n          _data = val\r\n          if _.isArray(_data) and _data.length is 0 then return\r\n          if _filter\r\n            me.lifeCycle().newData($filter('filter')(val, _filter))\r\n          else\r\n            me.lifeCycle().newData(val)\r\n\r\n      watcherRemoveFn = scope.$watch 'data', dataWatchFn, deepWatch\r\n\r\n      # cleanup when destroyed\r\n\r\n      element.on '$destroy', () ->\r\n        if watcherRemoveFn\r\n          watcherRemoveFn()\r\n        me.lifeCycle().on '.chart', null\r\n        me.container().element(undefined)\r\n        $log.log 'Destroying chart'\r\n        me.lifeCycle().destroy()\r\n        scope.$destroy()\r\n  }","(function() {\r\n    var out$ = typeof exports != 'undefined' && exports || this;\r\n\r\n    var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\r\n\r\n    function inlineImages(callback) {\r\n        var images = document.querySelectorAll('svg image');\r\n        var left = images.length;\r\n        if (left == 0) {\r\n            callback();\r\n        }\r\n        for (var i = 0; i < images.length; i++) {\r\n            (function(image) {\r\n                if (image.getAttribute('xlink:href')) {\r\n                    var href = image.getAttribute('xlink:href').value;\r\n                    if (/^http/.test(href) && !(new RegExp('^' + window.location.host).test(href))) {\r\n                        throw new Error(\"Cannot render embedded images linking to external hosts.\");\r\n                    }\r\n                }\r\n                var canvas = document.createElement('canvas');\r\n                var ctx = canvas.getContext('2d');\r\n                var img = new Image();\r\n                img.src = image.getAttribute('xlink:href');\r\n                img.onload = function() {\r\n                    canvas.width = img.width;\r\n                    canvas.height = img.height;\r\n                    ctx.drawImage(img, 0, 0);\r\n                    image.setAttribute('xlink:href', canvas.toDataURL('image/png'));\r\n                    left--;\r\n                    if (left == 0) {\r\n                        callback();\r\n                    }\r\n                }\r\n            })(images[i]);\r\n        }\r\n    }\r\n\r\n    function styles(dom) {\r\n        var css = \"\";\r\n        var sheets = document.styleSheets;\r\n        for (var i = 0; i < sheets.length; i++) {\r\n            var rules = sheets[i].cssRules;\r\n            if (rules != null) {\r\n                for (var j = 0; j < rules.length; j++) {\r\n                    var rule = rules[j];\r\n                    if (typeof(rule.style) != \"undefined\") {\r\n                        css += rule.selectorText + \" { \" + rule.style.cssText + \" }\\n\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var s = document.createElement('style');\r\n        s.setAttribute('type', 'text/css');\r\n        s.innerHTML = \"<![CDATA[\\n\" + css + \"\\n]]>\";\r\n\r\n        var defs = document.createElement('defs');\r\n        defs.appendChild(s);\r\n        return defs;\r\n    }\r\n\r\n    out$.svgAsDataUri = function(el, scaleFactor, cb) {\r\n        scaleFactor = scaleFactor || 1;\r\n\r\n        inlineImages(function() {\r\n            var outer = document.createElement(\"div\");\r\n            var clone = el.cloneNode(true);\r\n            var width = parseInt(\r\n                clone.getAttribute('width')\r\n                || clone.style.width\r\n                || out$.getComputedStyle(el).getPropertyValue('width')\r\n            );\r\n            var height = parseInt(\r\n                clone.getAttribute('height')\r\n                || clone.style.height\r\n                || out$.getComputedStyle(el).getPropertyValue('height')\r\n            );\r\n\r\n            var xmlns = \"http://www.w3.org/2000/xmlns/\";\r\n\r\n            clone.setAttribute(\"version\", \"1.1\");\r\n            clone.setAttributeNS(xmlns, \"xmlns\", \"http://www.w3.org/2000/svg\");\r\n            clone.setAttributeNS(xmlns, \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\r\n            clone.setAttribute(\"width\", width * scaleFactor);\r\n            clone.setAttribute(\"height\", height * scaleFactor);\r\n            clone.setAttribute(\"viewBox\", \"0 0 \" + width + \" \" + height);\r\n            outer.appendChild(clone);\r\n\r\n            clone.insertBefore(styles(clone), clone.firstChild);\r\n\r\n            var svg = doctype + outer.innerHTML;\r\n            var uri = 'data:image/svg+xml;base64,' + window.btoa(unescape(encodeURIComponent(svg)));\r\n            if (cb) {\r\n                cb(uri);\r\n            }\r\n        });\r\n    }\r\n\r\n    out$.saveSvgAsPng = function(el, name, scaleFactor) {\r\n        out$.svgAsDataUri(el, scaleFactor, function(uri) {\r\n            var image = new Image();\r\n            image.src = uri;\r\n            image.onload = function() {\r\n                var canvas = document.createElement('canvas');\r\n                canvas.width = image.width;\r\n                canvas.height = image.height;\r\n                var context = canvas.getContext('2d');\r\n                context.drawImage(image, 0, 0);\r\n\r\n                var a = document.createElement('a');\r\n                a.download = name;\r\n                a.href = canvas.toDataURL('image/png');\r\n                document.body.appendChild(a);\r\n                a.click();\r\n            }\r\n        });\r\n    }\r\n})();","###*\r\n  @ngdoc container\r\n  @name layout\r\n  @module wk.chart\r\n  @restrict E\r\n  @requires chart\r\n  @description\r\n\r\n  Layout is the container for the layout directives. It requires chart as a parent.\r\n###\r\nangular.module('wk.chart').directive 'layout', ($log, layout, container) ->\r\n  layoutCnt = 0\r\n  return {\r\n    restrict: 'AE'\r\n    require: ['layout','^chart']\r\n\r\n    controller: ($element) ->\r\n      this.me = layout()\r\n    link: (scope, element, attrs, controllers) ->\r\n\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      me.chart(chart)\r\n\r\n      element.addClass(me.id())\r\n\r\n      #$log.log 'linking layout id:', me.id(), 'chart:', chart.id()\r\n      chart.addLayout(me)\r\n      chart.container().addLayout(me)\r\n      me.container(chart.container())\r\n\r\n  }","angular.module('wk.chart').directive 'printButton', ($log) ->\r\n\r\n  return {\r\n    require:'chart'\r\n    restrict: 'A'\r\n    link:(scope, element, attrs, controller) ->\r\n      chart = controller.me\r\n\r\n      draw = () ->\r\n        _containerDiv = d3.select(chart.container().element()).select('div.wk-chart')\r\n        _containerDiv.append('button')\r\n          .attr('class','wk-chart-print-button')\r\n          .style({position:'absolute', top:0, right:0})\r\n          .text('Print')\r\n          .on 'click', ()->\r\n            $log.log 'Clicked Print Button'\r\n\r\n            svg  = _containerDiv.select('svg.wk-chart').node()\r\n            saveSvgAsPng(svg, 'print.png',5)\r\n\r\n\r\n      chart.lifeCycle().on 'drawChart.print', draw\r\n  }","###*\r\n  @ngdoc behavior\r\n  @name selection\r\n  @element layout\r\n  @module wk.chart\r\n  @restrict A\r\n  @description\r\n  enables selection of individual chart objects\r\n###\r\nangular.module('wk.chart').directive 'selection', ($log) ->\r\n  objId = 0\r\n\r\n  return {\r\n    restrict: 'A'\r\n    scope:\r\n      ###*\r\n        @ngdoc attr\r\n        @name selection#selectedDomain\r\n        @param selectedDomain {array} Array containing the selected data objects. Settimg selectedDomain to `[]` (an empty array) clears the selection\r\n      ###\r\n      selectedDomain: '='\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name selection#selectedDomainChange\r\n        @param selectedDomainChange {expression} expression to evaluate upon a change of the brushes selected domain. The selected domain is available as ´domain´\r\n      ###\r\n      selectedDomainChange: '&'\r\n\r\n    require: 'layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      $log.log 'selection-scope', scope.$id\r\n      layout = controller.me\r\n      _selection = undefined\r\n      _id = objId++\r\n\r\n      scope.$watch 'selectedDomain', (val) ->\r\n        if _.isArray(val) and val.length is 0\r\n          _selection.clearSelection()\r\n          scope.selectedDomainChange({domain:[]})\r\n\r\n      layout.lifeCycle().on \"configure.selection#{_id}\", ->\r\n        _selection = layout.behavior().selected\r\n        _selection.layout(layout)\r\n        _selection.active(true)\r\n        _selection.on \"selected.selection#{_id}\", (selectedObjects) ->\r\n          if scope.selectedDomain then scope.selectedDomain = selectedObjects\r\n          scope.selectedDomainChange({domain:selectedObjects})\r\n          scope.$apply()\r\n\r\n        layout.lifeCycle().on \"destroy.selection#{_id}\", () ->\r\n          _selection.on \".selection#{_id}\", null\r\n          layout.lifeCycle().on \".selection#{_id}\", null\r\n          scope.$destroy()\r\n\r\n  }","###*\r\n  @ngdoc behavior\r\n  @name tooltips\r\n  @element chart\r\n  @module wk.chart\r\n  @restrict A\r\n  @description\r\n  enables the display of tooltips. See  the {@link guide/tooltips tooltips section} in the guide for more details\r\n###\r\nangular.module('wk.chart').directive 'tooltips', ($log, behavior) ->\r\n\r\n  return {\r\n    restrict: 'A'\r\n    require: 'chart'\r\n    link: (scope, element, attrs, chartCtrl) ->\r\n      chart = chartCtrl.me\r\n      $log.log 'tooltips-scope', scope.$id\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name tooltips#tooltips\r\n        @values true, false, path/to/custom-template.html\r\n        @param tooltips {boolean|url} - enable / disable tooltips, resp. supply a custom tooltip template url.\r\n        If no template url is supplied, a (configurable) default template is used (see {@link wkChartTemplatesProvider here} for how to configure the default template),\r\n      ###\r\n      attrs.$observe 'tooltips', (val) ->\r\n        chart.toolTipTemplate('')\r\n        if val isnt undefined and (val is '' or val is 'true')\r\n          chart.showTooltip(true)\r\n        else if val.length > 0 and val isnt 'false'\r\n          chart.toolTipTemplate(val)\r\n          chart.showTooltip(true)\r\n        else chart.showTooltip(false)\r\n\r\n      attrs.$observe 'tooltipStyle', (val) ->\r\n        if val\r\n          chart.tooltipStyle(scope.$eval(val))\r\n  }\r\n\r\n","angular.module('wk.chart').factory 'dataManagerFactory',($log) ->\r\n\r\n  mergeSeriesKeys = (aOld,aNew, moveItemsMove) ->\r\n    iOld = 0\r\n    iNew = 0\r\n    lOldMax = aOld.length - 1\r\n    lNewMax = aNew.length - 1\r\n    lMax = Math.max(lOldMax, lNewMax)\r\n    result = []\r\n\r\n    iPred = 0\r\n\r\n    if moveItemsMove\r\n      while iOld <= lOldMax and iNew <= lNewMax\r\n        if (idx = aNew.indexOf(aOld[iOld])) >= 0 # old is also in new (start at iNew since items before have ben considered already\r\n          result.push({iOld: iOld, iNew: idx,key: aOld[iOld]});\r\n          iPred = iOld\r\n          #console.log('same', aOld[iOld]);\r\n          iOld++\r\n        else\r\n          # old is not in new, i.e. deleted\r\n          # aOld[iOld is deleted\r\n          result.push({deleted: true, iOld: iOld, key: aOld[iOld], atBorder: iNew is 0, lowBorder: iNew is 0})\r\n          # console.log('deleted', aOld[iOld]);\r\n          iOld++\r\n        while aOld.indexOf(aNew[iNew]) < 0 and iNew <= lNewMax # new is not in old\r\n          # aNew[iNew] is added\r\n          result.push({added: true, iPred: iPred, predKey: aOld[iPred], iNew: Math.min(iNew,lNewMax), key: aNew[iNew], atBorder:iOld is 0, lowBorder:iOld is 0})\r\n          # console.log('added', aNew[iNew]);\r\n          iNew++\r\n        iNew++ # this item exists in aOld, it will be handled with the old-side tests. Just skip it\r\n\r\n      while iOld <= lOldMax\r\n        if (idx = aNew.indexOf(aOld[iOld])) >= 0 # old is also in new (start at iNew since items before have ben considered already\r\n          result.push({iOld: iOld, iNew: idx,key: aOld[iOld]});\r\n          iPred = iOld\r\n          #console.log('same', aOld[iOld]);\r\n          iOld++\r\n        else\r\n          # old is not in new, i.e. deleted\r\n          # aOld[iOld is deleted\r\n          result.push({deleted: true, iOld: iOld, key: aOld[iOld], atBorder: true, highBorder: true})\r\n          # console.log('deleted', aOld[iOld]);\r\n          iOld++\r\n\r\n      while iNew <= lNewMax\r\n        if aOld.indexOf(aNew[iNew]) < 0 # new is not in old\r\n          # aNew[iNew] is added\r\n          result.push({added: true, iPred: iPred, predKey: aOld[iPred], iNew: Math.min(iNew,lNewMax), key: aNew[iNew], atBorder:true, highBorder:true})\r\n          # console.log('added', aNew[iNew]);\r\n          iNew++\r\n        else\r\n          iNew++ # this item exists in aOld, it will be handled with the old-side tests. Just skip it\r\n\r\n    else\r\n      while iOld <= lOldMax and iNew <= lNewMax\r\n        if aOld[iOld] is aNew[iNew] # old is also in new\r\n          result.push({iOld: iOld, iNew: Math.min(iNew,lNewMax),key: aOld[iOld]});\r\n          iPred = iOld\r\n          #console.log('same', aOld[iOld]);\r\n          iOld++;\r\n          iNew++;\r\n        else if aOld.indexOf(aNew[iNew], iOld) >= 0\r\n          # test if the non matching new is in old behind the current old. If yes, all old items until the match are deleted, if no, the non-match is added\r\n          # aOld[iOld is deleted\r\n          result.push({deleted: true, iOld: iOld, key: aOld[iOld], atBorder: iNew is 0, lowBorder: iNew is 0})\r\n          # console.log('deleted', aOld[iOld]);\r\n          iOld++\r\n        else\r\n          # aNew[iNew] is added\r\n          result.push({added: true, iPred: iPred, predKey: aOld[iPred], iNew: Math.min(iNew,lNewMax), key: aNew[iNew], atBorder:iOld is 0, lowBorder:iOld is 0})\r\n          # console.log('added', aNew[iNew]);\r\n          iNew++\r\n\r\n      while iOld <= lOldMax\r\n        # if there is more old items, mark them as deleted\r\n        result.push({deleted: true, iOld: iOld, key: aOld[iOld], atBorder:true, highBorder: true});\r\n        # console.log('deleted', aOld[iOld]);\r\n        iOld++;\r\n\r\n      while iNew <= lNewMax\r\n        # if there is more new items, mark them as added\r\n        result.push({added: true, iPred: iPred, predKey: aOld[iPred], iNew: Math.min(iNew,lNewMax), key: aNew[iNew], atBorder:true, highBorder: true });\r\n        # console.log('added', aNew[iNew]);\r\n        iNew++;\r\n\r\n    # set the deleteSuccessor by traversing form the end\r\n\r\n    i = result.length - 1\r\n    atBorder = true\r\n    iSucc = aNew.length - 1\r\n    while i >= 0\r\n      cur = result[i]\r\n      if cur.deleted\r\n        cur.iSucc = iSucc\r\n        cur.succKey = aNew[iSucc]\r\n      else\r\n        iSucc = cur.iNew\r\n        atBorder = false\r\n      i--\r\n    #$log.debug result\r\n    return result\r\n\r\n  merge = () ->\r\n    _dataOld = []\r\n    _dataNew = []\r\n    _keyOld = []\r\n    _keyNew = []\r\n    _keyScale = undefined\r\n    _valueScale = undefined\r\n    _mergedKeys = []\r\n    _layerKeysNew = []\r\n    _layerKeysOld = []\r\n    _mergedLayerKeys = undefined\r\n    _isOrdinal = true\r\n    _isRangeScale = false\r\n\r\n    me = {}\r\n\r\n    me.data = (data, moveItemsMove) ->\r\n      _dataOld = _dataNew\r\n      _keyOld = _keyNew\r\n      _layerKeysOld = _layerKeysNew\r\n      _layerKeysNew  = _valueScale.layerKeys(data)\r\n      _dataNew = _.clone(data)\r\n      _keyNew = _keyScale.value(data)\r\n      if _keyScale.scaleType() is 'time'  # convert to number to ensure date equality works correctly\r\n        _keyNew = _keyNew.map((d) -> +d)\r\n      _mergedKeys = mergeSeriesKeys(_keyOld, _keyNew, moveItemsMove)\r\n      _mergedLayerKeys = mergeSeriesKeys(_layerKeysOld, _layerKeysNew)\r\n      return me\r\n\r\n    me.isInitial = () ->\r\n      return _dataOld.length is 0\r\n\r\n    getMergedStart = () =>\r\n      ret = []\r\n      lastKey = _keyOld[0]\r\n      atBorder = true\r\n      lastOld = undefined\r\n      cur = undefined\r\n      i = 0\r\n\r\n      borderKey = (cur) ->\r\n          if _isOrdinal then lastKey else cur.key\r\n\r\n      while i < _mergedKeys.length\r\n        cur = _mergedKeys[i]\r\n        if cur.iOld isnt undefined\r\n          ret.push({\r\n            added:false,\r\n            key:cur.key,\r\n            targetKey: cur.key,\r\n            data:_dataOld[cur.iOld]\r\n            targetData :_dataOld[cur.iOld]\r\n            newData:_dataNew[cur.iNew]\r\n          })\r\n          lastKey = cur.key\r\n          lastOld = cur.iOld\r\n          atBorder = false\r\n        else\r\n          ret.push({\r\n            added:true,\r\n            atBorder: cur.atBorder,\r\n            lowBorder: cur.lowBorder,\r\n            highBorder: cur.highBorder\r\n            targetKey: (if cur.atBorder and not _isOrdinal then cur.key else lastKey),\r\n            key:cur.key,\r\n            data: if cur.atBorder then _dataNew[cur.iNew] else _dataOld[lastOld],\r\n            targetData: _dataNew[cur.iNew]\r\n            newData:_dataNew[cur.iNew]\r\n          })\r\n        i++\r\n      return ret\r\n\r\n    me.animationStartLayers = () ->\r\n      series =getMergedStart()\r\n      return _mergedLayerKeys.map((layer) -> {\r\n        layerKey: if layer.iOld is undefined then _layerKeysNew[layer.iNew] else layer.key,\r\n        added: layer.added,\r\n        values: series.map((d) -> {\r\n          key: d.key,\r\n          targetKey: d.targetKey,\r\n          layerKey: layer.key,\r\n          layerAdded: layer.added,\r\n          added: d.added,\r\n          atBorder: d.atBorder,\r\n          lowBorder: d.lowBorder,\r\n          highBorder: d.highBorder\r\n          value: _valueScale.layerValue(d.data, layer.key)\r\n          targetValue: if layer.added then _valueScale.layerValue(d.newData, layer.key) or 0 else _valueScale.layerValue(d.targetData, layer.key) or 0\r\n          data:d.data\r\n      })})\r\n\r\n    getMergedEnd = () =>\r\n      ret = []\r\n      lastKey = _keyNew[_keyNew.length - 1]\r\n      lastNew = undefined\r\n      atBorder = true\r\n      i = _mergedKeys.length - 1\r\n\r\n      borderKey = (cur) ->\r\n        if _isOrdinal then lastKey else cur.key\r\n\r\n      while i >= 0\r\n        cur = _mergedKeys[i]\r\n        if cur.iNew isnt undefined\r\n          ret.unshift({\r\n            deleted:false,\r\n            key: cur.key,\r\n            targetKey: cur.key,\r\n            data:_dataNew[cur.iNew]\r\n            targetData: _dataNew[cur.iNew]\r\n            oldData: _dataOld[cur.iOld]\r\n          })\r\n          lastKey = cur.key\r\n          lastNew = cur.iNew\r\n          atBorder = false\r\n        else\r\n          ret.unshift({\r\n            deleted:true,\r\n            atBorder: cur.atBorder,\r\n            lowBorder: cur.lowBorder,\r\n            highBorder: cur.highBorder\r\n            targetKey: (if cur.atBorder and not _isOrdinal then cur.key else lastKey),\r\n            key:cur.key,\r\n            data: _dataNew[lastNew],\r\n            targetData: _dataOld[cur.iOld]\r\n            oldData: _dataOld[cur.iOld]\r\n          })\r\n        i--\r\n      return ret\r\n\r\n\r\n    me.animationEndLayers = () ->\r\n      series = getMergedEnd()\r\n      return _mergedLayerKeys.map((layer) ->\r\n        return {\r\n          layerKey: layer.key,\r\n          deleted:layer.deleted,\r\n          values: series.map((d) ->\r\n            return {\r\n              key: d.key,\r\n              targetKey: d.targetKey,\r\n              layerKey: layer.key,\r\n              layerDeleted: layer.deleted,\r\n              deleted:d.deleted,\r\n              atBorder: d.atBorder,\r\n              lowBorder: d.lowBorder,\r\n              highBorder: d.highBorder\r\n              value: if d.deleted and d.atBorder then _valueScale.layerValue(d.targetData, layer.key) else _valueScale.layerValue(d.data, layer.key) #if d.deleted then _valueScale.layerValue(d.targetData, layer.key) else _valueScale.layerValue(d.data, layer.key)\r\n              targetValue: if layer.deleted then _valueScale.layerValue(d.oldData, layer.key) or 0 else _valueScale.layerValue(d.targetData, layer.key) or 0\r\n              data:d.targetData\r\n        })})\r\n\r\n    me.keyScale = (scale) ->\r\n      if arguments.length is 0 then return _keyScale\r\n      _keyScale = scale\r\n      _isOrdinal = scale.isOrdinal()\r\n      return me\r\n\r\n    me.valueScale = (scale) ->\r\n      if arguments.length is 0 then return _valueScale\r\n      _valueScale = scale\r\n      _isRangeScale = scale.kind() is 'rangeX' or scale.kind() is 'rangeY'\r\n\r\n      return me\r\n\r\n    return me\r\n\r\n  return merge\r\n\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n","###*\r\n  @ngdoc dimension\r\n  @name color\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into colors for chart objects\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'color', ($log, scale, legend, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['color','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleColor'\r\n    scope:\r\n      mapFunction: '='\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n      l = undefined\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'color'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('category20')\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout, scope)\r\n\r\n      scope.$watch 'mapFunction', (fn) ->\r\n        if fn and _.isFunction(fn)\r\n          me.scaleMapFn(fn)\r\n\r\n      chart.lifeCycle().on 'destroy.color', ()->\r\n        scope.$destroy()\r\n\r\n  }","angular.module('wk.chart').service 'scaleUtils', ($log, wkChartScales, utils) ->\r\n\r\n  parseList = (val) ->\r\n    if val\r\n      l = val.trim().replace(/^\\[|\\]$/g, '').split(',').map((d) -> d.replace(/^[\\\"|']|[\\\"|']$/g, ''))\r\n      l = l.map((d) -> if isNaN(d) then d else +d)\r\n      return if l.length is 1 then return l[0] else l\r\n\r\n  return {\r\n\r\n  observeSharedAttributes: (attrs, me) ->\r\n    ###*\r\n      @ngdoc attr\r\n      @name type\r\n      @usedBy dimension\r\n      @param [type=layout specific - see layout docs] {scale}\r\n      Defines the d3 scale applied to transform the input data to a dimensions display value. All d3 scales are supported, as well as wk-chart specific extensions described here. #TODO insert correct links\r\n    ###\r\n    attrs.$observe 'type', (val) ->\r\n      if val isnt undefined\r\n        if d3.scale.hasOwnProperty(val) or val is 'time' or wkChartScales.hasOwnProperty(val)\r\n          me.scaleType(val)\r\n        else\r\n          if val isnt ''\r\n            ## no scale defined, use default\r\n            $log.error \"Error: illegal scale value: #{val}. Using 'linear' scale instead\"\r\n        me.update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name exponent\r\n      @usedBy dimension\r\n      @param [exponent] {number}\r\n      This attribute is only evaluated with pow and log scale types - defines the exponent for the d3 pow and log scale #TODO insert correct links\r\n    ###\r\n    attrs.$observe 'exponent', (val) ->\r\n      if me.scaleType() is 'pow' and _.isNumber(+val)\r\n        me.exponent(+val).update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name property\r\n      @usedBy dimension\r\n      @param property{expression}\r\n        the input data property (properties) used to compute this dimension. In case the charts supports a the data layer dimension this attribute can be a list of data properties.\r\n        In this case the property field can be omitted, for non-layer dimension it is required.\r\n    ###\r\n    attrs.$observe 'property', (val) ->\r\n      me.property(parseList(val)).update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name layerProperty\r\n      @usedBy dimension\r\n      @param [layerProperty] {expression}\r\n      defines the container object for property in case the data is a hierachical structure. See (#todo define link)\r\n       for more detail\r\n    ###\r\n    attrs.$observe 'layerProperty', (val) ->\r\n      if val and val.length > 0\r\n        me.layerProperty(val).update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name range\r\n      @usedBy dimension\r\n      @param [range] {expression}\r\n      The scale types range attribute. For x and y scales the range is set to the pixel width and height of the drawing container, for category... scales the range is set to the scales color range\r\n    ###\r\n    attrs.$observe 'range', (val) ->\r\n      range = parseList(val)\r\n      if Array.isArray(range)\r\n        me.range(range).update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name dateFormat\r\n      @usedBy dimension\r\n      @param [dateFormat] {expression}\r\n      applies to Time scale type only. Describes the date display format of the property field content. can be omitted if the field is already a javascript Date object, otherwise the format is used to transform\r\n      the property values into a Javascript Date object.Date Format is described using d3's [Time Format](https://github.com/mbostock/d3/wiki/Time-Formatting#format)\r\n    ###\r\n    attrs.$observe 'dateFormat', (val) ->\r\n      if val\r\n        if me.scaleType() is 'time'\r\n          me.dataFormat(val).update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name domain\r\n      @usedBy dimension\r\n      @param [domain] {expression}\r\n      the scale types domain property. Meaning and acceptable values for domain depend on teh scale type, thus please see (TODO: define link)\r\n      for further explanation\r\n    ###\r\n    attrs.$observe 'domain', (val) ->\r\n      if val\r\n        $log.info 'domain', val\r\n        parsedList = parseList(val)\r\n        if Array.isArray(parsedList)\r\n          me.domain(parsedList).update()\r\n        else\r\n          $log.error \"domain: must be array, or comma-separated list, got\", val\r\n      else\r\n        me.domain(undefined).update()\r\n    ###*\r\n      @ngdoc attr\r\n      @name domainRange\r\n      @usedBy dimension\r\n      @param [domainRange] {expression}\r\n      Certain scale type and dimensions require a calculation of the data range to perform the correct mapping onto the scale output.domainRange defined the rule to be used to calculate this. Possible values are:\r\n      min: [0 .. minimum data value]\r\n      max: [0 .. maximum data value]\r\n      extent: [minimum data value .. maximum data value]\r\n      total: applies only layer dimensions, calculates as 0 ..  maximum of the layer value totals]\r\n    ###\r\n    attrs.$observe 'domainRange', (val) ->\r\n      if val\r\n        me.domainCalc(val).update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name domainMin\r\n      @usedBy dimension\r\n      @param [domainMin] {expression}\r\n      Defined the domain minimum\r\n    ###\r\n    attrs.$observe 'domainMin', (val) ->\r\n      if val\r\n        me.domainMin(val)\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name domainMax\r\n      @usedBy dimension\r\n      @param [domainMax] {expression}\r\n      Defines the domain maximum\r\n    ###\r\n    attrs.$observe 'domainMax', (val) ->\r\n      if val\r\n        me.domainMax(val)\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name label\r\n      @usedBy dimension\r\n      @param [label] {expression}\r\n      defined the dimensions label text. If not specified, the value of the 'property' attribute is used\r\n    ###\r\n    attrs.$observe 'label', (val) ->\r\n      if val isnt undefined\r\n        me.axisLabel(val).updateAttrs()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name format\r\n      @usedBy dimension\r\n      @param [format] {expression}\r\n       a formatting string used to display tooltip and legend values for the dimension. if omitted, a default format will be applied\r\n      please note tha this is different from the 'tickFormat' attribute\r\n    ###\r\n    attrs.$observe 'format', (val) ->\r\n      if val isnt undefined\r\n        me.format(val)\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name reset\r\n      @usedBy dimension\r\n      @param [reset] {expression}\r\n       If sepcified or set to true, the domain values are reset every time the carts data changes.\r\n    ###\r\n    attrs.$observe 'reset', (val) ->\r\n      me.resetOnNewData(utils.parseTrueFalse(val))\r\n\r\n  #-------------------------------------------------------------------------------------------------------------------\r\n\r\n  observeAxisAttributes: (attrs, me, scope) ->\r\n    ###*\r\n        @ngdoc attr\r\n        @name axis\r\n        @usedBy dimension.x, dimension.y\r\n        @param [axis=false] {boolean}\r\n    ###\r\n    attrs.$observe 'axis', (val) ->\r\n      me.axisOrient(me.orientation()).showAxis(utils.parseTrueFalse(val)).update()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name labelStyle\r\n        @usedBy dimension.x, dimension.y\r\n        @param [labelStyle=font-size:\"1.3em\"] {object}\r\n    ###\r\n    attrs.$observe 'labelStyle', (val) ->\r\n      if val\r\n        me.axisLabelStyle(scope.$eval(val))\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name tickFormat\r\n        @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n        @param [tickFormat] {expression}\r\n    ###\r\n    attrs.$observe 'tickFormat', (val) ->\r\n      if val isnt undefined\r\n        me.tickFormat(d3.format(val)).update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name ticks\r\n      @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n      @param [ticks] {expression}\r\n    ###\r\n    attrs.$observe 'ticks', (val) ->\r\n      if val isnt undefined\r\n        me.ticks(+val)\r\n        if me.axis()\r\n          me.updateAttrs()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name tickInterval\r\n      @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n      @param [tickInterval] {expression}\r\n      if specified, sets the interval used to calculate the tick labels. Does not work for ordinal scales. For time scales the values are specified\r\n      as `<unit>:number`, where unit can be seconds, minutes, hours, days, weeks, years, and sundays .. saturdays\r\n      so `days:10` means that a tick will be drawn every 10 days, `tuesdays:3` means that the tick will be every 3rd tuesday.\r\n    ###\r\n    attrs.$observe 'tickInterval', (val) ->\r\n      if val isnt undefined\r\n        me.tickInterval(val)\r\n        if me.axis()\r\n          me.updateAttrs()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name tickLabelStyle\r\n        @usedBy dimension.x, dimension.y\r\n        @param [tickLabelStyle=font-size:\"1em\"] {object}\r\n    ###\r\n    attrs.$observe 'tickLabelStyle', (val) ->\r\n      if val\r\n        me.tickLabelStyle(scope.$eval(val))\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name grid\r\n      @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n      @param [grid] {expression}\r\n    ###\r\n    attrs.$observe 'grid', (val) ->\r\n      if val isnt undefined\r\n        me.showGrid(val is '' or val is 'true').updateAttrs()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name gridStyle\r\n        @usedBy dimension.x, dimension.y\r\n        @param [gridStyle] {object}\r\n    ###\r\n    attrs.$observe 'gridStyle', (val) ->\r\n      if val\r\n        me.gridStyle(scope.$eval(val))\r\n\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name showLabel\r\n      @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n      @param [showLabel] {expression}\r\n    ###\r\n    attrs.$observe 'showLabel', (val) ->\r\n      if val isnt undefined\r\n        me.showLabel(val is '' or val is 'true').update(true)\r\n\r\n    ###* #TODO Find memory-leak save implementation - de-register watcher when scope is destroyed\r\n      @ngdoc attr\r\n      @name axisFormatters\r\n      @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n      @param [axisFormatters] {expression}\r\n\r\n    scope.$watch attrs.axisFormatters, (val) ->\r\n      if _.isObject(val)\r\n        if _.has(val, 'tickFormat') and _.isFunction(val.tickFormat)\r\n          me.tickFormat(val.tickFormat)\r\n        else if _.isString(val.tickFormat)\r\n          me.tickFormat(d3.format(val))\r\n        if _.has(val, 'tickValues') and _.isArray(val.tickValues)\r\n          me.tickValues(val.tickValues)\r\n        me.update()\r\n    ###\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name reverse\r\n      @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n      @param [reverse] {boolean}\r\n      reverses the direction of the axes if `true` , i.e. values are displayed in reverse order.\r\n    ###\r\n    attrs.$observe 'reverse', (val) ->\r\n      if val isnt undefined\r\n        me.reverse(val is '' or val is 'true').update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name rotateTickLabels\r\n      @usedBy dimension.x, dimension.y, dimension.rangeX, dimension.rangeY\r\n      @param [rotateTickLabels] {number}\r\n      rotates tick labels by ´number´ degrees.\r\n    ###\r\n    attrs.$observe 'rotateTickLabels', (val) ->\r\n      if val and _.isNumber(+val)\r\n        me.rotateTickLabels(+val)\r\n      else\r\n        me.rotateTickLabels(undefined)\r\n      me.update(true)\r\n\r\n  #-------------------------------------------------------------------------------------------------------------------\r\n\r\n  observeLegendAttributes: (attrs, me, layout, scope) ->\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name legend\r\n      @usedBy dimension\r\n      @values true, false, top-right, top-left, bottom-left, bottom-right, #divName\r\n      @param [legend=true] {expression}\r\n    ###\r\n    attrs.$observe 'legend', (val) ->\r\n      if val isnt undefined\r\n        l = me.legend()\r\n        l.showValues(false)\r\n        switch val\r\n          when 'false'\r\n            l.show(false)\r\n          when 'top-left', 'top-right', 'bottom-left', 'bottom-right'\r\n            l.position(val).div(undefined).show(true)\r\n          when 'true', ''\r\n            l.position('top-right').show(true).div(undefined)\r\n          else\r\n            legendDiv = d3.select(val)\r\n            if legendDiv.empty()\r\n              $log.warn 'legend reference does not exist:', val\r\n              l.div(undefined).show(false)\r\n            else\r\n              l.div(legendDiv).position('top-left').show(true)\r\n\r\n        l.scale(me).layout(layout)\r\n        if me.parent()\r\n          l.register(me.parent())\r\n        l.redraw()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name valuesLegend\r\n      @usedBy dimension\r\n      @param [valuesLegend] {expression}\r\n    ###\r\n    attrs.$observe 'valuesLegend', (val) ->\r\n      if val isnt undefined\r\n        l = me.legend()\r\n        l.showValues(true)\r\n        switch val\r\n          when 'false'\r\n            l.show(false)\r\n          when 'top-left', 'top-right', 'bottom-left', 'bottom-right'\r\n            l.position(val).div(undefined).show(true)\r\n          when 'true', ''\r\n            l.position('top-right').show(true).div(undefined)\r\n          else\r\n            legendDiv = d3.select(val)\r\n            if legendDiv.empty()\r\n              $log.warn 'legend reference does not exist:', val\r\n              l.div(undefined).show(false)\r\n            else\r\n              l.div(legendDiv).position('top-left').show(true)\r\n\r\n        l.scale(me).layout(layout)\r\n        if me.parent()\r\n          l.register(me.parent())\r\n        l.redraw()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name legendTitle\r\n      @usedBy dimension\r\n      @param [legendTitle] {expression}\r\n    ###\r\n    attrs.$observe 'legendTitle', (val) ->\r\n      if val isnt undefined\r\n        me.legend().title(val).redraw()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name legendStyle\r\n      @usedBy dimension\r\n      @param [legendStyle] {object}\r\n    ###\r\n    attrs.$observe 'legendStyle', (val) ->\r\n      if val isnt undefined\r\n        me.legend().legendStyle(scope.$eval(val)).redraw()\r\n  }\r\n\r\n","###*\r\n  @ngdoc dimension\r\n  @name shape\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into shape objects in teh chart\r\n\r\n\r\n###\r\n\r\nangular.module('wk.chart').directive 'shape', ($log, scale, d3Shapes, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['shape','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleSize'\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      $log.log 'shape-scope', scope.$id\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'shape'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('ordinal')\r\n      me.scale().range(d3Shapes)\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout, scope)\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name size\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into the size of chart objects\r\n\r\n\r\n###\r\n\r\nangular.module('wk.chart').directive 'size', ($log, scale, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['size','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleSize'\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      $log.log 'size-scope', scope.$id\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'size'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.resetOnNewData(true)\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout, scope)\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name x\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  This dimension defined the horizontal axis of the chart\r\n\r\n  @param {string} axis\r\n  Define if a horizontal axis should be displayed Possible values:\r\n\r\n###\r\nangular.module('wk.chart').directive 'x', ($log, scale, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['x','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      #$log.log 'creating controller scaleX'\r\n      this.me = scale() # for Angular 1.3\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      $log.log 'x-scope', scope.$id\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      if attrs.hasOwnProperty('top')\r\n        me.orientation('top')\r\n      else\r\n        me.orientation('bottom')\r\n\r\n      name = 'x'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.resetOnNewData(true)\r\n      me.isHorizontal(true)\r\n      me.register()\r\n      element.addClass(me.id())\r\n      chart.addScale(me, layout)\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n      scaleUtils.observeAxisAttributes(attrs, me, scope)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name rangeX\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into horizontal ranges for the chart objects\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'rangeX', ($log, scale, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['rangeX','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      #$log.log 'creating controller scaleX'\r\n      this.me = scale() # for Angular 1.3\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'rangeX'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.resetOnNewData(true)\r\n      me.isHorizontal(true)\r\n      me.register()\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n\r\n      attrs.$observe 'axis', (val) ->\r\n        if val isnt undefined\r\n          if val isnt 'false'\r\n            if val in ['top', 'bottom']\r\n              me.axisOrient(val).showAxis(true)\r\n            else\r\n              me.axisOrient('bottom').showAxis(true)\r\n          else\r\n            me.showAxis(false).axisOrient(undefined)\r\n          me.update(true)\r\n\r\n      scaleUtils.observeAxisAttributes(attrs, me, scope)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n      scaleUtils.observerRangeAttributes(attrs,me)\r\n\r\n      attrs.$observe 'rotateTickLabels', (val) ->\r\n        if val and _.isNumber(+val)\r\n          me.rotateTickLabels(+val)\r\n        else\r\n          me.rotateTickLabels(undefined)\r\n        me.update(true)\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name y\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  This dimension defined the vertical axis of the chart\r\n\r\n  @param {string} axis\r\n  Define if a vertical axis should be displayed Possible values:\r\n\r\n###\r\nangular.module('wk.chart').directive 'y', ($log, scale, legend, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['y','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleY'\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      $log.log 'color-scope', scope.$id\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      if attrs.hasOwnProperty('right')\r\n        me.orientation('right')\r\n      else\r\n        me.orientation('left')\r\n\r\n      name = 'y'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.isVertical(true)\r\n      me.resetOnNewData(true)\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n      scaleUtils.observeAxisAttributes(attrs, me, scope)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n  }","###*\r\n  @ngdoc dimension\r\n  @name rangeY\r\n  @module wk.chart\r\n  @restrict E\r\n  @description\r\n\r\n  describes how the chart data is translated into vertical ranges for the chart objects\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'rangeY', ($log, scale, legend, scaleUtils) ->\r\n  scaleCnt = 0\r\n  return {\r\n    restrict: 'E'\r\n    require: ['rangeY','^chart', '?^layout']\r\n    controller: ($element) ->\r\n      this.me = scale()\r\n      #$log.log 'creating controller scaleY'\r\n\r\n    link: (scope, element, attrs, controllers) ->\r\n      me = controllers[0].me\r\n      chart = controllers[1].me\r\n      layout = controllers[2]?.me\r\n\r\n      if not (chart or layout)\r\n        $log.error 'scale needs to be contained in a chart or layout directive '\r\n        return\r\n\r\n      name = 'rangeY'\r\n      me.kind(name)\r\n      me.parent(layout or chart)\r\n      me.chart(chart)\r\n      me.scaleType('linear')\r\n      me.isVertical(true)\r\n      me.resetOnNewData(true)\r\n      element.addClass(me.id())\r\n\r\n      chart.addScale(me, layout)\r\n      me.register()\r\n      #$log.log \"linking scale #{name} id:\", me.id(), 'layout:', (if layout then layout.id() else '') , 'chart:', chart.id()\r\n\r\n      #---Directive Attributes handling --------------------------------------------------------------------------------\r\n\r\n      scaleUtils.observeSharedAttributes(attrs, me)\r\n\r\n      attrs.$observe 'axis', (val) ->\r\n        if val isnt undefined\r\n          if val isnt 'false'\r\n            if val in ['left', 'right']\r\n              me.axisOrient(val).showAxis(true)\r\n            else\r\n              me.axisOrient('left').showAxis(true)\r\n          else\r\n            me.showAxis(false).axisOrient(undefined)\r\n          me.update(true)\r\n\r\n      scaleUtils.observeAxisAttributes(attrs, me, scope)\r\n      scaleUtils.observeLegendAttributes(attrs, me, layout)\r\n      scaleUtils.observerRangeAttributes(attrs,me)\r\n  }","angular.module('wk.chart').factory 'behaviorBrush', ($log, $window, selectionSharing, timing) ->\r\n\r\n  behaviorBrush = () ->\r\n\r\n    me = () ->\r\n\r\n    _active = false\r\n    _overlay = undefined\r\n    _extent = undefined\r\n    _startPos = undefined\r\n    _evTargetData = undefined\r\n    _areaNode = undefined\r\n    _chart = undefined\r\n    _data = undefined\r\n    _chartArea = undefined\r\n    _areaBox = undefined\r\n    _backgroundBox = undefined\r\n    _container = undefined\r\n    _selectables =  undefined\r\n    _brushGroup = undefined\r\n    _x = undefined\r\n    _y = undefined\r\n    _tooltip = undefined\r\n    _brushXY = false\r\n    _brushX = false\r\n    _brushY = false\r\n    _boundsIdx = undefined\r\n    _boundsValues = undefined\r\n    _boundsDomain = []\r\n    _lastLeftVal = _lastRightVal = _lastBottomVal = _lastTopVal = undefined\r\n    _brushEvents = d3.dispatch('brushStart', 'brush', 'brushEnd')\r\n\r\n    left = top = right = bottom = startTop = startLeft = startRight = startBottom = undefined\r\n\r\n    #--- Brush utility functions ----------------------------------------------------------------------------------------\r\n\r\n    positionBrushElements = (left, right, top, bottom) ->\r\n      width = right - left\r\n      height = bottom - top\r\n\r\n      # position resize-handles into the right corners\r\n      if _brushXY\r\n        _overlay.selectAll('.wk-chart-n').attr('transform', \"translate(#{left},#{top})\").select('rect').attr('width', width)\r\n        _overlay.selectAll('.wk-chart-s').attr('transform', \"translate(#{left},#{bottom})\").select('rect').attr('width', width)\r\n        _overlay.selectAll('.wk-chart-w').attr('transform', \"translate(#{left},#{top})\").select('rect').attr('height', height)\r\n        _overlay.selectAll('.wk-chart-e').attr('transform', \"translate(#{right},#{top})\").select('rect').attr('height', height)\r\n        _overlay.selectAll('.wk-chart-ne').attr('transform', \"translate(#{right},#{top})\")\r\n        _overlay.selectAll('.wk-chart-nw').attr('transform', \"translate(#{left},#{top})\")\r\n        _overlay.selectAll('.wk-chart-se').attr('transform', \"translate(#{right},#{bottom})\")\r\n        _overlay.selectAll('.wk-chart-sw').attr('transform', \"translate(#{left},#{bottom})\")\r\n        _extent.attr('width', width).attr('height', height).attr('x', left).attr('y', top)\r\n      if _brushX\r\n        _overlay.selectAll('.wk-chart-w').attr('transform', \"translate(#{left},0)\").select('rect').attr('height', height)\r\n        _overlay.selectAll('.wk-chart-e').attr('transform', \"translate(#{right},0)\").select('rect').attr('height', height)\r\n        _overlay.selectAll('.wk-chart-e').select('rect').attr('height', _areaBox.height)\r\n        _overlay.selectAll('.wk-chart-w').select('rect').attr('height', _areaBox.height)\r\n        _extent.attr('width', width).attr('height', _areaBox.height).attr('x', left).attr('y', 0)\r\n      if _brushY\r\n        _overlay.selectAll('.wk-chart-n').attr('transform', \"translate(0,#{top})\").select('rect').attr('width', width)\r\n        _overlay.selectAll('.wk-chart-s').attr('transform', \"translate(0,#{bottom})\").select('rect').attr('width', width)\r\n        _overlay.selectAll('.wk-chart-n').select('rect').attr('width', _areaBox.width)\r\n        _overlay.selectAll('.wk-chart-s').select('rect').attr('width', _areaBox.width)\r\n        _extent.attr('width', _areaBox.width).attr('height', height).attr('x', 0).attr('y', top)\r\n\r\n    hideBrushElements = () ->\r\n      d3.select(_areaNode).selectAll('.wk-chart-resize').style('display', 'none')\r\n      _extent.attr('width',0).attr('height', 0).attr('x', 0).attr('y', 0).style('display', 'none')\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    getSelectedObjects = () ->\r\n      er = _extent.node().getBoundingClientRect()\r\n      _selectables.each((d) ->\r\n          cr = this.getBoundingClientRect()\r\n          xHit = er.left < cr.right - cr.width / 3 and cr.left + cr.width / 3 < er.right\r\n          yHit = er.top < cr.bottom - cr.height / 3 and cr.top + cr.height / 3 < er.bottom\r\n          d3.select(this).classed('wk-chart-selected', yHit and xHit)\r\n        )\r\n      allSelected = _chartArea.selectAll('.wk-chart-selected').data()\r\n      _chartArea.classed('wk-chart-has-selected-items', allSelected.length > 0)\r\n      return allSelected\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    setSelection = (left, right, top, bottom) ->\r\n      if _brushX\r\n        if me.x().reverse()\r\n          s = left\r\n          left = right\r\n          right = s\r\n        #test if selected elements are changed\r\n        _leftVal = me.x().invert(left)\r\n        _rightVal = me.x().invert(right)\r\n        if _lastLeftVal isnt _leftVal or _lastRightVal isnt _rightVal\r\n          _lastRightVal = _rightVal\r\n          _lastLeftVal = _leftVal\r\n          _left = me.x().findIndex(_leftVal)\r\n          _right = me.x().findIndex(_rightVal)\r\n          _boundsIdx = [_left, _right]\r\n          # bounds have changed, update bounds values array\r\n          if me.x().isOrdinal()\r\n            _boundsValues = _data.map((d) -> me.x().value(d)).slice(_left, _right + 1)\r\n          else\r\n            _boundsValues = [me.x().value(_data[_boundsIdx[0]]), me.x().value(_data[_right])]\r\n          _boundsDomain = _data.slice(_left, _right+ 1)\r\n          _brushEvents.brush(_boundsIdx, _boundsValues, _boundsDomain)\r\n          selectionSharing.setSelection _boundsValues, _boundsIdx, _brushGroup\r\n      if _brushY\r\n        #test if selected elements are changed\r\n        if me.y().reverse()\r\n          s = top\r\n          top = bottom\r\n          bottom = s\r\n        _bottomVal = me.y().invert(bottom)\r\n        _topVal = me.y().invert(top)\r\n        if _lastBottomVal isnt _bottomVal or _lastTopVal isnt _topVal\r\n          _lastBottomVal = _bottomVal\r\n          _lastTopVal = _topVal\r\n          _bottom = me.y().findIndex(_bottomVal)\r\n          _top = me.y().findIndex(_topVal)\r\n          _boundsIdx = [_bottom, _top]\r\n          if me.y().isOrdinal()\r\n            _boundsValues = _data.map((d) -> me.y().value(d)).slice(_bottom, _top + 1)\r\n          else\r\n            _boundsValues = [me.y().value(_data[_bottom]), me.y().value(_data[_top])]\r\n          _boundsDomain = _data.slice(_bottom, _top + 1)\r\n          _brushEvents.brush(_boundsIdx, _boundsValues, _boundsDomain)\r\n          selectionSharing.setSelection _boundsValues, _boundsIdx, _brushGroup\r\n      if _brushXY\r\n        newDomain = getSelectedObjects()\r\n        if _.xor(_boundsDomain, newDomain).length > 0\r\n          _boundsIdx = []\r\n          _boundsValues = []\r\n          _boundsDomain = newDomain\r\n          _brushEvents.brush(_boundsIdx, _boundsValues, _boundsDomain)\r\n          selectionSharing.setSelection _boundsValues, _boundsIdx, _brushGroup\r\n\r\n    clearSelection = () ->\r\n      _boundsIdx = []\r\n      _boundsValues = []\r\n      _boundsDomain = []\r\n      _selectables.classed('wk-chart-selected', false)\r\n      _chartArea.classed('wk-chart-has-selected-items', false)\r\n      selectionSharing.setSelection _boundsValues, _boundsIdx, _brushGroup\r\n      _.delay(   # ensure digest cycle from button pressed is completed\r\n          () ->\r\n            _brushEvents.brush(_boundsIdx, _boundsValues, _boundsDomain)\r\n            _brushEvents.brushEnd(_boundsIdx, _boundsValues, _boundsDomain)\r\n        , 20\r\n      )\r\n\r\n\r\n\r\n    #--- BrushStart Event Handler --------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n    brushStart = () ->\r\n      #register a mouse handlers for the brush\r\n      d3.event.preventDefault()\r\n      _eventTarget = d3.select(d3.event.target)\r\n      _evTargetData = _eventTarget.datum()\r\n      if _eventTarget.classed('wk-chart-selectable')\r\n        _evTargetData = {name:'forwarded'}\r\n      _areaBox = _areaNode.getBBox()\r\n      _startPos = d3.mouse(_areaNode)\r\n      startTop = top\r\n      startLeft = left\r\n      startRight = right\r\n      startBottom = bottom\r\n      d3.select(_areaNode).selectAll(\".wk-chart-resize\").style(\"display\", null)\r\n      d3.select(_areaNode).select('.wk-chart-selectable').style('pointer-events','none')\r\n      _extent.style('display',null)\r\n      d3.select('body').style('cursor', d3.select(d3.event.target).style('cursor'))\r\n\r\n      d3.select($window).on('mousemove.brush', brushMove).on('mouseup.brush', brushEnd)\r\n\r\n      _tooltip.hide(true)\r\n      _boundsIdx = [undefined, undefined]\r\n      _boundsDomain = [undefined]\r\n      _selectables = _chartArea.selectAll('.wk-chart-selectable')\r\n      _brushEvents.brushStart()\r\n      timing.clear()\r\n      timing.init()\r\n\r\n    #--- BrushEnd Event Handler ----------------------------------------------------------------------------------------\r\n\r\n    brushEnd = () ->\r\n      #de-register handlers\r\n\r\n      d3.select($window).on 'mousemove.brush', null\r\n      d3.select($window).on 'mouseup.brush', null\r\n      d3.select(_areaNode).style('pointer-events','all').selectAll('.wk-chart-resize').style('display', null) # show the resize handles\r\n      d3.select(_areaNode).select('.wk-chart-selectable').style('pointer-events',null)\r\n      d3.select('body').style('cursor', null)\r\n      _tooltip.hide(false)\r\n      _brushEvents.brushEnd(_boundsIdx, _boundsValues, _boundsDomain)\r\n      #timing.report()\r\n\r\n    #--- BrushMove Event Handler ---------------------------------------------------------------------------------------\r\n\r\n    brushMove = () ->\r\n      #$log.info 'brushmove'\r\n      pos = d3.mouse(_areaNode)\r\n      deltaX = pos[0] - _startPos[0]\r\n      deltaY = pos[1] - _startPos[1]\r\n\r\n      # this elaborate code is needed to deal with scenarios when mouse moves fast and the events do not hit x/y + delta\r\n      # does not hi the 0 point maye there is a more elegant way to write this, but for now it works :-)\r\n\r\n      leftMv = (delta) ->\r\n        pos = startLeft + delta\r\n        left = if pos >= 0 then (if pos < startRight then pos else startRight) else 0\r\n        right = if pos <= _areaBox.width then (if pos < startRight then startRight else pos) else _areaBox.width\r\n\r\n      rightMv = (delta) ->\r\n        pos = startRight + delta\r\n        left = if pos >= 0 then (if pos < startLeft then pos else startLeft) else 0\r\n        right = if pos <= _areaBox.width then (if pos < startLeft then startLeft else pos) else _areaBox.width\r\n\r\n      topMv = (delta) ->\r\n        pos = startTop + delta\r\n        top = if pos >= 0 then (if pos < startBottom then pos else startBottom) else 0\r\n        bottom = if pos <= _areaBox.height then (if pos > startBottom then pos else startBottom ) else _areaBox.height\r\n\r\n      bottomMv = (delta) ->\r\n        pos = startBottom + delta\r\n        top = if pos >= 0 then (if pos < startTop then pos else startTop) else 0\r\n        bottom = if pos <= _areaBox.height then (if pos > startTop then pos else startTop ) else _areaBox.height\r\n\r\n      horMv = (delta) ->\r\n        if startLeft + delta >= 0\r\n          if startRight + delta <= _areaBox.width\r\n            left = startLeft + delta\r\n            right = startRight + delta\r\n          else\r\n            right = _areaBox.width\r\n            left = _areaBox.width - (startRight - startLeft)\r\n        else\r\n          left = 0\r\n          right = startRight - startLeft\r\n\r\n      vertMv = (delta) ->\r\n        if startTop + delta >= 0\r\n          if startBottom + delta <= _areaBox.height\r\n            top = startTop + delta\r\n            bottom = startBottom + delta\r\n          else\r\n            bottom = _areaBox.height\r\n            top = _areaBox.height - (startBottom - startTop)\r\n        else\r\n          top = 0\r\n          bottom = startBottom - startTop\r\n\r\n      switch _evTargetData.name\r\n        when 'background', 'forwarded'\r\n          if deltaX + _startPos[0] > 0\r\n            left = if deltaX < 0 then _startPos[0] + deltaX else _startPos[0]\r\n            if left + Math.abs(deltaX) < _areaBox.width\r\n              right = left + Math.abs(deltaX)\r\n            else\r\n              right = _areaBox.width\r\n          else\r\n            left = 0\r\n\r\n          if deltaY + _startPos[1] > 0\r\n            top = if deltaY < 0 then _startPos[1] + deltaY else _startPos[1]\r\n            if top + Math.abs(deltaY) < _areaBox.height\r\n              bottom = top + Math.abs(deltaY)\r\n            else\r\n              bottom = _areaBox.height\r\n          else\r\n            top = 0\r\n        when 'extent'\r\n          vertMv(deltaY); horMv(deltaX)\r\n        when 'n'\r\n          topMv(deltaY)\r\n        when 's'\r\n          bottomMv(deltaY)\r\n        when 'w'\r\n          leftMv(deltaX)\r\n        when 'e'\r\n          rightMv(deltaX)\r\n        when 'nw'\r\n          topMv(deltaY); leftMv(deltaX)\r\n        when 'ne'\r\n          topMv(deltaY); rightMv(deltaX)\r\n        when 'sw'\r\n          bottomMv(deltaY); leftMv(deltaX)\r\n        when 'se'\r\n          bottomMv(deltaY); rightMv(deltaX)\r\n\r\n      positionBrushElements(left, right, top, bottom)\r\n      setSelection(left, right, top, bottom)\r\n\r\n    #--- Brush ---------------------------------------------------------------------------------------------------------\r\n\r\n    me.brush = (s) ->\r\n      if arguments.length is 0 then return _overlay\r\n      else\r\n        if not _active then return\r\n        _overlay = s\r\n        _brushXY = me.x() and me.y()\r\n        _brushX = me.x() and not me.y()\r\n        _brushY = me.y() and not me.x()\r\n        # create the handler elements and register the handlers\r\n        s.style({'pointer-events': 'all', cursor: 'crosshair'})\r\n        _extent = s.append('rect').attr({class:'wk-chart-extent', x:0, y:0, width:0, height:0}).style({'cursor':'move'}).datum({name:'extent'})\r\n        # resize handles for the sides\r\n        if _brushY or _brushXY\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-n').style({cursor:'ns-resize', display:'none'})\r\n            .append('rect').attr({x:0, y: -3, width:0, height:6}).datum({name:'n'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-s').style({cursor:'ns-resize', display:'none'})\r\n            .append('rect').attr({x:0, y: -3, width:0, height:6}).datum({name:'s'})\r\n        if _brushX or _brushXY\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-w').style({cursor:'ew-resize', display:'none'})\r\n            .append('rect').attr({y:0, x: -3, width:6, height:0}).datum({name:'w'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-e').style({cursor:'ew-resize', display:'none'})\r\n            .append('rect').attr({y:0, x: -3, width:6, height:0}).datum({name:'e'})\r\n        # resize handles for the corners\r\n        if _brushXY\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-nw').style({cursor:'nwse-resize', display:'none'})\r\n          .append('rect').attr({x: -3, y: -3, width:6, height:6}).datum({name:'nw'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-ne').style({cursor:'nesw-resize', display:'none'})\r\n          .append('rect').attr({x: -3, y: -3, width:6, height:6}).datum({name:'ne'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-sw').style({cursor:'nesw-resize', display:'none'})\r\n          .append('rect').attr({x: -3, y: -3, width:6, height:6}).datum({name:'sw'})\r\n          s.append('g').attr('class', 'wk-chart-resize wk-chart-se').style({cursor:'nwse-resize', display:'none'})\r\n          .append('rect').attr({x: -3, y: -3, width:6, height:6}).datum({name:'se'})\r\n        #register handler. Please note, brush wants the mouse down exclusively !!!\r\n        s.on 'mousedown.brush', brushStart  # de-registered by container when deleting chart area\r\n\r\n        return me\r\n\r\n    #--- Extent resize handler -----------------------------------------------------------------------------------------\r\n\r\n    resizeExtent = () ->\r\n      if _areaBox\r\n        #$log.info 'resizeHandler'\r\n        newBox = _areaNode.getBBox()\r\n        horizontalRatio = _areaBox.width / newBox.width\r\n        verticalRatio = _areaBox.height / newBox.height\r\n        top = top / verticalRatio\r\n        startTop = startTop / verticalRatio\r\n        bottom = bottom / verticalRatio\r\n        startBottom = startBottom / verticalRatio\r\n        left = left / horizontalRatio\r\n        startLeft = startLeft / horizontalRatio\r\n        right = right / horizontalRatio\r\n        startRight = startRight / horizontalRatio\r\n        _startPos[0] = _startPos[0] / horizontalRatio\r\n        _startPos[1] = _startPos[1] / verticalRatio\r\n        _areaBox = newBox\r\n        positionBrushElements(left, right, top, bottom)\r\n\r\n    #--- Brush Properties --------------------------------------------------------------------------------------------\r\n\r\n    me.chart = (val) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = val\r\n        _chart.lifeCycle().on 'resize.brush', resizeExtent\r\n        return me #to enable chaining\r\n\r\n    me.active = (val) ->\r\n      if arguments.length is 0 then return _active\r\n      else\r\n        _active = val\r\n        return me #to enable chaining\r\n\r\n    me.x = (val) ->\r\n      if arguments.length is 0 then return _x\r\n      else\r\n        _x = val\r\n        return me #to enable chaining\r\n\r\n    me.y = (val) ->\r\n      if arguments.length is 0 then return _y\r\n      else\r\n        _y = val\r\n        return me #to enable chaining\r\n\r\n    me.area = (val) ->\r\n      if arguments.length is 0 then return _chartArea\r\n      else\r\n        if val is undefined\r\n          _areaNode = undefined\r\n          _chartArea = undefined\r\n        else if not _chartArea\r\n          _chartArea = val\r\n          _areaNode = _chartArea.node()\r\n          #_areaBox = _area.getBBox() need to get when calculating size to deal with resizing\r\n          me.brush(_chartArea)\r\n          _selectables = _chartArea.selectAll('.wk-chart-selectable')\r\n\r\n        return me #to enable chaining\r\n\r\n    me.container = (val) ->\r\n      if arguments.length is 0 then return _container\r\n      else\r\n        _container = val\r\n\r\n        return me #to enable chaining\r\n\r\n    me.data = (val) ->\r\n      if arguments.length is 0 then return _data\r\n      else\r\n        _data = val\r\n        return me #to enable chaining\r\n\r\n    me.brushGroup = (val) ->\r\n      if arguments.length is 0 then return _brushGroup\r\n      else\r\n        _brushGroup = val\r\n        selectionSharing.createGroup(_brushGroup)\r\n        return me #to enable chaining\r\n\r\n    me.tooltip = (val) ->\r\n      if arguments.length is 0 then return _tooltip\r\n      else\r\n        _tooltip = val\r\n        return me #to enable chaining\r\n\r\n    me.on = (name, callback) ->\r\n      _brushEvents.on name, callback\r\n\r\n    me.extent = () ->\r\n      return _boundsIdx\r\n\r\n    me.events = () ->\r\n      return _brushEvents\r\n\r\n    me.empty = () ->\r\n      return _boundsDomain.length is 0\r\n\r\n    me.clearBrush = () ->\r\n      console.log 'Brush cleared'\r\n      hideBrushElements()\r\n      clearSelection()\r\n\r\n\r\n    return me\r\n  return behaviorBrush","angular.module('wk.chart').factory 'behavior', ($log, $window, behaviorTooltip, behaviorBrush, behaviorSelect) ->\r\n\r\n  behavior = () ->\r\n\r\n    _tooltip = behaviorTooltip()\r\n    _brush = behaviorBrush()\r\n    _selection = behaviorSelect()\r\n    _brush.tooltip(_tooltip)\r\n\r\n    chartArea = (chartArea) ->\r\n      _brush.area(chartArea)\r\n      _tooltip.area(chartArea)\r\n      _selection.area(chartArea)\r\n\r\n    container = (container) ->\r\n      _brush.container(container)\r\n\r\n      _tooltip.container(container)\r\n\r\n    chart = (chart) ->\r\n      _brush.chart(chart)\r\n      _tooltip.chart(chart)\r\n\r\n    return {tooltip:_tooltip, brush:_brush, selected:_selection, chartArea:chartArea, container:container, chart:chart}\r\n  return behavior","angular.module('wk.chart').factory 'behaviorSelect', ($log) ->\r\n  selectId = 0\r\n\r\n  select = () ->\r\n\r\n    _id = \"select#{selectId++}\"\r\n    _chartArea = undefined\r\n    _layout = undefined\r\n    _active = false\r\n    _selectionEvents = d3.dispatch('selected')\r\n\r\n    clicked = () ->\r\n      if not _active then return\r\n      obj = d3.select(this)\r\n      if not _active then return\r\n      if obj.classed('wk-chart-selectable')\r\n        isSelected = obj.classed('wk-chart-selected')\r\n        obj.classed('wk-chart-selected', not isSelected)\r\n        selectedObjects = _chartArea.selectAll('.wk-chart-selected')\r\n        selectedObjectsData = selectedObjects.data().map((d) -> if d.data then d.data else d)\r\n        _chartArea.classed('wk-chart-has-selected-items', selectedObjectsData.length > 0)\r\n        # ensure that only the original values are reported back\r\n\r\n        _layout.lifeCycle().objectsSelected(selectedObjects)\r\n        _selectionEvents.selected(selectedObjectsData)\r\n\r\n    me = (sel) ->\r\n      if arguments.length is 0 then return me\r\n      else\r\n        sel\r\n          # register selection events\r\n          .on 'click', clicked\r\n        return me\r\n\r\n    me.id = () ->\r\n      return _id\r\n\r\n    me.active = (val) ->\r\n      if arguments.length is 0 then return _active\r\n      else\r\n        _active = val\r\n        return me #to enable chaining\r\n\r\n    me.clearSelection = () ->\r\n      $log.log 'selection Cleared'\r\n      if _chartArea\r\n        _chartArea.selectAll('.wk-chart-selected').classed('wk-chart-selected', false)\r\n        _chartArea.classed('wk-chart-has-selected-items', false)\r\n        _layout.lifeCycle().objectsSelected(_chartArea.selectAll('.wk-chart-selected'))\r\n\r\n    me.area = (val) ->\r\n      if arguments.length is 0 then return _chartArea\r\n      else\r\n        _chartArea = val\r\n        return me #to enable chaining\r\n\r\n    me.layout = (val) ->\r\n      if arguments.length is 0 then return _layout\r\n      else\r\n        _layout = val\r\n        return me\r\n\r\n    me.events = () ->\r\n      return _selectionEvents\r\n\r\n    me.on = (name, callback) ->\r\n      _selectionEvents.on name, callback\r\n      return me\r\n\r\n    return me\r\n\r\n  return select","angular.module('wk.chart').factory 'behaviorTooltip', ($log, $document, $rootScope, $compile, $templateCache, wkChartTemplates) ->\r\n\r\n  behaviorTooltip = () ->\r\n\r\n    _active = false\r\n    _path = ''\r\n    _hide = false\r\n    _showMarkerLine = undefined\r\n    _markerG = undefined\r\n    _markerLine = undefined\r\n    _area = undefined\r\n    _chart = undefined\r\n    _areaNode= undefined\r\n    _container = undefined\r\n    _scales = undefined\r\n    _markerScale = undefined\r\n    _data = undefined\r\n    _reEntered = false\r\n    _tooltipDispatch = d3.dispatch('enter', 'moveData', 'moveMarker', 'leave')\r\n\r\n    _templ = wkChartTemplates.tooltipTemplate()\r\n    _templScope = undefined #_chart.scope().$new(true)\r\n    _compiledTempl = undefined #$compile(_templ)(_templScope)\r\n    body = $document.find('body')\r\n\r\n    bodyRect = body[0].getBoundingClientRect()\r\n\r\n    me = () ->\r\n\r\n    #--- helper Functions ----------------------------------------------------------------------------------------------\r\n\r\n    positionBox = () ->\r\n      rect = _compiledTempl[0].getBoundingClientRect()\r\n      clientX = if bodyRect.right - 20 > d3.event.clientX + rect.width + 10 then d3.event.clientX + 10 else d3.event.clientX - rect.width - 10\r\n      clientY = if bodyRect.bottom - 20 > d3.event.clientY + rect.height + 10 then d3.event.clientY + 10 else d3.event.clientY - rect.height - 10\r\n      _.assign(_templScope.tooltipStyle, {\r\n        position: 'absolute'\r\n        left: clientX + 'px'\r\n        top: clientY + 'px'\r\n        'z-index': 1500\r\n        opacity: 1\r\n      })\r\n      _templScope.$apply()\r\n\r\n    positionInitial = () ->\r\n      _.assign(_templScope.tooltipStyle, {\r\n        position: 'absolute'\r\n        left: '0px'\r\n        top: '0px'\r\n        'z-index': 1500\r\n        opacity: 0\r\n      })\r\n      _templScope.$apply()  # ensure tooltip gets rendered and size attributes get set correctly\r\n\r\n    #--- TooltipStart Event Handler ------------------------------------------------------------------------------------\r\n\r\n    tooltipEnter = () ->\r\n      if not _active or _hide then return\r\n      # append data div\r\n\r\n      _templScope.layers = {}\r\n\r\n      # get tooltip data value depending on the scenario\r\n      if _showMarkerLine # show tooltip based on mouse position. Invert the position and find the corresponding data value #TODO Better name for the indicator value\r\n        _pos = d3.mouse(this)\r\n        keyValue = _markerScale.invert(if _markerScale.isHorizontal() then _pos[0] else _pos[1])\r\n        dataObj = _markerScale.find(keyValue)\r\n        _templScope.ttData = dataObj\r\n      else # show tooltip from element the mouse is over. Get the linked datum of the object\r\n        value = d3.select(this).datum()\r\n        dataObj = _templScope.ttData = if value.data then value.data else value\r\n      _tooltipDispatch.enter.apply(_templScope, [dataObj, dataObj]) # get the data so the TT can be positioned correctly\r\n\r\n      # append and position the tooltp box\r\n      ttElem = d3.select('.wk-chart-tooltip')\r\n      if ttElem.empty()\r\n        body.append(_compiledTempl)\r\n        _templScope.tooltipStyle = me.chart().tooltipStyle()\r\n        positionInitial() #position in upper left corner to compute the space requirements. positionBox() will the move it to the right\r\n                        # place and ensure that box does not move outside the borders\r\n\r\n      # create a marker line if required\r\n      if _showMarkerLine\r\n        _markerG = _container.select('.wk-chart-tooltip-marker')\r\n        if _markerG.empty()\r\n          _areaBox = _area.select('.wk-chart-background').node().getBBox()\r\n          _markerG = _container.append('g')  # need to append marker to chart area to ensure it is on top of the chart elements Fix 10\r\n            .attr('class', 'wk-chart-tooltip-marker')\r\n          _markerLine = _markerG.append('line')\r\n          if _markerScale.isHorizontal()\r\n            _markerLine.attr({class:'wk-chart-marker-line', x0:0, x1:0, y0:0,y1:_areaBox.height})\r\n          else\r\n            _markerLine.attr({class:'wk-chart-marker-line', x0:0, x1:_areaBox.width, y0:0,y1:0})\r\n\r\n          _markerLine.style({stroke: 'darkgrey', 'pointer-events': 'none'})\r\n\r\n        _tooltipDispatch.moveMarker.apply(_markerG, [keyValue, dataObj])\r\n\r\n    #--- TooltipMove  Event Handler ------------------------------------------------------------------------------------\r\n\r\n    tooltipMove = () ->\r\n      if not _active or _hide then return\r\n      _pos = d3.mouse(_areaNode)\r\n\r\n      if _showMarkerLine\r\n        if not _markerG\r\n          # mouse entered chart area with mouse button down.\r\n          tooltipEnter.apply(this,arguments) # pass event context along\r\n          return\r\n        keyValue = _markerScale.invert(if _markerScale.isHorizontal() then _pos[0] else _pos[1])\r\n        dataObj = _markerScale.find(keyValue)\r\n        _tooltipDispatch.moveMarker.apply(_markerG, [keyValue, dataObj])\r\n        _templScope.ttData = dataObj\r\n        _tooltipDispatch.moveData.apply(_templScope, [keyValue, dataObj])\r\n      #_templScope.$apply()\r\n      positionBox()\r\n\r\n    #--- TooltipLeave Event Handler ------------------------------------------------------------------------------------\r\n\r\n    tooltipLeave = () ->\r\n      if _markerG\r\n        _markerG.remove()\r\n      _markerG = undefined\r\n      _compiledTempl.remove()\r\n\r\n    #--- Interface to brush --------------------------------------------------------------------------------------------\r\n\r\n    forwardToBrush = (e) ->\r\n      # forward the mousdown event to the brush overlay to ensure that brushing can start at any point in the drawing area\r\n\r\n      brush_elm = _areaNode;\r\n      if d3.event.target isnt brush_elm #do not dispatch if target is overlay\r\n        new_click_event = new Event('mousedown');\r\n        new_click_event.pageX = d3.event.pageX;\r\n        new_click_event.clientX = d3.event.clientX;\r\n        new_click_event.pageY = d3.event.pageY;\r\n        new_click_event.clientY = d3.event.clientY;\r\n        brush_elm.dispatchEvent(new_click_event);\r\n\r\n    forwardToSelection = (e) ->\r\n      # forward click event to selection module\r\n      $log.debug e, d3.event\r\n\r\n\r\n    me.hide = (val) ->\r\n      if arguments.length is 0 then return _hide\r\n      else\r\n        _hide = val\r\n        if _markerG\r\n          _markerG.style('visibility', if _hide then 'hidden' else 'visible')\r\n        _templScope.ttHide = _hide\r\n        _templScope.$apply()\r\n        return me #to enable chaining\r\n\r\n\r\n    #-- Tooltip properties ---------------------------------------------------------------------------------------------\r\n\r\n    me.chart = (chart) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = chart\r\n        _chart.lifeCycle().on 'destroy.tooltip', () ->\r\n          if _templScope\r\n            $log.log 'destroying tooltip scope', _templScope.$id, _chart.id()\r\n            _templScope.map = undefined\r\n            _templScope.scale = undefined\r\n            _templScope.properties = undefined\r\n            _templScope.label = undefined\r\n            _templScope.value = undefined\r\n            _templScope.$destroy()\r\n          _compiledTempl = undefined\r\n          _areaNode = undefined\r\n        return me\r\n\r\n    me.active = (val) ->\r\n      if arguments.length is 0 then return _active\r\n      else\r\n        _active = val\r\n        return me #to enable chaining\r\n\r\n    me.template = (path) ->\r\n      if arguments.length is 0 then return _path\r\n      else\r\n        _path = path\r\n        if _path.length > 0\r\n          _customTempl = $templateCache.get(_path)\r\n          # wrap template into positioning div\r\n          _templ = \"<div class=\\\"wk-chart-tooltip\\\" ng-style=\\\"tooltipStyle\\\" ng-hide=\\\"ttHide\\\">#{_customTempl}</div>\"\r\n\r\n        return me\r\n\r\n    me.area = (val) ->\r\n      if arguments.length is 0 then return _area\r\n      else\r\n        if val is undefined\r\n          _area = val\r\n          _areaNode = val\r\n        else\r\n          _area = val\r\n          _areaNode = _area.node()\r\n          if _showMarkerLine\r\n            me.tooltip(_area)\r\n        return me #to enable chaining\r\n\r\n    me.container = (val) ->\r\n      if arguments.length is 0 then return _container\r\n      else\r\n        _container = val\r\n        return me #to enable chaining\r\n\r\n    me.markerScale = (val) ->\r\n      if arguments.length is 0 then return _markerScale\r\n      else\r\n        if val\r\n          _showMarkerLine = true\r\n          _markerScale = val\r\n        else\r\n          _showMarkerLine = false\r\n        return me #to enable chaining\r\n\r\n    me.data = (val) ->\r\n      if arguments.length is 0 then return _data\r\n      else\r\n        _data = val\r\n        return me #to enable chaining\r\n\r\n    me.on = (name, callback) ->\r\n      _tooltipDispatch.on name, callback\r\n\r\n    #--- Utility functions ---------------------------------------------------------------------------------------------\r\n\r\n    createClosure = (scaleFn) ->\r\n      return () ->\r\n        if _templScope.ttData then scaleFn(_templScope.ttData)\r\n\r\n    compileTemplate = (template) ->\r\n      if not _templScope\r\n\r\n        _templScope = _chart.scope().$new(true)   ## create the template scope as child of the chart's scope\r\n        $log.log 'creating tooltip scope', _templScope.$id, _chart.id()\r\n        # add scale access functions to scope\r\n        _templScope.properties = {}\r\n        _templScope.map = {}\r\n        _templScope.scale = {}\r\n        _templScope.label = {}\r\n        _templScope.value = {}\r\n        _templScope.ttHide = false\r\n        for name, scale of _chart.allScales().allKinds()\r\n          _templScope.map[name] = createClosure(scale.map)\r\n          _templScope.scale[name] = scale.scale()\r\n          _templScope.properties[name] = createClosure(scale.layerKeys)\r\n          _templScope.label[name] = scale.axisLabel()\r\n          _templScope.value[name] = createClosure(scale.value)\r\n          null\r\n\r\n      if not _compiledTempl\r\n        _compiledTempl = $compile(_templ)(_templScope) # and bind it to the tooltip template\r\n\r\n    #--- Tooltip -------------------------------------------------------------------------------------------------------\r\n\r\n    me.tooltip = (s) -> # register the tooltip events with the selection\r\n      if arguments.length is 0 then return me\r\n      else  # set tooltip for an objects selection\r\n        compileTemplate(_templ) # set up tooltip template\r\n        #me.chart().lifeCycle().on 'destroy.tooltip', tooltipLeave\r\n\r\n        if not _showMarkerLine or s.classed('wk-chart-area')  #Note: handlers are cleaned up when wk-chart-area is destroyed\r\n          s.on 'mouseenter.tooltip', tooltipEnter\r\n            .on 'mousemove.tooltip', tooltipMove\r\n            .on 'mouseleave.tooltip', tooltipLeave\r\n\r\n        #if not s.empty() and not s.classed('wk-chart-area')\r\n        #  s.on 'mousedown.tooltip', forwardToBrush\r\n\r\n    return me\r\n\r\n  return behaviorTooltip","angular.module('wk.chart').factory 'chart', ($log, scaleList, container, behavior, d3Animation) ->\r\n\r\n  chartCntr = 0\r\n\r\n  chart = () ->\r\n\r\n    _id = \"chart#{chartCntr++}\"\r\n\r\n    me = () ->\r\n\r\n    #--- Variable declarations and defaults ----------------------------------------------------------------------------\r\n\r\n    _layouts = []               # List of layouts for the chart\r\n    _container = undefined    # the charts drawing container object\r\n    _allScales = undefined    # Holds all scales of the chart, regardless of scale owner\r\n    _ownedScales = undefined  # holds the scles owned by chart, i.e. share scales\r\n    _data = undefined           # pointer to the last data set bound to chart\r\n    _showTooltip = false        # tooltip property\r\n    _scope = undefined          # holds a reference to the chart isolated scope\r\n    _toolTipTemplate = ''\r\n    _title = undefined\r\n    _subTitle = undefined\r\n    _editMode = false\r\n    _behavior = behavior()\r\n    _animationDuration = d3Animation.duration\r\n\r\n    #--- LifeCycle Dispatcher ------------------------------------------------------------------------------------------\r\n\r\n    _lifeCycle = d3.dispatch('configure', 'resize', 'prepareData', 'scaleDomains', 'rescaleDomains', 'sizeContainer', 'drawAxis', 'drawChart', 'newData', 'update', 'updateAttrs', 'scopeApply', 'destroy', 'animationStartState', 'animationEndState', 'editSelected' )\r\n    _brush = d3.dispatch('draw', 'change')\r\n\r\n    #--- Getter/Setter Functions ---------------------------------------------------------------------------------------\r\n\r\n    me.id = (id) ->\r\n      return _id\r\n\r\n    me.scope = (scope) ->\r\n      if arguments.length is 0 then return _scope\r\n      else\r\n        _scope = scope\r\n        return me\r\n\r\n    me.showTooltip = (trueFalse) ->\r\n      if arguments.length is 0 then return _showTooltip\r\n      else\r\n        _showTooltip = trueFalse\r\n        _behavior.tooltip.active(_showTooltip)\r\n        return me\r\n\r\n    me.toolTipTemplate = (path) ->\r\n      if arguments.length is 0 then return _toolTipTemplate\r\n      else\r\n        _toolTipTemplate = path\r\n        _behavior.tooltip.template(path)\r\n        return me\r\n\r\n    _tooltipStyle = {}\r\n    me.tooltipStyle = (val) ->\r\n      if arguments.length is 0 then return _tooltipStyle\r\n      if _.isObject(val)\r\n        _.assign(_tooltipStyle, val)\r\n      return me\r\n\r\n    me.title = (val) ->\r\n      if arguments.length is 0 then return _title\r\n      else\r\n        _title = val\r\n        return me\r\n\r\n    _titleStyle = {'font-size': '1.8em'}\r\n    me.titleStyle = (val) ->\r\n      if arguments.length is 0 then return _titleStyle\r\n      if _.isObject(val)\r\n        _.assign(_titleStyle, val)\r\n      return me\r\n\r\n    me.subTitle = (val) ->\r\n      if arguments.length is 0 then return _subTitle\r\n      else\r\n        _subTitle = val\r\n        return me\r\n\r\n    _subTitleStyle = {'font-size': '1.3em'}\r\n    me.subTitleStyle = (val) ->\r\n      if arguments.length is 0 then return _subTitleStyle\r\n      if _.isObject(val)\r\n        _.assign(_subTitleStyle, val)\r\n      return me\r\n\r\n    _backgroundStyle = {position:'relative'}\r\n    me.backgroundStyle = (val) ->\r\n      if arguments.length is 0 then return _backgroundStyle\r\n      if _.isObject(val)\r\n        _.assign(_backgroundStyle, val)\r\n        _backgroundStyle.position = 'relative'\r\n      return me\r\n\r\n    me.addLayout = (layout) ->\r\n      if arguments.length is 0 then return _layouts\r\n      else\r\n        _layouts.push(layout)\r\n        return me\r\n\r\n    me.addScale = (scale, layout) ->\r\n      _allScales.add(scale)\r\n      if layout\r\n        layout.scales().add(scale)\r\n      else\r\n        _ownedScales.add(scale)\r\n      return me\r\n\r\n    me.prepareScaleHierarchy = () ->\r\n      for id, s of _allScales.getOwned()\r\n        if not _ownedScales.hasScale(s) and ps = _ownedScales.getKind(s.kind(), s.orientation())\r\n          s.parentScale(ps)\r\n          ps.rangePadding(s.rangePadding())\r\n          if s.reverse()\r\n            ps.reverse(true)\r\n          else\r\n            if ps.reverse()\r\n              s.reverse(true)\r\n\r\n    me.animationDuration = (val) ->\r\n      if arguments.length is 0 then return _animationDuration\r\n      else\r\n        _animationDuration = val\r\n        return me #to enable chaining\r\n\r\n    #--- Edit Mode ----------------------------------------------------------------------------------------------\r\n\r\n    me.editMode = (val) ->\r\n      if arguments.length is 0 then return _editMode\r\n      if val isnt _editMode\r\n        _editMode = val\r\n        if _editMode\r\n          me.container().registerEditHooks()\r\n        else\r\n          me.container().deregisterEditHooks()\r\n      return me\r\n\r\n    #--- Getter Functions ----------------------------------------------------------------------------------------------\r\n\r\n    me.lifeCycle = (val) ->\r\n      return _lifeCycle\r\n\r\n    me.layouts = () ->\r\n      return _layouts\r\n\r\n    me.scales = () ->\r\n      return _ownedScales\r\n\r\n    me.allScales = () ->\r\n      return _allScales\r\n\r\n    me.hasScale = (scale) ->\r\n      return !!_allScales.has(scale)\r\n\r\n    me.container = () ->\r\n      return _container\r\n\r\n    me.brush = () ->\r\n      return _brush\r\n\r\n    me.getData = () ->\r\n      return _data\r\n\r\n    me.behavior = () ->\r\n      return _behavior\r\n\r\n    #--- Chart drawing life cycle --------------------------------------------------------------------------------------\r\n\r\n    lifecycleFull = (data,noAnimation) ->\r\n      if data\r\n        $log.log 'executing full life cycle'\r\n        _data = data\r\n        _scope.filteredData = data                    # put data on scope so tooltip and legend can access it\r\n        _scope.scales = _allScales\r\n        me.prepareScaleHierarchy()\r\n        _lifeCycle.prepareData(data, noAnimation)    # calls the registered layout types\r\n        _lifeCycle.animationStartState(data)         # call after prepareData to ensure scales are set up correctly\r\n        _lifeCycle.scaleDomains(data, noAnimation)   # calls registered the scales\r\n        _lifeCycle.sizeContainer(data, noAnimation)  # calls container\r\n        _lifeCycle.drawAxis(noAnimation)             # calls container\r\n        _lifeCycle.animationEndState(data)\r\n        _lifeCycle.drawChart(data, noAnimation)     # calls layout\r\n        _lifeCycle.scopeApply()                     # need a digest cycle after the debouce to ensure legend animations execute\r\n        _container.registerEditHooks()\r\n\r\n    debounced = _.debounce(lifecycleFull, 100)\r\n\r\n    me.execLifeCycleFull = lifecycleFull\r\n\r\n    me.resizeLifeCycle = (noAnimation) ->\r\n      if _data\r\n        $log.log 'executing resize life cycle'\r\n        _lifeCycle.sizeContainer(_data, noAnimation)  # calls container\r\n        _lifeCycle.drawAxis(noAnimation)              # calls container\r\n        _lifeCycle.drawChart(_data, noAnimation)\r\n        _lifeCycle.scopeApply()\r\n\r\n    me.newDataLifeCycle = (data, noAnimation) ->\r\n      if data\r\n        $log.log 'executing new data life cycle'\r\n        _data = data\r\n        _scope.filteredData = data\r\n        _lifeCycle.prepareData(data, noAnimation)    # calls the registered layout types\r\n        _lifeCycle.scaleDomains(data, noAnimation)\r\n        _lifeCycle.drawAxis(noAnimation)              # calls container\r\n        _lifeCycle.drawChart(data, noAnimation)\r\n\r\n    me.attributeChange = (noAnimation) ->\r\n      if _data\r\n        $log.log 'executing attribute change life cycle'\r\n        _lifeCycle.sizeContainer(_data, noAnimation)\r\n        _lifeCycle.drawAxis(noAnimation)              # calls container\r\n        _lifeCycle.drawChart(_data, noAnimation)\r\n\r\n    me.brushExtentChanged = () ->\r\n      if _data\r\n        _lifeCycle.drawAxis(true)              # No Animation\r\n        _lifeCycle.drawChart(_data, true)\r\n\r\n    me.lifeCycle().on 'newData.chart', _.debounce(lifecycleFull, 10)\r\n    me.lifeCycle().on 'resize.chart', me.resizeLifeCycle\r\n    me.lifeCycle().on 'update.chart', (noAnimation) -> me.execLifeCycleFull(_data, noAnimation)\r\n    me.lifeCycle().on 'updateAttrs', me.attributeChange\r\n    me.lifeCycle().on 'rescaleDomains', _lifeCycle.scaleDomains(_data, true) #no animation\r\n\r\n    #--- Initialization ------------------------------------------------------------------------------------------------\r\n\r\n    _behavior.chart(me)\r\n    _container = container().chart(me)   # the charts drawing container object\r\n    _allScales = scaleList()    # Holds all scales of the chart, regardless of scale owner\r\n    _ownedScales = scaleList()  # holds the scales owned by chart, i.e. share scales\r\n\r\n    return me\r\n\r\n  return chart","angular.module('wk.chart').factory 'container', ($log, $window, wkChartMargins, wkChartTemplates, $templateCache) ->\r\n\r\n  containerCnt = 0\r\n\r\n  container = () ->\r\n\r\n    me = ()->\r\n\r\n    #--- Variable declarations and defaults ----------------------------------------------------------------------------\r\n\r\n    _containerId = 'cntnr' + containerCnt++\r\n    _chart = undefined\r\n    _element = undefined\r\n    _elementSelection = undefined\r\n    _chartAreaDiv = undefined\r\n    _layouts = []\r\n    _legends = []\r\n    _svg = undefined\r\n    _container = undefined\r\n    _spacedContainer = undefined\r\n    _chartArea = undefined\r\n    _gridArea = undefined\r\n    _margin = angular.copy(wkChartMargins.default)\r\n    _innerWidth = 0\r\n    _innerHeight = 0\r\n    _titleHeight = 0\r\n    _data = undefined\r\n    _overlay = undefined\r\n    _behavior = undefined\r\n    _duration = 0\r\n    drawPadding = 0\r\n\r\n    #--- Getter/Setter Functions ---------------------------------------------------------------------------------------\r\n\r\n    me.id = () ->\r\n      return _containerId\r\n\r\n    me.chart = (chart) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = chart\r\n        # register to lifecycle events\r\n        _chart.lifeCycle().on \"sizeContainer.#{me.id()}\", me.drawChartFrame\r\n        #_chart.lifeCycle().on \"drawAxis.#{me.id()}\", me.drawChartFrame\r\n        return me\r\n\r\n    me.element = (elem) ->\r\n      if arguments.length is 0 then return _element\r\n      else\r\n        _resizeHandler = () ->  me.chart().lifeCycle().resize(true) # no animation\r\n        _element = elem\r\n        if _element\r\n          _elementSelection = d3.select(_element)\r\n          if _elementSelection.empty()\r\n            $log.error \"Error: Element #{_element} does not exist\"\r\n          else\r\n            _genChartFrame()\r\n            # find the div element to attach the handler to\r\n            resizeTarget = _elementSelection.select('.wk-chart').node()\r\n            new ResizeSensor(resizeTarget, _resizeHandler)\r\n\r\n        return me\r\n\r\n    me.addLayout = (layout) ->\r\n      _layouts.push(layout)\r\n      return me\r\n\r\n    me.height = () ->\r\n      return _innerHeight\r\n\r\n    me.width = () ->\r\n      return _innerWidth\r\n\r\n    me.margins = () ->\r\n      return _margin\r\n\r\n    me.getChartArea = () ->\r\n      return _chartArea\r\n\r\n    me.getOverlay = () ->\r\n      return _overlay\r\n\r\n    me.getContainer = () ->\r\n      return _spacedContainer\r\n\r\n    #--- Register and de-register edit hooks-----------------------------------------------------------------------------\r\n\r\n    me.registerEditHooks = () ->\r\n      if _chart.editMode()\r\n        me.chart().behavior().tooltip.active(false)\r\n        _container.selectAll('.wk-chart-axis-select').each((d) ->\r\n            size = this.parentElement.getBBox()\r\n            elem = d3.select(this)\r\n              .attr(size)\r\n        )\r\n        _elementSelection.selectAll('.wk-chart-axis-select, .wk-chart-line, .wk-chart-area-path, .wk-chart-marker, .wk-chart-legend')\r\n          .style('pointer-events', 'all')\r\n        _elementSelection.selectAll('.wk-chart-axis-select, .wk-chart-label-text, .wk-chart-data-label, .wk-chart-layer, .wk-chart-innerArc, .wk-chart-legend, .wk-chart-overlay, .wk-chart-bubble, .wk-chart-shape')\r\n          .style('cursor','pointer')\r\n          .on('click', (d) ->\r\n            $log.log 'clicked', d3.select(this).attr('class'), d\r\n            _chart.lifeCycle().editSelected(d3.select(this).attr('class'), d)\r\n          )\r\n      else\r\n        _container.selectAll('.wk-chart-axis-select, .wk-chart-line, .wk-chart-area-path, .wk-chart-legend')\r\n          .style('pointer-events', 'none')\r\n          .style('cursor', 'default')\r\n\r\n    #--- utility functions ---------------------------------------------------------------------------------------------\r\n    #  Return: text height\r\n    drawAndPositionText = (container, text, selector, style, offset) ->\r\n      elem = container.select('.' + selector.replace(' ','.'))\r\n      if elem.empty()\r\n        elem = container.append('text')\r\n          .attr({class:selector, 'text-anchor': 'middle', y:if offset then offset else 0})\r\n\r\n      elem.text(text).style(style)\r\n      #measure size and return it\r\n      return elem.node().getBBox().height\r\n\r\n\r\n    drawTitleArea = (title, subTitle) ->\r\n      titleAreaHeight = 0\r\n      area = _container.select('.wk-chart-title-area')\r\n      if area.empty()\r\n        area = _container.insert('g', '.wk-chart-area').attr('class','wk-chart-title-area wk-center-hor')\r\n      if title\r\n        _titleHeight = drawAndPositionText(area, title, 'wk-chart-title wk-chart-label-text', _chart.titleStyle())\r\n      if subTitle\r\n        drawAndPositionText(area, subTitle, 'wk-chart-subtitle wk-chart-label-text', _chart.subTitleStyle(), _titleHeight)\r\n\r\n      return area.node().getBBox().height\r\n\r\n    measureText = (textList, container, textClasses, style) ->\r\n      measureContainer = container.append('g')\r\n      for t in textList\r\n        measureContainer.append('text').attr('class':textClasses).text(t).style(style)\r\n\r\n      bounds = measureContainer.node().getBBox()\r\n      measureContainer.remove()\r\n      return bounds\r\n\r\n    tickLabelsAnchor = (dim) ->\r\n      rotation = dim.rotateTickLabels()\r\n      switch dim.axisOrient()\r\n        when 'bottom'\r\n          if rotation < 0 then 'end' else 'start'\r\n        when 'top'\r\n          if rotation > 0 then 'end' else 'start'\r\n        when 'right'\r\n          if Math.abs(rotation) >= 90 then 'end' else 'start'\r\n        when 'left'\r\n          if Math.abs(rotation) <= 90 then 'end' else 'start'\r\n\r\n    tickLabelsShift = (dim) ->\r\n      rotation = dim.rotateTickLabels()\r\n      switch dim.axisOrient()\r\n        when 'bottom'\r\n          return \"rotate(#{rotation}, 0, 10)\"\r\n        when 'top'\r\n          return \"rotate(#{rotation}, 0, -10)\"\r\n        when 'right'\r\n          return \"rotate(#{rotation}, 10, 0)\"\r\n        when 'left'\r\n          return \"rotate(#{rotation}, -10, 0)\"\r\n\r\n    getAxisRect = (dim) ->\r\n      axis = _container.append('g')\r\n      dim.range([0,500])\r\n      axis.call(dim.axis())\r\n\r\n      if dim.rotateTickLabels()\r\n        axis.selectAll(\"text\")\r\n        .attr({dy:'0.35em'})\r\n        .attr('transform', tickLabelsShift(dim))\r\n        .style('text-anchor', tickLabelsAnchor(dim))\r\n      axis.selectAll('text').style(dim.tickLabelStyle())\r\n\r\n      box = axis.node().getBBox()\r\n      axis.remove()\r\n      return box\r\n\r\n    drawAxis = (dim) ->\r\n      axis = _container.select(\".wk-chart-axis.wk-chart-#{dim.axisOrient()}\")\r\n      if axis.empty()\r\n        axis = _container.insert('g','.wk-chart-area').attr('class', 'wk-chart-axis wk-chart-' + dim.axisOrient())\r\n        axis.append('rect').attr('class',\"wk-chart-axis-select wk-chart-#{dim.axisOrient()}\")\r\n          .style({opacity: 0, 'pointer-events': 'none'})\r\n      axis.transition().duration(_duration).call(dim.axis())\r\n\r\n      if dim.rotateTickLabels()\r\n        axis.selectAll(\".wk-chart-#{dim.axisOrient()}.wk-chart-axis text\")\r\n          .attr({dy:'0.35em'})\r\n          .attr('transform', (d)-> tickLabelsShift(dim))\r\n          .style('text-anchor', tickLabelsAnchor(dim))\r\n          .style('pointer-events', 'none')\r\n          .style(dim.tickLabelStyle())\r\n      else\r\n        axis.selectAll(\".wk-chart-#{dim.axisOrient()}.wk-chart-axis text\")\r\n          .attr('transform', null)\r\n          .style('pointer-events', 'none')\r\n          .style(dim.tickLabelStyle())\r\n\r\n    _removeAxis = (orient) ->\r\n      _container.select(\".wk-chart-axis.wk-chart-#{orient}, .wk-chart-axis-select.wk-chart-#{orient}\").remove()\r\n\r\n    _removeLabel = (orient) ->\r\n      _container.select(\".wk-chart-label.wk-chart-#{orient}\").remove()\r\n\r\n    drawGrid = (s, noAnimation) ->\r\n      duration = if noAnimation then 0 else _duration\r\n      kind = s.kind()\r\n      tickValues = s.axis().tickValues()\r\n      if not tickValues\r\n        ticks = if s.isOrdinal() then s.scale().range() else s.scale().ticks()\r\n      else\r\n        ticks = tickValues\r\n      offset = if s.isOrdinal() then s.scale().rangeBand() / 2 else 0\r\n      gridLines = _gridArea.selectAll(\".wk-chart-grid.wk-chart-#{kind}\").data(ticks, (d) -> d)\r\n      gridLines.enter().append('line').attr('class', \"wk-chart-grid wk-chart-#{kind}\")\r\n        .style('pointer-events', 'none')\r\n        .style('opacity',0)\r\n      gridLines.style(s.gridStyle())\r\n      if kind is 'y'\r\n        gridLines.transition().duration(duration)\r\n          .attr({\r\n            x1: drawPadding,\r\n            x2: _innerWidth - drawPadding * 2,\r\n            y1:(d) -> if s.isOrdinal() then d + offset else s.scale()(d),\r\n            y2:(d) -> if s.isOrdinal() then d + offset else s.scale()(d)\r\n          })\r\n          .style('opacity',1)\r\n      else\r\n        gridLines.transition().duration(duration)\r\n          .attr({\r\n            y1: drawPadding,\r\n            y2: _innerHeight - drawPadding * 2,\r\n            x1:(d) -> if s.isOrdinal() then d + offset else s.scale()(d),\r\n            x2:(d) -> if s.isOrdinal() then d + offset else s.scale()(d)\r\n          })\r\n        .style('opacity',1)\r\n      gridLines.exit().transition().duration(duration).style('opacity',0).remove()\r\n\r\n    #--- Build the container -------------------------------------------------------------------------------------------\r\n    # build generic elements first\r\n\r\n    _genChartFrame = () ->\r\n      _chartAreaDiv = _elementSelection.append('div').attr('class', 'wk-chart')\r\n      _svg = _chartAreaDiv.append('svg').attr('class', 'wk-chart')\r\n      _defs = _svg.append('defs')\r\n      _defs.node().innerHTML = wkChartTemplates.svgDefTemplate()\r\n      _defs.append('clipPath').attr('id', \"wk-chart-clip-#{_containerId}\").append('rect')\r\n\r\n      _container= _svg.append('g').attr('class','wk-chart-container')\r\n      #_overlay = _container.append('g').attr('class', 'wk-chart-overlay').style('pointer-events', 'all')\r\n      #_overlay.append('rect').style('visibility', 'hidden').attr('class', 'wk-chart-background').datum({name:'background'})\r\n      _gridArea = _container.append('g').attr('class', 'wk-chart-grid-lines')\r\n      _chartArea = _container.append('g').attr('class', 'wk-chart-area')\r\n      _chartArea.append('rect').style('visibility', 'hidden').attr('class', 'wk-chart-background').datum({name:'background'})\r\n      #_chartArea.append('rect').attr({class:'wk-chart-extent', x:0, y:0, width:0, height:0}).style('cursor','move').datum({name:'extent'})\r\n      _container.append('g').attr('class','wk-chart-marker-area')\r\n\r\n    # start to build and size the elements from top to bottom\r\n\r\n    #--- chart frame (title, axis, grid) -------------------------------------------------------------------------------\r\n\r\n    me.drawChartFrame = (data, notAnimated) ->\r\n      bounds = _elementSelection.node().getBoundingClientRect()\r\n      _duration = if notAnimated then 0 else me.chart().animationDuration()\r\n      _height = bounds.height\r\n      _width = bounds.width\r\n      titleAreaHeight = drawTitleArea(_chart.title(), _chart.subTitle())\r\n\r\n      #--- get sizing of frame components before positioning them -------------------------------------------------------\r\n\r\n      axisRect = {top:{height:0, width:0},bottom:{height:0, width:0},left:{height:0, width:0},right:{height:0, width:0}}\r\n      labelHeight = {top:0 ,bottom:0, left:0, right:0}\r\n      dataLabelRect = {width:0, height:0}\r\n      dataLabels = {}\r\n      for l in _layouts\r\n        if l.showDataLabels()\r\n          dataLabels[l.showDataLabels()] = true\r\n\r\n      #for l in _layouts\r\n      #  dataLabelHeight = dataLabelWidth = 0\r\n      for k, s of _chart.allScales().getOwned()\r\n        if not s.parentScale()\r\n          if s.showAxis()\r\n            s.axis().scale(s.scale()).orient(s.axisOrient())  # ensure the axis works on the right scale\r\n            axis = _container.select(\".wk-chart-axis.wk-chart-#{s.axisOrient()}\")\r\n            axisRect[s.axisOrient()] = getAxisRect(s)\r\n            #--- draw label ---\r\n            label = _container.select(\".wk-chart-label.wk-chart-#{s.axisOrient()}\")\r\n            if s.showLabel()\r\n              if label.empty()\r\n                label = _container.insert('g', '.wk-chart-area').attr('class', 'wk-chart-label wk-chart-'  + s.axisOrient())\r\n              labelHeight[s.axisOrient()] = drawAndPositionText(label, s.axisLabel(), 'wk-chart-label-text wk-chart-' + s.axisOrient(), s.axisLabelStyle());\r\n            else\r\n              label.remove()\r\n\r\n          # calculate space required for data labels\r\n\r\n          if dataLabels[s.kind()]\r\n            if s.isHorizontal()\r\n              dataLabelWidth = wkChartMargins.dataLabelPadding.hor + measureText(s.formattedValue(data),  _container, 'wk-chart-data-label', l.dataLabelStyle()).width\r\n            else\r\n              dataLabelHeight = wkChartMargins.dataLabelPadding.vert + measureText(s.formattedValue(data), _container, 'wk-chart-data-label', l.dataLabelStyle()).height\r\n\r\n      #--- compute size of the drawing area  ---------------------------------------------------------------------------\r\n      _frameHeight = titleAreaHeight + axisRect.top.height + labelHeight.top + axisRect.bottom.height + labelHeight.bottom + _margin.top + _margin.bottom\r\n\r\n      _frameWidth = axisRect.right.width + labelHeight.right + axisRect.left.width + labelHeight.left + _margin.left + _margin.right\r\n\r\n      if _frameHeight < _height\r\n        _innerHeight = _height - _frameHeight\r\n      else\r\n        _innerHeight = 0\r\n\r\n      if _frameWidth < _width\r\n        _innerWidth = _width - _frameWidth\r\n      else\r\n        _innerWidth = 0\r\n\r\n      #--- reset scale ranges and redraw axis with adjusted range ------------------------------------------------------\r\n      # adjust with ahd hight with padding required for markers\r\n\r\n      for k, s of _chart.allScales().getOwned()\r\n        if not s.parentScale()\r\n          if s.kind() is 'x'\r\n            if dataLabels.x\r\n              s.range(if s.reverse() then  [_innerWidth - drawPadding - dataLabelWidth, drawPadding] else [drawPadding, _innerWidth - drawPadding- dataLabelWidth])\r\n            else\r\n              s.range(if s.reverse() then  [_innerWidth - drawPadding, drawPadding] else [drawPadding, _innerWidth - drawPadding])\r\n          else if s.kind() is 'y'\r\n            if dataLabels.y\r\n              s.range(if s.reverse() then  [dataLabelHeight + drawPadding, _innerHeight - drawPadding] else [_innerHeight - drawPadding ,dataLabelHeight + drawPadding])\r\n            else\r\n              s.range(if s.reverse() then  [drawPadding, _innerHeight - drawPadding ] else [_innerHeight - drawPadding, drawPadding])\r\n          if s.showAxis()\r\n            drawAxis(s)\r\n\r\n      #--- position frame elements -------------------------------------------------------------------------------------\r\n\r\n      leftMargin = axisRect.left.width + labelHeight.left + _margin.left\r\n      topMargin = titleAreaHeight + axisRect.top.height  + labelHeight.top + _margin.top\r\n\r\n      _spacedContainer = _container.attr('transform', \"translate(#{leftMargin}, #{topMargin})\")\r\n      _svg.select(\"#wk-chart-clip-#{_containerId} rect\").attr('width', _innerWidth).attr('height', _innerHeight)\r\n      _maxDim = Math.max(_innerWidth, _innerHeight)\r\n      _svg.selectAll('defs>mask>rect').attr({'x':-_maxDim, y:-_maxDim, height:_maxDim * 2, width: _maxDim * 2}) # tricky. need to ensure that mask is big enough to cover area vertical before translation\r\n      _spacedContainer.select('.wk-chart-area>.wk-chart-background').attr('width', _innerWidth).attr('height', _innerHeight)\r\n      _spacedContainer.select('.wk-chart-area').style('clip-path', \"url(#wk-chart-clip-#{_containerId})\")\r\n\r\n      _container.selectAll('.wk-chart-axis.wk-chart-right').attr('transform', \"translate(#{_innerWidth}, 0)\")\r\n      _container.selectAll('.wk-chart-axis.wk-chart-bottom').attr('transform', \"translate(0, #{_innerHeight})\")\r\n\r\n      _container.select('.wk-chart-label.wk-chart-left').attr('transform', \"translate(#{-axisRect.left.width-labelHeight.left / 2 }, #{_innerHeight/2}) rotate(-90)\")\r\n      _container.select('.wk-chart-label.wk-chart-right').attr('transform', \"translate(#{_innerWidth+axisRect.right.width + labelHeight.right / 2}, #{_innerHeight/2}) rotate(90)\")\r\n      _container.select('.wk-chart-label.wk-chart-top').attr('transform', \"translate(#{_innerWidth / 2}, #{-axisRect.top.height - labelHeight.top / 2 })\")\r\n      _container.select('.wk-chart-label.wk-chart-bottom').attr('transform', \"translate(#{_innerWidth / 2}, #{_innerHeight + axisRect.bottom.height + labelHeight.bottom })\")\r\n\r\n      _container.selectAll('.wk-chart-title-area').attr('transform', \"translate(#{_innerWidth/2}, #{-topMargin + _titleHeight})\")\r\n\r\n      #--- finally, draw grid lines\r\n\r\n      for k, s of _chart.allScales().getOwned()\r\n        if not s.parentScale()\r\n          if s.showAxis() and s.showGrid()\r\n            drawGrid(s)\r\n\r\n      #--- and set chart background\r\n\r\n      _chartAreaDiv.style(_chart.backgroundStyle())\r\n\r\n      _chart.behavior().chartArea(_chartArea)\r\n      _chart.behavior().container(_container)\r\n\r\n      # register destroy event listener\r\n\r\n      angular.element(_chartArea.node()).on '$destroy', ()->\r\n        $log.log 'removing event listeners from', _chartArea.attr('class')\r\n        _chartArea.on '.tooltip', null\r\n        _chartArea.on '.brush', null\r\n        _chart.behavior().chartArea(undefined)\r\n        _gridArea = undefined\r\n        _element = undefined\r\n        _chartAreaDiv = undefined\r\n\r\n\r\n    #--- Brush Accelerator ---------------------------------------------------------------------------------------------\r\n\r\n    me.drawSingleAxis = (scale) ->\r\n      if scale.showAxis()\r\n        a = _spacedContainer.select(\".wk-chart-axis.wk-chart-#{scale.axis().orient()}\")\r\n        a.call(scale.axis())\r\n\r\n        if scale.showGrid()\r\n          drawGrid(scale, true)\r\n      return me\r\n\r\n    return me\r\n\r\n  return container","angular.module('wk.chart').factory 'layout', ($log, scale, scaleList, timing) ->\r\n\r\n  layoutCntr = 0\r\n\r\n  layout = () ->\r\n    _id = \"layout#{layoutCntr++}\"\r\n    _container = undefined\r\n    _data = undefined\r\n    _chart = undefined\r\n    _scaleList = scaleList()\r\n    _showLabels = false\r\n    _layoutLifeCycle = d3.dispatch('configure', 'drawChart', 'prepareData', 'brush', 'redraw', 'drawAxis', 'update', 'updateAttrs', 'brushDraw', 'destroy', 'objectsSelected', 'animationStartState', 'animationEndState')\r\n\r\n    me = () ->\r\n\r\n    me.id = (id) ->\r\n      return _id\r\n\r\n    me.chart = (chart) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = chart\r\n        _scaleList.parentScales(chart.scales())\r\n        _chart.lifeCycle().on \"configure.#{me.id()}\", () -> _layoutLifeCycle.configure.apply(me.scales()) #passthrough\r\n        _chart.lifeCycle().on \"drawChart.#{me.id()}\", me.draw # register for the drawing event\r\n        _chart.lifeCycle().on \"prepareData.#{me.id()}\", me.prepareData\r\n\r\n        _chart.lifeCycle().on \"animationStartState..#{me.id()}\", me.animationStartState\r\n        _chart.lifeCycle().on \"animationEndState..#{me.id()}\", me.animationEndState\r\n        _chart.lifeCycle().on \"destroy.#{me.id()}\", () ->\r\n          _layoutLifeCycle.destroy() #passthrough\r\n          _chart.lifeCycle().on \".#{me.id()}\", null #de-register all handlers\r\n        return me\r\n\r\n    me.scales = () ->\r\n      return _scaleList\r\n\r\n    me.scaleProperties = () ->\r\n      return me.scales().getScaleProperties()\r\n\r\n    me.container = (obj) ->\r\n      if arguments.length is 0 then return _container\r\n      else\r\n        _container = obj\r\n        return me\r\n\r\n    me.showDataLabels = (trueFalse) ->\r\n      if arguments.length is 0 then return _showLabels\r\n      else\r\n        _showLabels = trueFalse\r\n        return me\r\n\r\n    _dataLabelStyle = {'font-size':'1.3em'}\r\n    me.dataLabelStyle = (val) ->\r\n      if arguments.length is 0 then return _dataLabelStyle\r\n      if _.isObject(val)\r\n        _.assign(_dataLabelStyle, val)\r\n      return me\r\n\r\n    me.behavior = () ->\r\n      me.chart().behavior()\r\n\r\n    me.prepareData = (data) ->\r\n      args = []\r\n      for kind in ['x','y', 'color', 'size', 'shape', 'rangeX', 'rangeY']\r\n        args.push(_scaleList.getKind(kind))\r\n      _layoutLifeCycle.prepareData.apply(data, args)\r\n\r\n    me.lifeCycle = ()->\r\n      return _layoutLifeCycle\r\n\r\n\r\n    #--- DRYout from draw ----------------------------------------------------------------------------------------------\r\n\r\n    getDrawArea = () ->\r\n      container = _container.getChartArea()\r\n      drawArea = container.select(\".#{me.id()}\")\r\n      if drawArea.empty()\r\n        drawArea = container.append('g').attr('class', (d) -> me.id())\r\n      return drawArea\r\n\r\n    buildArgs = (data, notAnimated) ->\r\n      options = {\r\n        height:_container.height(),\r\n        width:_container.width(),\r\n        margins:_container.margins(),\r\n        duration: if notAnimated then 0 else me.chart().animationDuration()\r\n      }\r\n      args = [data, options]\r\n      for kind in ['x','y', 'color', 'size', 'shape']\r\n        scale = _scaleList.getKind(kind)\r\n        args.push(scale)\r\n      return args\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    me.draw = (data, notAnimated) ->\r\n      _data = data\r\n\r\n      _layoutLifeCycle.drawChart.apply(getDrawArea(), buildArgs(data, notAnimated))\r\n\r\n      _layoutLifeCycle.on \"redraw.#{_id}\", me.redraw\r\n      _layoutLifeCycle.on \"update.#{_id}\", me.chart().lifeCycle().update\r\n      _layoutLifeCycle.on \"drawAxis.#{_id}\", me.chart().lifeCycle().drawAxis\r\n      _layoutLifeCycle.on \"updateAttrs.#{_id}\", me.chart().lifeCycle().updateAttrs\r\n\r\n      _layoutLifeCycle.on \"brush.#{_id}\", (axis, notAnimated, idxRange) ->\r\n          _container.drawSingleAxis(axis)\r\n          _layoutLifeCycle.brushDraw.apply(getDrawArea(), [axis, idxRange, _container.width(), _container.height()])\r\n          \r\n      _layoutLifeCycle.on \"destroy.#{_id}\", () ->\r\n        _layoutLifeCycle.on \".#{_id}\", null\r\n\r\n    me.animationStartState = (data) ->\r\n      _layoutLifeCycle.animationStartState.apply(getDrawArea(), buildArgs(data, true))\r\n\r\n    me.animationEndState = (data) ->\r\n      _layoutLifeCycle.animationEndState.apply(getDrawArea(), buildArgs(data, false))\r\n\r\n    return me\r\n\r\n  return layout","angular.module('wk.chart').factory 'legend', ($log, $compile, $rootScope, $templateCache, wkChartTemplates) ->\r\n\r\n  legendCnt = 0\r\n\r\n  uniqueValues = (arr) ->\r\n    set = {}\r\n    for e in arr\r\n      set[e] = 0\r\n    return Object.keys(set)\r\n\r\n  legend = () ->\r\n\r\n    _id = \"legend-#{legendCnt++}\"\r\n    _position = 'top-right'\r\n    _scale = undefined\r\n    _templatePath = undefined\r\n    _legendScope = undefined #$rootScope.$new(true)\r\n    _template = wkChartTemplates.legendTemplate()\r\n    _parsedTemplate = undefined\r\n    _containerDiv = undefined\r\n    _legendDiv = undefined\r\n    _title = undefined\r\n    _layout = undefined\r\n    _data = undefined\r\n    _options = undefined\r\n    _show = false\r\n    _showValues = false\r\n\r\n    me = {}\r\n\r\n    me.position = (pos) ->\r\n      if arguments.length is 0 then return _position\r\n      else\r\n        _position = pos\r\n        return me\r\n\r\n    me.show = (val) ->\r\n      if arguments.length is 0 then return _show\r\n      else\r\n        if val is _show then return me # ensure scopes are only created when necessary\r\n        _show = val\r\n        if _show\r\n          _legendScope = $rootScope.$new(true)\r\n          $log.log 'creating legend scope', _legendScope.$id\r\n          _parsedTemplate = $compile(_template)(_legendScope)\r\n        else\r\n          $log.log 'destroying legend scope', _legendScope.$id\r\n        return me #to enable chaining\r\n\r\n    me.showValues = (val) ->\r\n      if arguments.length is 0 then return _showValues\r\n      else\r\n        _showValues = val\r\n        return me #to enable chaining\r\n\r\n    me.div = (selection) ->\r\n      if arguments.length is 0 then return _legendDiv\r\n      else\r\n        _legendDiv = selection\r\n        return me\r\n\r\n    me.layout = (layout) ->\r\n      if arguments.length is 0 then return _layout\r\n      else\r\n        _layout = layout\r\n        return me\r\n\r\n    me.scale = (scale) ->\r\n      if arguments.length is 0 then return _scale\r\n      else\r\n        _scale = scale\r\n        return me\r\n\r\n    me.title = (title) ->\r\n      if arguments.length is 0 then return _title\r\n      else\r\n        _title = title\r\n        return me\r\n\r\n    me.template = (path) ->\r\n      if arguments.length is 0 then return _templatePath\r\n      else\r\n        _templatePath = path\r\n        _template = $templateCache.get(_templatePath)\r\n        #_parsedTemplate = $compile(_template)(_legendScope)\r\n        return me\r\n\r\n    _legendStyle = {}\r\n    me.legendStyle = (val) ->\r\n      if arguments.length is 0 then return _legendStyle\r\n      if _.isObject(val)\r\n        _.assign(_legendStyle, val)\r\n      return me\r\n\r\n    me.draw = (data, options) ->\r\n      _data = data\r\n      _options = options\r\n      #$log.info 'drawing Legend'\r\n      _containerDiv = _legendDiv or d3.select(me.scale().parent().container().element()).select('.wk-chart')\r\n      if me.show()\r\n        if _containerDiv.select('.wk-chart-legend').empty()\r\n          angular.element(_containerDiv.node()).append(_parsedTemplate)\r\n\r\n        if me.showValues()\r\n          layers = uniqueValues(_scale.value(data))\r\n        else\r\n          layers = _scale.layerKeys(data)\r\n\r\n        s = _scale.scale()\r\n        if me.layout()?.scales().layerScale()\r\n          s = me.layout().scales().layerScale().scale()\r\n        colorScale = _scale.parent().scales().getKind('color').scale()\r\n        if _scale.kind() isnt 'shape'\r\n          _legendScope.legendRows = layers.map((d) ->\r\n            cVal = colorScale(d)\r\n            if typeof cVal is 'string'\r\n                style =  {fill:cVal, stroke:cVal}\r\n            else\r\n              style = cVal\r\n              style.fill = cVal.color\r\n            {value:d, color:style})\r\n        else\r\n          _legendScope.legendRows = layers.map((d) -> {value:d, path:d3.svg.symbol().type(s(d)).size(80)()})\r\n        _legendScope.showLegend = true\r\n        _legendScope.legendStyle = me.legendStyle()\r\n        _legendScope.legendStyle.position = if _legendDiv then 'relative' else 'absolute'\r\n\r\n        if not _legendDiv\r\n          containerRect = _containerDiv.node().getBoundingClientRect()\r\n          chartAreaRect = _containerDiv.select('.wk-chart-area .wk-chart-background').node().getBoundingClientRect()\r\n          for p in _position.split('-')\r\n              _legendScope.legendStyle[p] = \"#{Math.abs(containerRect[p] - chartAreaRect[p])}px\"\r\n        _legendScope.title = _title\r\n      else\r\n        _parsedTemplate.remove()\r\n      return me\r\n\r\n    #_parsedTemplate = $compile(wkChartTemplates.legendTemplate())(_legendScope)\r\n\r\n    me.register = (layout) ->\r\n      layout.lifeCycle().on \"drawChart.#{_id}\", me.draw\r\n      layout.lifeCycle().on \"destroy.#{_id}\", () ->\r\n        _legendScope.$destroy()\r\n        _parsedTemplate.remove()\r\n        _parsedTemplate = undefined\r\n        _containerDiv = undefined\r\n        _legendDiv = undefined\r\n        layout.lifeCycle().on \".#{_id}\", null\r\n      return me\r\n\r\n    me.redraw = () ->\r\n      if _data and _options\r\n        me.draw(_data, _options)\r\n      return me\r\n\r\n    return me\r\n\r\n  return legend","angular.module('wk.chart').factory 'scale', ($log, legend, formatDefaults, wkChartScales, wkChartLocale, maxTicks) ->\r\n\r\n  scale = () ->\r\n    _id = ''\r\n    _orientation = undefined\r\n    _scale = d3.scale.linear()\r\n    _scaleType = 'linear'\r\n    _exponent = 1\r\n    _isOrdinal = false\r\n    _domain = undefined\r\n    _domainCalc = undefined\r\n    _calculatedDomain = undefined\r\n    _resetOnNewData = false\r\n    _property = d3.set()\r\n    _layerProp = ''\r\n    _layerExclude = []\r\n    _lowerProperty = ''\r\n    _upperProperty = ''\r\n    _range = undefined\r\n    _rangePadding = 0.3\r\n    _rangeOuterPadding = 0.3\r\n    _inputFormatString = undefined\r\n    _inputFormatFn = (data) -> if isNaN(+data) or _.isDate(data) then data else +data\r\n\r\n    _showAxis = false\r\n    _axisOrient = undefined\r\n    _axisOrientOld = undefined\r\n    _axis = undefined\r\n    _ticks = undefined\r\n    _tickFormat = undefined\r\n    _tickInterval = undefined\r\n    _tickValues = undefined\r\n    _rotateTickLabels = undefined\r\n    _showLabel = false\r\n    _axisLabel = undefined\r\n    _showGrid = false\r\n    _reverse = false\r\n    _isHorizontal = false\r\n    _isVertical = false\r\n    _kind = undefined\r\n    _parent = undefined\r\n    _parentScale = undefined\r\n    _chart = undefined\r\n    _layout = undefined\r\n    _legend = legend()\r\n    _outputFormatString = undefined\r\n    _outputFormatFn = undefined\r\n\r\n    _timeFormat = wkChartLocale.timeFormat.multi([\r\n      [\".%L\", (d) ->  d.getMilliseconds()],\r\n      [\":%S\", (d) ->  d.getSeconds()],\r\n      [\"%I:%M\", (d) ->  d.getMinutes()],\r\n      [\"%I %p\", (d) ->  d.getHours()],\r\n      [\"%a %d\", (d) ->  d.getDay() and d.getDate() isnt 1],\r\n      [\"%b %d\", (d) ->  d.getDate() isnt 1],\r\n      [\"%B\", (d) ->  d.getMonth()],\r\n      [\"%Y\", () ->  true]\r\n    ])\r\n\r\n    me = () ->\r\n\r\n    #---- utility functions ----------------------------------------------------------------------------------------\r\n\r\n    keys = (data) -> if _.isArray(data) then _.reject(_.keys(data[0]), (d) -> d is '$$hashKey') else _.reject(_.keys(data), (d) -> d is '$$hashKey')\r\n\r\n    layerTotal = (d, layerKeys) ->\r\n      layerKeys.reduce(\r\n        (prev, next) -> +prev + +me.layerValue(d,next)\r\n      , 0)\r\n\r\n    layerMax = (data, layerKeys) ->\r\n      d3.max(data, (d) -> d3.max(layerKeys, (k) -> me.layerValue(d,k)))\r\n\r\n    layerMin = (data, layerKeys) ->\r\n      d3.min(data, (d) -> d3.min(layerKeys, (k) -> me.layerValue(d,k)))\r\n\r\n    parsedValue = (v) ->\r\n      if _inputFormatFn.parse then _inputFormatFn.parse(v) else _inputFormatFn(v)\r\n\r\n    calcDomain = {\r\n      extent: (data) ->\r\n        layerKeys = me.layerKeys(data)\r\n        return [layerMin(data, layerKeys), layerMax(data, layerKeys)]\r\n      max: (data) ->\r\n        layerKeys = me.layerKeys(data)\r\n        return [0, layerMax(data, layerKeys)]\r\n      min: (data) ->\r\n        layerKeys = me.layerKeys(data)\r\n        return [0, layerMin(data, layerKeys)]\r\n      totalExtent: (data) ->\r\n        if data[0].hasOwnProperty('total')\r\n          return d3.extent(data.map((d) ->\r\n            d.total))\r\n        else\r\n          layerKeys = me.layerKeys(data)\r\n          return d3.extent(data.map((d) ->\r\n            layerTotal(d, layerKeys)))\r\n      total: (data) ->\r\n        if data[0].hasOwnProperty('total')\r\n          return [0, d3.max(data.map((d) ->\r\n            d.total))]\r\n        else\r\n          layerKeys = me.layerKeys(data)\r\n          return [0, d3.max(data.map((d) ->\r\n            layerTotal(d, layerKeys)))]\r\n      rangeExtent: (data) ->\r\n        if me.upperProperty()\r\n          return [d3.min(me.lowerValue(data)), d3.max(me.upperValue(data))]\r\n        else\r\n          if data.length > 1\r\n            start = me.lowerValue(data[0])\r\n            step = me.lowerValue(data[1]) - start\r\n            return [me.lowerValue(data[0]), start + step * (data.length) ]\r\n      rangeMin: (data) ->\r\n        return [0, d3.min(me.lowerValue(data))]\r\n      rangeMax: (data) ->\r\n        if me.upperProperty()\r\n          return [0, d3.max(me.upperValue(data))]\r\n        else\r\n          start = me.lowerValue(data[0])\r\n          step = me.lowerValue(data[1]) - start\r\n          return [0, start + step * (data.length) ]\r\n      }\r\n\r\n    verifyAndLimitTimeInterval = (unit, interv) ->\r\n      unitMap = [\r\n        1000,\r\n        1000*60,\r\n        1000*60*60,\r\n        1000*60*60*24,\r\n        1000*60*60*24*7,\r\n        1000*60*60*24*30,\r\n        1000*60*60*24*365,\r\n      ]\r\n      sequence = ['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years']\r\n      seqIdx = sequence.indexOf(unit)\r\n      if seqIdx is -1\r\n        seqIdx = 3 # handle sundays through saturdays intervals as week\r\n      duration = +me.domainMax() - me.domainMin() # returns duration in ms\r\n      loop\r\n        durationUnit = duration / unitMap[seqIdx]\r\n        ticks = durationUnit / interv\r\n\r\n        if seqIdx >= sequence.length or ticks <= maxTicks\r\n          break\r\n        seqIdx++\r\n\r\n      if sequence[seqIdx] isnt unit\r\n        return d3.time[sequence[seqIdx]](me.domainMin(), me.domainMax())\r\n      else\r\n        return d3.time[sequence[seqIdx]](me.domainMin(), me.domainMax(), interv)\r\n\r\n    generateTickValues = () ->\r\n      if not _isOrdinal and me.tickInterval()\r\n        if me.domainMax() isnt undefined and me.domainMin() isnt undefined\r\n          if _scaleType is 'time'\r\n            parts = me.tickInterval().split(':')\r\n            if parts.length is 2 and d3.time.hasOwnProperty(parts[0])\r\n              tickValues = verifyAndLimitTimeInterval(parts[0], parts[1])\r\n            else\r\n              tickValues = undefined # not a valid tickvalue definition\r\n          else\r\n            ticks = Math.abs(Math.floor((me.domainMax() - me.domainMin())/ me.tickInterval()))\r\n            if ticks > maxTicks\r\n              me.tickInterval(Math.floor(me.domainMax() - me.domainMin())/maxTicks)\r\n            tickValue = Math.ceil(1 + me.domainMin() / me.tickInterval()) * me.tickInterval() # calculate the start value\r\n            tickValues = []\r\n            i = 0\r\n            while tickValue < me.domainMax()\r\n              tickValues[i] = tickValue\r\n              i++\r\n              tickValue += me.tickInterval()\r\n          me.tickValues(tickValues)\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    me.id = () ->\r\n      return _kind + '.' + _orientation + '.' + _parent.id()\r\n\r\n    me.orientation = (val) ->\r\n      if arguments.length is 0 then return _orientation\r\n      _orientation = val\r\n      return me\r\n\r\n    me.kind = (kind) ->\r\n      if arguments.length is 0 then return _kind\r\n      else\r\n        _kind = kind\r\n        return me\r\n\r\n    me.parent = (parent) ->\r\n      if arguments.length is 0 then return _parent\r\n      else\r\n        _parent = parent\r\n        return me\r\n\r\n    me.chart = (val) ->\r\n      if arguments.length is 0 then return _chart\r\n      else\r\n        _chart = val\r\n        return me #to enable chaining\r\n\r\n    me.layout = (val) ->\r\n      if arguments.length is 0 then return _layout\r\n      else\r\n        _layout = val\r\n        return me #to enable chaining\r\n\r\n    _isParentScale = false\r\n    me.isParentScale = (val) ->\r\n      if arguments.length is 0 then return _isParentScale\r\n      _isParentScale = val\r\n      return me\r\n\r\n    me.parentScale = (val) ->\r\n      if arguments.length is 0 then return _parentScale\r\n      _parentScale = val\r\n      _parentScale.isParentScale(true)\r\n      return me\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    me.scale = () ->\r\n      return _scale\r\n\r\n    me.legend = () ->\r\n      return _legend\r\n\r\n    me.isOrdinal = () ->\r\n      _isOrdinal\r\n\r\n    me.isHorizontal = (trueFalse) ->\r\n      if arguments.length is 0 then return _isHorizontal\r\n      else\r\n        _isHorizontal = trueFalse\r\n        if trueFalse\r\n          if not me.axisOrient()\r\n            me.axisOrient('bottom') # set the default value\r\n          _isVertical = false\r\n        return me\r\n\r\n    me.isVertical = (trueFalse) ->\r\n      if arguments.length is 0 then return _isVertical\r\n      else\r\n        _isVertical = trueFalse\r\n        if trueFalse\r\n          if not me.axisOrient()\r\n            me.axisOrient('left') # set the default value\r\n          _isHorizontal = false\r\n        return me\r\n\r\n    #-- ScaleType ------------------------------------------------------------------------------------------------------\r\n\r\n    me.scaleType = (type) ->\r\n      if arguments.length is 0 then return _scaleType\r\n      else\r\n        if d3.scale.hasOwnProperty(type) # support the full list of d3 scale types\r\n          _scale = d3.scale[type]()\r\n          _scaleType = type\r\n          me.format(formatDefaults.number)\r\n        else if type is 'time' # time scale is in d3.time object, not in d3.scale.\r\n          _scale = d3.time.scale()\r\n          _scaleType = 'time'\r\n          if _inputFormatString\r\n            me.dataFormat(_inputFormatString)\r\n          me.format(formatDefaults.date)\r\n        else if wkChartScales.hasOwnProperty(type)\r\n          _scaleType = type\r\n          _scale = wkChartScales[type]()\r\n        else\r\n          $log.error 'Error: illegal scale type:', type\r\n\r\n        _isOrdinal = _.has(_scale,'rangeBand') #_scaleType in ['ordinal', 'category10', 'category20', 'category20b', 'category20c']\r\n        if _range\r\n          me.range(_range)\r\n\r\n        if _showAxis\r\n          _axis.scale(_scale)\r\n\r\n        if _exponent and _scaleType is 'pow'\r\n          _scale.exponent(_exponent)\r\n        return me\r\n\r\n    me.exponent = (value) ->\r\n      if arguments.length is 0 then return _exponent\r\n      else\r\n        _exponent = value\r\n        if _scaleType is 'pow'\r\n          _scale.exponent(_exponent)\r\n        return me\r\n\r\n    me.scaleMapFn = (fn) ->\r\n      if arguments.length is 0\r\n        if _scale.mapFn\r\n          return _scale.mapFn()\r\n        return undefined\r\n      else\r\n        if _.isFunction(fn) and _scale.mapFn\r\n          _scale.mapFn(fn)\r\n        return me\r\n\r\n    #--- Domain functions ----------------------------------------------------------------------------------------------\r\n\r\n    me.domain = (dom) ->\r\n      if arguments.length is 0 then return _domain\r\n      else\r\n        _domain = dom\r\n        if _.isArray(_domain)\r\n          _scale.domain(_domain)\r\n        return me\r\n\r\n    me.domainCalc = (rule) ->\r\n      if arguments.length is 0\r\n        return if _isOrdinal then undefined else _domainCalc\r\n      else\r\n        if calcDomain.hasOwnProperty(rule)\r\n          _domainCalc = rule\r\n        else\r\n          $log.error 'illegal domain calculation rule:', rule, \" expected\", _.keys(calcDomain)\r\n        return me\r\n\r\n    _domainMin = undefined\r\n    me.domainMin = (val) ->\r\n      if arguments.length is 0 then return _domainMin or _calculatedDomain[0]\r\n      _domainMin = parsedValue(val)\r\n      return me\r\n\r\n    _domainMax = undefined\r\n    _domainMax = undefined\r\n    me.domainMax = (val) ->\r\n      if arguments.length is 0 then return _domainMax or _calculatedDomain[1]\r\n      _domainMax = parsedValue(val)\r\n      return me\r\n\r\n    me.getDomain = (data) ->\r\n      if arguments.length is 0 then return _scale.domain()\r\n      else\r\n        if not _domain and me.domainCalc()\r\n          if _domainMin\r\n            _calculatedDomain[0] = _domainMin\r\n          if _domainMax\r\n            _calculatedDomain[1] = _domainMax\r\n          generateTickValues()\r\n          return _calculatedDomain\r\n        else\r\n          if _domain\r\n            return _domain\r\n          else\r\n            return me.value(data)\r\n\r\n    me.resetOnNewData = (trueFalse) ->\r\n      if arguments.length is 0 then return _resetOnNewData\r\n      else\r\n        _resetOnNewData = trueFalse\r\n        return me\r\n\r\n    #--- Range Functions -----------------------------------------------------------------------------------------------\r\n\r\n    me.range = (range) ->\r\n      if arguments.length is 0 then return _scale.range()\r\n      else\r\n        _range = range\r\n        if _isOrdinal and me.kind() in ['x','y']\r\n            _scale.rangeBands(range, _rangePadding, _rangeOuterPadding)  # if ordinal, set range only for horizontal and vertical dimensions\r\n        else if not (_scaleType in ['category10', 'category20', 'category20b', 'category20c']) #ordinal scales with pre-et range\r\n          _scale.range(range)\r\n        return me\r\n\r\n    me.rangePadding = (config) ->\r\n      if arguments.length is 0 then return {padding:_rangePadding, outerPadding:_rangeOuterPadding}\r\n      else\r\n        _rangePadding = config.padding\r\n        _rangeOuterPadding = config.outerPadding\r\n        return me\r\n\r\n    #--- property related attributes -----------------------------------------------------------------------------------\r\n\r\n    me.property = (name) ->\r\n      if arguments.length is 0 then return _property.values()\r\n      else\r\n        if name\r\n          me.addProperty(name)\r\n        return me\r\n\r\n    me.addProperty = (name) ->\r\n      if _.isArray(name)\r\n        for n in name\r\n          _property.add(n)\r\n      else\r\n        _property.add(name)\r\n\r\n    me.layerProperty = (name) ->\r\n      if arguments.length is 0 then return _layerProp\r\n      else\r\n        _layerProp = name\r\n        return me\r\n\r\n    me.layerExclude = (excl) ->\r\n      if arguments.length is 0 then return _layerExclude\r\n      else\r\n        _layerExclude = excl\r\n        return me\r\n\r\n    me.layerKeys = (data) ->\r\n      if _property.size() > 0\r\n          return _.intersection(_property.values(), keys(data)) # ensure only keys also in the data are returned and $$hashKey is not returned\r\n      else\r\n        _.reject(keys(data), (d) -> d in _layerExclude)\r\n\r\n    me.lowerProperty = (name) ->\r\n      if arguments.length is 0 then return _lowerProperty\r\n      else\r\n        _lowerProperty = name\r\n        return me\r\n\r\n    me.upperProperty = (name) ->\r\n      if arguments.length is 0 then return _upperProperty\r\n      else\r\n        _upperProperty = name\r\n        return me\r\n\r\n    #--- Data Formatting -----------------------------------------------------------------------------------------------\r\n\r\n    me.dataFormat = (format) ->\r\n      if arguments.length is 0 then return _inputFormatString\r\n      else\r\n        _inputFormatString = format\r\n        if _scaleType is 'time'\r\n          _inputFormatFn = wkChartLocale.timeFormat(format)\r\n        else\r\n          _inputFormatFn = (d) -> d\r\n        return me\r\n\r\n    #--- Core data transformation interface ----------------------------------------------------------------------------\r\n\r\n    me.value = (data) ->\r\n      propName = _property.values()[0]\r\n      if not data then return undefined\r\n      if _layerProp\r\n        if _.isArray(data) then data.map((d) -> parsedValue(d[propName][_layerProp])) else parsedValue(data[propName][_layerProp])\r\n      else\r\n        if _.isArray(data) then data.map((d) -> parsedValue(d[propName])) else parsedValue(data[propName])\r\n\r\n    me.layerValue = (data, layerKey) ->\r\n      if not data then return undefined\r\n      if _layerProp\r\n        parsedValue(data[layerKey][_layerProp])\r\n      else\r\n        parsedValue(data[layerKey])\r\n\r\n    me.formattedValue = (data) ->\r\n      if _.isArray(data) then data.map((d) -> me.formatValue(me.value(d))) else me.formatValue(me.value(data))\r\n\r\n    me.formattedLayerValue = (data, layerKey) ->\r\n      if _.isArray(data) then data.map((d) -> me.formatValue(me.layerValue(d, layerKey))) else me.formatValue(me.layerValue(data, layerKey))\r\n\r\n\r\n    me.formatValue = (val) ->\r\n      if _outputFormatString and val and  (val.getUTCDate or not isNaN(val))\r\n        _outputFormatFn(val)\r\n      else\r\n        val\r\n\r\n    me.map = (data, layerKey) ->\r\n      if layerKey\r\n        if Array.isArray(data) then data.map((d) -> _scale(me.layerValue(data, layerKey))) else _scale(me.layerValue(data, layerKey))\r\n      else\r\n        if Array.isArray(data) then data.map((d) -> _scale(me.value(data))) else _scale(me.value(data))\r\n\r\n    me.invert = (mappedValue) ->\r\n      # Returns the value in the input domain x for the corresponding value in the output range.\r\n      # There are four different cases how this is done:\r\n      #  - d3 support the invert function on the scale  - will use invert then\r\n      #  - d3 support invertRange function on the scale - will use invertRange then, however the handling of the inverted values needs to be special (in tooltips)\r\n      #  - d3 does not support inverting on ordinal scales. In this case we are using our own invert algorithm, which makes a few assumptions:\r\n      #     - the scale domain is explicitly set whenever the data changes. wk-charts does this for x and y dimensions automatically.\r\n      #       For other dimensions this only happens when the reset attribute is true on the dimension. In this case invert returns the domain value tht is the closest match ti the input value\r\n      #     - the scale domain is not explicitly set. In this case it inverts based on the domains default. The resulting values may not be meaningful. It is up to the consumer of invert to assure\r\n      #       that the prerequisites are met and the returned values are interpreted in a meaningful fashion\r\n      # Returns: input domain value\r\n\r\n      if _.has(me.scale(),'invert') # i.e. the d3 scale supports the inverse calculation: linear, log, pow, sqrt\r\n        interv = (_scale.range()[1] - _scale.range()[0]) / _chart.getData().length\r\n        return _scale.invert(mappedValue - interv/2) # ensure the marker flips in teh middle between the data points\r\n        # NOTE: THIS VERSION DOES NOT RETURN A INDEX INTO THE DATA ANYMORE. FINDING THE DATA REFERENCE IS LEFT TO THE CONSUMER OF THE RESULT\r\n\r\n      if _.has(me.scale(),'invertExtent') # d3 supports this for quantize, quantile, threshold. returns the range that gets mapped to the value\r\n        return me.scale().invertExtent(mappedValue)\r\n\r\n      # d3 does not support invert for ordinal scales. Can only invert if domain is explicitly set whenever data changes.\r\n\r\n      if me.isOrdinal() and me.resetOnNewData()\r\n        domain = _scale.domain()\r\n        range = _scale.range()\r\n        if range[0] > range[1]\r\n          interval = range[0] - range[1]\r\n          idx = range.length - Math.floor(mappedValue / interval) - 1\r\n          if idx < 0 then idx = 0\r\n        else\r\n          interval = range[1] - range[0]\r\n          idx = Math.floor(mappedValue / interval)\r\n          if idx >= range.length then idx = range.length - 1\r\n        return domain[idx]\r\n\r\n      # in all other cases we cannot meaningfully invert.\r\n      return undefined\r\n\r\n    me.findIndex = (value) -> # used to find the data object after inverting a range value\r\n      # returns the index to data first object in the data array that holds the value in the dimension\r\n      _data = me.chart().getData()\r\n      if _isOrdinal\r\n        return _.findIndex(_data,(d) -> return value is me.value(d)) # assumes the value exists in data.\r\n      if _.isArray(value) and value.length is 2\r\n        # we are finding the range extend bounds\r\n        #TODO  IMPLEMENT THIS CASE\r\n        return\r\n\r\n      # we cannot assume that an exact match in the data. use d3.bisect to find the entry\r\n      bisect = d3.bisector(me.value).left\r\n      idx = bisect(_data, value)\r\n      idx = if idx < 0 then 0 else if idx >= _data.length then _data.length - 1 else idx\r\n      return idx # the inverse value does not necessarily correspond to a value in the data\r\n\r\n    me.find = (value) ->\r\n      return  me.chart().getData()[me.findIndex(value)]\r\n    #--- Axis Attributes and functions ---------------------------------------------------------------------------------\r\n\r\n    me.showAxis = (trueFalse) ->\r\n      if arguments.length is 0 then return _showAxis\r\n      else\r\n        _showAxis = trueFalse\r\n        if trueFalse\r\n          _axis = d3.svg.axis()\r\n          if me.scaleType() is 'time'\r\n            _axis.tickFormat(_timeFormat)\r\n        else\r\n          _axis = undefined\r\n        return me\r\n\r\n    me.axisOrient = (val) ->\r\n      if arguments.length is 0 then return _axisOrient\r\n      else\r\n        _axisOrientOld = _axisOrient\r\n        _axisOrient = val\r\n        return me #to enable chaining\r\n\r\n    me.axisOrientOld = (val) ->  #TODO This is not the best place to keep the old axis value. Only needed by container in case the axis position changes\r\n      if arguments.length is 0 then return _axisOrientOld\r\n      else\r\n        _axisOrientOld = val\r\n        return me #to enable chaining\r\n\r\n    me.axis = () ->\r\n      return _axis\r\n\r\n    me.ticks = (val) ->\r\n      if arguments.length is 0 then return _ticks\r\n      else\r\n        _ticks = val\r\n        if me.axis()\r\n          me.axis().ticks(_ticks)\r\n        return me #to enable chaining\r\n\r\n    me.tickInterval = (val) ->\r\n      if arguments.length is 0 then return _tickInterval\r\n      if not _isOrdinal\r\n        if _scaleType isnt 'time'\r\n          _tickInterval = parsedValue(val)\r\n        else\r\n          if /\\w+:\\d+/.test(val)\r\n            _tickInterval = val\r\n      return me\r\n\r\n    me.tickFormat = (val) ->\r\n      if arguments.length is 0 then return _tickFormat\r\n      else\r\n        _tickFormat = val\r\n        if me.axis()\r\n          me.axis().tickFormat(val)\r\n        return me #to enable chaining\r\n\r\n    me.tickValues = (val) ->\r\n      if arguments.length is 0 then return _tickValues\r\n      else\r\n        _tickValues = val\r\n        if me.axis()\r\n          me.axis().tickValues(val)\r\n        return me\r\n\r\n    _tickLabelStyle = {'font-size': '1em'}\r\n    me.tickLabelStyle = (val) ->\r\n      if arguments.length is 0 then return _tickLabelStyle\r\n      if _.isObject(val)\r\n        _.assign(_tickLabelStyle, val)\r\n      return me\r\n\r\n    me.showLabel = (val) ->\r\n      if arguments.length is 0 then return _showLabel\r\n      else\r\n        _showLabel = val\r\n        return me #to enable chaining\r\n\r\n    me.axisLabel = (text) ->\r\n      if arguments.length is 0\r\n        return if _axisLabel then _axisLabel else me.property()[0]\r\n      else\r\n        _axisLabel = text\r\n        return me\r\n\r\n    _axisLabelStyle = {'font-size': '1.5em'}\r\n    me.axisLabelStyle = (val) ->\r\n      if arguments.length is 0 then return _axisLabelStyle\r\n      if _.isObject(val)\r\n        _.assign(_axisLabelStyle, val)\r\n      return me\r\n\r\n    me.rotateTickLabels = (nbr) ->\r\n      if arguments.length is 0 then return _rotateTickLabels\r\n      else\r\n        _rotateTickLabels = nbr\r\n        return me\r\n\r\n    me.format = (val) ->\r\n      if arguments.length is 0 then return _outputFormatString\r\n      else\r\n        if val.length > 0\r\n          _outputFormatString = val\r\n        else\r\n          _outputFormatString = if me.scaleType() is 'time' then formatDefaults.date else formatDefaults.number\r\n        _outputFormatFn = if me.scaleType() is 'time' then wkChartLocale.timeFormat(_outputFormatString) else wkChartLocale.numberFormat(_outputFormatString)\r\n        return me #to enable chainingF\r\n\r\n    me.showGrid = (trueFalse) ->\r\n      if arguments.length is 0 then return _showGrid\r\n      else\r\n        _showGrid = trueFalse\r\n        return me\r\n\r\n    _gridStyle = {stroke:'lightgrey', 'stroke-width': 1}\r\n    me.gridStyle = (val) ->\r\n      if arguments.length is 0 then return _gridStyle\r\n      if _.isObject(val)\r\n        _.assign(_gridStyle, val)\r\n      return me\r\n\r\n    me.reverse = (trueFalse) ->\r\n      if arguments.length is 0 then return _reverse \r\n      else\r\n        _reverse = trueFalse\r\n        return me\r\n\r\n    #-- Register for drawing lifecycle events --------------------------------------------------------------------------\r\n\r\n    me.register = () ->\r\n      me.chart().lifeCycle().on \"scaleDomains.#{me.id()}\", (data) ->\r\n        if me.parentScale()\r\n          _scale = me.parentScale().scale()\r\n        else\r\n          if me.resetOnNewData()\r\n            # ensure robust behavior in case of problematic definitions\r\n            domain = me.getDomain(data)\r\n            if _scaleType is 'linear' and _.some(domain, isNaN)\r\n              $log.error \"Scale #{me.kind()}, Type '#{_scaleType}': cannot compute domain for property '#{_property}' . Possible reasons: property not set, data not compatible with defined type. Domain:#{domain}\"\r\n             else\r\n              _scale.domain(domain)\r\n\r\n      me.chart().lifeCycle().on \"prepareData.#{me.id()}\", (data) ->\r\n        # compute the domain range calculation if required\r\n        ###\r\n        ----------------------------------------------------------------------------------------------------------------\r\n        This is the first life cycle step called when new data is relieved. in this step three steps are performed:\r\n        - consolidate the property names from child dimensions into the appropriate master\r\n        - determine the layer keys for the layer dimensions\r\n        - calculate the domain ranges\r\n        ----------------------------------------------------------------------------------------------------------------\r\n        ###\r\n        # consolidate the properties into the parent dimensions\r\n        for id, s of me.chart().allScales().getOwned()\r\n          if s.parentScale()\r\n            s.parentScale().addProperty(s.property())\r\n        # determine the layer keys for layer the layer scales\r\n        # this is done by excluding all properties form other defined scales\r\n\r\n        exclude = d3.set()\r\n        for id, s of me.chart().allScales().getOwned()\r\n          if s isnt me and s.parentScale() isnt me\r\n            for p in s.property()\r\n              exclude.add(p)\r\n        me.layerExclude(exclude.values())\r\n\r\n        calcRule =  me.domainCalc()\r\n        if calcRule and calcDomain[calcRule]\r\n          _calculatedDomain = calcDomain[calcRule](data)\r\n\r\n      me.chart().lifeCycle().on \"destroy.#{me.id()}\", () ->\r\n        me.chart().lifeCycle().on \".#{me.id()}\", null # de-register handlers\r\n\r\n    me.update = (noAnimation) ->\r\n      me.parent().lifeCycle().update(noAnimation)\r\n      return me\r\n\r\n    me.updateAttrs = () ->\r\n      me.parent().lifeCycle().updateAttrs()\r\n\r\n    me.drawAxis = () ->\r\n      me.parent().lifeCycle().drawAxis()\r\n      return me\r\n\r\n    return me\r\n\r\n  return scale","angular.module('wk.chart').factory 'scaleList', ($log) ->\r\n  return scaleList = () ->\r\n    _list = {}\r\n    _kindList = {}\r\n    _parentList = {}\r\n    _owner = undefined\r\n    _requiredScales = []\r\n    _layerScale = undefined\r\n\r\n    me = () ->\r\n\r\n    me.owner = (owner) ->\r\n      if arguments.length is 0 then return _owner\r\n      else\r\n        _owner = owner\r\n        return me\r\n\r\n    me.add = (scale) ->\r\n      if _list[scale.id()]\r\n        $log.error \"scaleList.add: scale #{scale.id()} already defined in scaleList of #{_owner.id()}. Duplicate scales are not allowed\"\r\n      _list[scale.id()] = scale\r\n      _kindList[scale.kind()] = scale\r\n      return me\r\n\r\n    me.hasScale = (scale) ->\r\n      return _list.hasOwnProperty(scale.id())\r\n\r\n    me.getKind = (kind, orientation) ->\r\n      if orientation\r\n        for id, s of _list\r\n          if s.kind() is kind and s.orientation() is orientation\r\n            return s\r\n        return undefined\r\n      if _kindList[kind] then _kindList[kind] else if _parentList.getKind then _parentList.getKind(kind) else undefined\r\n\r\n    me.hasKind = (kind, orientation) ->\r\n      if orientation\r\n        for id, s of _list\r\n          if s.kind() is kind and s.orientation() is orientation\r\n            return true\r\n        return false\r\n      return !!me.getKind(kind)\r\n\r\n    me.remove = (scale) ->\r\n      if not _list[scale.id()]\r\n        $log.warn \"scaleList.delete: scale #{scale.id()} not defined in scaleList of #{_owner.id()}. Ignoring\"\r\n        return me\r\n      delete _list[scale.id()]\r\n      delete me[scale.id]\r\n      return me\r\n\r\n    me.parentScales = (scaleList) ->\r\n      if arguments.length is 0 then return _parentList\r\n      else\r\n        _parentList = scaleList\r\n        return me\r\n\r\n    me.getOwned = () ->\r\n      _list\r\n\r\n    me.allKinds = () ->\r\n      ret = {}\r\n      if _parentList.allKinds\r\n        for k, s of _parentList.allKinds()\r\n          ret[k] = s\r\n      for k,s of _kindList\r\n        ret[k] = s\r\n      return ret\r\n\r\n    me.requiredScales = (req) ->\r\n      if arguments.length is 0 then return _requiredScales\r\n      else\r\n        _requiredScales = req\r\n        for k in req\r\n          if not me.hasKind(k)\r\n            throw \"Fatal Error: scale '#{k}' required but not defined\"\r\n      return me\r\n\r\n    me.getScales = (kindList) ->\r\n      l = {}\r\n      for kind in kindList\r\n        if me.hasKind(kind)\r\n          l[kind] = me.getKind(kind)\r\n        else\r\n          throw \"Fatal Error: scale '#{kind}' required but not defined\"\r\n      return l\r\n\r\n    me.getScaleProperties = () ->\r\n      l = []\r\n      for k,s of me.allKinds()\r\n        prop = s.property()\r\n        if prop.length > 0\r\n          l.concat(prop)\r\n      return l\r\n\r\n    me.layerScale = (kind) ->\r\n      if arguments.length is 0\r\n        if _layerScale\r\n          return me.getKind(_layerScale)\r\n        return undefined\r\n      else\r\n        _layerScale = kind\r\n        return me\r\n\r\n    return me\r\n","###*\r\n  @ngdoc layout\r\n  @name area\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n  @example\r\n###\r\n\r\nangular.module('wk.chart').directive 'area', ($log, utils, tooltipHelperFactory, dataManagerFactory, markerFactory) ->\r\n  lineCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking s-line'\r\n\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n      _showMarkers = false\r\n      _areaStyle = false\r\n      _spline = false\r\n      offset = 0\r\n      _id = 'area' + lineCntr++\r\n      area = undefined\r\n      layoutData = undefined\r\n      _initialOpacity = 0\r\n      _showOpacity = 0.5\r\n\r\n      xData = dataManagerFactory()\r\n      markers = markerFactory()\r\n      ttHelper = tooltipHelperFactory()\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(x).valueScale(y).data(data)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        markers.active(_showMarkers)\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_areaStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        offset = if x.isOrdinal() then x.scale().rangeBand() / 2 else 0\r\n        if _tooltip\r\n          _tooltip.data(data)\r\n          ttHelper.layout(data)\r\n\r\n        area = d3.svg.area()\r\n          .x((d) -> x.scale()(d.targetKey))\r\n          .y((d) -> y.scale()(if d.layerAdded or d.layerDeleted then 0 else d.value))\r\n          .y1((d) ->  y.scale()(0))\r\n\r\n        if _spline\r\n          area.interpolate('cardinal')\r\n\r\n        layers = this.selectAll(\".wk-chart-layer\")\r\n          .data(data, (d) -> d.layerKey)\r\n        enter = layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        enter.append('path')\r\n          .attr('class','wk-chart-area-path')\r\n          .attr('d', (d) -> area(d.values))\r\n          .style('opacity', _initialOpacity)\r\n          .style('pointer-events', 'none')\r\n          #.style('stroke', (d) -> color.scale()(d.layerKey))\r\n          #.style('fill', (d) -> color.scale()(d.layerKey))\r\n\r\n        path = layers.select('.wk-chart-area-path')\r\n          .attr('transform', \"translate(#{offset})\")\r\n          .each(setStyle)\r\n        path = if doAnimate then path.transition().duration( options.duration) else path\r\n        path.attr('d', (d) -> area(d.values))\r\n          .style('opacity', (d) -> if d.added or d.deleted then 0 else _showOpacity)\r\n          #.style('pointer-events', 'none')\r\n        layers.exit()\r\n          .remove()\r\n\r\n        markers\r\n          .x((d) -> x.scale()(d.targetKey) + if x.isOrdinal() then x.scale().rangeBand() / 2 else 0)\r\n          .y((d) -> y.scale()(if d.layerAdded or d.layerDeleted then 0 else d.value))\r\n          .color( (d)->\r\n            style = color.scale()(d.layerKey)\r\n            return if typeof style is 'string' then style else style.color\r\n          )\r\n          .keyScale(x.scale())\r\n        layers.call(markers, doAnimate)\r\n\r\n      brush = (axis, idxRange) ->\r\n        lines = this.selectAll(\".wk-chart-area-path\")\r\n        if axis.isOrdinal()\r\n          lines.attr('d', (d) ->\r\n            null\r\n            area(d.values.slice(idxRange[0],idxRange[1] + 1)))\r\n            .attr('transform', \"translate(#{axis.scale().rangeBand() / 2})\")\r\n          markers.brush(this, idxRange)\r\n          ttHelper.brushRange(idxRange)\r\n        else\r\n          lines.attr('d', (d) -> area(d.values))\r\n          markers.brush(this)\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on \"configure\", ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        ttHelper\r\n          .keyScale(_scaleList.x)\r\n          .valueScale(_scaleList.y)\r\n          .colorScale(_scaleList.color)\r\n          .value((d) -> d.value)\r\n        _tooltip.markerScale(_scaleList.x)\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        _tooltip.on \"moveData.#{_id}\", ttHelper.moveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttHelper.moveMarkers\r\n\r\n      #host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n      ###*\r\n        @ngdoc attr\r\n        @name area#markers\r\n        @values true, false\r\n        @param [markers=false] {boolean} - show a data maker icon for each data point\r\n      ###\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name area#spline\r\n        @values true, false\r\n        @param [spline=false] {boolean} - interpolate the area shape using bSpline\r\n      ###\r\n      attrs.$observe 'spline', (val) ->\r\n        if val is '' or val is 'true'\r\n          _spline = true\r\n        else\r\n          _spline = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name area#areaStyle\r\n        @param [areaStyle] {object} - Set the pie style for columns lines in the layout\r\n      ###\r\n      attrs.$observe 'areaStyle', (val) ->\r\n        if val\r\n          _areaStyle = scope.$eval(val)\r\n\r\n  }","###*\r\n  @ngdoc layout\r\n  @name areaStacked\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a horizontally stacked area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=total]\r\n  @usesDimension color [type=category20]\r\n###\r\n\r\nangular.module('wk.chart').directive 'areaStacked', ($log, utils, tooltipHelperFactory, dataManagerFactory, markerFactory) ->\r\n  stackedAreaCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      stack = d3.layout.stack()\r\n      offset = 'zero'\r\n      layers = null\r\n      _showMarkers = false\r\n      _spline = false\r\n      stackLayout = []\r\n      area = undefined\r\n      _areaStyle = undefined\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n      scaleY = undefined\r\n      offs = 0\r\n      _id = 'areaStacked' + stackedAreaCntr++\r\n      _showOpacity = 0.5\r\n\r\n      xData = dataManagerFactory()\r\n      markers = markerFactory()\r\n\r\n      layoutData = undefined\r\n      ttHelper = tooltipHelperFactory()\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      stack\r\n        .values((d)->d.values)\r\n        .y((d) -> if d.layerAdded or d.layerDeleted then 0 else d.value)\r\n        .x((d) -> d.targetKey)\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(x).valueScale(y).data(data)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        markers.active(_showMarkers)\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_areaStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        stackLayout = stack(data)\r\n\r\n        offs = if x.isOrdinal() then x.scale().rangeBand() / 2 else 0\r\n        $log.log 'offset' ,offs\r\n\r\n        if _tooltip\r\n          _tooltip.data(data)\r\n          ttHelper.layout(data)\r\n\r\n        if not layers\r\n          layers = this.selectAll('.wk-chart-layer')\r\n\r\n        if offset is 'expand'\r\n          scaleY = y.scale().copy()\r\n          scaleY.domain([0, 1])\r\n        else scaleY = y.scale()\r\n\r\n        area = d3.svg.area()\r\n          .x((d) ->  x.scale()(d.targetKey))\r\n          .y0((d) ->  scaleY(d.y0 + d.y))\r\n          .y1((d) ->  scaleY(d.y0))\r\n\r\n        if _spline\r\n          area.interpolate('cardinal')\r\n\r\n        layers = layers\r\n          .data(stackLayout, (d) -> d.layerKey)\r\n        enter = layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        enter\r\n          .append('path').attr('class', 'wk-chart-area-path')\r\n            .style('pointer-events', 'none')\r\n            .style('opacity', 0)\r\n\r\n\r\n        pathLayers = layers.select('.wk-chart-area-path')\r\n          #.style('fill', (d, i) -> color.scale()(d.layerKey))\r\n          #.style('stroke', (d, i) -> color.scale()(d.layerKey))\r\n          #.style(_areaStyle)\r\n          .attr('transform', \"translate(#{offs})\")\r\n          .each(setStyle)\r\n\r\n        updLayers = if doAnimate then pathLayers.transition().duration(options.duration) else pathLayers\r\n\r\n        updLayers\r\n          .attr('d', (d) -> area(d.values))\r\n          .style('opacity', _showOpacity)\r\n\r\n        layers.exit() #.transition().duration(options.duration)\r\n          .remove()\r\n\r\n        markers\r\n          .x((d) -> x.scale()(d.targetKey) + if x.isOrdinal() then x.scale().rangeBand() / 2 else 0)\r\n          .y((d) -> scaleY(d.y + d.y0))\r\n          .color( (d)->\r\n            style = color.scale()(d.layerKey)\r\n            return if typeof style is 'string' then style else style.color\r\n          )\r\n          .keyScale(x.scale())\r\n\r\n        layers.call(markers, doAnimate)\r\n\r\n      brush = (axis, idxRange) ->\r\n        layers = this.selectAll(\".wk-chart-area-path\")\r\n        if axis.isOrdinal()\r\n          layers.attr('d', (d) -> area(d.values.slice(idxRange[0],idxRange[1] + 1)))\r\n            .attr('transform', \"translate(#{axis.scale().rangeBand() / 2})\")\r\n          markers.brush(this, idxRange)\r\n          ttHelper.brushRange(idxRange)\r\n        else\r\n          layers.attr('d', (d) -> area(d.values))\r\n          markers.brush(this)\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('total').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        ttHelper\r\n          .keyScale(_scaleList.x)\r\n          .valueScale(_scaleList.y)\r\n          .isStacked(true)\r\n          .colorScale(_scaleList.color)\r\n          .value((d) -> d.y + d.y0)\r\n        _tooltip.markerScale(_scaleList.x)\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        _tooltip.on \"moveData.#{_id}\", ttHelper.moveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttHelper.moveMarkers\r\n\r\n      #host.lifeCycle().on \"drawChart\", draw\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      ###*\r\n          @ngdoc attr\r\n          @name areaStacked#areaStacked\r\n          @values zero, silhouette, expand, wiggle\r\n          @param [areaStacked=zero] {string} Defines how the areas are stacked.\r\n          For a description of the stacking algorithms please see [d3 Documentation on Stack Layout](https://github.com/mbostock/d3/wiki/Stack-Layout#offset)\r\n      ###\r\n      attrs.$observe 'areaStacked', (val) ->\r\n        if val in ['zero', 'silhouette', 'expand', 'wiggle']\r\n          offset = val\r\n        else\r\n          offset = \"zero\"\r\n        stack.offset(offset)\r\n        host.lifeCycle().update()\r\n      ###*\r\n        @ngdoc attr\r\n        @name areaStacked#markers\r\n        @values true, false\r\n        @param [markers=false] {boolean} - show a data maker icon for each data point\r\n      ###\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name areaStacked#spline\r\n        @values true, false\r\n        @param [spline=false] {boolean} - interpolate the area shape using bSpline\r\n      ###\r\n      attrs.$observe 'spline', (val) ->\r\n        if val is '' or val is 'true'\r\n          _spline = true\r\n        else\r\n          _spline = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name areaStacked#areaStyle\r\n        @param [areaStyle] {object} - Set the pie style for columns lines in the layout\r\n      ###\r\n      attrs.$observe 'areaStyle', (val) ->\r\n        if val\r\n          _areaStyle = scope.$eval(val)\r\n  }\r\n\r\n","###*\r\n  @ngdoc layout\r\n  @name areaStackedVertical\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=total] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n\r\n###\r\nangular.module('wk.chart').directive 'areaStackedVertical', ($log, utils, tooltipHelperFactory, dataManagerFactory, markerFactory) ->\r\n  areaStackedVertCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      stack = d3.layout.stack()\r\n      offset = 'zero'\r\n      layers = null\r\n      _showMarkers = false\r\n      _areaStyle = {}\r\n      _spline = false\r\n      stackLayout = []\r\n      area = undefined\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n      offs = 0\r\n      _id = 'areaStackedVert' + areaStackedVertCntr++\r\n      _showOpacity = 0.5\r\n\r\n      xData = dataManagerFactory()\r\n      markers = markerFactory()\r\n      ttHelper = tooltipHelperFactory()\r\n      layoutData = undefined\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n\r\n      stack\r\n        .values((d)->d.values)\r\n        .y((d) -> if d.layerAdded or d.layerDeleted then 0 else d.value)\r\n        .x((d) -> d.targetKey)\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(y).valueScale(x).data(data)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        markers.active(_showMarkers)\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_areaStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        stackLayout = stack(data)\r\n\r\n        offs = if y.isOrdinal() then y.scale().rangeBand() / 2 else 0\r\n\r\n        if _tooltip\r\n          _tooltip.data(data)\r\n          ttHelper.layout(data)\r\n\r\n        if not layers\r\n          layers = this.selectAll('.wk-chart-layer')\r\n\r\n        if offset is 'expand'\r\n          scaleX = x.scale().copy()\r\n          scaleX.domain([0, 1])\r\n        else scaleX = x.scale()\r\n\r\n        area = d3.svg.area()\r\n          .x((d) ->  -y.scale()(d.targetKey))\r\n          .y0((d) ->  scaleX(d.y0 + d.y))\r\n          .y1((d) ->  scaleX(d.y0))\r\n\r\n        if _spline\r\n          area.interpolate('cardinal')\r\n\r\n        layers = layers\r\n          .data(stackLayout, (d) -> d.layerKey)\r\n        enter = layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        enter\r\n          .append('path').attr('class', 'wk-chart-area-path')\r\n          .style('pointer-events', 'none')\r\n          .style('opacity', 0)\r\n\r\n        pathLayers = layers.select('.wk-chart-area-path')\r\n          #.style('fill', (d, i) -> color.scale()(d.layerKey))\r\n          #.style('stroke', (d, i) -> color.scale()(d.layerKey))\r\n          #.style(_areaStyle)\r\n          .attr('transform', \"translate(#{offs})rotate(-90)\")\r\n          .each(setStyle)\r\n\r\n        updLayers = if doAnimate then pathLayers.transition().duration(options.duration) else pathLayers\r\n\r\n        updLayers\r\n          .attr('d', (d) -> area(d.values))\r\n          .style('opacity', _showOpacity)\r\n\r\n        layers.exit() #.transition().duration(options.duration)\r\n          .remove()\r\n\r\n        markers\r\n          .x((d) -> scaleX(d.y + d.y0))\r\n          .y((d) -> y.scale()(d.targetKey) +  if y.isOrdinal() then y.scale().rangeBand() / 2 else 0)\r\n          .color( (d)->\r\n            style = color.scale()(d.layerKey)\r\n            return if typeof style is 'string' then style else style.color\r\n          )\r\n          .keyScale(y.scale())\r\n          .isVertical(true)\r\n\r\n        layers.call(markers, doAnimate)\r\n\r\n      brush = (axis, idxRange) ->\r\n        layers = this.selectAll(\".wk-chart-area-path\")\r\n        if axis.isOrdinal()\r\n          layers.attr('d', (d) -> area(d.values.slice(idxRange[0],idxRange[1] + 1)))\r\n            .attr('transform', \"translate(#{axis.scale().rangeBand() / 2})\")\r\n          markers.brush(this, idxRange)\r\n          ttHelper.brushRange(idxRange)\r\n        else\r\n          layers.attr('d', (d) -> area(d.values))\r\n          markers.brush(this)\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('x').domainCalc('total').resetOnNewData(true)\r\n        @getKind('y').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        ttHelper\r\n          .keyScale(_scaleList.y)\r\n          .valueScale(_scaleList.x)\r\n          .isStacked(true)\r\n          .colorScale(_scaleList.color)\r\n          .value((d) -> d.y + d.y0)\r\n        _tooltip.markerScale(_scaleList.y)\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        _tooltip.on \"moveData.#{_id}\", ttHelper.moveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttHelper.moveMarkers\r\n\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      ###*\r\n          @ngdoc attr\r\n          @name areaStackedVertical#areaStackedVertical\r\n          @values zero, silhouette, expand, wiggle\r\n          @param [areaStackedVertical=zero] {string} Defines how the areas are stacked.\r\n          For a description of the stacking algorithms please see [d3 Documentation on Stack Layout](https://github.com/mbostock/d3/wiki/Stack-Layout#offset)\r\n\r\n      ###\r\n      attrs.$observe 'areaStackedVertical', (val) ->\r\n        if val in ['zero', 'silhouette', 'expand', 'wiggle']\r\n          offset = val\r\n        else\r\n          offset = \"zero\"\r\n        stack.offset(offset)\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name areaStackedVertical#markers\r\n        @values true, false\r\n        @param [markers=false] {boolean} - show a data maker icon for each data point\r\n      ###\r\n\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name areaStackedVertical#spline\r\n        @values true, false\r\n        @param [spline=false] {boolean} - interpolate the area shape using bSpline\r\n      ###\r\n      attrs.$observe 'spline', (val) ->\r\n        if val is '' or val is 'true'\r\n          _spline = true\r\n        else\r\n          _spline = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name areaStackedVertical#areaStyle\r\n        @param [areaStyle] {object} - Set the pie style for columns lines in the layout\r\n      ###\r\n      attrs.$observe 'areaStyle', (val) ->\r\n        if val\r\n          _areaStyle = scope.$eval(val)\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name areaVertical\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'areaVertical', ($log, utils, tooltipHelperFactory, dataManagerFactory, markerFactory) ->\r\n  lineCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking s-line'\r\n      _tooltip = undefined\r\n      _ttHighlight = undefined\r\n      _circles = undefined\r\n      _scaleList = {}\r\n      _spline = false\r\n      _showMarkers = false\r\n      _areaStyle = {}\r\n      offset = 0\r\n      area = undefined\r\n      _id = 'areaVertical' + lineCntr++\r\n      _showOpacity = 0.5\r\n\r\n      layoutData = undefined\r\n      _initialOpacity = 0\r\n\r\n      xData = dataManagerFactory()\r\n      markers = markerFactory()\r\n      ttHelper = tooltipHelperFactory()\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(y).valueScale(x).data(data)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        markers.active(_showMarkers)\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_areaStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        offset = if y.isOrdinal() then y.scale().rangeBand() / 2 else 0\r\n        if _tooltip\r\n          _tooltip.data(data)\r\n          ttHelper.layout(data)\r\n\r\n        area = d3.svg.area() # tricky. Draw this like a horizontal chart and then rotate and position it.\r\n          .x((d) -> -y.scale()(d.targetKey))\r\n          .y((d) -> x.scale()(if d.layerAdded or d.layerDeleted then 0 else d.value))\r\n          .y1((d) ->  x.scale()(0))\r\n\r\n        if _spline\r\n          area.interpolate('cardinal')\r\n\r\n        layers = this.selectAll(\".wk-chart-layer\")\r\n          .data(data, (d) -> d.layerKey)\r\n        enter = layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        enter.append('path')\r\n          .attr('class','wk-chart-area-path')\r\n          .attr('d', (d) -> area(d.values))\r\n          .style('opacity', _initialOpacity)\r\n          .style('pointer-events', 'none')\r\n\r\n        path = layers.select('.wk-chart-area-path')\r\n          .attr('transform', \"translate(0,#{offset})rotate(-90)\") #rotate and position chart\r\n          #.style(_areaStyle)\r\n          #.style('stroke', (d) -> color.scale()(d.layerKey))\r\n          #.style('fill', (d) -> color.scale()(d.layerKey))\r\n          .style('pointer-events', 'none')\r\n        path.each(setStyle)\r\n        path = if doAnimate then path.transition().duration( options.duration) else path\r\n        path\r\n          .attr('d', (d) -> area(d.values))\r\n          .style('opacity', (d) -> if d.added or d.deleted then 0 else _showOpacity)\r\n\r\n        layers.exit()\r\n          .remove()\r\n\r\n        markers\r\n          .isVertical(true)\r\n          .x((d) -> x.scale()(if d.layerAdded or d.layerDeleted then 0 else d.value))\r\n          .y((d) -> y.scale()(d.targetKey) + if y.isOrdinal() then y.scale().rangeBand() / 2 else 0)\r\n          .color( (d)->\r\n            style = color.scale()(d.layerKey)\r\n            return if typeof style is 'string' then style else style.color\r\n          )\r\n          .keyScale(y.scale())\r\n        layers.call(markers, doAnimate)\r\n\r\n      brush = (axis, idxRange, width, height) ->\r\n        areaPath = this.selectAll(\".wk-chart-area-path\")\r\n        if axis.isOrdinal()\r\n          areaPath.attr('d', (d) ->\r\n            null\r\n            area(d.values.slice(idxRange[0],idxRange[1] + 1)))\r\n          .attr('transform', \"translate(0,#{axis.scale().rangeBand() / 2})rotate(-90)\")\r\n          markers.brush(this, idxRange)\r\n          ttHelper.brushRange(idxRange)\r\n        else\r\n          areaPath.attr('d', (d) -> area(d.values))\r\n          markers.brush(this)\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        ttHelper\r\n          .keyScale(_scaleList.y)\r\n          .valueScale(_scaleList.x)\r\n          .colorScale(_scaleList.color)\r\n          .value((d) -> d.value)\r\n        _tooltip.markerScale(_scaleList.y)\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        _tooltip.on \"moveData.#{_id}\", ttHelper.moveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttHelper.moveMarkers\r\n\r\n      #host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n      ###*\r\n        @ngdoc attr\r\n        @name areaVertical#markers\r\n        @values true, false\r\n        @param [markers=false] {boolean} - show a data maker icon for each data point\r\n      ###\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n        host.lifeCycle().update()\r\n      ###*\r\n        @ngdoc attr\r\n        @name areaVertical#spline\r\n        @values true, false\r\n        @param [spline=false] {boolean} - interpolate the area shape using bSpline\r\n      ###\r\n      attrs.$observe 'spline', (val) ->\r\n        if val is '' or val is 'true'\r\n          _spline = true\r\n        else\r\n          _spline = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name areaVertical#areaStyle\r\n        @param [areaStyle] {object} - Set the pie style for columns lines in the layout\r\n      ###\r\n      attrs.$observe 'areaStyle', (val) ->\r\n        if val\r\n          _areaStyle = scope.$eval(val)\r\n    }","###*\r\n  @ngdoc layout\r\n  @name bars\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a bar chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'bars', ($log, utils, barConfig, dataLabelFactory, dataManagerFactory, tooltipHelperFactory)->\r\n  sBarCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: '^layout'\r\n\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n\r\n    _id = \"bars#{sBarCntr++}\"\r\n\r\n    bars = null\r\n    barPaddingOld = 0\r\n    barOuterPaddingOld = 0\r\n    _scaleList = {}\r\n    _selected = undefined\r\n    _barStyle = {}\r\n    config = _.clone(barConfig, true)\r\n\r\n    xData = dataManagerFactory()\r\n    ttHelper = tooltipHelperFactory()\r\n    dataLabels = dataLabelFactory()\r\n    _tooltip = undefined\r\n\r\n    #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n    setAnimationStart = (data, options, x, y, color) ->\r\n      xData.keyScale(y).valueScale(x).data(data, true)\r\n      if not xData.isInitial()\r\n        layoutData = xData.animationStartLayers()\r\n        #$log.debug layoutData\r\n        drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n    setAnimationEnd = (data, options, x, y, color) ->\r\n      layoutData = xData.animationEndLayers()\r\n      dataLabels.duration(options.duration).active(host.showDataLabels()) # needs to be here to ensure right opacity animation !\r\n      drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n    drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n      setStyle = (d) ->\r\n        elem = d3.select(this)\r\n        elem.style(_barStyle)\r\n        style = if color.property().length is 0 then color.scale()(d.layerKey) else color.map(d.data)\r\n        if typeof style is 'string'\r\n          elem.style({fill:style, stroke:style})\r\n        else\r\n          cVal = style.color\r\n          style.fill = cVal\r\n          elem.style(style)\r\n\r\n      _colorByKey = not color.property() and color.isOrdinal()\r\n      ttHelper.colorByKey(_colorByKey)\r\n\r\n      if not bars\r\n        bars = @selectAll('.wk-chart-layer')\r\n      #$log.log \"rendering stacked-bar\"\r\n\r\n      barHeight = y.scale().rangeBand()\r\n      barPadding = barHeight / (1 - config.padding) * config.padding\r\n      barOuterPadding = barHeight / (1 - config.outerPadding) * config.outerPadding\r\n      #$log.log 'barPadding', barPadding, data\r\n\r\n      offset = (d) ->\r\n        if y.reverse()\r\n          if d.deleted and d.highBorder then return barHeight + barPadding / 2\r\n          if d.deleted then return -barPadding / 2\r\n          if d.added and d.atBorder then return barHeight + barPadding / 2\r\n          if d.added then return -barPadding / 2\r\n        else\r\n          if d.deleted and d.highBorder then return -barPadding / 2\r\n          if d.deleted then return barHeight + barPadding / 2\r\n          if d.added and d.atBorder then return -barPadding / 2\r\n          if d.added then return barHeight + barPadding / 2\r\n        return 0\r\n\r\n      bars = bars.data(data[0].values, (d, i) -> d.key)\r\n\r\n      enter = bars.enter().append('g').attr('class','wk-chart-layer')\r\n        .attr('transform', (d)-> \"translate(#{x.scale()(0)}, #{y.scale()(d.targetKey) + offset(d)})\")\r\n\r\n      enter.append('rect')\r\n        .attr('class', 'wk-chart-rect wk-chart-selectable')\r\n        .attr('height', (d) -> if d.added or d.deleted then 0 else barHeight)\r\n        .style('opacity', 0)\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n\r\n      (if doAnimate then bars.transition().duration(options.duration) else bars)\r\n          .attr('transform', (d) -> \"translate(#{x.scale()(0)}, #{y.scale()(d.targetKey) + offset(d)}) scale(1,1)\")\r\n\r\n      rect = bars.select('rect')\r\n        #.style('fill', (d) -> if color.property().length is 0 then color.scale()(d.layerKey) else color.map(d.data))\r\n        #.style('stroke', (d) -> if color.property().length is 0 then color.scale()(d.layerKey) else color.map(d.data))\r\n        #.style(_barStyle)\r\n        .each(setStyle)\r\n      (if doAnimate then rect.transition().duration(options.duration) else rect)\r\n        .attr('height', (d) -> if d.added or d.deleted then 0 else barHeight)\r\n        .attr('width', (d) -> Math.abs(x.scale()(0) - x.scale()(d.targetValue)))\r\n        .style('opacity', 1)\r\n\r\n      bars.exit()\r\n        .remove()\r\n\r\n      bars.call(dataLabels, doAnimate, host.dataLabelStyle())\r\n\r\n    brush = (axis, idxRange) ->\r\n      bars\r\n        .attr('transform',(d) -> \"translate(0, #{if (y = axis.scale()(d.key)) >= 0 then y else -1000})\")\r\n          .selectAll('.wk-chart-rect')\r\n          .attr('height', (d) -> axis.scale().rangeBand())\r\n      dataLabels.brush(bars)\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'y', 'color'])\r\n      @getKind('x').domainCalc('max').resetOnNewData(true)\r\n      @getKind('y').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n      _tooltip = host.behavior().tooltip\r\n      _selected = host.behavior().selected\r\n      ttHelper\r\n        .keyScale(_scaleList.y)\r\n        .valueScale(_scaleList.x)\r\n        .colorScale(_scaleList.color)\r\n        .value((d) -> d.value)\r\n      _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n      dataLabels\r\n        .keyScale(_scaleList.y)\r\n        .valueScale(_scaleList.x)\r\n\r\n    host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n    host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n    host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n    host.lifeCycle().on \"destroy.#{_id}\", ->\r\n      host.lifeCycle().on \".#{_id}\", null\r\n      _tooltip.on \".#{_id}\", null\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name bars#padding\r\n      @values true, false, [padding, outerPadding]\r\n      @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n    ###\r\n    attrs.$observe 'padding', (val) ->\r\n      if val is 'false'\r\n        config.padding = 0\r\n        config.outerPadding = 0\r\n      else if val is 'true'\r\n        config = _.clone(barConfig, true)\r\n      else\r\n        values = utils.parseList(val)\r\n        if values\r\n          if values.length is 1\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[0]/100\r\n          if values.length is 2\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[1]/100\r\n      _scaleList.y.rangePadding(config)\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name bars#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        host.showDataLabels(false)\r\n      else if val is 'true' or val is \"\"\r\n        host.showDataLabels('x')\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name bars#labelStyle\r\n        @param [labelStyle=font-size:\"1.3em\"] {object} defined the font style attributes for the labels.\r\n    ###\r\n    attrs.$observe 'labelStyle', (val) ->\r\n      if val\r\n        host.dataLabelStyle(scope.$eval(val))\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name bars#barStyle\r\n        @param [barsStyle] {object} - Set the line style for columns lines in the layout\r\n      ###\r\n    attrs.$observe 'barStyle', (val) ->\r\n      if val\r\n        _barStyle = scope.$eval(val)\r\n  }","###*\r\n  @ngdoc layout\r\n  @name barClustered\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a clustered bar layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'barClustered', ($log, utils, barConfig, dataManagerFactory, tooltipHelperFactory)->\r\n\r\n  clusteredBarCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      _id = \"clusteredBar#{clusteredBarCntr++}\"\r\n\r\n      layers = null\r\n      _barStyle = {}\r\n      clusterY = undefined\r\n\r\n      barPaddingOld = 0\r\n      barOuterPaddingOld = 0\r\n      barHeight = 0\r\n      config = _.clone(barConfig, true)\r\n\r\n      xData = dataManagerFactory()\r\n      ttHelper = tooltipHelperFactory()\r\n\r\n      initial = true\r\n\r\n      stack = d3.layout.stack()\r\n      stack\r\n        .values((d)-> d.values)\r\n        .y((d) -> if d.layerDeleted or d.layerAdded or d.deleted or d.added then 0 else barHeight)\r\n        .x((d) -> d.layerKey)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      _tooltip = undefined\r\n      _selected = undefined\r\n      _scaleList = {}\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(y).valueScale(x).data(data, true)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n        #$log.info \"rendering clustered-bar\"\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_barStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        # map data to the right format for rendering\r\n        layerKeys = data.filter((d) -> not d.added and not d.deleted).map((d) -> d.layerKey)\r\n        clusterHeight = y.scale().rangeBand()\r\n        clusterY = d3.scale.ordinal().domain(layerKeys).rangeBands([0, clusterHeight], 0, 0)\r\n        barHeight = clusterY.rangeBand()\r\n        clusterPadding = clusterHeight / (1 - config.padding) * config.padding\r\n        barOuterPadding = clusterHeight / (1 - config.outerPadding) * config.outerPadding\r\n\r\n        offset = (d) ->\r\n          if y.reverse()\r\n            if d.deleted and d.highBorder then return clusterHeight + clusterPadding / 2\r\n            if d.deleted then return -clusterPadding / 2\r\n            if d.added and d.atBorder then return clusterHeight + clusterPadding / 2\r\n            if d.added then return -clusterPadding / 2\r\n          else\r\n            if d.deleted and d.highBorder then return -clusterPadding / 2\r\n            if d.deleted then return clusterHeight + clusterPadding / 2\r\n            if d.added and d.atBorder then return -clusterPadding / 2\r\n            if d.added then return clusterHeight + clusterPadding / 2\r\n          return 0\r\n\r\n        stackLayout = stack(data)\r\n        $log.log stackLayout\r\n        if not layers\r\n          layers = @selectAll('.wk-chart-layer')\r\n\r\n        layers = layers.data(stackLayout, (d) -> d.layerKey)\r\n\r\n        layers.enter().append('g')\r\n          .attr('class', 'wk-chart-layer')\r\n\r\n        layers.exit()\r\n          .remove()\r\n\r\n        bars = layers.selectAll('.wk-chart-rect')\r\n          .data(\r\n            (d) -> d.values\r\n          , (d) -> d.layerKey + '|' + d.key\r\n          )\r\n\r\n        bars.enter().append('rect')\r\n          .attr('class', 'wk-chart-rect wk-chart-selectable')\r\n          #.style('fill', (d) -> color.scale()(d.layerKey))\r\n          .style('opacity', 0)\r\n          .call(_tooltip.tooltip)\r\n          .call(_selected)\r\n\r\n        bars\r\n          .each(setStyle)\r\n\r\n        (if doAnimate then bars.transition().duration(options.duration) else bars)\r\n          .attr('y', (d) -> y.scale()(d.targetKey) + d.y0 + offset(d))\r\n          .attr('height', (d) -> d.y)\r\n          .attr('width', (d) -> Math.abs(x.scale()(d.targetValue) or 0))\r\n          .attr('x', (d) -> Math.min(x.scale()(0), x.scale()(d.targetValue)))\r\n          .style('opacity', 1)\r\n\r\n        bars.exit()\r\n          .remove()\r\n\r\n        initial = false\r\n        barPaddingOld = clusterPadding\r\n        barOuterPaddingOld = barOuterPadding\r\n\r\n      drawBrush = (axis, idxRange) ->\r\n        clusterY.rangeBands([0,axis.scale().rangeBand()], 0, 0)\r\n        height = clusterY.rangeBand()\r\n        bars = this.selectAll(\".wk-chart-rect\")\r\n        if axis.isOrdinal()\r\n          bars\r\n          .attr('y', (d) -> if (val = axis.scale()(d.targetKey)) >= 0 then val + clusterY(d.layerKey) else -1000)\r\n          .attr('height', (d) -> height)\r\n          ttHelper.brushRange(idxRange)\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @getKind('x').domainCalc('max').resetOnNewData(true)\r\n        @getKind('y').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n        @layerScale('color')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        _selected = host.behavior().selected\r\n        ttHelper\r\n          .keyScale(_scaleList.y)\r\n          .valueScale(_scaleList.x)\r\n          .colorScale(_scaleList.color)\r\n          .value((d) -> d.value)\r\n\r\n      #host.lifeCycle().on \"drawChart\", draw\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", drawBrush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name barClustered#padding\r\n        @values true, false, [padding, outerPadding]\r\n        @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n      ###\r\n      attrs.$observe 'padding', (val) ->\r\n        if val is 'false'\r\n          config.padding = 0\r\n          config.outerPadding = 0\r\n        else if val is 'true'\r\n          config = _.clone(barConfig, true)\r\n        else\r\n          values = utils.parseList(val)\r\n          if values\r\n            if values.length is 1\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[0]/100\r\n            if values.length is 2\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[1]/100\r\n        _scaleList.y.rangePadding(config)\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name barClustered#barsStyle\r\n        @param [barStyle] {object} - Set the line style for columns lines in the layout\r\n      ###\r\n      attrs.$observe 'barStyle', (val) ->\r\n        if val\r\n          _barStyle = scope.$eval(val)\r\n  }\r\n\r\n","###*\r\n  @ngdoc layout\r\n  @name barStacked\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @description\r\n\r\n  draws a stacked bar chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=total] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'barStacked', ($log, utils, barConfig, dataManagerFactory, tooltipHelperFactory) ->\r\n\r\n  stackedBarCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking Stacked bar'\r\n\r\n      _id = \"stackedBar#{stackedBarCntr++}\"\r\n\r\n      layers = null\r\n\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n      _selected = undefined\r\n      _barStyle = {}\r\n\r\n      config = _.clone(barConfig, true)\r\n\r\n      xData = dataManagerFactory()\r\n      ttHelper = tooltipHelperFactory()\r\n      stack = d3.layout.stack()\r\n      stack\r\n        .values((d)->d.values)\r\n        .y((d) -> if d.layerAdded or d.layerDeleted then 0 else d.targetValue)\r\n        .x((d) -> d.targetKey)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(y).valueScale(x).data(data, true)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_barStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        if not layers\r\n          layers = @selectAll(\".wk-chart-layer\")\r\n        #$log.debug \"drawing stacked-bar\"\r\n\r\n        barPadding = y.scale().rangeBand() / (1 - config.padding) * config.padding\r\n\r\n        stackLayout = stack(data)\r\n        layers = layers\r\n          .data(stackLayout, (d) -> d.layerKey)\r\n\r\n        barHeight = y.scale().rangeBand()\r\n\r\n        offset = (d) ->\r\n          if y.reverse()\r\n            if d.deleted and d.highBorder then return barHeight + barPadding / 2\r\n            if d.deleted then return -barPadding / 2\r\n            if d.added and d.atBorder then return barHeight + barPadding / 2\r\n            if d.added then return -barPadding / 2\r\n          else\r\n            if d.deleted and d.highBorder then return -barPadding / 2\r\n            if d.deleted then return barHeight + barPadding / 2\r\n            if d.added and d.atBorder then return -barPadding / 2\r\n            if d.added then return barHeight + barPadding / 2\r\n          return 0\r\n\r\n        layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        layers.exit().remove()\r\n\r\n        bars = layers.selectAll('.wk-chart-rect')\r\n        bars = bars.data(\r\n          (d) -> d.values,\r\n          (d) -> d.key.toString() + '|' + d.layerKey.toString()\r\n          )\r\n        bars.enter().append('rect').attr('class','wk-chart-rect wk-chart-selectable')\r\n          .style('opacity', 0)\r\n          #.attr('fill', (d) -> color.scale()(d.layerKey))\r\n          .style('opacity', 0)\r\n          .call(_tooltip.tooltip)\r\n          .call(_selected)\r\n\r\n        bars\r\n          .each(setStyle)\r\n\r\n        (if doAnimate then bars.transition().duration(options.duration) else bars)\r\n          .attr('x', (d) -> x.scale()(d.y0))\r\n          .attr('width', (d) -> x.scale()(d.y))\r\n          .attr('height', (d) -> if d.added or d.deleted then 0 else barHeight)\r\n          .attr('y', (d) -> y.scale()(d.targetKey) + offset(d))\r\n          .style('opacity', 1)\r\n\r\n        bars.exit().remove()\r\n\r\n      brush = (axis, idxRange) ->\r\n        bars = this.selectAll(\".wk-chart-rect\")\r\n        if axis.isOrdinal()\r\n          bars\r\n            .attr('y', (d) -> if (val = axis.scale()(d.key)) >= 0 then val else -1000)\r\n            .attr('height', (d) -> axis.scale().rangeBand())\r\n          ttHelper.brushRange(idxRange)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @getKind('x').domainCalc('total').resetOnNewData(true)\r\n        @getKind('y').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n        @layerScale('color')\r\n        _tooltip = host.behavior().tooltip\r\n        _selected = host.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        ttHelper\r\n          .keyScale(_scaleList.y)\r\n          .valueScale(_scaleList.x)\r\n          .colorScale(_scaleList.color)\r\n          .value((d) -> d.value)\r\n\r\n      #host.lifeCycle().on \"drawChart\", draw\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      ###*\r\n          @ngdoc attr\r\n          @name barStacked#padding\r\n          @values true, false, [padding, outerPadding]\r\n          @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n      ###\r\n      attrs.$observe 'padding', (val) ->\r\n        if val is 'false'\r\n          config.padding = 0\r\n          config.outerPadding = 0\r\n        else if val is 'true'\r\n          config = _.clone(barConfig, true)\r\n        else\r\n          values = utils.parseList(val)\r\n          if values\r\n            if values.length is 1\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[0]/100\r\n            if values.length is 2\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[1]/100\r\n        _scaleList.y.rangePadding(config)\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name barStacked#barStyle\r\n        @param [barsStyle] {object} - Set the line style for columns lines in the layout\r\n      ###\r\n      attrs.$observe 'barStyle', (val) ->\r\n        if val\r\n          _barStyle = scope.$eval(val)\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name boxPlot\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a column range chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'boxPlot', ($log, utils, barConfig, dataManagerFactory, markerFactory, tooltipHelperFactory)->\r\n  sBarCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: '^layout'\r\n\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n\r\n    _id = \"boxPlot#{sBarCntr++}\"\r\n\r\n    _boxStyle = {}\r\n\r\n    _tooltip = undefined\r\n    _selected = undefined\r\n    _scaleList = {}\r\n    _showMarkers = false\r\n    offset = 0\r\n    layoutData = undefined\r\n    config = _.clone(barConfig, true)\r\n\r\n    xData = dataManagerFactory()\r\n    markers = markerFactory()\r\n    ttHelper = tooltipHelperFactory()\r\n\r\n    #-----------------------------------------------------------------------------------------------------------------\r\n\r\n    setAnimationStart = (data, options, x, y, color, size) ->\r\n      xData.keyScale(x).valueScale(y).data(data, true)\r\n      if not xData.isInitial()\r\n        layoutData = xData.animationStartLayers()\r\n        drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n    setAnimationEnd = (data, options, x, y, color, size) ->\r\n      markers.active(_showMarkers)\r\n      layoutData = xData.animationEndLayers()\r\n      drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n    drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n      setStyle = (s, key) ->\r\n        s.each((d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_boxStyle)\r\n          style = color.scale()(d[key].property)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n          )\r\n      barWidth = x.scale().rangeBand()\r\n      barPadding = barWidth / (1 - config.padding) * config.padding\r\n      offset = if y.isOrdinal() then barWidth / 2 else 0\r\n      if _tooltip\r\n        _tooltip.data(data)\r\n        ttHelper.layout(data)\r\n\r\n      offset = (d) ->\r\n        if d.deleted and d.atBorder then return barWidth\r\n        if d.deleted then return -barPadding / 2\r\n        if d.added and d.atBorder then return  barWidth + barPadding / 2\r\n        if d.added then return -barPadding / 2\r\n        return 0\r\n\r\n      # re-format data\r\n      ranges = []\r\n      i = 0\r\n      showMin = false\r\n      showMax = false\r\n      if data.length is 3\r\n        prop = ['lq', 'med', 'uq']\r\n      else if data.length is 5\r\n        prop = ['min','lq', 'med', 'uq', 'max']\r\n        showMin = showMax = true\r\n\r\n      layerKeys = y.property()\r\n      while i < data[0].values.length\r\n        r = {}\r\n        r.key = data[0].values[i].key\r\n        r.targetKey = data[0].values[i].targetKey\r\n        r.data = data[0].values[i].data\r\n        r.added = data[0].values[i].added\r\n        r.deleted = data[0].values[i].deleted\r\n        for p, j in prop\r\n          r[p] = {}\r\n          r[p].val = data[j].values[i].targetValue\r\n          r[p].property = layerKeys[j]\r\n        ranges.push(r)\r\n        i++\r\n\r\n      box = this.selectAll(\".wk-chart-box\")\r\n        .data(ranges, (d) -> d.key)\r\n      boxEnter = box.enter()\r\n        .append('g').attr('class','wk-chart-box wk-chart-selectable')\r\n        .attr('transform',(d) -> \"translate(#{x.scale()(d.targetKey) + offset(d)})\")\r\n        .classed('wk-chart-hidden', true)\r\n        .style('opacity', 0)\r\n        .call(_selected)\r\n      boxEnter.append('rect')\r\n        .attr('class', 'wk-chart-box-uq wk-chart-selectable')\r\n        .classed('wk-chart-hidden', true)\r\n        .style('opacity', 0)\r\n        .style('fill', 'white')\r\n        .style('stroke', 'black')\r\n        .call(_tooltip.tooltip)\r\n\r\n      boxEnter.append('rect')\r\n        .attr('class', 'wk-chart-box-lq  wk-chart-selectable')\r\n        .classed('wk-chart-hidden', true)\r\n        .style('opacity', 0)\r\n        .style('fill', 'white')\r\n        .style('stroke', 'black')\r\n        .call(_tooltip.tooltip)\r\n\r\n      boxEnter.append('line')\r\n        .attr('class', 'wk-chart-box-med')\r\n        .classed('wk-chart-hidden', true)\r\n        .style({opacity: 0})\r\n      boxEnter.append('line')\r\n        .attr('class', 'wk-chart-box-lw')\r\n        .classed('wk-chart-hidden', true)\r\n        .style({opacity: 0})\r\n      boxEnter.append('line')\r\n        .attr('class', 'wk-chart-box-lw-conn')\r\n        .classed('wk-chart-hidden', true)\r\n        .style({opacity: 0, 'stroke-dasharray':'2.2'})\r\n      boxEnter.append('line')\r\n        .attr('class', 'wk-chart-box-uw')\r\n        .classed('wk-chart-hidden', true)\r\n        .style({stroke: 'black', opacity: 0})\r\n      boxEnter.append('line')\r\n        .attr('class', 'wk-chart-box-uw-conn')\r\n        .classed('wk-chart-hidden', true)\r\n        .style({opacity: 0, 'stroke-dasharray':'2.2'})\r\n      (if doAnimate then box.transition().duration( options.duration) else box)\r\n        .attr('transform',(d) -> \"translate(#{x.scale()(d.targetKey) + offset(d)})\")\r\n        .style('opacity', (d) -> if d.deleted then 0 else 1)\r\n\r\n      uq = box.select('.wk-chart-box-uq')\r\n        .call(setStyle, 'uq')\r\n      (if doAnimate then uq.transition().duration( options.duration) else uq)\r\n        .attr('y', (d) -> y.scale()(d.uq.val))\r\n        .attr('height', (d) -> Math.abs(y.scale()(d.uq.val) - y.scale()(d.med.val)))\r\n        .attr('width', (d) -> if d.added or d.deleted then 0 else barWidth)\r\n        .style('opacity', 1)\r\n\r\n      lq = box.select('.wk-chart-box-lq')\r\n        .call(setStyle, 'lq')\r\n      (if doAnimate then lq.transition().duration( options.duration) else lq)\r\n        .attr('y', (d) -> y.scale()(d.med.val))\r\n        .attr('height', (d) -> Math.abs(y.scale()(d.med.val) - y.scale()(d.lq.val)))\r\n        .attr('width', (d) -> if d.added or d.deleted then 0 else barWidth)\r\n        .style('opacity', 1)\r\n\r\n      med = box.select('.wk-chart-box-med')\r\n        .call(setStyle, 'med')\r\n      (if doAnimate then med.transition().duration( options.duration) else med)\r\n        .attr('x1', -barWidth * 0.2)\r\n        .attr('x2', (d) -> if d.added or d.deleted then 0 else barWidth*1.3)\r\n        .attr('y1', (d) -> y.scale()(d.med.val))\r\n        .attr('y2', (d) -> y.scale()(d.med.val))\r\n        .style({'opacity':1, 'stroke-width':2})\r\n\r\n      lWhisker =  box.select('.wk-chart-box-lw')\r\n        .call(setStyle, 'min')\r\n      (if doAnimate then lWhisker.transition().duration( options.duration) else lWhisker)\r\n        .attr('x1', 0)\r\n        .attr('x2', (d) -> if d.added or d.deleted then 0 else barWidth)\r\n        .attr('y1', (d) -> if showMin then y.scale()(d.min.val) else 0)\r\n        .attr('y2', (d) -> if showMin then y.scale()(d.min.val) else 0)\r\n        .style({'opacity':1, 'stroke-width':3})#.style('stroke', 'black')\r\n        .style('visibility', if showMin then 'visible' else 'none')\r\n\r\n      lwConn = box.select('.wk-chart-box-lw-conn')\r\n      (if doAnimate then lwConn.transition().duration( options.duration) else lwConn)\r\n        .attr('x1', (d) -> if d.added or d.deleted then 0 else barWidth/2)\r\n        .attr('x2', (d) -> if d.added or d.deleted then 0 else barWidth/2)\r\n        .attr('y1', (d) -> if showMin then y.scale()(d.lq.val) else 0)\r\n        .attr('y2', (d) -> if showMin then y.scale()(d.min.val) else 0)\r\n        .style('opacity', 1).style('stroke', 'black')\r\n        .style('visibility', if showMin then 'visible' else 'none')\r\n\r\n      uWhisker =  box.select('.wk-chart-box-uw')\r\n        .call(setStyle, 'max')\r\n      (if doAnimate then uWhisker.transition().duration( options.duration) else uWhisker)\r\n        .attr('x1', 0)\r\n        .attr('x2', (d) -> if d.added or d.deleted then 0 else barWidth)\r\n        .attr('y1', (d) -> if showMax then y.scale()(d.max.val) else 0)\r\n        .attr('y2', (d) -> if showMax then y.scale()(d.max.val) else 0)\r\n        .style({'opacity':1, 'stroke-width':3}) #.style('stroke', 'black')\r\n        .style('visibility', if showMax then 'visible' else 'none')\r\n\r\n      uwConn = box.select('.wk-chart-box-uw-conn')\r\n      (if doAnimate then uwConn.transition().duration( options.duration) else uwConn)\r\n        .attr('x1', (d) -> if d.added or d.deleted then 0 else barWidth/2)\r\n        .attr('x2', (d) -> if d.added or d.deleted then 0 else barWidth/2)\r\n        .attr('y1', (d) -> if showMax then y.scale()(d.uq.val) else 0)\r\n        .attr('y2', (d) -> if showMax then y.scale()(d.max.val) else 0)\r\n        .style('opacity', 1).style('stroke', 'black')\r\n        .style('visibility', if showMax then 'visible' else 'none')\r\n\r\n\r\n      box.exit()\r\n        .remove()\r\n\r\n    brush = (axis, idxRange) ->\r\n      this.selectAll('.wk-chart-rect')\r\n          .attr('transform',(d) -> \"translate(0, #{if (x = axis.scale()(d.targetKey)) >= 0 then x else -1000})\")\r\n        .selectAll('.wk-chart-rect')\r\n          .attr('height', (d) -> axis.scale().rangeBand())\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'y', 'color'])\r\n      @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n      @getKind('x').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n      _tooltip = host.behavior().tooltip\r\n      ttHelper\r\n        .keyScale(_scaleList.x)\r\n        .valueScale(_scaleList.y)\r\n        .colorScale(_scaleList.color)\r\n        .value((d) -> d.value)\r\n      _selected = host.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n\r\n    #host.lifeCycle().on \"drawChart\", draw\r\n    host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n    host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n    host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n    host.lifeCycle().on \"destroy.#{_id}\", ->\r\n      host.lifeCycle().on \".#{_id}\", null\r\n      _tooltip.on \".#{_id}\", null\r\n\r\n    ###*\r\n    @ngdoc attr\r\n      @name rangeColumn#padding\r\n      @values true, false, [padding, outerPadding]\r\n      @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n    ###\r\n    attrs.$observe 'padding', (val) ->\r\n      if val is 'false'\r\n        config.padding = 0\r\n        config.outerPadding = 0\r\n      else if val is 'true'\r\n        config = _.clone(barConfig, true)\r\n      else\r\n        values = utils.parseList(val)\r\n        if values\r\n          if values.length is 1\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[0]/100\r\n          if values.length is 2\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[1]/100\r\n      _scaleList.x.rangePadding(config)\r\n      host.lifeCycle().update()\r\n    ###*\r\n        @ngdoc attr\r\n        @name rangeColumn#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        host.showDataLabels(false)\r\n      else if val is 'true' or val is \"\"\r\n        host.showDataLabels('y')\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name rangeColumn#boxStyle\r\n      @param [columnStyle] {object} - Set the line style for columns lines in the layout\r\n    ###\r\n    attrs.$observe 'boxStyle', (val) ->\r\n      if val\r\n        _boxStyle = scope.$eval(val)\r\n\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name bubble\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a bubble chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear]\r\n  @usesDimension color [type=category20]\r\n  @usesDimension size [type=linear]\r\n###\r\nangular.module('wk.chart').directive 'bubble', ($log, utils) ->\r\n  bubbleCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      #$log.debug 'bubbleChart linked'\r\n      layout = controller.me\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n      _id = 'bubble' + bubbleCntr++\r\n      _selected = undefined\r\n\r\n      #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n      ttEnter = (data) ->\r\n        for sName, scale of _scaleList\r\n          @layers[scale.axisLabel()] = {value: scale.formattedValue(data), color: if sName is 'color' then {fill:(if typeof scale.map(data) is 'string' then scale.map(data) else scale.map(data).color)} else {fill:'none'}}\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color, size) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          #elem.style(_areaStyle)\r\n          style = color.map(d)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        bubbles = @selectAll('.wk-chart-bubble').data(data, (d) -> color.value(d))\r\n        bubbles.enter().append('circle').attr('class','wk-chart-bubble wk-chart-selectable')\r\n          .style('opacity', 0)\r\n          .call(_tooltip.tooltip)\r\n          .call(_selected)\r\n        bubbles\r\n          .each(setStyle)\r\n          .transition().duration(options.duration)\r\n            .attr({\r\n              r:  (d) -> size.map(d)\r\n              cx: (d) -> x.map(d)\r\n              cy: (d) -> y.map(d)\r\n            })\r\n            .style('opacity', 1)\r\n        bubbles.exit()\r\n          .transition().duration(options.duration)\r\n            .style('opacity',0).remove()\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color', 'size'])\r\n        @getKind('y').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true)\r\n        _tooltip = layout.behavior().tooltip\r\n        _selected = layout.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      layout.lifeCycle().on \"drawChart.#{_id}\", draw\r\n\r\n      layout.lifeCycle().on \"destroy.#{_id}\", ->\r\n        layout.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n  }\r\n\r\n  #TODO verify and test custom tooltips behavior","###*\r\n  @ngdoc layout\r\n  @name column\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a column chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'column', ($log, utils, barConfig, dataManagerFactory, dataLabelFactory, tooltipHelperFactory)->\r\n  sBarCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: '^layout'\r\n\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n\r\n    _id = \"column#{sBarCntr++}\"\r\n\r\n    columns = null\r\n    _scaleList = {}\r\n    _selected = undefined\r\n\r\n    config = _.clone(barConfig, true)\r\n\r\n    xData = dataManagerFactory()\r\n    ttHelper = tooltipHelperFactory()\r\n    dataLabels = dataLabelFactory()\r\n    _tooltip = undefined\r\n    _columnStyle = {'stroke-width':1}\r\n\r\n    #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n    setAnimationStart = (data, options, x, y, color) ->\r\n      xData.keyScale(x).valueScale(y).data(data, true)\r\n      if not xData.isInitial()\r\n        layoutData = xData.animationStartLayers()\r\n        drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n    setAnimationEnd = (data, options, x, y, color) ->\r\n      layoutData = xData.animationEndLayers()\r\n      dataLabels.duration(options.duration).active(host.showDataLabels()) # needs to be here to ensure right opacity animation !\r\n      drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n    drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n      setStyle = (d) ->\r\n        elem = d3.select(this)\r\n        elem.style(_columnStyle)\r\n        style = if color.property().length is 0 then color.scale()(d.layerKey) else color.map(d.data)\r\n        if typeof style is 'string'\r\n          elem.style({fill:style, stroke:style})\r\n        else\r\n          cVal = style.color\r\n          style.fill = cVal\r\n          elem.style(style)\r\n\r\n      _colorByKey = not color.property() and color.isOrdinal()\r\n      ttHelper.colorByKey(_colorByKey)\r\n\r\n      if not columns\r\n        columns = @selectAll('.wk-chart-layer')\r\n      #$log.log \"rendering stacked-bar\"\r\n\r\n      barWidth = x.scale().rangeBand()\r\n      barPadding = barWidth / (1 - config.padding) * config.padding\r\n\r\n      offset = (d) ->\r\n        if x.reverse()\r\n          if d.deleted and d.highBorder then return  -barPadding / 2\r\n          if d.deleted then return barWidth + barPadding / 2\r\n          if d.added and d.atBorder then return -barPadding / 2\r\n          if d.added then return barWidth + barPadding / 2\r\n        else\r\n          if d.deleted and d.highBorder then return barWidth\r\n          if d.deleted then return -barPadding / 2\r\n          if d.added and d.atBorder then return  barWidth + barPadding / 2\r\n          if d.added then return -barPadding / 2\r\n        return 0\r\n\r\n      columns = columns.data(data[0].values, (d) -> d.key)\r\n\r\n      enter = columns.enter().append('g').attr('class','wk-chart-layer')\r\n        .attr('transform', (d)-> \"translate(#{x.scale()(d.targetKey)})\")\r\n\r\n      enter.append('rect')\r\n        .attr('class', 'wk-chart-rect wk-chart-selectable')\r\n        .attr('width', (d) -> if d.added or d.deleted then 0 else barWidth)\r\n        .style('opacity', 0)\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n\r\n      (if doAnimate then columns.transition().duration(options.duration) else columns)\r\n        .attr('transform', (d) -> \"translate(#{x.scale()(d.targetKey) + offset(d)})\")\r\n\r\n      rect = columns.select('rect')\r\n        #.style('fill', (d) -> if color.property().length is 0 then color.scale()(d.layerKey) else color.map(d.data))\r\n        #.style('stroke', (d) -> if color.property().length is 0 then color.scale()(d.layerKey)  else color.map(d.data))\r\n        .each(setStyle)\r\n      (if doAnimate then rect.transition().duration(options.duration) else rect)\r\n        .attr('width', (d) -> if d.added or d.deleted then 0 else barWidth)\r\n        .attr('height', (d) -> Math.abs(y.scale()(0) - y.scale()(d.targetValue)))\r\n        .attr('y', (d) -> Math.min(y.scale()(0), y.scale()(d.targetValue)))\r\n        .style('opacity', 1)\r\n\r\n      columns.call(dataLabels, doAnimate, host.dataLabelStyle())\r\n\r\n      columns.exit()\r\n      .remove()\r\n\r\n    brush = (axis, idxRange) ->\r\n      columns\r\n        .attr('transform',(d) -> \"translate(#{if (x = axis.scale()(d.key)) >= 0 then x else -1000})\")\r\n        .selectAll('.wk-chart-rect')\r\n        .attr('width', (d) -> axis.scale().rangeBand())\r\n      dataLabels.brush(columns)\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'y', 'color'])\r\n      @getKind('y').domainCalc('max').resetOnNewData(true)\r\n      @getKind('x').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n      _tooltip = host.behavior().tooltip\r\n      _selected = host.behavior().selected\r\n      ttHelper\r\n        .keyScale(_scaleList.x)\r\n        .valueScale(_scaleList.y)\r\n        .colorScale(_scaleList.color)\r\n        .value((d) -> d.value)\r\n      dataLabels\r\n        .keyScale(_scaleList.x)\r\n        .valueScale(_scaleList.y)\r\n      _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n\r\n    host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n    host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n    host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n    host.lifeCycle().on \"destroy.#{_id}\", ->\r\n      host.lifeCycle().on \".#{_id}\", null\r\n      _tooltip.on \".#{_id}\", null\r\n\r\n    ###*\r\n    @ngdoc attr\r\n      @name column#padding\r\n      @values true, false, [padding, outerPadding]\r\n      @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n    ###\r\n    attrs.$observe 'padding', (val) ->\r\n      if val is 'false'\r\n        config.padding = 0\r\n        config.outerPadding = 0\r\n      else if val is 'true'\r\n        config = _.clone(barConfig, true)\r\n      else\r\n        values = utils.parseList(val)\r\n        if values\r\n          if values.length is 1\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[0]/100\r\n          if values.length is 2\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[1]/100\r\n      _scaleList.x.rangePadding(config)\r\n      host.lifeCycle().update()\r\n    ###*\r\n        @ngdoc attr\r\n        @name column#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        host.showDataLabels(false)\r\n      else if val is 'true' or val is \"\"\r\n        host.showDataLabels('y')\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name column#labelStyle\r\n      @param [labelStyle=font-size:\"1.3em\"] {object} defined the font style attributes for the labels.\r\n    ###\r\n    attrs.$observe 'labelStyle', (val) ->\r\n      if val\r\n        host.dataLabelStyle(scope.$eval(val))\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name column#columnStyle\r\n        @param [columnStyle] {object} - Set the line style for columns lines in the layout\r\n      ###\r\n    attrs.$observe 'columnStyle', (val) ->\r\n      if val\r\n        _columnStyle = scope.$eval(val)\r\n\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name columnClustered\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a clustered Column layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'columnClustered', ($log, utils, barConfig, dataManagerFactory, tooltipHelperFactory)->\r\n\r\n  clusteredColumnCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      _id = \"clusteredColumn#{clusteredColumnCntr++}\"\r\n\r\n      _columnStyle = {}\r\n\r\n      layers = null\r\n      clusterX = undefined\r\n\r\n      barPaddingOld = 0\r\n      barOuterPaddingOld = 0\r\n      barWidth = 0\r\n      config = _.clone(barConfig, true)\r\n\r\n      xData = dataManagerFactory()\r\n      ttHelper = tooltipHelperFactory()\r\n\r\n      initial = true\r\n\r\n      stack = d3.layout.stack()\r\n      stack\r\n        .values((d)-> d.values)\r\n        .y((d) -> if d.layerDeleted or d.layerAdded or d.deleted or d.added then 0 else barWidth)\r\n        .x((d) -> d.layerKey)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      _tooltip = undefined\r\n      _selected = undefined\r\n      _scaleList = {}\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(x).valueScale(y).data(data, true)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n        #$log.info \"rendering clustered-bar\"\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_columnStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        layerKeys = data.filter((d) -> not d.added and not d.deleted).map((d) -> d.layerKey)\r\n        clusterWidth = x.scale().rangeBand()\r\n        clusterX = d3.scale.ordinal().domain(layerKeys).rangeBands([0, clusterWidth], 0, 0)\r\n\r\n        barWidth = clusterX.rangeBand()\r\n        clusterPadding = clusterWidth / (1 - config.padding) * config.padding\r\n        barOuterPadding = clusterWidth / (1 - config.outerPadding) * config.outerPadding\r\n\r\n        offset = (d) ->\r\n          if x.reverse()\r\n            if d.deleted and d.highBorder then return clusterPadding / 2\r\n            if d.deleted then return clusterWidth + clusterPadding / 2\r\n            if d.added and d.atBorder then return clusterPadding / 2\r\n            if d.added then return clusterWidth + clusterPadding / 2\r\n          else\r\n            if d.deleted and d.highBorder then return clusterWidth\r\n            if d.deleted then return 0 -clusterPadding / 2\r\n            if d.added and d.atBorder then return  clusterWidth + clusterPadding / 2\r\n            if d.added then return 0 -clusterPadding / 2\r\n          return 0\r\n\r\n        stackLayout = stack(data)\r\n        $log.log stackLayout\r\n        if not layers\r\n          layers = @selectAll('.wk-chart-layer')\r\n\r\n        layers = layers.data(stackLayout, (d) -> d.layerKey)\r\n\r\n        layers.enter().append('g')\r\n          .attr('class', 'wk-chart-layer')\r\n\r\n        layers.exit()\r\n          .remove()\r\n\r\n        bars = layers.selectAll('.wk-chart-rect')\r\n          .data(\r\n            (d) -> d.values\r\n          , (d) -> d.layerKey + '|' + d.key\r\n          )\r\n\r\n        bars.enter().append('rect')\r\n          .attr('class', 'wk-chart-rect wk-chart-selectable')\r\n          #.style('fill', (d) -> color.scale()(d.layerKey))\r\n          .style('opacity', 0)\r\n          .call(_tooltip.tooltip)\r\n          .call(_selected)\r\n\r\n        bars\r\n          .each(setStyle)\r\n\r\n        (if doAnimate then bars.transition().duration(options.duration) else bars)\r\n          .attr('x', (d) -> x.scale()(d.targetKey) + d.y0 + offset(d))\r\n          .attr('width', (d) -> d.y)\r\n          .attr('height', (d) -> Math.abs(y.scale()(0) - y.scale()(d.targetValue)))\r\n          .attr('y', (d) -> Math.min(y.scale()(0), y.scale()(d.targetValue)))\r\n          .style('opacity', 1)\r\n\r\n        bars.exit()\r\n          .remove()\r\n\r\n        initial = false\r\n        barPaddingOld = clusterPadding\r\n        barOuterPaddingOld = barOuterPadding\r\n\r\n      drawBrush = (axis, idxRange) ->\r\n        clusterX.rangeBands([0,axis.scale().rangeBand()], 0, 0)\r\n        height = clusterX.rangeBand()\r\n        bars = this.selectAll(\".wk-chart-rect\")\r\n        if axis.isOrdinal()\r\n          bars\r\n            .attr('x', (d) -> if (val = axis.scale()(d.targetKey)) >= 0 then val + clusterX(d.layerKey) else -1000)\r\n            .attr('width', (d) -> height)\r\n          ttHelper.brushRange(idxRange)\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @getKind('y').domainCalc('max').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n        @layerScale('color')\r\n        _tooltip = host.behavior().tooltip\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        _selected = host.behavior().selected\r\n        ttHelper\r\n          .keyScale(_scaleList.x)\r\n          .valueScale(_scaleList.y)\r\n          .colorScale(_scaleList.color)\r\n          .value((d) -> d.value)\r\n\r\n      #host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", drawBrush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name columnClustered#padding\r\n        @values true, false, [padding, outerPadding]\r\n        @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the columns.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total column space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n      ###\r\n      attrs.$observe 'padding', (val) ->\r\n        if val is 'false'\r\n          config.padding = 0\r\n          config.outerPadding = 0\r\n        else if val is 'true'\r\n          config = _.clone(barConfig, true)\r\n        else\r\n          values = utils.parseList(val)\r\n          if values\r\n            if values.length is 1\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[0]/100\r\n            if values.length is 2\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[1]/100\r\n        _scaleList.y.rangePadding(config)\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name columnClustered#columnStyle\r\n        @param [columnStyle] {object} - Set the line style for columns lines in the layout\r\n      ###\r\n      attrs.$observe 'columnStyle', (val) ->\r\n        if val\r\n          _columnStyle = scope.$eval(val)\r\n  }\r\n\r\n","###*\r\n  @ngdoc layout\r\n  @name columnStacked\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a stacked column chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=total]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'columnStacked', ($log, utils, barConfig, dataManagerFactory, markerFactory, tooltipHelperFactory) ->\r\n\r\n  stackedColumnCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking Stacked bar'\r\n\r\n      _id = \"stackedColumn#{stackedColumnCntr++}\"\r\n\r\n      layers = null\r\n      _columnStyle = {}\r\n\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n      _selected = undefined\r\n\r\n      config = _.clone(barConfig, true)\r\n\r\n      xData = dataManagerFactory()\r\n      ttHelper = tooltipHelperFactory()\r\n      stack = d3.layout.stack()\r\n      stack\r\n        .values((d)->d.values)\r\n        .y((d) -> if d.layerAdded or d.layerDeleted then 0 else d.targetValue)\r\n        .x((d) -> d.targetKey)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(x).valueScale(y).data(data, true)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_columnStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        barWidth = x.scale().rangeBand()\r\n        barPadding = barWidth / (1 - config.padding) * config.padding\r\n\r\n        offset = (d) ->\r\n          if x.reverse()\r\n            if d.deleted and d.highBorder then return  -barPadding / 2\r\n            if d.deleted then return barWidth + barPadding / 2\r\n            if d.added and d.atBorder then return -barPadding / 2\r\n            if d.added then return barWidth + barPadding / 2\r\n          else\r\n            if d.deleted and d.highBorder then return barWidth\r\n            if d.deleted then return -barPadding / 2\r\n            if d.added and d.atBorder then return  barWidth + barPadding / 2\r\n            if d.added then return -barPadding / 2\r\n          return 0\r\n\r\n        if not layers\r\n          layers = @selectAll(\".wk-chart-layer\")\r\n\r\n        stackLayout = stack(data)\r\n        layers = layers.data(stackLayout, (d) -> d.layerKey)\r\n        layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        layers.exit().remove()\r\n\r\n        bars = layers.selectAll('.wk-chart-rect')\r\n        bars = bars.data(\r\n          (d) -> d.values,\r\n          (d) -> d.key.toString() + '|' + d.layerKey.toString()\r\n        )\r\n        bars.enter().append('rect').attr('class','wk-chart-rect wk-chart-selectable')\r\n          .style('opacity', 0)\r\n          #.attr('fill', (d) -> color.scale()(d.layerKey))\r\n          .call(_tooltip.tooltip)\r\n          .call(_selected)\r\n\r\n        bars\r\n          .each(setStyle)\r\n\r\n        (if doAnimate then bars.transition().duration(options.duration) else bars)\r\n          .attr('y', (d) -> y.scale()(d.y0  + d.y))\r\n          .attr('height', (d) ->  y.scale()(0) - y.scale()(d.y))\r\n          .attr('width', (d) -> if d.added or d.deleted then 0 else barWidth)\r\n          .attr('x', (d) -> x.scale()(d.targetKey) + offset(d))\r\n          .style('opacity', 1)\r\n\r\n        bars.exit().remove()\r\n\r\n      brush = (axis, idxRange) ->\r\n        bars = this.selectAll(\".wk-chart-rect\")\r\n        if axis.isOrdinal()\r\n          bars\r\n          .attr('x', (d) -> if (val = axis.scale()(d.key)) >= 0 then val else -1000)\r\n          .attr('width', (d) -> axis.scale().rangeBand())\r\n          ttHelper.brushRange(idxRange)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @getKind('y').domainCalc('total').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n        @layerScale('color')\r\n        _tooltip = host.behavior().tooltip\r\n        _selected = host.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        ttHelper\r\n        .keyScale(_scaleList.x)\r\n        .valueScale(_scaleList.y)\r\n        .colorScale(_scaleList.color)\r\n        .value((d) -> d.value)\r\n\r\n      #host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name columnStacked#padding\r\n        @values true, false, [padding, outerPadding]\r\n        @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n      ###\r\n      attrs.$observe 'padding', (val) ->\r\n        if val is 'false'\r\n          config.padding = 0\r\n          config.outerPadding = 0\r\n        else if val is 'true'\r\n          config = _.clone(barConfig, true)\r\n        else\r\n          values = utils.parseList(val)\r\n          if values\r\n            if values.length is 1\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[0]/100\r\n            if values.length is 2\r\n              config.padding = values[0]/100\r\n              config.outerPadding = values[1]/100\r\n        _scaleList.x.rangePadding(config)\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name columnStacked#columnStyle\r\n        @param [columnStyle] {object} - Set the line style for columns lines in the layout\r\n      ###\r\n      attrs.$observe 'columnStyle', (val) ->\r\n        if val\r\n          _columnStyle = scope.$eval(val)\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name gauge\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @description\r\n\r\n  draws a area chart layout\r\n\r\n  @requires x\r\n  @requires y\r\n  @requires color\r\n  @requires layout\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'gauge', ($log, utils) ->\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n    controller: ($scope, $attrs) ->\r\n      me = {chartType: 'GaugeChart', id:utils.getId()}\r\n      $attrs.$set('chart-id', me.id)\r\n      return me\r\n    \r\n    link: (scope, element, attrs, controller) ->\r\n      layout = controller.me\r\n\r\n      initalShow = true\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n        $log.info 'drawing Gauge Chart'\r\n\r\n        dat = [data]\r\n\r\n        yDomain = y.scale().domain()\r\n        colorDomain = angular.copy(color.scale().domain())\r\n        colorDomain.unshift(yDomain[0])\r\n        colorDomain.push(yDomain[1])\r\n        ranges = []\r\n        for i in [1..colorDomain.length-1]\r\n          ranges.push {from:+colorDomain[i-1],to:+colorDomain[i]}\r\n\r\n        #draw color scale\r\n\r\n        bar = @selectAll('.wk-chart-bar')\r\n        bar = bar.data(ranges, (d, i) -> i)\r\n        if initalShow\r\n          bar.enter().append('rect').attr('class', 'wk-chart-bar')\r\n            .attr('x', 0).attr('width', 50)\r\n            .style('opacity', 0)\r\n        else\r\n          bar.enter().append('rect').attr('class', 'wk-chart-bar')\r\n            .attr('x', 0).attr('width', 50)\r\n\r\n        bar.transition().duration(options.duration)\r\n          .attr('height',(d) -> y.scale()(0) - y.scale()(d.to - d.from))\r\n          .attr('y',(d) -> y.scale()(d.to))\r\n          .style('fill', (d) -> color.scale()(d.from))\r\n          .style('opacity', 1)\r\n\r\n        bar.exit().remove()\r\n\r\n        # draw value\r\n\r\n        addMarker = (s) ->\r\n          s.append('rect').attr('width', 55).attr('height', 4).style('fill', 'black')\r\n          s.append('circle').attr('r', 10).attr('cx', 65).attr('cy',2).style('stroke', 'black')\r\n\r\n        marker = @selectAll('.wk-chart-marker')\r\n        marker = marker.data(dat, (d) -> 'wk-chart-marker')\r\n        marker.enter().append('g').attr('class','wk-chart-marker').call(addMarker)\r\n\r\n        if initalShow\r\n          marker.attr('transform', (d) -> \"translate(0,#{y.scale()(d.value)})\").style('opacity', 0)\r\n\r\n        marker\r\n          .transition().duration(options.duration)\r\n            .attr('transform', (d) -> \"translate(0,#{y.scale()(d.value)})\")\r\n            .style('fill',(d) -> color.scale()(d.value)).style('opacity', 1)\r\n\r\n        initalShow = false\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        this.requiredScales(['y', 'color'])\r\n        @getKind('color').resetOnNewData(true)\r\n\r\n      layout.lifeCycle().on 'drawChart', draw\r\n\r\n  }\r\n\r\n  #todo refector","###*\r\n  @ngdoc layout\r\n  @name geoMap\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  Draws a map form the `geoJson` data provided. Colors the map elements according to the data provided in the cart data and the mapping rules provided in the `idMap` attribute.\r\n  The map is drawn according to the properties provided in the `projection` attribute\r\n\r\n  For a more detailed description of the various attributes, and a reference to geoJson, projections and other relevant topic please see the {@link guide/geoMap geoMap section in the guide}\r\n\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'geoMap', ($log, utils) ->\r\n  mapCntr = 0\r\n\r\n  parseList = (val) ->\r\n    if val\r\n      l = val.trim().replace(/^\\[|\\]$/g, '').split(',').map((d) -> d.replace(/^[\\\"|']|[\\\"|']$/g, ''))\r\n      l = l.map((d) -> if isNaN(d) then d else +d)\r\n      return if l.length is 1 then return l[0] else l\r\n\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    scope: {\r\n      geojson: '='\r\n      projection: '='\r\n    }\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      layout = controller.me\r\n\r\n      _tooltip = undefined\r\n      _selected = undefined\r\n      _scaleList = {}\r\n      _id = 'geoMap' + mapCntr++\r\n      _dataMapping = d3.map()\r\n\r\n      _scale = 1\r\n      _rotate = [0,0]\r\n      _idProp = ''\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      ttEnter = (data) ->\r\n\r\n        val = _dataMapping.get(data.properties[_idProp[0]])\r\n        style = _scaleList.color.map(val)\r\n        @layers[val.RS] = {value:val.DES, color: {fill:if typeof style is 'string' then style else style.color}}\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n      pathSel = []\r\n\r\n      _projection = d3.geo.orthographic()\r\n      _width = 0\r\n      _height = 0\r\n      _path = undefined\r\n      _zoom = d3.geo.zoom()\r\n        .projection(_projection)\r\n        #.scaleExtent([projection.scale() * .7, projection.scale() * 10])\r\n        .on \"zoom.redraw\", () ->\r\n          d3.event.sourceEvent.preventDefault();\r\n          pathSel.attr(\"d\", _path);\r\n\r\n      _geoJson = undefined\r\n\r\n      draw = (data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          val = _dataMapping.get(d.properties[_idProp[0]])\r\n          style = color.map(val)\r\n          if typeof style is 'string'\r\n            elem.style({fill:style, stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.fill = cVal\r\n            elem.style(style)\r\n\r\n        _width = options.width\r\n        _height = options.height\r\n        if data and data[0].hasOwnProperty(_idProp[1])\r\n          for e in data\r\n            _dataMapping.set(e[_idProp[1]], e)\r\n\r\n        if _geoJson\r\n\r\n          _projection.translate([_width/2, _height/2])\r\n          pathSel = this.selectAll(\"path\").data(_geoJson.features, (d) -> d.properties[_idProp[0]])\r\n          pathSel\r\n            .enter().append(\"svg:path\")\r\n              .style('fill','lightgrey').style('stroke', 'darkgrey')\r\n              .call(_tooltip.tooltip)\r\n              .call(_selected)\r\n              .call(_zoom)\r\n\r\n          pathSel\r\n            .attr(\"d\", _path)\r\n            .each(setStyle)\r\n\r\n          pathSel.exit().remove()\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['color'])\r\n        _scaleList.color.resetOnNewData(true)\r\n\r\n      layout.lifeCycle().on 'drawChart', draw\r\n      _tooltip = layout.behavior().tooltip\r\n      _selected = layout.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      layout.lifeCycle().on \"destroy.#{_id}\", ->\r\n        layout.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n        scope.$destroy()\r\n\r\n      # GeoMap specific properties -------------------------------------------------------------------------------------\r\n      ###*\r\n          @ngdoc attr\r\n          @name geoMap#projection\r\n          @param projection {object} sets the projection attributes for the map defined in `geojson`\r\n      ###\r\n      scope.$watch 'projection', (val) ->\r\n        if val isnt undefined\r\n          $log.log 'setting Projection params', val\r\n          if d3.geo.hasOwnProperty(val.projection)\r\n            _projection = d3.geo[val.projection]()\r\n            _projection.center(val.center).scale(val.scale).rotate(val.rotate).clipAngle(val.clipAngle)\r\n            _idProp = val.idMap\r\n            if _projection.parallels\r\n              _projection.parallels(val.parallels)\r\n            _scale = _projection.scale()\r\n            _rotate = _projection.rotate()\r\n            _path = d3.geo.path().projection(_projection)\r\n            _zoom.projection(_projection)\r\n\r\n            layout.lifeCycle().update()\r\n\r\n      , true #deep watch\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name geoMap#geojson\r\n        @param geojson {object} the geojson object that describes the the map.\r\n      ###\r\n      scope.$watch 'geojson', (val) ->\r\n        if val isnt undefined and val isnt ''\r\n          _geoJson = val\r\n          layout.lifeCycle().update()\r\n\r\n\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name columnHistogram\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a histogram chart layout\r\n\r\n  @usesDimension rangeX [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'columnHistogramOld', ($log, barConfig, utils, wkChartMargins) ->\r\n\r\n  sHistoCntr = 0\r\n\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n\r\n      _id = \"histogram#{sHistoCntr++}\"\r\n\r\n      _scaleList = {}\r\n      buckets = undefined\r\n      labels = undefined\r\n      config = {}\r\n\r\n      _tooltip = undefined\r\n      _selected = undefined\r\n      config = _.clone(barConfig, true)\r\n\r\n      _merge = utils.mergeData().key((d)-> d.xVal)\r\n\r\n      initial = true\r\n\r\n      #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n      _tooltip = undefined\r\n\r\n      ttEnter = (data) ->\r\n        @headerName = _scaleList.rangeX.axisLabel()\r\n        @headerValue = _scaleList.y.axisLabel()\r\n        lower = _scaleList.rangeX.formatValue(_scaleList.rangeX.lowerValue(data.data))\r\n        if _scaleList.rangeX.upperProperty()\r\n          upper = _scaleList.rangeX.formatValue(_scaleList.rangeX.upperValue(data.data))\r\n          name = lower + ' - ' + upper\r\n        else\r\n          name = _scaleList.rangeX.formatValue(_scaleList.rangeX.lowerValue(data.data))\r\n\r\n        @layers.push({name: name, value: _scaleList.y.formattedValue(data.data), color:{'background-color': _scaleList.color.map(data.data)}})\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color, size, shape, rangeX) ->\r\n\r\n        if rangeX.upperProperty()\r\n          layout = data.map((d) -> {x:rangeX.scale()(rangeX.lowerValue(d)), xVal:rangeX.lowerValue(d), width:rangeX.scale()(rangeX.upperValue(d)) - rangeX.scale()(rangeX.lowerValue(d)), y:y.map(d), height:options.height - y.map(d), color:color.map(d), data:d})\r\n        else\r\n          if data.length > 0\r\n            start = rangeX.lowerValue(data[0])\r\n            step = rangeX.lowerValue(data[1]) - start\r\n            width = options.width / data.length\r\n            layout = data.map((d, i) -> {x:rangeX.scale()(start + step * i), xVal:rangeX.lowerValue(d), width:width, y:y.map(d), height:options.height - y.map(d), color:color.map(d), data:d})\r\n\r\n        _merge(layout).first({x:0, width:0}).last({x:options.width, width: 0})\r\n\r\n        if not buckets\r\n          buckets = @selectAll('.wk-chart-bucket')\r\n\r\n        buckets = buckets.data(layout, (d) -> d.xVal)\r\n\r\n        enter = buckets.enter().append('g').attr('class','wk-chart-bucket')\r\n          .attr('transform', (d) -> \"translate(#{if initial then d.x else _merge.addedPred(d).x  + _merge.addedPred(d).width},#{d.y}) scale(#{if initial then 1 else 0},1)\")\r\n        enter.append('rect')\r\n          .attr('class', 'wk-chart-selectable')\r\n          .attr('height', (d) -> d.height)\r\n          .attr('width', (d) -> d.width)\r\n          .style('fill',(d) -> d.color)\r\n          .style('opacity', if initial then 0 else 1)\r\n          .call(_tooltip.tooltip)\r\n          .call(_selected)\r\n        enter.append('text')\r\n          .attr('class','wk-chart-data-label')\r\n          .attr('x', (d) -> d.width / 2)\r\n          .attr('y', -wkChartMargins.dataLabelPadding.vert)\r\n          .attr({'text-anchor':'middle'})\r\n          .style({opacity: 0})\r\n\r\n        buckets.transition().duration(options.duration)\r\n          .attr(\"transform\", (d) -> \"translate(#{d.x}, #{d.y}) scale(1,1)\")\r\n        buckets.select('rect').transition().duration(options.duration)\r\n          .attr('width', (d) -> d.width)\r\n          .attr('height', (d) -> d.height)\r\n          .style('fill',(d) -> d.color)\r\n          .style('opacity',1)\r\n        buckets.select('text')\r\n          .text((d) -> y.formattedValue(d.data))\r\n          .transition().duration(options.duration)\r\n            .attr('x', (d) -> d.width / 2)\r\n            .style('opacity', if host.showDataLabels() then 1 else 0)\r\n\r\n        buckets.exit().transition().duration(options.duration)\r\n          .attr('transform', (d) -> \"translate(#{_merge.deletedSucc(d).x},#{d.y}) scale(0,1)\")\r\n          .remove()\r\n\r\n        initial = false\r\n\r\n      brush = (axis, idxRange, width, height) ->\r\n        bucketWidth = (axis, d) ->\r\n          if axis.upperProperty()\r\n            return axis.scale()(axis.upperValue(d.data)) - axis.scale()(axis.lowerValue(d.data))\r\n          else\r\n            return width / Math.max(idxRange[1] - idxRange[0] + 1, 1)\r\n\r\n        buckets\r\n          .attr('transform',(d) ->\r\n            null\r\n            \"translate(#{if (x = axis.scale()(d.xVal)) >= 0 then x else -1000}, #{d.y})\")\r\n        buckets.select('rect')\r\n          .attr('width', (d) -> bucketWidth(axis, d))\r\n        buckets.selectAll('text')\r\n          .attr('x',(d) -> bucketWidth(axis, d) / 2)\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['rangeX', 'y', 'color'])\r\n        @getKind('y').domainCalc('max').resetOnNewData(true)\r\n        @getKind('rangeX').resetOnNewData(true).scaleType('linear').domainCalc('rangeExtent')\r\n        @getKind('color').resetOnNewData(true)\r\n        _tooltip = host.behavior().tooltip\r\n        _selected = host.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      host.lifeCycle().on 'drawChart', draw\r\n      host.lifeCycle().on 'brushDraw', brush\r\n\r\n      #-------------------------------------------------------------------------------------------------------------------\r\n      ###*\r\n          @ngdoc attr\r\n          @name columnHistogram#labels\r\n          @values true, false\r\n          @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n      ###\r\n      attrs.$observe 'labels', (val) ->\r\n        if val is 'false'\r\n          host.showDataLabels(false)\r\n        else if val is 'true' or val is \"\"\r\n          host.showDataLabels('y')\r\n        host.lifeCycle().update()\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name line\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  Draws a horizontal line chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent] The vertical dimension\r\n  @usesDimension color [type=category20] the line coloring dimension\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'line', ($log, behavior, utils, dataManagerFactory, tooltipHelperFactory, markerFactory) ->\r\n  lineCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking s-line'\r\n\r\n      _tooltip = undefined\r\n      _showMarkers = false\r\n      _spline = false\r\n      _lineStyle = {'stroke-width':1}\r\n      _scaleList = {}\r\n      offset = 0\r\n      _id = 'line' + lineCntr++\r\n      line = undefined\r\n      markers = undefined\r\n      layoutData = undefined\r\n\r\n      xData = dataManagerFactory()\r\n      markers = markerFactory()\r\n      ttHelper = tooltipHelperFactory()\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(x).valueScale(y).data(data)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        markers.active(_showMarkers)\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_lineStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.stroke = cVal\r\n            elem.style(style)\r\n\r\n        $log.debug 'data', data\r\n        offset = if x.isOrdinal() then x.scale().rangeBand() / 2 else 0\r\n        if _tooltip\r\n          _tooltip.data(data)\r\n          ttHelper.layout(data)\r\n\r\n        moveOutside = (options.width / data[0].values.length)*2\r\n\r\n        line = d3.svg.line()\r\n\r\n          .y((d) -> y.scale()(if d.layerAdded or d.layerDeleted then 0 else d.value))\r\n\r\n        if _spline\r\n          line.interpolate('cardinal')\r\n\r\n        if x.isOrdinal()\r\n          line.x((d) -> if d.highBorder then options.width + moveOutside else if d.lowBorder then -moveOutside else x.scale()(d.targetKey))\r\n        else\r\n          line.x((d) -> x.scale()(d.targetKey))\r\n\r\n        layers = this.selectAll(\".wk-chart-layer\")\r\n          .data(data, (d) -> d.layerKey)\r\n        enter = layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        enter.append('path')\r\n          .attr('class','wk-chart-line')\r\n          .attr('d', (d) -> line(d.values))\r\n          .style('opacity', 0)\r\n          .style('pointer-events', 'none')\r\n          #.style('stroke', (d) -> color.scale()(d.layerKey))\r\n\r\n        path = layers.select('.wk-chart-line')\r\n        path.each(setStyle)\r\n        (if doAnimate then path.transition().duration( options.duration) else path)\r\n          .attr('d', (d) -> line(d.values))\r\n          .style('opacity', (d) -> if d.added or d.deleted then 0 else 1)\r\n          .style('pointer-events', 'none')\r\n\r\n        layers.exit()\r\n          .remove()\r\n\r\n        markers\r\n          #.x((d) -> x.scale()(d.targetKey) + if x.isOrdinal() then x.scale().rangeBand() / 2 else 0)\r\n          .y((d) -> y.scale()(if d.layerAdded or d.layerDeleted then 0 else d.value))\r\n          .color( (d)->\r\n            style = color.scale()(d.layerKey)\r\n            return if typeof style is 'string' then style else style.color\r\n          )\r\n          .keyScale(x.scale())\r\n\r\n        if x.isOrdinal()\r\n          markers.x((d) -> if d.highBorder then options.width + moveOutside else if d.lowBorder then -moveOutside else x.scale()(d.targetKey) + x.scale().rangeBand() / 2)\r\n        else\r\n          markers.x((d) -> x.scale()(d.targetKey))\r\n\r\n        layers.call(markers, doAnimate)\r\n\r\n      brush = (axis, idxRange) ->\r\n        lines = this.selectAll(\".wk-chart-line\")\r\n        if axis.isOrdinal()\r\n          lines.attr('d', (d) -> line(d.values.slice(idxRange[0],idxRange[1] + 1)))\r\n            .attr('transform', \"translate(#{axis.scale().rangeBand() / 2})\")\r\n          markers.brush(this, idxRange)\r\n          ttHelper.brushRange(idxRange)\r\n        else\r\n          lines.attr('d', (d) -> line(d.values))\r\n          markers.brush(this)\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        ttHelper\r\n          .keyScale(_scaleList.x)\r\n          .valueScale(_scaleList.y)\r\n          .colorScale(_scaleList.color)\r\n          .value((d) -> d.value)\r\n        _tooltip.markerScale(_scaleList.x)\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        _tooltip.on \"moveData.#{_id}\", ttHelper.moveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttHelper.moveMarkers\r\n\r\n      # host.lifeCycle().on \"drawChart\", draw ignore for now\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name line#markers\r\n        @values true, false\r\n        @param [markers=false] {boolean} - show a data maker icon for each data point\r\n      ###\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name line#spline\r\n        @values true, false\r\n        @param [spline=false] {boolean} - interpolate the line using bSpline\r\n      ###\r\n      attrs.$observe 'spline', (val) ->\r\n        if val is '' or val is 'true'\r\n          _spline = true\r\n        else\r\n          _spline = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name line#lineStyle\r\n        @param [lineStyle] {object} - Set the line style for all lines in the layout\r\n      ###\r\n      attrs.$observe 'lineStyle', (val) ->\r\n        if val\r\n          _lineStyle = scope.$eval(val)\r\n\r\n  }","###*\r\n  @ngdoc layout\r\n  @name lineVertical\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  Draws a vertical line chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent] The vertical dimension\r\n  @usesDimension color [type=category20] the line coloring dimension\r\n\r\n\r\n###\r\nangular.module('wk.chart').directive 'lineVertical', ($log, utils, tooltipHelperFactory, dataManagerFactory, markerFactory) ->\r\n  lineCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      host = controller.me\r\n      #$log.log 'linking s-line'\r\n\r\n      brushStartIdx = 0\r\n      _tooltip = undefined\r\n      _showMarkers = false\r\n      _spline = false\r\n      _scaleList = {}\r\n      offset = 0\r\n      _id = 'lineVertical' + lineCntr++\r\n\r\n      layoutData = undefined\r\n      line = undefined\r\n      _lineStyle = {}\r\n\r\n      xData = dataManagerFactory()\r\n      markers = markerFactory()\r\n      ttHelper = tooltipHelperFactory()\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      setAnimationStart = (data, options, x, y, color) ->\r\n        xData.keyScale(y).valueScale(x).data(data)\r\n        if not xData.isInitial()\r\n          layoutData = xData.animationStartLayers()\r\n          drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n      setAnimationEnd = (data, options, x, y, color) ->\r\n        markers.active(_showMarkers)\r\n        layoutData = xData.animationEndLayers()\r\n        drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n      drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          elem.style(_lineStyle)\r\n          style = color.scale()(d.layerKey)\r\n          if typeof style is 'string'\r\n            elem.style({stroke:style})\r\n          else\r\n            cVal = style.color\r\n            style.stroke = cVal\r\n            elem.style(style)\r\n\r\n        offset = if y.isOrdinal() then y.scale().rangeBand() / 2 else 0\r\n        if _tooltip\r\n          _tooltip.data(data)\r\n          ttHelper.layout(data)\r\n\r\n        moveOutside = (options.height / data[0].values.length)*2\r\n\r\n        line = d3.svg.line()\r\n          .x((d) -> x.scale()(if d.layerAdded or d.layerDeleted then 0 else d.value))\r\n\r\n        if _spline\r\n          line.interpolate('cardinal')\r\n\r\n        if y.isOrdinal()\r\n          line.y((d) -> if d.lowBorder then options.height + moveOutside else if d.highBorder then -moveOutside else y.scale()(d.targetKey))\r\n        else\r\n          line.y((d) -> y.scale()(d.targetKey))\r\n\r\n        layers = this.selectAll(\".wk-chart-layer\")\r\n        .data(data, (d) -> d.layerKey)\r\n        enter = layers.enter().append('g').attr('class', \"wk-chart-layer\")\r\n        enter.append('path')\r\n          .attr('class','wk-chart-line')\r\n          .attr('d', (d) -> line(d.values))\r\n          .style('opacity', 0)\r\n          .style('pointer-events', 'none')\r\n          .style('stroke', (d) -> color.scale()(d.layerKey))\r\n\r\n        path = layers.select('.wk-chart-line')\r\n          .attr('transform', \"translate(0,#{offset})\")\r\n        path.each(setStyle)\r\n        (if doAnimate then path.transition().duration( options.duration) else path)\r\n          .attr('d', (d) -> line(d.values))\r\n          .style('opacity', (d) -> if d.added or d.deleted then 0 else 1)\r\n          .style('pointer-events', 'none')\r\n\r\n        layers.exit()\r\n          .remove()\r\n\r\n        markers\r\n          .isVertical(true)\r\n          .x((d) -> x.scale()(if d.layerAdded or d.layerDeleted then 0 else d.value))\r\n          .color( (d)->\r\n            style = color.scale()(d.layerKey)\r\n            return if typeof style is 'string' then style else style.color\r\n          )\r\n          .keyScale(y.scale())\r\n\r\n        if y.isOrdinal()\r\n          markers.y((d) -> if d.lowBorder then options.height + moveOutside else if d.highBorder then -moveOutside else y.scale()(d.targetKey) +  y.scale().rangeBand() / 2)\r\n        else\r\n          markers.y((d) -> y.scale()(d.targetKey))\r\n\r\n        layers.call(markers, doAnimate)\r\n\r\n      brush = (axis, idxRange) ->\r\n        layers = this.selectAll(\".wk-chart-line\")\r\n        if axis.isOrdinal()\r\n          layers.attr('d', (d) -> line(d.values.slice(idxRange[0],idxRange[1] + 1)))\r\n              .attr('transform', \"translate(0,#{axis.scale().rangeBand() / 2})\")\r\n          markers.brush(this, idxRange)\r\n          ttHelper.brushRange(idxRange)\r\n        else\r\n          layers.attr('d', (d) -> line(d.value))\r\n          markers.brush(this)\r\n\r\n      #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n      host.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        @layerScale('color')\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = host.behavior().tooltip\r\n        ttHelper\r\n          .keyScale(_scaleList.y)\r\n          .valueScale(_scaleList.x)\r\n          .colorScale(_scaleList.color)\r\n          .value((d) -> d.value)\r\n        _tooltip.markerScale(_scaleList.y)\r\n        _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n        _tooltip.on \"moveData.#{_id}\", ttHelper.moveData\r\n        _tooltip.on \"moveMarker.#{_id}\", ttHelper.moveMarkers\r\n\r\n      #host.lifeCycle().on \"drawChart\", draw\r\n      host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n      host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n      host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n      host.lifeCycle().on \"destroy.#{_id}\", ->\r\n        host.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n      #--- Property Observers ------------------------------------------------------------------------------------------\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name lineVertical#markers\r\n        @values true, false\r\n        @param [markers=false] {boolean} - show a data maker icon for each data point\r\n      ###\r\n      attrs.$observe 'markers', (val) ->\r\n        if val is '' or val is 'true'\r\n          _showMarkers = true\r\n        else\r\n          _showMarkers = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name lineVertical#spline\r\n        @values true, false\r\n        @param [spline=false] {boolean} - interpolate the line using bSpline\r\n      ###\r\n      attrs.$observe 'spline', (val) ->\r\n        if val is '' or val is 'true'\r\n          _spline = true\r\n        else\r\n          _spline = false\r\n        host.lifeCycle().update()\r\n\r\n      ###*\r\n        @ngdoc attr\r\n        @name lineVertical#lineStyle\r\n        @param [lineStyle] {object} - Set the line style for all lines in the layout\r\n      ###\r\n      attrs.$observe 'lineStyle', (val) ->\r\n        if val\r\n          _lineStyle = scope.$eval(val)\r\n  }","###*\r\n  @ngdoc layout\r\n  @name pie\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a pie chart layout\r\n\r\n  @usesDimension size [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'pie', ($log, utils) ->\r\n  pieCntr = 0\r\n\r\n  return {\r\n  restrict: 'EA'\r\n  require: '^layout'\r\n  link: (scope, element, attrs, controller) ->\r\n    layout = controller.me\r\n\r\n    # set chart specific defaults\r\n\r\n    _id = \"pie#{pieCntr++}\"\r\n\r\n    inner = undefined\r\n    outer = undefined\r\n    labels = undefined\r\n    _labelStyle = undefined\r\n    _pieStyle = undefined\r\n    pieBox = undefined\r\n    polyline = undefined\r\n    _scaleList = []\r\n    _selected = undefined\r\n    _tooltip = undefined\r\n    _showLabels = false\r\n    _donat = false\r\n    selectionOffset = 0\r\n    animationDuration = 0\r\n\r\n    _merge = utils.mergeData()\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    ttEnter = (data) ->\r\n      @headerName = _scaleList.y.axisLabel()\r\n      @headerValue = _scaleList.size.axisLabel()\r\n      d = {}\r\n      d.value = _scaleList.size.formattedValue(data)\r\n      cVal = _scaleList.color.map(data)\r\n      d.color = if typeof cVal is 'string' then {fill:cVal, stroke:cVal} else cVal\r\n      @layers[d.value] = d\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    initialShow = true\r\n\r\n    draw = (data, options, x, y, color, size) ->\r\n      #$log.debug 'drawing pie chart v2'\r\n\r\n      setStyle = (d) ->\r\n        elem = d3.select(this)\r\n        elem.style(_pieStyle)\r\n        style = color.map(d.data)\r\n        if typeof style is 'string'\r\n          elem.style({fill:style, stroke:style})\r\n        else\r\n          cVal = style.color\r\n          style.fill = cVal\r\n          elem.style(style)\r\n\r\n      animationDuration = options.duration\r\n\r\n      r = Math.min(options.width, options.height) / 2\r\n      selectionOffset = r * 0.06\r\n\r\n      if not pieBox\r\n        pieBox= @append('g').attr('class','wk-chart-pieBox')\r\n      pieBox.attr('transform', \"translate(#{options.width / 2},#{options.height / 2})\")\r\n\r\n      outerR  = r * if _showLabels then 0.8 else 0.9\r\n      innerR = outerR * if _donat then 0.6 else 0\r\n\r\n      innerArc = d3.svg.arc()\r\n        .outerRadius(outerR)\r\n        .innerRadius(innerR)\r\n\r\n      outerArc = d3.svg.arc()\r\n        .outerRadius(r * 0.9)\r\n        .innerRadius(r * 0.9)\r\n\r\n      key = (d) -> _scaleList.y.value(d.data)\r\n\r\n      pie = d3.layout.pie()\r\n        .sort(null)\r\n        .value(size.value)\r\n\r\n      arcTween = (a) ->\r\n        i = d3.interpolate(this._current, a)\r\n        this._current = i(0)\r\n        return (t) ->\r\n          innerArc(i(t))\r\n\r\n      segments = pie(data) # pie computes for each segment the start angle and the end angle\r\n      _merge.key(key)\r\n      _merge(segments).first({startAngle:0, endAngle:0}).last({startAngle:Math.PI * 2, endAngle: Math.PI * 2})\r\n\r\n      #--- Draw Pie segments -------------------------------------------------------------------------------------------\r\n\r\n      if not inner\r\n        inner = pieBox.selectAll('.wk-chart-innerArc')\r\n\r\n      inner = inner\r\n        .data(segments,key)\r\n\r\n      inner.enter().append('path')\r\n        .each((d) -> this._current = if initialShow then d else {startAngle:_merge.addedPred(d).endAngle, endAngle:_merge.addedPred(d).endAngle})\r\n        .attr('class','wk-chart-innerArc wk-chart-selectable')\r\n        #.style('fill', (d) ->  color.map(d.data))\r\n        #.style('stroke', (d) -> color.map(d.data))\r\n        #.style('opacity', if initialShow then 0 else 1)\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n\r\n      inner\r\n        #.attr('transform', \"translate(#{options.width / 2},#{options.height / 2})\")\r\n        .each(setStyle)\r\n        .transition().duration(options.duration)\r\n          #.style('opacity', 1)\r\n          .attrTween('d',arcTween)\r\n\r\n      inner.exit().datum((d) ->  {startAngle:_merge.deletedSucc(d).startAngle, endAngle:_merge.deletedSucc(d).startAngle})\r\n        .transition().duration(options.duration)\r\n          .attrTween('d',arcTween)\r\n          .remove()\r\n\r\n      #--- Draw Segment Label Text -------------------------------------------------------------------------------------\r\n\r\n      midAngle = (d) -> d.startAngle + (d.endAngle - d.startAngle) / 2\r\n\r\n      if _showLabels\r\n\r\n        labels = pieBox.selectAll('.wk-chart-data-label').data(segments, key)\r\n\r\n        labels.enter().append('text').attr('class', 'wk-chart-data-label')\r\n          .each((d) -> @_current = d)\r\n          .attr(\"dy\", \".35em\")\r\n          .style(layout.dataLabelStyle())\r\n          .style('opacity', 0)\r\n          .text((d) -> size.formattedValue(d.data))\r\n\r\n        labels.transition().duration(options.duration)\r\n          .style('opacity',1)#.style(layout.dataLabelStyle())\r\n          .text((d) -> size.formattedValue(d.data))\r\n          .attrTween('transform', (d) ->\r\n            _this = this\r\n            interpolate = d3.interpolate(_this._current, d)\r\n            return (t) ->\r\n              d2 = interpolate(t)\r\n              _this._current = d2\r\n              pos = outerArc.centroid(d2)\r\n              pos[0] += 15 * (if midAngle(d2) < Math.PI then  1 else -1)\r\n              return \"translate(#{pos})\")\r\n          .styleTween('text-anchor', (d) ->\r\n            interpolate = d3.interpolate(@_current, d)\r\n            return (t) ->\r\n              d2 = interpolate(t)\r\n              return if midAngle(d2) < Math.PI then  \"start\" else \"end\"\r\n            )\r\n\r\n        labels.exit()\r\n          .transition().duration(options.duration).style('opacity',0).remove()\r\n\r\n      #--- Draw Connector Lines ----------------------------------------------------------------------------------------\r\n\r\n        polyline = pieBox.selectAll(\".wk-chart-polyline\").data(segments, key)\r\n\r\n        polyline.enter()\r\n        . append(\"polyline\").attr('class','wk-chart-polyline')\r\n          .style(\"opacity\", 0)\r\n          .style('pointer-events','none')\r\n          .each((d) ->  this._current = d)\r\n\r\n        polyline.transition().duration(options.duration)\r\n          .style(\"opacity\", (d) -> if d.data.value is 0 then  0 else .5)\r\n          .attrTween(\"points\", (d) ->\r\n            this._current = this._current\r\n            interpolate = d3.interpolate(this._current, d)\r\n            _this = this\r\n            return (t) ->\r\n              d2 = interpolate(t)\r\n              _this._current = d2;\r\n              pos = outerArc.centroid(d2)\r\n              pos[0] += 10 * (if midAngle(d2) < Math.PI then  1 else -1)\r\n              return [innerArc.centroid(d2), outerArc.centroid(d2), pos];\r\n          )\r\n\r\n        polyline.exit()\r\n          .transition().duration(options.duration)\r\n          .style('opacity',0)\r\n          .remove();\r\n\r\n      else\r\n        pieBox.selectAll('.wk-chart-polyline').remove()\r\n        pieBox.selectAll('.wk-chart-data-label').remove()\r\n\r\n      initialShow = false\r\n\r\n    highlightSelected = (s) ->\r\n      obj = d3.select(this)\r\n      if obj.classed('wk-chart-selected')\r\n        arc = (s.startAngle + s.endAngle) / 2\r\n        offsX = Math.sin(arc) * selectionOffset\r\n        offsY = -Math.cos(arc) * selectionOffset\r\n        obj.transition().duration(animationDuration)\r\n          .attr('transform',\"translate(#{offsX},#{offsY})\")\r\n      else\r\n        obj.transition().duration(animationDuration)\r\n          .attr('transform','translate(0,0)')\r\n\r\n    selectionHandler = (objects) ->\r\n      pieBox.selectAll('.wk-chart-innerArc').each(highlightSelected)\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    layout.lifeCycle().on 'configure', ->\r\n      _scaleList = this.getScales(['size', 'y', 'color'])\r\n      _scaleList.color.scaleType('category20')\r\n      _scaleList.y.scaleType('ordinal')\r\n      _tooltip = layout.behavior().tooltip\r\n      _selected = layout.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n    layout.lifeCycle().on \"drawChart.#{_id}\", draw\r\n    layout.lifeCycle().on \"objectsSelected.#{_id}\", selectionHandler\r\n\r\n    layout.lifeCycle().on \"destroy.#{_id}\", ->\r\n      layout.lifeCycle().on \".#{_id}\", null\r\n      _tooltip.on \".#{_id}\", null\r\n\r\n    #-------------------------------------------------------------------------------------------------------------------\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name pie#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the pie segments.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        _showLabels = false\r\n      else if val is 'true' or val is \"\"\r\n        _showLabels = true\r\n      layout.lifeCycle().update()\r\n\r\n    attrs.$observe 'donat' , (val) ->\r\n      if val is 'false'\r\n        _donat = false\r\n      else if val is 'true' or val is \"\"\r\n        _donat = true\r\n      layout.lifeCycle().update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name pie#labelStyle\r\n      @param [labelStyle=font-size:\"1.3em\"] {object} defined the font style attributes for the labels.\r\n    ###\r\n    attrs.$observe 'labelStyle', (val) ->\r\n      if val\r\n        layout.dataLabelStyle(scope.$eval(val))\r\n      layout.lifeCycle().update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name pie#pieStyle\r\n      @param [pieStyle] {object} - Set the pie style for columns lines in the layout\r\n    ###\r\n    attrs.$observe 'pieStyle', (val) ->\r\n      if val\r\n        _pieStyle = scope.$eval(val)\r\n\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name rangeArea\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a range-area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n  @example\r\n###\r\n\r\nangular.module('wk.chart').directive 'rangeArea', ($log, utils, dataManagerFactory, markerFactory, tooltipHelperFactory) ->\r\n  lineCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: 'layout'\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n    #$log.log 'linking s-line'\r\n\r\n    _tooltip = undefined\r\n    _scaleList = {}\r\n    _showMarkers = false\r\n    _spline = false\r\n    offset = 0\r\n    _id = 'rangearea' + lineCntr++\r\n    area = undefined\r\n    layoutData = undefined\r\n    _initialOpacity = 0\r\n    _areaStyle = {}\r\n\r\n    xData = dataManagerFactory()\r\n    markers = markerFactory()\r\n    ttHelper = tooltipHelperFactory()\r\n\r\n    #-----------------------------------------------------------------------------------------------------------------\r\n\r\n    setAnimationStart = (data, options, x, y, color, size, shape, rangeX, rangeY) ->\r\n      xData.keyScale(x).valueScale(y).data(data)\r\n      if not xData.isInitial()\r\n        layoutData = xData.animationStartLayers()\r\n        drawPath.apply(this, [false, layoutData, options, x, y, color, size, shape, rangeX, rangeY])\r\n\r\n    setAnimationEnd = (data, options, x, y, color, size, shape, rangeX, rangeY) ->\r\n      markers.active(_showMarkers)\r\n      layoutData = xData.animationEndLayers()\r\n      drawPath.apply(this, [true, layoutData, options, x, y, color, size, shape, rangeX, rangeY])\r\n\r\n    drawPath = (doAnimate, data, options, x, y, color, size, shape, rangeX, rangeY) ->\r\n\r\n      setStyle = (d) ->\r\n        elem = d3.select(this)\r\n        elem.style(_areaStyle)\r\n        style = color.scale()(d.layerKey)\r\n        if typeof style is 'string'\r\n          elem.style({fill:style, stroke:style})\r\n        else\r\n          cVal = style.color\r\n          style.fill = cVal\r\n          elem.style(style)\r\n\r\n      offset = if x.isOrdinal() then x.scale().rangeBand() / 2 else 0\r\n      if _tooltip\r\n        _tooltip.data(data)\r\n        ttHelper.layout(data)\r\n\r\n      area = d3.svg.area()\r\n        .x((d) -> x.scale()(d.targetKey))\r\n        .y((d) -> y.scale()(d.value))\r\n        .y1((d) -> y.scale()(d.value1))\r\n\r\n      if _spline\r\n        area.interpolate('cardinal')\r\n\r\n      i = 0\r\n      rangeData = [{values:data[1].values, layerKey:data[1].layerKey}]\r\n      while i < rangeData[0].values.length\r\n        rangeData[0].values[i].value1 = data[0].values[i].value\r\n        i++\r\n\r\n      layers = this.selectAll(\".wk-chart-layer\")\r\n        .data(data, (d) -> d.layerKey)\r\n      layers.enter()\r\n        .append('g').attr('class','wk-chart-layer')\r\n\r\n      range = this.selectAll('.wk-chart-area-path')\r\n        .data(rangeData, (d) -> d.layerKey)\r\n      range.enter().append('path')\r\n        .attr('class','wk-chart-area-path wk-chart-edit-selectable')\r\n        .attr('d', (d) -> area(d.values))\r\n        .style('opacity', _initialOpacity)\r\n        .style('pointer-events', 'none')\r\n        #.style('stroke', (d) -> color.scale()(d.layerKey))\r\n        #.style('fill', (d) -> color.scale()(d.layerKey))\r\n        .attr('transform', \"translate(#{offset})\")\r\n\r\n      range\r\n        .style('stroke', (d) -> color.scale()(d.layerKey))\r\n        .style('pointer-events', 'none')\r\n        .each(setStyle)\r\n\r\n      (if doAnimate then range.transition().duration( options.duration) else range)\r\n        .attr('d', (d) -> area(d.values))\r\n        .style('opacity', (d) -> if d.added or d.deleted then 0 else 1)\r\n\r\n      range.exit().remove()\r\n\r\n      layers.exit()\r\n        .remove()\r\n\r\n      markers\r\n        .x((d) -> x.scale()(d.targetKey) + if x.isOrdinal() then x.scale().rangeBand() / 2 else 0)\r\n        .y((d) -> y.scale()(d.value))\r\n        .color((d) -> color.scale()(d.layerKey))\r\n      layers.call(markers, doAnimate)\r\n\r\n    brush = (axis, idxRange) ->\r\n      rangeArea = this.selectAll(\".wk-chart-area-path\")\r\n      if axis.isOrdinal()\r\n        rangeArea.attr('d', (d) -> area(d.values.slice(idxRange[0],idxRange[1] + 1)))\r\n        .attr('transform', \"translate(#{axis.scale().rangeBand() / 2})\")\r\n        markers.brush(this, idxRange)\r\n        ttHelper.brushRange(idxRange)\r\n      else\r\n        rangeArea.attr('d', (d) -> area(d.values))\r\n        markers.brush(this, idxRange)\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'y', 'color'])\r\n      @layerScale('color')\r\n      @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n      @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n      _tooltip = host.behavior().tooltip\r\n      ttHelper\r\n      .keyScale(_scaleList.x)\r\n      .valueScale(_scaleList.y)\r\n      .colorScale(_scaleList.color)\r\n      .value((d) -> d.value)\r\n      _tooltip.markerScale(_scaleList.x)\r\n      _tooltip.on \"enter.#{_id}\", ttHelper.moveData\r\n      _tooltip.on \"moveData.#{_id}\", ttHelper.moveData\r\n      _tooltip.on \"moveMarker.#{_id}\", ttHelper.moveMarkers\r\n\r\n    #host.lifeCycle().on \"drawChart\", draw\r\n    host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n    host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n    host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n    host.lifeCycle().on \"destroy.#{_id}\", ->\r\n      host.lifeCycle().on \".#{_id}\", null\r\n      _tooltip.on \".#{_id}\", null\r\n\r\n    #--- Property Observers ------------------------------------------------------------------------------------------\r\n    ###*\r\n      @ngdoc attr\r\n      @name rangeArea#markers\r\n      @values true, false\r\n      @param [markers=false] {boolean} - show a data maker icon for each data point\r\n    ###\r\n    attrs.$observe 'markers', (val) ->\r\n      if val is '' or val is 'true'\r\n        _showMarkers = true\r\n      else\r\n        _showMarkers = false\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name rangeArea#spline\r\n      @values true, false\r\n      @param [spline=false] {boolean} - interpolate the area shape using bSpline\r\n    ###\r\n    attrs.$observe 'spline', (val) ->\r\n      if val is '' or val is 'true'\r\n        _spline = true\r\n      else\r\n        _spline = false\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name rangeArea#areaStyle\r\n        @param [areaStyle] {object} - Set the pie style for columns lines in the layout\r\n      ###\r\n    attrs.$observe 'areaStyle', (val) ->\r\n      if val\r\n        _areaStyle = scope.$eval(val)\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name rangeAreaVertical\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a range-area chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n  @example\r\n###\r\n\r\nangular.module('wk.chart').directive 'rangeAreaVertical', ($log, utils, dataManagerFactory, markerFactory, tooltipHelperFactory) ->\r\n  lineCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: 'layout'\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n    #$log.log 'linking s-line'\r\n\r\n    _tooltip = undefined\r\n    _scaleList = {}\r\n    _showMarkers = false\r\n    _spline = false\r\n    offset = 0\r\n    _id = 'rangeareavertical' + lineCntr++\r\n    area = undefined\r\n    layoutData = undefined\r\n    _initialOpacity = 0\r\n    _areaStyle = {}\r\n\r\n    xData = dataManagerFactory()\r\n    markers = markerFactory()\r\n    ttHelper = tooltipHelperFactory()\r\n\r\n    #-----------------------------------------------------------------------------------------------------------------\r\n\r\n    setAnimationStart = (data, options, x, y, color, size) ->\r\n      xData.keyScale(y).valueScale(x).data(data)\r\n      if not xData.isInitial()\r\n        layoutData = xData.animationStartLayers()\r\n        drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n    setAnimationEnd = (data, options, x, y, color, size) ->\r\n      markers.active(_showMarkers)\r\n      layoutData = xData.animationEndLayers()\r\n      drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n    drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n      setStyle = (d) ->\r\n        elem = d3.select(this)\r\n        elem.style(_areaStyle)\r\n        style = color.scale()(d.layerKey)\r\n        if typeof style is 'string'\r\n          elem.style({fill:style, stroke:style})\r\n        else\r\n          cVal = style.color\r\n          style.fill = cVal\r\n          elem.style(style)\r\n\r\n      offset = if y.isOrdinal() then y.scale().rangeBand() / 2 else 0\r\n      if _tooltip\r\n        _tooltip.data(data)\r\n        ttHelper.layout(data)\r\n\r\n      area = d3.svg.area()\r\n        .x((d) -> -y.scale()(d.targetKey))\r\n        .y((d) -> x.scale()(d.value))\r\n        .y1((d) -> x.scale()(d.value1))\r\n\r\n      if _spline\r\n        area.interpolate('cardinal')\r\n\r\n      i = 0\r\n      rangeData = [{values:data[1].values, layerKey:data[1].layerKey}]\r\n      while i < rangeData[0].values.length\r\n        rangeData[0].values[i].value1 = data[0].values[i].value\r\n        i++\r\n\r\n      layers = this.selectAll(\".wk-chart-layer\")\r\n        .data(data, (d) -> d.layerKey)\r\n      layers.enter()\r\n        .append('g').attr('class','wk-chart-layer')\r\n\r\n      range = this.selectAll('.wk-chart-area-path')\r\n        .data(rangeData, (d) -> d.layerKey)\r\n      range.enter().append('path')\r\n        .attr('class','wk-chart-area-path')\r\n        .attr('d', (d) -> area(d.values))\r\n        .style('opacity', _initialOpacity)\r\n        .style('pointer-events', 'none')\r\n        #.style('stroke', (d) -> color.scale()(d.layerKey))\r\n        #.style('fill', (d) -> color.scale()(d.layerKey))\r\n        .attr('transform', \"translate(0,#{offset})rotate(-90)\") #rotate and position chart\r\n\r\n      range\r\n        .style('stroke', (d) -> color.scale()(d.layerKey))\r\n        .style('pointer-events', 'none')\r\n        .each(setStyle)\r\n\r\n      (if doAnimate then range.transition().duration( options.duration) else range)\r\n        .attr('d', (d) -> area(d.values))\r\n        .style('opacity', (d) -> if d.added or d.deleted then 0 else 1)\r\n\r\n      range.exit().remove()\r\n\r\n      layers.exit()\r\n        .remove()\r\n\r\n      markers\r\n        .y((d) -> y.scale()(d.targetKey) + if y.isOrdinal() then y.scale().rangeBand() / 2 else 0)\r\n        .x((d) -> x.scale()(d.value))\r\n        .color((d) -> color.scale()(d.layerKey))\r\n      layers.call(markers, doAnimate)\r\n\r\n    brush = (axis, idxRange) ->\r\n      rangeArea = this.selectAll(\".wk-chart-area-path\")\r\n      if axis.isOrdinal()\r\n        rangeArea.attr('d', (d) -> area(d.values.slice(idxRange[0],idxRange[1] + 1)))\r\n        .attr('transform', \"translate(#{axis.scale().rangeBand() / 2})\")\r\n        markers.brush(this, idxRange)\r\n        ttHelper.brushRange(idxRange)\r\n      else\r\n        rangeArea.attr('d', (d) -> area(d.values))\r\n        markers.brush(this, idxRange)\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'y', 'color'])\r\n      @layerScale('color')\r\n      @getKind('x').domainCalc('extent').resetOnNewData(true)\r\n      @getKind('y').resetOnNewData(true).domainCalc('extent')\r\n      _tooltip = host.behavior().tooltip\r\n      ttHelper\r\n      .keyScale(_scaleList.y)\r\n      .valueScale(_scaleList.x)\r\n      .colorScale(_scaleList.color)\r\n      .value((d) -> d.value)\r\n      _tooltip.markerScale(_scaleList.y)\r\n      _tooltip.on \"enter.#{_id}\", ttHelper.moveData\r\n      _tooltip.on \"moveData.#{_id}\", ttHelper.moveData\r\n      _tooltip.on \"moveMarker.#{_id}\", ttHelper.moveMarkers\r\n\r\n    #host.lifeCycle().on \"drawChart\", draw\r\n    host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n    host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n    host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n    host.lifeCycle().on \"destroy.#{_id}\", ->\r\n      host.lifeCycle().on \".#{_id}\", null\r\n      _tooltip.on \".#{_id}\", null\r\n\r\n    #--- Property Observers ------------------------------------------------------------------------------------------\r\n    ###*\r\n      @ngdoc attr\r\n      @name rangeAreaVertical#markers\r\n      @values true, false\r\n      @param [markers=false] {boolean} - show a data maker icon for each data point\r\n    ###\r\n    attrs.$observe 'markers', (val) ->\r\n      if val is '' or val is 'true'\r\n        _showMarkers = true\r\n      else\r\n        _showMarkers = false\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name rangeAreaVertical#spline\r\n      @values true, false\r\n      @param [spline=false] {boolean} - interpolate the area shape using bSpline\r\n    ###\r\n    attrs.$observe 'spline', (val) ->\r\n      if val is '' or val is 'true'\r\n        _spline = true\r\n      else\r\n        _spline = false\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name rangeAreaVertical#areaStyle\r\n      @param [areaStyle] {object} - Set the pie style for columns lines in the layout\r\n    ###\r\n    attrs.$observe 'areaStyle', (val) ->\r\n      if val\r\n        _areaStyle = scope.$eval(val)\r\n\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name rangeBars\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a range bar chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'rangeBars', ($log, utils, barConfig, dataManagerFactory, markerFactory, tooltipHelperFactory)->\r\n  sBarCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: '^layout'\r\n\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n\r\n    _id = \"rangebars#{sBarCntr++}\"\r\n\r\n    _barStyle = {}\r\n\r\n    _tooltip = undefined\r\n    _selected = undefined\r\n    _scaleList = {}\r\n    _showMarkers = false\r\n    offset = 0\r\n    layoutData = undefined\r\n    config = _.clone(barConfig, true)\r\n\r\n    xData = dataManagerFactory()\r\n    markers = markerFactory()\r\n    ttHelper = tooltipHelperFactory()\r\n\r\n    #-----------------------------------------------------------------------------------------------------------------\r\n\r\n    setAnimationStart = (data, options, x, y, color, size) ->\r\n      xData.keyScale(y).valueScale(x).data(data, true)\r\n      if not xData.isInitial()\r\n        layoutData = xData.animationStartLayers()\r\n        drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n    setAnimationEnd = (data, options, x, y, color, size) ->\r\n      markers.active(_showMarkers)\r\n      layoutData = xData.animationEndLayers()\r\n      drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n    drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n      setStyle = (d) ->\r\n        elem = d3.select(this)\r\n        elem.style(_barStyle)\r\n        style = color.scale()(d.layerKey)\r\n        if typeof style is 'string'\r\n          elem.style({fill:style, stroke:style})\r\n        else\r\n          cVal = style.color\r\n          style.fill = cVal\r\n          elem.style(style)\r\n\r\n      barHeight = y.scale().rangeBand()\r\n      barPadding = barHeight / (1 - config.padding) * config.padding\r\n      offset = if y.isOrdinal() then barHeight / 2 else 0\r\n      if _tooltip\r\n        _tooltip.data(data)\r\n        ttHelper.layout(data)\r\n\r\n      offset = (d) ->\r\n        if d.deleted and d.atBorder then return -barPadding / 2\r\n        if d.deleted then return barHeight + barPadding / 2\r\n        if d.added and d.atBorder then return -barPadding / 2\r\n        if d.added then return barHeight + barPadding / 2\r\n        return 0\r\n\r\n      i = 0\r\n      rangeData = [{values:data[1].values, layerKey:data[1].layerKey}]\r\n      while i < rangeData[0].values.length\r\n        rangeData[0].values[i].value1 = data[0].values[i].targetValue\r\n        i++\r\n\r\n      layers = this.selectAll(\".wk-chart-layer\")\r\n        .data(data, (d) -> d.layerKey)\r\n      layers.enter()\r\n        .append('g').attr('class','wk-chart-layer')\r\n\r\n      range = this.selectAll('.wk-chart-rect')\r\n        .data(rangeData[0].values, (d) -> d.key)\r\n      range.enter().append('rect')\r\n        .attr('class','wk-chart-rect')\r\n        .style('opacity', 0)\r\n        #.style('fill', color.scale()(range[0].layerKey))\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n        .attr('transform',(d) -> \"translate(0, #{y.scale()(d.targetKey)})\")\r\n\r\n      range\r\n        .each(setStyle)\r\n\r\n      (if doAnimate then range.transition().duration( options.duration) else range)\r\n        .attr('transform',(d) -> \"translate(0, #{y.scale()(d.targetKey) + offset(d)})\")\r\n        .attr('height', (d) -> if d.added or d.deleted then 0 else barHeight)\r\n        .attr('width', (d) -> Math.abs(x.scale()(d.targetValue) - x.scale()(d.value1)))\r\n        .attr('x', (d) -> x.scale()(d.value1))\r\n        .style('stroke', (d) -> color.scale()(d.layerKey))\r\n        .style('opacity', 1)\r\n\r\n      range.exit().remove()\r\n\r\n      layers.exit()\r\n      .remove()\r\n\r\n    brush = (axis, idxRange) ->\r\n      this.selectAll('.wk-chart-rect')\r\n        .attr('transform',(d) -> \"translate(0, #{if (y = axis.scale()(d.targetKey)) >= 0 then y else -1000})\")\r\n        .selectAll('.wk-chart-rect')\r\n          .attr('height', (d) -> axis.scale().rangeBand())\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'y', 'color'])\r\n      @getKind('x').domainCalc('extent').resetOnNewData(true)\r\n      @getKind('y').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n      _tooltip = host.behavior().tooltip\r\n      ttHelper\r\n        .keyScale(_scaleList.y)\r\n        .valueScale(_scaleList.x)\r\n        .colorScale(_scaleList.color)\r\n        .value((d) -> d.value)\r\n      _selected = host.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n\r\n    #host.lifeCycle().on \"drawChart\", draw\r\n    host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n    host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n    host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n    host.lifeCycle().on \"destroy.#{_id}\", ->\r\n      host.lifeCycle().on \".#{_id}\", null\r\n      _tooltip.on \".#{_id}\", null\r\n\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name rangeBars#padding\r\n      @values true, false, [padding, outerPadding]\r\n      @description bla bla\r\n      @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n    ###\r\n    attrs.$observe 'padding', (val) ->\r\n      if val is 'false'\r\n        config.padding = 0\r\n        config.outerPadding = 0\r\n      else if val is 'true'\r\n        config = _.clone(barConfig, true)\r\n      else\r\n        values = utils.parseList(val)\r\n        if values\r\n          if values.length is 1\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[0]/100\r\n          if values.length is 2\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[1]/100\r\n      _scaleList.y.rangePadding(config)\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n        @ngdoc attr\r\n        @name rangeBars#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        host.showDataLabels(false)\r\n      else if val is 'true' or val is \"\"\r\n        host.showDataLabels('x')\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name rangeBars#barStyle\r\n      @param [barStyle] {object} - Set the line style for columns lines in the layout\r\n    ###\r\n    attrs.$observe 'barStyle', (val) ->\r\n      if val\r\n        _barStyle = scope.$eval(val)\r\n  }","###*\r\n  @ngdoc layout\r\n  @name rangeColumn\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a column range chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=extent]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'rangeColumn', ($log, utils, barConfig, dataManagerFactory, markerFactory, tooltipHelperFactory)->\r\n  sBarCntr = 0\r\n  return {\r\n  restrict: 'A'\r\n  require: '^layout'\r\n\r\n  link: (scope, element, attrs, controller) ->\r\n    host = controller.me\r\n\r\n    _id = \"rangeColumn#{sBarCntr++}\"\r\n\r\n    _columnStyle = {}\r\n\r\n    _tooltip = undefined\r\n    _selected = undefined\r\n    _scaleList = {}\r\n    _showMarkers = false\r\n    offset = 0\r\n    layoutData = undefined\r\n    config = _.clone(barConfig, true)\r\n\r\n    xData = dataManagerFactory()\r\n    markers = markerFactory()\r\n    ttHelper = tooltipHelperFactory()\r\n\r\n    #-----------------------------------------------------------------------------------------------------------------\r\n\r\n    setAnimationStart = (data, options, x, y, color, size) ->\r\n      xData.keyScale(x).valueScale(y).data(data, true)\r\n      if not xData.isInitial()\r\n        layoutData = xData.animationStartLayers()\r\n        drawPath.apply(this, [false, layoutData, options, x, y, color])\r\n\r\n    setAnimationEnd = (data, options, x, y, color, size) ->\r\n      markers.active(_showMarkers)\r\n      layoutData = xData.animationEndLayers()\r\n      drawPath.apply(this, [true, layoutData, options, x, y, color])\r\n\r\n    drawPath = (doAnimate, data, options, x, y, color) ->\r\n\r\n      setStyle = (d) ->\r\n        elem = d3.select(this)\r\n        elem.style(_columnStyle)\r\n        style = color.scale()(d.layerKey)\r\n        if typeof style is 'string'\r\n          elem.style({fill:style, stroke:style})\r\n        else\r\n          cVal = style.color\r\n          style.fill = cVal\r\n          elem.style(style)\r\n\r\n      barHeight = x.scale().rangeBand()\r\n      barPadding = barHeight / (1 - config.padding) * config.padding\r\n      offset = if y.isOrdinal() then barHeight / 2 else 0\r\n      if _tooltip\r\n        _tooltip.data(data)\r\n        ttHelper.layout(data)\r\n\r\n      offset = (d) ->\r\n        if d.deleted and d.atBorder then return barHeight\r\n        if d.deleted then return -barPadding / 2\r\n        if d.added and d.atBorder then return  barHeight + barPadding / 2\r\n        if d.added then return -barPadding / 2\r\n        return 0\r\n\r\n      i = 0\r\n      rangeData = [{values:data[1].values, layerKey:data[1].layerKey}]\r\n      while i < rangeData[0].values.length\r\n        rangeData[0].values[i].value1 = data[0].values[i].targetValue\r\n        i++\r\n\r\n      layers = this.selectAll(\".wk-chart-layer\")\r\n        .data(data, (d) -> d.layerKey)\r\n      layers.enter()\r\n        .append('g').attr('class','wk-chart-layer')\r\n\r\n      range = this.selectAll('.wk-chart-rect')\r\n        .data(rangeData[0].values, (d) -> d.key)\r\n      range.enter().append('rect')\r\n        .attr('class','wk-chart-rect')\r\n        .style('opacity', 0)\r\n        #.style('fill', color.scale()(range[0].layerKey))\r\n        .call(_tooltip.tooltip)\r\n        .call(_selected)\r\n        .attr('transform',(d) -> \"translate(#{x.scale()(d.targetKey)})\")\r\n\r\n      range\r\n        .each(setStyle)\r\n\r\n      (if doAnimate then range.transition().duration( options.duration) else range)\r\n        .attr('transform',(d) -> \"translate(#{x.scale()(d.targetKey) + offset(d)})\")\r\n        .attr('width', (d) -> if d.added or d.deleted then 0 else barHeight)\r\n        .attr('height', (d) -> Math.abs(y.scale()(d.targetValue) - y.scale()(d.value1)))\r\n        .attr('y', (d) -> y.scale()(d.targetValue))\r\n        .style('stroke', (d) -> color.scale()(d.layerKey))\r\n        .style('opacity', 1)\r\n\r\n      range.exit().remove()\r\n\r\n      layers.exit()\r\n      .remove()\r\n\r\n    brush = (axis, idxRange) ->\r\n      this.selectAll('.wk-chart-rect')\r\n          .attr('transform',(d) -> \"translate(0, #{if (x = axis.scale()(d.targetKey)) >= 0 then x else -1000})\")\r\n        .selectAll('.wk-chart-rect')\r\n          .attr('height', (d) -> axis.scale().rangeBand())\r\n\r\n    #--- Configuration and registration ------------------------------------------------------------------------------\r\n\r\n    host.lifeCycle().on 'configure', ->\r\n      _scaleList = @getScales(['x', 'y', 'color'])\r\n      @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n      @getKind('x').resetOnNewData(true).rangePadding(config).scaleType('ordinal')\r\n      _tooltip = host.behavior().tooltip\r\n      ttHelper\r\n        .keyScale(_scaleList.x)\r\n        .valueScale(_scaleList.y)\r\n        .colorScale(_scaleList.color)\r\n        .value((d) -> d.value)\r\n      _selected = host.behavior().selected\r\n      _tooltip.on \"enter.#{_id}\", ttHelper.enter\r\n\r\n    #host.lifeCycle().on \"drawChart\", draw\r\n    host.lifeCycle().on \"brushDraw.#{_id}\", brush\r\n    host.lifeCycle().on \"animationStartState.#{_id}\", setAnimationStart\r\n    host.lifeCycle().on \"animationEndState.#{_id}\", setAnimationEnd\r\n\r\n    host.lifeCycle().on \"destroy.#{_id}\", ->\r\n      host.lifeCycle().on \".#{_id}\", null\r\n      _tooltip.on \".#{_id}\", null\r\n\r\n    ###*\r\n    @ngdoc attr\r\n      @name rangeColumn#padding\r\n      @values true, false, [padding, outerPadding]\r\n      @param [padding=true] {boolean | list}\r\n      * Defines the inner and outer padding between the bars.\r\n      *\r\n      * `padding` and `outerPadding` are measured in % of the total bar space occupied, i.e. a padding of 20 implies a bar height of 80%, padding 50 implies bar and space have the same size.\r\n      *\r\n      * `padding` is 10, `outerPadding` is 0 unless explicitly specified differently.\r\n      *\r\n      * Setting `padding=\"false\"` is equivalent to [0,0]\r\n    ###\r\n    attrs.$observe 'padding', (val) ->\r\n      if val is 'false'\r\n        config.padding = 0\r\n        config.outerPadding = 0\r\n      else if val is 'true'\r\n        config = _.clone(barConfig, true)\r\n      else\r\n        values = utils.parseList(val)\r\n        if values\r\n          if values.length is 1\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[0]/100\r\n          if values.length is 2\r\n            config.padding = values[0]/100\r\n            config.outerPadding = values[1]/100\r\n      _scaleList.x.rangePadding(config)\r\n      host.lifeCycle().update()\r\n    ###*\r\n        @ngdoc attr\r\n        @name rangeColumn#labels\r\n        @values true, false\r\n        @param [labels=true] {boolean} controls the display of data labels for each of the bars.\r\n    ###\r\n    attrs.$observe 'labels', (val) ->\r\n      if val is 'false'\r\n        host.showDataLabels(false)\r\n      else if val is 'true' or val is \"\"\r\n        host.showDataLabels('y')\r\n      host.lifeCycle().update()\r\n\r\n    ###*\r\n      @ngdoc attr\r\n      @name rangeColumn#columnStyle\r\n      @param [columnStyle] {object} - Set the line style for columns lines in the layout\r\n    ###\r\n    attrs.$observe 'columnStyle', (val) ->\r\n      if val\r\n        _columnStyle = scope.$eval(val)\r\n\r\n  }\r\n","###*\r\n  @ngdoc layout\r\n  @name scatter\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a icon chart layout\r\n\r\n  @usesDimension x [type=linear, domainRange=extent] The horizontal dimension\r\n  @usesDimension y [type=linear]\r\n  @usesDimension color [type=category20]\r\n  @usesDimension size [type=linear]\r\n  @usesDimension shape [type=ordinal]\r\n###\r\nangular.module('wk.chart').directive 'scatter', ($log, utils) ->\r\n  scatterCnt = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: '^layout'\r\n    link: (scope, element, attrs, controller) ->\r\n      layout = controller.me\r\n      _tooltip = undefined\r\n      _selected = undefined\r\n      _id = 'scatter' + scatterCnt++\r\n      _scaleList = []\r\n\r\n      ttEnter = (data) ->\r\n        for sName, scale of _scaleList\r\n          @layers[scale.axisLabel()] =\r\n            {\r\n              value: scale.formattedValue(data),\r\n              color: if sName is 'color' then {fill:(if typeof scale.map(data) is 'string' then scale.map(data) else scale.map(data).color)} else {fill:'none'},\r\n              path: if sName is 'shape' then d3.svg.symbol().type(scale.map(data)).size(80)() else undefined\r\n              class: if sName is 'shape' then 'wk-chart-tt-svg-shape' else ''\r\n            }\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      initialOpacity = 0\r\n\r\n\r\n\r\n      draw = (data, options, x, y, color, size, shape) ->\r\n        #$log.debug 'drawing scatter chart'\r\n\r\n        points = @selectAll('.wk-chart-shape')\r\n          .data(data,(d,i) -> i)\r\n        points.enter()\r\n          .append('path').attr('class', 'wk-chart-shape wk-chart-selectable')\r\n            .attr('transform', (d)-> \"translate(#{x.map(d)},#{y.map(d)})\")\r\n            .style('opacity', initialOpacity)\r\n            .call(_tooltip.tooltip)\r\n            .call(_selected)\r\n        points\r\n          .style('fill', (d) -> color.map (d))\r\n          .attr('d', d3.svg.symbol().type((d) -> shape.map(d)).size((d) -> size.map(d) * size.map(d)))\r\n          .transition().duration(options.duration)\r\n            .attr('transform', (d)-> \"translate(#{x.map(d)},#{y.map(d)})\")\r\n            .style('opacity', 1)\r\n\r\n        initialOpacity = 1\r\n\r\n        points.exit().remove()\r\n\r\n      #-----------------------------------------------------------------------------------------------------------------\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color', 'size', 'shape'])\r\n        @getKind('y').domainCalc('extent').resetOnNewData(true)\r\n        @getKind('x').resetOnNewData(true).domainCalc('extent')\r\n        _tooltip = layout.behavior().tooltip\r\n        _selected = layout.behavior().selected\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      layout.lifeCycle().on \"drawChart.#{_id}\", draw\r\n\r\n      layout.lifeCycle().on \"destroy.#{_id}\", ->\r\n        layout.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n  }\r\n\r\n#TODO verify behavior with custom tooltips","###*\r\n  @ngdoc layout\r\n  @name spider\r\n  @module wk.chart\r\n  @restrict A\r\n  @area api\r\n  @element layout\r\n  @description\r\n\r\n  draws a spider chart layout\r\n\r\n  @usesDimension x [type=ordinal] The horizontal dimension\r\n  @usesDimension y [type=linear, domainRange=max]\r\n  @usesDimension color [type=category20]\r\n###\r\nangular.module('wk.chart').directive 'spider', ($log, utils) ->\r\n  spiderCntr = 0\r\n  return {\r\n    restrict: 'A'\r\n    require: 'layout'\r\n\r\n    link: (scope, element, attrs, controller) ->\r\n      layout = controller.me\r\n      #$log.debug 'bubbleChart linked'\r\n\r\n      _tooltip = undefined\r\n      _scaleList = {}\r\n      _id = 'spider' + spiderCntr++\r\n      axis = d3.svg.axis()\r\n      _data = undefined\r\n\r\n      #--- Tooltip Event Handlers --------------------------------------------------------------------------------------\r\n\r\n      ttEnter = (data) ->\r\n        for d in _data\r\n          style = _scaleList.color.scale()(data)\r\n          @layers[_scaleList.x.value(d)] = {value:_scaleList.y.formatValue(d[data]), color: {fill:(if typeof style is 'string' then style else style.color)}}\r\n\r\n      #--- Draw --------------------------------------------------------------------------------------------------------\r\n\r\n      draw = (data, options, x, y, color) ->\r\n\r\n        setStyle = (d) ->\r\n          elem = d3.select(this)\r\n          #elem.style(_areaStyle)\r\n          style = color.scale()(d)\r\n          if typeof style is 'string'\r\n            elem.style({fill:'none', stroke:style, 'stroke-width':3})\r\n          else\r\n            cVal = style.color\r\n            style.stroke = cVal\r\n            elem.style(style)\r\n\r\n        _data = data\r\n        $log.log data\r\n        # compute center of area\r\n        centerX = options.width/2\r\n        centerY = options.height/2\r\n        radius = d3.min([centerX, centerY]) * 0.8\r\n        textOffs = 20\r\n        nbrAxis = data.length\r\n        arc = Math.PI * 2 / nbrAxis\r\n        degr = 360 / nbrAxis\r\n\r\n        axisG = this.select('.wk-chart-axis')\r\n        if axisG.empty()\r\n          axisG = this.append('g').attr('class', 'wk-chart-axis')\r\n\r\n        ticks = y.scale().ticks(y.ticks())\r\n        y.scale().range([radius,0]) # tricks the way axis are drawn. Not pretty, but works :-)\r\n        axis.scale(y.scale()).orient('right').tickValues(ticks).tickFormat(y.tickFormat())\r\n        axisG.call(axis).attr('transform', \"translate(#{centerX},#{centerY-radius})\")\r\n        y.scale().range([0,radius])\r\n\r\n        lines = this.selectAll('.wk-chart-axis-line').data(data,(d) -> x.value(d))\r\n        lines.enter()\r\n          .append('line').attr('class', 'wk-chart-axis-line')\r\n          .style('stroke', 'darkgrey')\r\n\r\n        lines\r\n          .attr({x1:0, y1:0, x2:0, y2:radius})\r\n          .attr('transform',(d,i) -> \"translate(#{centerX}, #{centerY})rotate(#{degr * i + 180})\")\r\n\r\n        lines.exit().remove()\r\n\r\n        #draw tick lines\r\n        tickLine = d3.svg.line().x((d) -> d.x).y((d)->d.y)\r\n        tickPath = this.selectAll('.wk-chart-tickPath').data(ticks)\r\n        tickPath.enter().append('path').attr('class', 'wk-chart-tickPath')\r\n          .style('fill', 'none').style('stroke', 'lightgrey')\r\n\r\n        tickPath\r\n          .attr('d',(d) ->\r\n            p = data.map((a, i) -> {x:Math.sin(arc*i + Math.PI) * y.scale()(d),y:Math.cos(arc*i + Math.PI) * y.scale()(d)})\r\n            tickLine(p) + 'Z')\r\n          .attr('transform', \"translate(#{centerX}, #{centerY})\")\r\n\r\n        tickPath.exit().remove()\r\n\r\n        axisLabels = this.selectAll('.wk-chart-axis-text').data(data,(d) -> x.value(d))\r\n        axisLabels.enter().append('text')\r\n          .attr('class', 'wk-chart-axis-text')\r\n          .style('fill', 'black')\r\n          .attr('dy', '0.8em')\r\n          .attr('text-anchor', 'middle')\r\n        axisLabels\r\n          .attr({\r\n              x: (d, i) -> centerX + Math.sin(arc * i + Math.PI) * (radius + textOffs)\r\n              y: (d, i) -> centerY + Math.cos(arc * i + Math.PI) * (radius + textOffs)\r\n            })\r\n          .text((d) -> x.value(d))\r\n        axisLabels.exit().remove()\r\n\r\n        # draw data lines\r\n\r\n        dataPath = d3.svg.line().x((d) -> d.x).y((d) -> d.y)\r\n\r\n        dataLine = this.selectAll('.wk-chart-data-line').data(y.layerKeys(data))\r\n        dataLine.enter().append('path').attr('class', 'wk-chart-data-line')\r\n          #.style({\r\n          #  stroke:(d) -> color.scale()(d)\r\n          #  fill:(d) -> 'none' #color.scale()(d)\r\n          #  #'fill-opacity': 0.2\r\n          #  'stroke-width': 2\r\n          #})\r\n          .call(_tooltip.tooltip)\r\n        dataLine.attr('d', (d) ->\r\n            p = data.map((a, i) -> {x:Math.sin(arc*i + Math.PI) * y.scale()(a[d]),y:Math.cos(arc*i + Math.PI) * y.scale()(a[d])})\r\n            dataPath(p) + 'Z'\r\n          )\r\n          .each(setStyle)\r\n          .attr('transform', \"translate(#{centerX}, #{centerY})\")\r\n\r\n\r\n      #--- Configuration and registration --------------------------------------------------------------------------------\r\n\r\n      layout.lifeCycle().on 'configure', ->\r\n        _scaleList = @getScales(['x', 'y', 'color'])\r\n        _scaleList.y.domainCalc('max')\r\n        _scaleList.x.resetOnNewData(true).scaleType('ordinal')\r\n        #@layerScale('color')\r\n        _tooltip = layout.behavior().tooltip\r\n        _tooltip.on \"enter.#{_id}\", ttEnter\r\n\r\n      layout.lifeCycle().on \"drawChart.#{_id}\", draw\r\n\r\n      layout.lifeCycle().on \"destroy.#{_id}\", ->\r\n        layout.lifeCycle().on \".#{_id}\", null\r\n        _tooltip.on \".#{_id}\", null\r\n\r\n  }\r\n\r\n#TODO verify behavior with custom tooltips\r\n#TODO fix 'tooltip attribute list too long' problem\r\n#TODO add enter / exit animation behavior\r\n#TODO Implement data labels\r\n#TODO implement and test object selection","###*\r\n  @ngdoc provider\r\n  @module wk.chart\r\n  @name wkChartLocaleProvider\r\n  @description\r\n  registers a den locale\r\n\r\n###\r\nangular.module('wk.chart').provider 'wkChartLocale', () ->\r\n\r\n  locale = 'en_US'\r\n\r\n  locales = {\r\n\r\n    de_DE:d3.locale({\r\n      decimal: \",\",\r\n      thousands: \".\",\r\n      grouping: [3],\r\n      currency: [\"\", \" €\"],\r\n      dateTime: \"%A, der %e. %B %Y, %X\",\r\n      date: \"%e.%m.%Y\",\r\n      time: \"%H:%M:%S\",\r\n      periods: [\"AM\", \"PM\"], # unused\r\n      days: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\r\n      shortDays: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\r\n      months: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\",\r\n               \"November\", \"Dezember\"],\r\n      shortMonths: [\"Jan\", \"Feb\", \"Mrz\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\"]\r\n    }),\r\n\r\n    'en_US': d3.locale({\r\n      \"decimal\": \".\",\r\n      \"thousands\": \",\",\r\n      \"grouping\": [3],\r\n      \"currency\": [\"$\", \"\"],\r\n      \"dateTime\": \"%a %b %e %X %Y\",\r\n      \"date\": \"%m/%d/%Y\",\r\n      \"time\": \"%H:%M:%S\",\r\n      \"periods\": [\"AM\", \"PM\"],\r\n      \"days\": [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n      \"shortDays\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n      \"months\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\r\n                 \"November\", \"December\"],\r\n      \"shortMonths\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n    })\r\n  }\r\n\r\n  ###*\r\n    @ngdoc method\r\n    @name wkChartLocaleProvider#setLocale\r\n    @param name {string} name of the locale. If locale is unknown it reports an error and sets locale to en_US\r\n  ###\r\n  this.setLocale = (l) ->\r\n    if _.has(locales, l)\r\n      locale = l\r\n    else\r\n      throw \"unknowm locale '#{l}' using 'en-US' instead\"\r\n\r\n  ###*\r\n    @ngdoc method\r\n    @name wkChartLocaleProvider#addLocaleDefinition\r\n    @param name {string} name of the locale.\r\n    @param localeDefinition {object} A d3.js locale definition object. See [d3 documentation](https://github.com/mbostock/d3/wiki/Localization#d3_locale) for details of the format.\r\n  ###\r\n  this.addLocaleDefinition = (name, l) ->\r\n    locales[name] = d3.locale(l)\r\n      #$log.warn 'locale ' + name + ' already defined. Using new definition'\r\n\r\n  ###*\r\n    @ngdoc service\r\n    @module wk.chart\r\n    @name wkChartLocale\r\n    @description\r\n    @returns d3.ls locale definition\r\n  ###\r\n  this.$get = ['$log',($log) ->\r\n    return locales[locale]\r\n  ]\r\n\r\n  return this","angular.module('wk.chart').provider 'wkChartScales', () ->\r\n\r\n  _customColors = ['red', 'orange', 'yellow', 'green', 'blue']\r\n  _customMapFn = undefined\r\n\r\n  ordinalIdentity = () ->\r\n    d3Scale = d3.scale.ordinal()\r\n\r\n    me = (value) ->\r\n      if arguments.length is 0 then return me\r\n      return value\r\n\r\n    me.invert = (val) ->\r\n      return val\r\n\r\n    me.domain = d3.scale.domain\r\n    me.range = d3.scale.domain\r\n\r\n    return me\r\n\r\n  hashed = () ->\r\n    d3Scale = d3.scale.ordinal()\r\n\r\n    _hashFn = (value) ->\r\n      hash = 0;\r\n      m = d3Scale.range().length - 1\r\n      for i in [0 .. value.length]\r\n        hash = (31 * hash + value.charAt(i)) % m;\r\n\r\n    me = (value) ->\r\n      if not arguments then return me\r\n      d3Scale(_hashFn(value))\r\n\r\n    me.range = (range) ->\r\n      if not arguments then return d3Scale.range()\r\n      d3Scale.domain(d3.range(range.length))\r\n      d3Scale.range(range)\r\n\r\n    me.domain = d3Scale.domain\r\n    me.rangePoint = d3Scale.rangePoints\r\n    me.rangeBands = d3Scale.rangeBands\r\n    me.rangeRoundBands = d3Scale.rangeRoundBands\r\n    me.rangeBand = d3Scale.rangeBand\r\n    me.rangeExtent = d3Scale.rangeExtent\r\n\r\n    me.hash = (fn) ->\r\n      if not arguments then return _hashFn\r\n      _hashFn = fn\r\n      return me\r\n\r\n    return me\r\n\r\n  customScale = () ->\r\n    d3Scale = d3.scale.ordinal()\r\n    mapFn = _customMapFn || d3Scale # use the d3 function unless a mapFn is configured\r\n\r\n    me = (value) ->\r\n      if not arguments then return me\r\n      # use the mapFn to compute the return value\r\n      return mapFn.apply(me, [value, me.domain()])\r\n\r\n    me.mapFn = (fn) ->\r\n      if not arguments then return mapFn\r\n      if _.isFunction(fn)\r\n        mapFn = fn\r\n      return me\r\n\r\n    me.domain = d3Scale.domain\r\n    me.range = d3Scale.range\r\n    me.rangePoint = d3Scale.rangePoints\r\n    me.rangeBands = d3Scale.rangeBands\r\n    me.rangeRoundBands = d3Scale.rangeRoundBands\r\n    me.rangeBand = d3Scale.rangeBand\r\n    me.rangeExtent = d3Scale.rangeExtent\r\n\r\n    return me\r\n\r\n\r\n  categoryColors = () -> return d3.scale.ordinal().range(_customColors)\r\n  category20Linear = () -> return d3.scale.ordinal().range(d3.scale.category20().range().map((c) -> \"url(#lgrad-#{c.replace('#','')})\"))\r\n  category20Radial = () -> return d3.scale.ordinal().range(d3.scale.category20().range().map((c) -> \"url(#rgrad-#{c.replace('#','')})\"))\r\n\r\n  categoryColorsHashed = () -> return hashed().range(_customColors)\r\n\r\n  this.colors = (colors) ->\r\n    _customColors = colors\r\n\r\n  this.customMapFn = (fn) ->\r\n    if _.isFunction(fn)\r\n      mapFn = fn\r\n\r\n  this.$get = ['$log',($log) ->\r\n    return {\r\n      hashed: hashed,\r\n      customCategory: categoryColors,\r\n      customCategoryHashed: categoryColorsHashed\r\n      customScale: customScale\r\n      category20Linear: category20Linear\r\n      category20Radial: category20Radial\r\n      ordinalIdentity: ordinalIdentity\r\n    }\r\n  ]\r\n\r\n  return this","###*\r\n  @ngdoc provider\r\n  @module wk.chart\r\n  @name wkChartTemplatesProvider\r\n  @description\r\n  used to register a custom tooltip or legend default template and overwrite the default system templates.\r\n\r\n###\r\nangular.module('wk.chart').provider 'wkChartTemplates', () ->\r\n\r\n  tooltipTemplateUrl = 'templates/toolTip.html'\r\n  legendTemplateUrl = 'templates/legend.html'\r\n  svgDefTemplateUrl = 'templates/patterns.html'\r\n  ###*\r\n    @ngdoc method\r\n    @name wkChartTemplatesProvider#setTooltipTemplate\r\n    @param url {string} the url of the template file\r\n  ###\r\n  this.setTooltipTemplate = (url)  ->\r\n    tooltipTemplateUrl = url\r\n\r\n  ###*\r\n      @ngdoc method\r\n      @name wkChartTemplatesProvider#setLegendTemplate\r\n      @param url {string} the url of the template file\r\n    ###\r\n  this.setLegendTemplate = (url) ->\r\n    legendTemplateUrl = url\r\n\r\n  ###*\r\n      @ngdoc method\r\n      @name wkChartTemplatesProvider#setSVGDefsUrl\r\n      @param url {string} the url of the template file\r\n    ###\r\n  this.setSVGDefsUrl = (url) ->\r\n    svgDefTemplateUrl = url\r\n\r\n  ###*\r\n    @ngdoc service\r\n    @module wk.chart\r\n    @name wkChartTemplates\r\n    @description\r\n    provides the default tooltip and legend template.\r\n  ###\r\n  this.$get = ['$log', '$templateCache',($log, $templateCache) ->\r\n    return {\r\n      ###*\r\n        @ngdoc method\r\n        @name wkChartTemplates#tooltipTemplate\r\n        @returns {string} the tooltips template\r\n      ###\r\n      tooltipTemplate: () -> $templateCache.get(tooltipTemplateUrl)\r\n\r\n      ###*\r\n        @ngdoc method\r\n        @name wkChartTemplates#legendTemplate\r\n        @returns {string} the legends template\r\n      ###\r\n      legendTemplate: () -> $templateCache.get(legendTemplateUrl)\r\n\r\n      ###*\r\n        @ngdoc method\r\n        @name wkChartTemplates#svgDefTemplate\r\n        @returns {string} the SVG Def template\r\n      ###\r\n      svgDefTemplate: () -> $templateCache.get(svgDefTemplateUrl)\r\n    }\r\n  ]\r\n\r\n  return this\r\n","angular.module('wk.chart').service 'selectionSharing', ($log) ->\r\n  _selection = {}\r\n  _selectionIdxRange = {}\r\n  callbacks = {}\r\n\r\n  this.createGroup = (group) ->\r\n\r\n\r\n  this.setSelection = (selection, selectionIdxRange, group) ->\r\n    if group\r\n      _selection[group] = selection\r\n      _selectionIdxRange[group] = selectionIdxRange\r\n      if callbacks[group]\r\n        for cb in callbacks[group]\r\n          cb(selection, selectionIdxRange)\r\n\r\n  this.getSelection = (group) ->\r\n    grp = group or 'default'\r\n    return selection[grp]\r\n\r\n  this.register = (group, callback) ->\r\n    if group\r\n      if not callbacks[group]\r\n        callbacks[group] = []\r\n      #ensure that callbacks are not registered more than once\r\n      if not _.contains(callbacks[group], callback)\r\n        callbacks[group].push(callback)\r\n\r\n  this.unregister = (group, callback) ->\r\n    if callbacks[group]\r\n      idx = callbacks[group].indexOf callback\r\n      if idx >= 0\r\n        callbacks[group].splice(idx, 1)\r\n\r\n  return this\r\n\r\n","angular.module('wk.chart').service 'timing', ($log) ->\r\n\r\n  timers = {}\r\n  elapsedStart = 0\r\n  elapsed = 0\r\n\r\n  this.init = () ->\r\n    elapsedStart = Date.now()\r\n\r\n  this.start = (topic) ->\r\n    top = timers[topic]\r\n    if not top\r\n      top = timers[topic] = {name:topic, start:0, total:0, callCnt:0, active: false}\r\n    top.start = Date.now()\r\n    top.active = true\r\n\r\n  this.stop = (topic) ->\r\n    if top = timers[topic]\r\n      top.active = false\r\n      top.total += Date.now() - top.start\r\n      top.callCnt += 1\r\n    elapsed = Date.now() - elapsedStart\r\n\r\n  this.report = () ->\r\n    for topic, val of timers\r\n      val.avg = val.total / val.callCnt\r\n    $log.info timers\r\n    $log.info 'Elapsed Time (ms)', elapsed\r\n    return timers\r\n\r\n  this.clear = () ->\r\n    timers = {}\r\n\r\n  return this","angular.module('wk.chart').factory 'dataLabelFactory', ($log, wkChartMargins) ->\r\n\r\n  labelCnt = 0\r\n\r\n  dataLabels = () ->\r\n\r\n    _labelSelection = undefined\r\n    _active = false\r\n    _keyScale = undefined\r\n    _valueScale = undefined\r\n    _keyAxis = undefined\r\n    _valueAxis = undefined\r\n    _anchor = undefined\r\n    _margin = undefined\r\n    _duration = undefined\r\n    _style = {'font-size':'1.3em'}\r\n\r\n    me = (s, doAnimate, style) ->\r\n      _labelSelection = s\r\n      #if _active\r\n      #text = s.select('.wk-chart-data-label')#.data((d) -> d)\r\n      barSize = _keyScale.scale().rangeBand()\r\n\r\n      text = s.select('text')\r\n      if text.empty()\r\n        text = s.append('text').attr('class', 'wk-chart-data-label')\r\n        .attr(_anchor)\r\n        .style('opacity', 0)\r\n        .attr(_keyAxis, (d) -> if d.added or d.deleted then 0 else barSize / 2)\r\n        .attr(_valueAxis, (d) -> _margin + if _valueAxis is 'x' then Math.abs(_valueScale.scale()(0) - _valueScale.scale()(d.targetValue)) else Math.min(_valueScale.scale()(0), _valueScale.scale()(d.targetValue)))\r\n\r\n      text\r\n        .text((d) -> _valueScale.formatValue(d.targetValue))\r\n        .style(style)\r\n      (if doAnimate then text.transition().duration(_duration) else text)\r\n        .attr(_keyAxis, (d) -> if d.added or d.deleted then 0 else barSize / 2)\r\n        .attr(_valueAxis, (d) -> _margin + if _valueAxis is 'x' then Math.abs(_valueScale.scale()(0) - _valueScale.scale()(d.targetValue)) else Math.min(_valueScale.scale()(0), _valueScale.scale()(d.targetValue)))\r\n        .style('opacity', (d) -> if d.added or d.deleted or not _active then 0 else 1)\r\n\r\n    me.brush = (s) ->\r\n      s.select('text').attr(_keyAxis,_keyScale.scale().rangeBand() / 2)\r\n\r\n    me.active = (val) ->\r\n      if arguments.length is 0 then return _active\r\n      _active = val\r\n      return me\r\n\r\n    me.keyScale = (val) ->\r\n      if arguments.length is 0 then return _keyScale\r\n      _keyScale = val\r\n      if _keyScale.isHorizontal()\r\n        _keyAxis = 'x'\r\n        _valueAxis = 'y'\r\n        _anchor = {'text-anchor':'middle'}\r\n        _margin = -wkChartMargins.dataLabelPadding.vert\r\n      else\r\n        _keyAxis = 'y'\r\n        _valueAxis = 'x'\r\n        _anchor = {'text-anchor':'start', 'dy':'0.35em'}\r\n        _margin = wkChartMargins.dataLabelPadding.hor\r\n      return me\r\n\r\n    me.valueScale = (val) ->\r\n      if arguments.length is 0 then return _valueScale\r\n      _valueScale = val\r\n      return me\r\n\r\n    me.duration = (val) ->\r\n      if arguments.length is 0 then return _duration\r\n      _duration = val\r\n      return me\r\n\r\n    me.style = (val) ->\r\n      if arguments.length is 0 then return _style\r\n      _style = val\r\n      return me\r\n\r\n    return me","angular.module('wk.chart').factory 'layeredData', ($log) ->\r\n\r\n  layered = () ->\r\n    _data = []\r\n    _layerKeys = []\r\n    _x = undefined\r\n    _calcTotal = false\r\n    _min = Infinity\r\n    _max = -Infinity\r\n    _tMin = Infinity\r\n    _tMax = -Infinity\r\n\r\n    me = () ->\r\n\r\n    me.data = (dat) ->\r\n      if arguments.length Is 0\r\n        return _data\r\n      else\r\n        _data = dat\r\n        return me\r\n\r\n    me.layerKeys = (keys) ->\r\n      if arguments.length is 0\r\n        return _layerKeys\r\n      else\r\n        _layerKeys = keys\r\n        return me\r\n\r\n    me.x = (name) ->\r\n      if arguments.length is 0\r\n        return _x\r\n      else\r\n        _x = name\r\n        return me\r\n\r\n    me.calcTotal = (t_f) ->\r\n      if arguments.length is 0\r\n        return _calcTotal\r\n      else\r\n        _calcTotal = t_f\r\n        return me\r\n\r\n    me.min = () ->\r\n      _min\r\n\r\n    me.max = () ->\r\n      _max\r\n\r\n    me.minTotal = () ->\r\n      _tMin\r\n\r\n    me.maxTotal = () ->\r\n      _tMax\r\n\r\n    me.extent = () ->\r\n      [me.min(), me.max()]\r\n\r\n    me.totalExtent = () ->\r\n      [me.minTotal(), me.maxTotal()]\r\n\r\n    me.columns = (data) ->\r\n      if arguments.length is 1\r\n        #_layerKeys.map((k) -> {key:k, values:data.map((d) -> {x: d[_x], value: d[k], data: d} )})\r\n        res = []\r\n        _min = Infinity\r\n        _max = -Infinity\r\n        _tMin = Infinity\r\n        _tMax = -Infinity\r\n\r\n        for k, i in _layerKeys\r\n          res[i] = {key:k, value:[], min:Infinity, max:-Infinity}\r\n        for d, i in data\r\n          t = 0\r\n          xv = if typeof _x is 'string' then d[_x] else _x(d)\r\n\r\n          for l in res\r\n            v = +d[l.key]\r\n            l.value.push {x:xv, value: v, key:l.key}\r\n            if l.max < v then l.max = v\r\n            if l.min > v then l.min = v\r\n            if _max < v then _max = v\r\n            if _min > v then _min = v\r\n            if _calcTotal then t += +v\r\n          if _calcTotal\r\n            #total.value.push {x:d[_x], value:t, key:total.key}\r\n            if _tMax < t then _tMax = t\r\n            if _tMin > t then _tMin = t\r\n        return {min:_min, max:_max, totalMin:_tMin,totalMax:_tMax, data:res}\r\n      return me\r\n\r\n\r\n\r\n    me.rows = (data) ->\r\n      if arguments.length is 1\r\n        return data.map((d) -> {x: d[_x], layers: layerKeys.map((k) -> {key:k, value: d[k], x:d[_x]})})\r\n      return me\r\n\r\n\r\n    return me","angular.module('wk.chart').factory 'markerFactory', ($log, d3Animation) ->\r\n\r\n  markersCnt = 0\r\n\r\n  markers = () ->\r\n\r\n    _x = undefined\r\n    _y = undefined\r\n    _color = undefined\r\n    _active = false\r\n    _opacity = 0\r\n    _initialOpacity = 0\r\n    _duration = d3Animation.duration;\r\n    _isVertical = false\r\n    _keyScale = undefined\r\n    _markerSelection = undefined\r\n    _id = markersCnt++\r\n\r\n    me = (s, doAnimate) ->\r\n      _markerSelection = s\r\n      if _active\r\n        m = s.selectAll(\".wk-chart-marker-#{_id}\").data(\r\n          (d) -> d.values\r\n        , (d, i) -> i\r\n        )\r\n\r\n        m.enter().append('circle').attr('class', \"wk-chart-marker-#{_id}\")\r\n          .style('fill', _color)\r\n          .attr('r', 5)\r\n          .style('pointer-events', 'none')\r\n          .style('opacity', _initialOpacity)\r\n        mUpdate = if doAnimate then m.transition().duration(_duration) else m\r\n        mUpdate\r\n          .attr('cx', _x)\r\n          .attr('cy', _y)\r\n          .style('opacity', (d) -> (if d.added or d.deleted or d.layerAdded or d.layerDeleted then 0 else 1) * _opacity)\r\n        mExit = if doAnimate then m.exit().transition().duration(_duration) else m.exit()\r\n        mExit\r\n          .remove()\r\n      else\r\n        s.selectAll(\".wk-chart-marker-#{_id}\").transition().duration(_duration)\r\n          .style('opacity', 0).remove()\r\n\r\n    me.brush = (selection, idxRange) ->\r\n      if _active\r\n        if _isVertical\r\n          c = 'cy'\r\n          v = _y\r\n        else\r\n          c = 'cx'\r\n          v = _x\r\n        if idxRange\r\n          _markerSelection.selectAll(\".wk-chart-marker-#{_id}\").attr(c,v).style('opacity', (d,i) -> if idxRange[0] <= i and i <= idxRange[1] then 1 else 0)\r\n        else\r\n          domain = _keyScale.domain()\r\n          _markerSelection.selectAll(\".wk-chart-marker-#{_id}\").attr(c, v).style('opacity', (d) -> if domain[0] <= d.key and d.key <= domain[1] then 1 else 0)\r\n\r\n\r\n    me.active = (trueFalse) ->\r\n      if arguments.length is 0 then return _active\r\n      _initialOpacity = if not _active and trueFalse then 0 else 1\r\n      _active = trueFalse\r\n      _opacity = if _active then 1 else 0\r\n      return me\r\n\r\n    me.x = (val) ->\r\n      if arguments.length is 0 then return _x\r\n      _x = val\r\n      return me\r\n\r\n    me.y = (val) ->\r\n      if arguments.length is 0 then return _y\r\n      _y = val\r\n      return me\r\n\r\n    me.color = (val) ->\r\n      if arguments.length is 0 then return _color\r\n      _color = val\r\n      return me\r\n\r\n    me.opacity = (val) ->\r\n      if arguments.length is 0 then return _opacity\r\n      _opacity = val\r\n      return me\r\n\r\n    me.duration = (val) ->\r\n      if arguments.length is 0 then return _duration\r\n      _duration = val\r\n      return me\r\n\r\n    me.isVertical = (val) ->\r\n      if arguments.length is 0 then return _isVertical\r\n      _isVertical = val\r\n      return me\r\n\r\n    me.keyScale = (val) ->\r\n      if arguments.length is 0 then return _keyScale\r\n      _keyScale = val\r\n      return me\r\n\r\n    return me","angular.module('wk.chart').directive 'svgIcon', ($log) ->\r\n  ## insert svg path into interpolated HTML. Required prevent Angular from throwing error (Fix 22)\r\n  return {\r\n    restrict: 'E'\r\n    template: '<svg ng-style=\"style\"><path></path></svg>'\r\n    scope:\r\n      path: \"@\"\r\n      width: \"@\"\r\n    link: (scope, elem, attrs ) ->\r\n      scope.style = {  # fix IE problem with interpolating style values\r\n        height: '20px'\r\n        width: scope.width + 'px'\r\n        'vertical-align': 'middle'\r\n      }\r\n      attrs.$observe 'path', (val) ->\r\n        if val\r\n          d3.select(elem[0]).select('path').attr('d', val).attr('transform', \"translate(8,8)\")\r\n\r\n      scope.$on '$destroy', () ->\r\n        $log.log 'svgIcon scope destroyed'\r\n  }","angular.module('wk.chart').factory 'tooltipHelperFactory', ($log) ->\r\n\r\n  helperCnt = 0\r\n\r\n  ttHelpers = () ->\r\n    _keyScale = undefined\r\n    _valueScale = undefined\r\n    _isStacked = false\r\n    _colorScale = undefined\r\n    _colorByKey = false\r\n    _layout = undefined\r\n    _value = undefined\r\n    _indexer = undefined\r\n    _brushRange = []\r\n    _circles = undefined\r\n    _id = helperCnt++\r\n\r\n    me = {}\r\n\r\n    me.keyScale = (val) ->\r\n      if arguments.length is 0 then return _keyScale\r\n      _keyScale = val\r\n      return me\r\n\r\n    me.valueScale = (val) ->\r\n      if arguments.length is 0 then return _valueScale\r\n      _valueScale = val\r\n      _isRangeScale = _valueScale.kind() is 'rangeX' or _valueScale.kind() is 'rangeY'\r\n      return me\r\n\r\n    me.isStacked = (val) ->\r\n      if arguments.length is 0 then return _isStacked\r\n      _isStacked = val\r\n      return me\r\n\r\n    me.colorScale = (val) ->\r\n      if arguments.length is 0 then return _colorScale\r\n      _colorScale = val\r\n      return me\r\n\r\n    me.colorByKey = (val) ->\r\n      if arguments.length is 0 then return _colorByKey\r\n      _colorByKey = val\r\n      return me\r\n\r\n    me.layout = (val) ->\r\n      if arguments.length is 0 then return _layout\r\n      _layout = val\r\n      _indexer = []\r\n      _brushRange = [0, _layout[0].values.length - 1]\r\n      for d, i in _layout[0].values\r\n        if not d.deleted\r\n          _indexer.push(i)\r\n      return me\r\n\r\n    me.brushRange = (val) ->\r\n      if arguments.length is 0 then return _brushRange\r\n      _brushRange = val\r\n\r\n    me.value = (val) ->\r\n      if arguments.length is 0 then return _value\r\n      _value = val\r\n      return me\r\n\r\n    me.enter = (data) ->\r\n      @headerName = _keyScale.axisLabel()\r\n      @headerValue  = _keyScale.formattedValue(data)\r\n      layerKeys =  if _valueScale.parentScale() then _valueScale.parentScale().layerKeys(data) else _valueScale.layerKeys(data)\r\n      for key in layerKeys\r\n        @layers[key] = {}\r\n        @layers[key].value = _valueScale.formattedLayerValue(data,key)\r\n        cVal = ''\r\n        if _colorScale.property().length > 0\r\n          cVal =  _colorScale.map(data)\r\n        else if _colorByKey\r\n          cVal = _colorScale.scale()(_keyScale.value(data))\r\n        else\r\n          cVal = _colorScale.scale()(key)\r\n        if typeof cVal is 'string'\r\n          style =  {fill:cVal, stroke:cVal}\r\n        else\r\n          style = cVal\r\n          style.fill = cVal.color\r\n        @layers[key].color = style\r\n\r\n    me.moveData = (key, data) ->\r\n      me.enter.apply(this, [data])\r\n\r\n    me.moveMarkers = (key, data) ->\r\n      if not key or not data\r\n        return # required as consequence of range padding. Avoid exceptions for events w. mouse positioned in padding area.\r\n      markerKey = _keyScale.value(data) # use the data objects key instead of the inversion result to ensure marker snaps to data.\r\n      layerKeys = _valueScale.layerKeys(data)\r\n      cData = layerKeys.map((key) -> {key: key, value: _valueScale.layerValue(data, key)})\r\n      if _isStacked\r\n        #total up the values to position the markers correctly\r\n        sum = 0\r\n        for l in cData\r\n          sum = sum + l.value\r\n          l.value = sum\r\n\r\n      _circles = this.selectAll(\".wk-chart-tt-marker-#{_id}\").data(cData, (d) -> d.key)\r\n      enter = _circles.enter().append('g').attr('class', \"wk-chart-tt-marker-#{_id}\") # make markers unique for multi-layout charts\r\n      enter.append('circle').attr('class', 'wk-chart-tt-marker')\r\n        .attr('r', 9)\r\n        .style('fill', (d)->\r\n          style = _colorScale.scale()(d.key)\r\n          return if typeof style is 'string' then style else style.color\r\n        )\r\n        .style('fill-opacity', 0.3)\r\n        .style('stroke', (d)-> _colorScale.scale()(d.key))\r\n        .style('pointer-events', 'none')\r\n      enter.append('circle').attr('class', 'wk-chart-tt-inner-marker')\r\n        .attr('r', 4)\r\n        .style('fill', (d)->\r\n          style = _colorScale.scale()(d.key)\r\n          return if typeof style is 'string' then style else style.color\r\n        )\r\n        .style('fill-opacity', 0.6)\r\n        .style('stroke', 'white')\r\n        .style('pointer-events', 'none')\r\n      c = if _keyScale.isHorizontal() then 'cy' else 'cx'\r\n      _circles.select('.wk-chart-tt-marker')\r\n        .attr(c, (d) -> _valueScale.scale()(d.value))\r\n      _circles.select('.wk-chart-tt-inner-marker')\r\n      .attr(c, (d) -> _valueScale.scale()(d.value))\r\n      _circles.exit()\r\n        .remove()\r\n      offset = if _keyScale.isOrdinal() then _keyScale.scale().rangeBand() / 2 else 0\r\n      if _keyScale.isHorizontal()\r\n        if isNaN(_keyScale.scale()(markerKey) + offset)\r\n          debugger\r\n        this.attr('transform', \"translate(#{_keyScale.scale()(markerKey) + offset})\") # need to compute from scale because of brushing\r\n      else\r\n        this.attr('transform', \"translate(0,#{_keyScale.scale()(markerKey) + offset})\")  # need to compute from scale because of brushing + offset\r\n    return me\r\n\r\n  return ttHelpers\r\n\r\n\r\n\r\n","angular.module('wk.chart').service 'utils', ($log) ->\r\n\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  @diff = (a,b,direction) ->\r\n    notInB = (v) ->\r\n      b.indexOf(v) < 0\r\n\r\n    res = {}\r\n    i = 0\r\n    while i < a.length\r\n      if notInB(a[i])\r\n        res[a[i]] = undefined\r\n        j = i + direction\r\n        while 0 <= j < a.length\r\n          if notInB(a[j])\r\n            j += direction\r\n          else\r\n            res[a[i]] =  a[j]\r\n            break\r\n      i++\r\n    return res\r\n\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  id = 0\r\n  @getId = () ->\r\n    return 'Chart' + id++\r\n\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  @parseList = (val) ->\r\n    if val\r\n      l = val.trim().replace(/^\\[|\\]$/g, '').split(',').map((d) -> d.replace(/^[\\\"|']|[\\\"|']$/g, ''))\r\n      return if l.length is 1 then return l[0] else l\r\n    return undefined\r\n\r\n  @parseTrueFalse = (val) ->\r\n    if val is '' or val is 'true' then true else (if val is 'false' then false else undefined)\r\n\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  @mergeData = () ->\r\n\r\n    _prevData = []\r\n    _data = []\r\n    _prevHash = {}\r\n    _hash = {}\r\n    _prevCommon = []\r\n    _common = []\r\n    _first = undefined\r\n    _last = undefined\r\n\r\n    _key = (d) -> d # identity\r\n    _layerKey = (d) -> d\r\n\r\n\r\n    me = (data) ->\r\n      # save _data to _previousData and update _previousHash;\r\n      _prevData = []\r\n      _prevHash = {}\r\n      for d,i  in _data\r\n        _prevData[i] = d;\r\n        _prevHash[_key(d)] = i\r\n\r\n      #iterate over data and determine the common elements\r\n      _prevCommon = [];\r\n      _common = [];\r\n      _hash = {};\r\n      _data = data;\r\n\r\n      for d,j in _data\r\n        key = _key(d)\r\n        _hash[key] = j\r\n        if _prevHash.hasOwnProperty(key)\r\n          #element is in both arrays\r\n          _prevCommon[_prevHash[key]] = true\r\n          _common[j] = true\r\n      return me;\r\n\r\n    me.key = (fn) ->\r\n      if not arguments then return _key\r\n      _key = fn;\r\n      return me;\r\n\r\n    me.first = (first) ->\r\n      if not arguments then return _first\r\n      _first = first\r\n      return me\r\n\r\n    me.last = (last) ->\r\n      if not arguments then return _last\r\n      _last = last\r\n      return me\r\n\r\n    me.added = () ->\r\n      ret = [];\r\n      for d, i in _data\r\n        if !_common[i] then ret.push(_d)\r\n      return ret\r\n\r\n    me.deleted = () ->\r\n      ret = [];\r\n      for p, i in _prevData\r\n        if !_prevCommon[i] then ret.push(_prevData[i])\r\n      return ret\r\n\r\n    me.current = (key) ->\r\n      return _data[_hash[key]]\r\n\r\n    me.prev = (key) ->\r\n      return _prevData[_prevHash[key]]\r\n\r\n    me.addedPred = (added) ->\r\n      predIdx = _hash[_key(added)]\r\n      while !_common[predIdx]\r\n        if predIdx-- < 0 then return _first\r\n      return _prevData[_prevHash[_key(_data[predIdx])]]\r\n\r\n    me.addedPred.left = (added) ->\r\n      me.addedPred(added).x\r\n\r\n    me.addedPred.right = (added) ->\r\n      obj = me.addedPred(added)\r\n      if _.has(obj, 'width') then obj.x + obj.width else obj.x\r\n\r\n    me.deletedSucc = (deleted) ->\r\n      succIdx = _prevHash[_key(deleted)]\r\n      while !_prevCommon[succIdx]\r\n        if succIdx++ >= _prevData.length then return _last\r\n      return _data[_hash[_key(_prevData[succIdx])]]\r\n\r\n    return me;\r\n\r\n  @mergeSeriesSorted =  (aOld, aNew)  ->\r\n    iOld = 0\r\n    iNew = 0\r\n    lOldMax = aOld.length - 1\r\n    lNewMax = aNew.length - 1\r\n    lMax = Math.max(lOldMax, lNewMax)\r\n    result = []\r\n\r\n    while iOld <= lOldMax and iNew <= lNewMax\r\n      if +aOld[iOld] is +aNew[iNew]\r\n        result.push([iOld, Math.min(iNew,lNewMax),aOld[iOld]]);\r\n        #console.log('same', aOld[iOld]);\r\n        iOld++;\r\n        iNew++;\r\n      else if +aOld[iOld] < +aNew[iNew]\r\n        # aOld[iOld is deleted\r\n        result.push([iOld,undefined, aOld[iOld]])\r\n        # console.log('deleted', aOld[iOld]);\r\n        iOld++\r\n      else\r\n        # aNew[iNew] is added\r\n        result.push([undefined, Math.min(iNew,lNewMax),aNew[iNew]])\r\n        # console.log('added', aNew[iNew]);\r\n        iNew++\r\n\r\n    while iOld <= lOldMax\r\n      # if there is more old items, mark them as deleted\r\n      result.push([iOld,undefined, aOld[iOld]]);\r\n      # console.log('deleted', aOld[iOld]);\r\n      iOld++;\r\n\r\n    while iNew <= lNewMax\r\n      # if there is more new items, mark them as added\r\n      result.push([undefined, Math.min(iNew,lNewMax),aNew[iNew]]);\r\n      # console.log('added', aNew[iNew]);\r\n      iNew++;\r\n\r\n    return result\r\n\r\n  @mergeSeriesUnsorted = (aOld,aNew) ->\r\n    iOld = 0\r\n    iNew = 0\r\n    lOldMax = aOld.length - 1\r\n    lNewMax = aNew.length - 1\r\n    lMax = Math.max(lOldMax, lNewMax)\r\n    result = []\r\n\r\n    while iOld <= lOldMax and iNew <= lNewMax\r\n      if aOld[iOld] is aNew[iNew]\r\n        result.push([iOld, Math.min(iNew,lNewMax),aOld[iOld]]);\r\n        #console.log('same', aOld[iOld]);\r\n        iOld++;\r\n        iNew++;\r\n      else if aNew.indexOf(aOld[iOld]) < 0\r\n        # aOld[iOld is deleted\r\n        result.push([iOld,undefined, aOld[iOld]])\r\n        # console.log('deleted', aOld[iOld]);\r\n        iOld++\r\n      else\r\n        # aNew[iNew] is added\r\n        result.push([undefined, Math.min(iNew,lNewMax),aNew[iNew]])\r\n        # console.log('added', aNew[iNew]);\r\n        iNew++\r\n\r\n    while iOld <= lOldMax\r\n      # if there is more old items, mark them as deleted\r\n      result.push([iOld,undefined, aOld[iOld]]);\r\n      # console.log('deleted', aOld[iOld]);\r\n      iOld++;\r\n\r\n    while iNew <= lNewMax\r\n      # if there is more new items, mark them as added\r\n      result.push([undefined, Math.min(iNew,lNewMax),aNew[iNew]]);\r\n      # console.log('added', aNew[iNew]);\r\n      iNew++;\r\n\r\n    return result\r\n\r\n  return @\r\n","angular.module('wk.chart').directive 'chartGenerator', ($log, chartFactory, modelTypes) ->\r\n\r\n  return {\r\n    restrict:'E'\r\n    scope:\r\n      markup:'='\r\n      properties:'='\r\n      error:'&'\r\n      warning:'&'\r\n    link: (scope, iElement, iAttrs) ->\r\n      if iAttrs.properties\r\n        scope.properties = chartFactory.create()\r\n\r\n      scope.$watch('properties', (values) ->\r\n        if chartFactory.verify()\r\n          if iAttrs.markup\r\n            scope.markup = chartFactory.generateMarkup(scope.properties)\r\n          if iAttrs.warning and chartFactory.hasWarnings\r\n            scope.warning({warnings:chartFactory.warnings})\r\n        else\r\n          if iAttrs.error\r\n            scope.error({errors:chartFactory.errors})\r\n      , true\r\n      )\r\n  }","angular.module('wk.chart').service 'modelUtils', ($log, $templateCache, modelTypes) ->\r\n\r\n  this.camelToDash = camelToDash = (str) ->\r\n    return str.replace(/\\W+/g, '-').replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\r\n\r\n\r\n  this.dashToCamel = (str) ->\r\n    return str.replace(/\\W+(.)/g, (x, chr) -> return chr.toUpperCase())\r\n\r\n\r\n  this.addProperty = (obj, store, name) ->\r\n    return Object.defineProperty(obj, name, {\r\n      get: () -> store[name].value\r\n      set: (val) -> store[name].value = val\r\n      enumerable:true\r\n    })\r\n\r\n  this.addGetter = (obj, store, name) ->\r\n    return Object.defineProperty(obj, name, {\r\n      get: () -> store[name]\r\n      enumerable:true\r\n    })\r\n\r\n\r\n  this.addProperties = (props, _data, me) ->\r\n    for name, dataType of props\r\n      if not _.has(me, name)\r\n        _data[name] = {}\r\n        this.addProperty(me, _data, name)\r\n        if _.isString(dataType)\r\n          _data[name].validator = modelTypes.getValidator(dataType)\r\n        else\r\n          if dataType.type is 'enum'\r\n            _data[name].enum = dataType.values\r\n            _data[name].validator = modelTypes.getValidator(dataType)\r\n\r\n    me.validate = (name, value) -> return _data[name].validator.apply(_data[name], [value])\r\n    me.acceptedValues = (name) -> return _data[name].enum\r\n\r\n  this.addDecorator = (deco, _data, me) ->\r\n    _data[deco.name] = {}\r\n    _data[deco.key] = {}\r\n    this.addProperty(me, _data, deco.key)\r\n    if _.has(deco, 'value')\r\n      this.addProperty(me, _data, deco.name)\r\n      if _.isString(deco.value)\r\n        _data[deco.name].validator = modelTypes.getValidator(deco.value)\r\n      else\r\n      if deco.value.type is 'enum'\r\n        _data[deco.name].enum = deco.value.values\r\n        _data[deco.name].validator = modelTypes.getValidator(deco.value)\r\n\r\n    this.addProperties(deco.properties, _data, me)\r\n\r\n  this.addDecorators = (decorators, _data, me) ->\r\n    if decorators\r\n      for deco in decorators\r\n        this.addDecorator(deco, _data, me)\r\n\r\n  this.generateProperties = (dProperties, iModel) ->\r\n    markup = ''\r\n    for name, type of dProperties\r\n      if iModel[name] isnt undefined and iModel[name] isnt null and iModel[name] isnt ''\r\n        if _.has(dProperties[name], 'generator')\r\n          markup += dProperties[name].generator(iModel[name])\r\n        else\r\n          if _.isObject(iModel[name])\r\n            markup += \" #{camelToDash(name)}=\\\"#{iModel[name].toString()}\\\"\"\r\n          else\r\n            markup += \" #{camelToDash(name)}=\\\"#{iModel[name]}\\\"\"\r\n    return markup\r\n\r\n  this.generateDecorators = (dDecorators, iModel) ->\r\n    markup = ''\r\n    if dDecorators\r\n      for deco in dDecorators\r\n        if iModel[deco.key]\r\n          if _.has(deco, 'generator')\r\n            markup += deco.generator(iModel[deco.name])\r\n          else\r\n            if iModel[deco.name]\r\n              markup += \" #{camelToDash(deco.name)}=\\\"#{iModel[deco.name]}\\\"\"\r\n            else\r\n              markup += ' ' + camelToDash(deco.name)\r\n          markup += this.generateProperties(deco.properties, iModel)\r\n      return markup\r\n    return ''\r\n\r\n  return this\r\n","angular.module('wk.chart').service 'chartFactory', ($log, modelTypes, dimensionFactory, layoutFactory, modelUtils) ->\r\n\r\n  CreateObj = (model) ->\r\n    ((model) ->\r\n      _data = {}\r\n      _data.dimensions = {}\r\n      _data.layouts = {}\r\n      _data.properties = []\r\n      me = {}\r\n\r\n      modelUtils.addProperties(model.properties, _data, me)\r\n\r\n      modelUtils.addDecorators(model.decorators, _data, me)\r\n\r\n      modelUtils.addGetter(me, _data, 'dimensions')\r\n      modelUtils.addGetter(me, _data, 'layouts')\r\n      modelUtils.addGetter(me, _data, 'properties')\r\n\r\n      me.availableDimensions = () ->\r\n        return _.keys(modelTypes.dimension)\r\n      me.addDimension = (name) ->\r\n        _data.dimensions[name] = dimensionFactory.create(name)\r\n        return _data.dimensions[name]\r\n      me.removeDimension = (name) ->\r\n        delete _data.dimensions[name]\r\n        return undefined\r\n      me.availableLayouts = () ->\r\n        return _.keys(modelTypes.layouts)\r\n      me.addLayout = (name, layout) ->\r\n        l = layoutFactory.create(layout)\r\n        _data.layouts[name]  = l\r\n        _data.layouts[name].layoutName = name\r\n        return l\r\n      me.removeLayout = (name) ->\r\n        delete _data.layouts[name]\r\n        return undefined\r\n\r\n      me.addProperty = (property, dimName, layout) ->\r\n        layoutName = if _data.dimensions[dimName] then layout + '.' + dimName else layout\r\n        l = _data.layouts[layoutName]\r\n        if not l\r\n          l = me.addLayout(layoutName, layout)\r\n        layoutDim = l.dimensions[dimName]\r\n        if not layoutDim\r\n          layoutDim = l.addDimension(dimName)\r\n        prop = layoutDim.property\r\n        if prop\r\n          props = prop.split(',')\r\n          if props.indexOf(property.trim()) < 0\r\n            props.push(property.trim())\r\n            layoutDim.property = props.join(',')\r\n            _data.properties.push({property:property, dimName: dimName, dimension:layoutDim, layoutName:layout, layout:l})\r\n        else\r\n          layoutDim.property = property.trim()\r\n          _data.properties.push({property:property, dimName: dimName, dimension:layoutDim, layoutName:layout, layout:l})\r\n\r\n      me.removeProperty = (property, dimName, layoutName) ->\r\n        l = _data.layouts[layoutName]\r\n        layoutDim = l.dimensions[dimName]\r\n        prop = layoutDim.property\r\n        props = prop.split(',')\r\n        props.splice(props.indexOf(property), 1)\r\n        if props.length > 0\r\n          layoutDim.property = props.join(',')\r\n        else\r\n          layoutDim.property = ''\r\n          l.removeDimension(dimName)\r\n          if _.keys(l.dimensions).length is 0\r\n            me.removeLayout(layoutName)\r\n\r\n        toDelete = _data.properties.filter((p) -> p.property is property and p.dimName is dimName and p.layoutName = layoutName )\r\n        for del in toDelete\r\n          _data.properties.splice(_data.properties.indexOf(del),1)\r\n\r\n        return\r\n\r\n      me.getDescriptor = () -> return model\r\n      return me\r\n    )(model)\r\n\r\n  this.create = () ->\r\n    return CreateObj(modelTypes.chart)\r\n\r\n  this.verify = () ->\r\n    return true\r\n\r\n  this.generateMarkup = (iModel) ->\r\n    dModel = iModel.getDescriptor()\r\n    markup = \"<#{dModel.name}\"\r\n    markup += modelUtils.generateProperties(dModel.properties, iModel)\r\n    markup += modelUtils.generateDecorators(dModel.decorators, iModel)\r\n    markup += '>'\r\n\r\n    markup += dimensionFactory.generateMarkup(iModel.dimensions)\r\n    markup += layoutFactory.generateMarkup(iModel.layouts)\r\n\r\n    markup += \"\\n</#{dModel.name}>\"\r\n    return markup\r\n\r\n  this.hasErrors = false\r\n  this.errors = []\r\n\r\n  this.hasWarnings = false\r\n  this.warnings = []\r\n\r\n  return this\r\n\r\n\r\n\r\n\r\n","angular.module('wk.chart').service 'dimensionFactory', ($log, modelUtils, modelTypes) ->\r\n\r\n  CreateObj = (model) ->\r\n    ((model) ->\r\n      _data = {}\r\n      me = {}\r\n\r\n      modelUtils.addProperties(model.properties, _data, me)\r\n\r\n      modelUtils.addDecorators(model.decorators, _data, me)\r\n\r\n      me.getDescriptor = () -> return model\r\n\r\n      return me\r\n    )(model)\r\n\r\n\r\n  this.create = (type) ->\r\n    if _.has(modelTypes.dimension,type)\r\n      return CreateObj(modelTypes.dimension[type])\r\n\r\n  this.generateMarkup = (iDimensions) ->\r\n    markup = ''\r\n    for name, dim of iDimensions\r\n      dModel = dim.getDescriptor()\r\n      markup += \"\\n\\t\\t<#{dModel.name}\"\r\n      markup += modelUtils.generateProperties(dModel.properties, dim)\r\n      markup += modelUtils.generateDecorators(dModel.decorators, dim)\r\n      markup += ' />'\r\n    return markup\r\n\r\n  return this","angular.module('wk.chart').service 'layoutFactory', ($log, dimensionFactory, modelTypes, modelUtils) ->\r\n\r\n  CreateObj = (model) ->\r\n    ((model) ->\r\n      _data = {}\r\n      _data.dimensions = {}\r\n      _data.layout = model.name\r\n      me = {}\r\n\r\n      modelUtils.addProperties(model.properties, _data, me)\r\n\r\n      modelUtils.addDecorators(model.decorators, _data, me)\r\n\r\n      for name, dim of model.dimensions\r\n        _data.dimensions[name] = dimensionFactory.create(name)\r\n\r\n      modelUtils.addGetter(me, _data, 'dimensions')\r\n      modelUtils.addGetter(me, _data, 'layout')\r\n      me.addDimension = (name) ->\r\n        _data.dimensions[name] = dimensionFactory.create(name)\r\n        return _data.dimensions[name]\r\n      me.removeDimension = (name) ->\r\n        delete _data.dimensions[name]\r\n        return undefined\r\n\r\n      me.getDescriptor = () -> return model\r\n\r\n      return me\r\n    )(model)\r\n\r\n  this.create = (type) ->\r\n    if _.has(modelTypes.layouts, type)\r\n      return CreateObj(modelTypes.layouts[type])\r\n\r\n  ###\r\n  this.getTypes = () ->\r\n    return _.keys(layouts)\r\n\r\n  this.verifyType = (type) ->\r\n    return _.has(layouts, type)\r\n  ###\r\n  this.generateMarkup = (layoutModel) ->\r\n    markup = ''\r\n    for name, layout of layoutModel\r\n      dModel = layout.getDescriptor()\r\n      markup += \"\\n\\t<layout\"\r\n      if not layout[modelUtils.dashToCamel(dModel.name)]\r\n        markup += \" #{modelUtils.camelToDash(dModel.name)}\"\r\n\r\n      markup += modelUtils.generateProperties(dModel.properties, layout)\r\n      markup += modelUtils.generateDecorators(dModel.decorators, layout)\r\n      markup += '>'\r\n\r\n      markup += dimensionFactory.generateMarkup(layout.dimensions)\r\n      markup += \"\\n\\t</layout>\"\r\n    return markup\r\n\r\n\r\n\r\n\r\n\r\n  return this","'use strict'\r\n\r\nangular.module('wk.chart').service 'modelTypes', ($log, wkChartScales) ->\r\n  \r\n  #----Setup helpers ---------------------------------------------------------------------------------------------------\r\n\r\n  layout = (name, layerDimension, properties, decorators) ->\r\n    # generate the layout descriptor object\r\n\r\n    ret =  {\r\n      name: name\r\n      clazz: 'layout'\r\n      layerDimension: layerDimension\r\n      properties: assign(properties)\r\n      decorators: decorators\r\n    }\r\n    return ret\r\n\r\n  dim = (name, properties, decorators) ->\r\n    return {\r\n    clazz:'dimension'\r\n    name:name\r\n    properties : assign(properties)\r\n    decorators : decorators\r\n    }\r\n\r\n  getScaleTypes = () ->\r\n    return _.keys(d3.scale).concat('time').concat(_.keys(wkChartScales))\r\n\r\n  assign = (list) ->\r\n    return _.assign.apply(this, [{}].concat(list))\r\n\r\n  propertyType = {\r\n    string:'string'\r\n    number:'number'\r\n    bool:'boolean'\r\n    list:'list'\r\n    enum:(list) ->\r\n      return {\r\n        type:'enum'\r\n        values:list\r\n      }\r\n    object: 'scope variable'\r\n    event: 'scope event'\r\n    callback: 'callback'\r\n    objArray: 'scope variable'\r\n  }\r\n\r\n  this.getValidator = (type) ->\r\n    switch type\r\n      when propertyType.string then return _.isString\r\n      when propertyType.number then return _.isNumber\r\n      when propertyType.bool then return _.isBoolean\r\n      when propertyType.list then return (val) ->\r\n        /^\\[(.*)\\]$|^[^\\[](?=[^\\]\\[]*$)/.test(val) # string surrounded w. [] or not without any []\r\n      else\r\n        if _.isObject(type) and type.type is 'enum'\r\n          return (val) -> val in this.enum\r\n        else\r\n          return () -> true\r\n    \r\n  #--- property Definitions --------------------------------------------------------------------------------------------\r\n\r\n  markers = {markers:propertyType.bool}\r\n  donat = {donat:propertyType.bool}\r\n  padding = {padding:propertyType.number}\r\n  outerPadding = {outerPadding:propertyType.number}\r\n  areaStacked = {areaStacked:propertyType.enum(['zero', 'silhouette','expand','wiggle'])}\r\n  areaStackedVertical = {areaStackedVertical:propertyType.enum(['zero', 'silhouette','expand','wiggle'])}\r\n  geojson = {geojson:propertyType.object}\r\n  projection = {projection:propertyType.object}\r\n  spline = {spline:propertyType.bool}\r\n  mapFunction = {mapFunction:propertyType.string}\r\n\r\n  property = {\r\n    property:propertyType.list\r\n  }\r\n\r\n  tickRotation = {\r\n    rotateTickLabels:propertyType.number\r\n  }\r\n  range = {\r\n    lowerProperty:propertyType.string\r\n    upperProperty:propertyType.string\r\n  }\r\n  base = {\r\n    type:propertyType.enum(getScaleTypes())\r\n    dateFormat:propertyType.string\r\n    domain:propertyType.list\r\n    domainMin:propertyType.string\r\n    domainMax:propertyType.string\r\n    reset:propertyType.bool\r\n    range:propertyType.list\r\n    domainRange:propertyType.enum(['min', 'max', 'extent','total'])\r\n    label:propertyType.string\r\n    labelStyle:propertyType.object\r\n    exponent:propertyType.number\r\n    reverse:propertyType.bool\r\n  }\r\n  \r\n  #---- Decorators -----------------------------------------------------------------------------------------------------\r\n\r\n  right = {\r\n    name: 'right'\r\n    clazz: 'decorator'\r\n    key: 'right'\r\n  }\r\n\r\n  top = {\r\n    name: 'top'\r\n    clazz: 'decorator'\r\n    key: 'top'\r\n  }\r\n\r\n  tooltips = {\r\n    name: 'tooltips'\r\n    clazz:'decorator'\r\n    key:'tooltips'\r\n    properties: {\r\n      tooltipsTemplate:propertyType.string # templateUrl\r\n    }\r\n  }\r\n\r\n  axis = {\r\n    name:'axis'\r\n    clazz:'decorator'\r\n    key:'axis'\r\n    properties: {\r\n      grid: propertyType.bool\r\n      gridStyle: propertyType.object\r\n      format: propertyType.string\r\n      showLabel: propertyType.bool\r\n      ticks: propertyType.number\r\n      tickInterval: propertyType.number\r\n      tickFormat: propertyType.string\r\n      tickLabelStyle: propertyType.object\r\n      axisFormatter: propertyType.object\r\n    }\r\n  }\r\n\r\n  legend = {\r\n    name:'legend'\r\n    clazz:'decorator'\r\n    key:'legend$set'\r\n    value: propertyType.enum(['top-left','top-right','bottom-left','bottom-right'])\r\n    properties: {\r\n      templateUrl:propertyType.string\r\n      legendStyle: propertyType.object\r\n    }\r\n  }\r\n\r\n  valuesLegend = {\r\n    name:'valuesLegend'\r\n    clazz:'decorator'\r\n    key:'valuesLegend$set'\r\n    value: propertyType.enum(['top-left','top-right','bottom-left','bottom-right'])\r\n    properties: {\r\n      templateUrl:propertyType.string\r\n      legendStyle: propertyType.object\r\n    }\r\n  }\r\n\r\n  selection = {\r\n    name:'selection'\r\n    clazz:'decorator'\r\n    key:'selection'\r\n    properties: {\r\n      selectedDomain: propertyType.object\r\n      clearSelection: propertyType.callback\r\n      selectedDomainChange: propertyType.event\r\n    }\r\n  }\r\n\r\n  brush = {\r\n    name:'brush'\r\n    key:'brush$set'\r\n    clazz:'decorator'\r\n    value: propertyType.string\r\n    properties: {\r\n      selectedDomain: propertyType.object\r\n      selectedValues: propertyType.object\r\n      brushExtent: propertyType.object\r\n      selectedDomainChange: propertyType.event\r\n      brushStart: propertyType.event\r\n      brushEnd: propertyType.event\r\n      clearBrush: propertyType.callback\r\n    }\r\n  }\r\n\r\n  brushed = {\r\n    name:'brushed'\r\n    clazz:'decorator'\r\n    key:'brushed$set'\r\n    value:  propertyType.string\r\n  }\r\n\r\n  labels = {\r\n    name: 'labels',\r\n    clazz: 'decorator'\r\n    key: 'labels$set'\r\n    properties: {\r\n      labelStyle: propertyType.object\r\n    }\r\n  }\r\n  \r\n  #---------------------------------------------------------------------------------------------------------------------\r\n  #---- Chart ----------------------------------------------------------------------------------------------------------\r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  this.chart = {\r\n    name:'chart'\r\n    clazz:'chart'\r\n    properties: {\r\n      data: propertyType.objArray\r\n      header: propertyType.string\r\n      headerStyle: propertyType.object\r\n      subHeader: propertyType.string\r\n      subHeaderStyle:propertyType.object\r\n      deepWatch: propertyType.bool\r\n      filter: propertyType.string\r\n      edit: propertyType.bool\r\n      editSelected: propertyType.event\r\n      animationDuration: propertyType.number\r\n      backgroundStyle: propertyType.object\r\n    }\r\n    decorators: [tooltips]\r\n    dimensions: {} # shared dimension\r\n    layouts: []    # layouts\r\n  }\r\n  \r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  this.layouts = {\r\n    line:               layout('line','y', [markers, spline])\r\n    lineVertical:       layout('lineVertical','x', [markers, spline])\r\n    area:               layout('area', 'x', [markers, spline])\r\n    areaVertical:       layout('areaVertical', 'y', [markers, spline])\r\n    areaStacked:        layout('areaStacked', false, 'y', [areaStacked, markers, spline])\r\n    areaStackedVertical:layout('areaStackedVertical', false, 'x', [areaStackedVertical, markers, spline])\r\n    bars:               layout('bars', false, [padding, outerPadding],[labels, selection])\r\n    barStacked:         layout('barStacked', 'x', [padding, outerPadding],[selection])\r\n    barClustered:       layout('barClustered', 'x', [padding, outerPadding],[selection])\r\n    column:             layout('column', false, [padding, outerPadding],[labels, selection])\r\n    columnStacked:      layout('columnStacked', 'y', [padding, outerPadding],[selection])\r\n    columnClustered:    layout('columnClustered', 'y', [padding, outerPadding],[selection])\r\n    rangeArea:          layout('rangeArea', false,[],[selection])\r\n    rangeAreaVertical:  layout('rangeAreaVertical', false,[],[selection])\r\n    rangeBars:          layout('rangeBars', false,[],[labels,selection])\r\n    rangeColumn:        layout('rangeColumn', false,[],[labels,selection])\r\n    histogram:          layout('histogram', false,[],[labels,selection])\r\n    pie:                layout('pie', false,[donat],[labels,selection])\r\n    spider:             layout('spider', false,[],[selection])\r\n    bubble:             layout('bubble', false,[],[selection, brush])\r\n    scatter:            layout('scatter', false,[],[selection, brush])\r\n    geoMap:             layout('geo-map',false,[geojson,projection],[selection])\r\n  }\r\n   \r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  this.dimension = {\r\n    x: dim('x', [property, base, tickRotation], [axis, brush, brushed])\r\n    'x top': dim('x top', [property, base, tickRotation], [axis, brush, brushed])\r\n    y: dim('y', [property, base, tickRotation],[axis, brush, brushed])\r\n    'y right': dim('y right', [property, base, tickRotation],[axis, brush, brushed])\r\n    color: dim('color', [property, base, mapFunction],[legend, valuesLegend])\r\n    size: dim('size', [property, base],[legend, valuesLegend])\r\n    shape: dim('shape', [property, base],[legend, valuesLegend])\r\n  }\r\n  \r\n  #---------------------------------------------------------------------------------------------------------------------\r\n\r\n  return this"],"sourceRoot":"/source/"}